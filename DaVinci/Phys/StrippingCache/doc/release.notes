! -----------------------------------------------------------------------------
! Package     : StrippingCache
! Responsible : Vanya Belyaev
! Purpose     : Keep C++ functors for stripping
! Created     : 2015-02-04
! -----------------------------------------------------------------------------


! 2015-10-15 - Andrea Contu
 - Removing S21 and S23 due to changes in RelatedInfo

! 2015-09-24 - Ricardo Vazquez Gomez
 - Add the S21r1 cache

!========================= StrippingCache v1r2 2015-09-09 =========================

! 2015-09-10 - Andrea Contu
 - Edited CMakeList accordingly

! 2015-09-10 - Andrea Contu
 - Rename Stripping23c -> Stripping23r1

! 2015-09-09 - Andrea Contu
 - Added options for Stripping23c

! 2015-08-26 - Chris Jones
 - Update the CMake builds to make each cache independent, so does not skip
   factors alrady cached. Increases a bit the overall size of the cached functor
   libraries, but allows the MD5 name hack to be removed, and also allows the
   builds to proceed in parrallel.

!========================= StrippingCache v1r1 2015-08-24 =========================

! 2015-08-23 - Chris Jones
 - Clean up CMake file a bit.

! 2015-08-21 - Chris Jones
 - Replace the timestamp in the file names with a hash based on the build
   directory. Achieves the same end result, makes builds in different areas
   unique, but has the advance the repeated builds in the same user area
   use the same stamp...
 - Add the area containing the buiold component lists to the runtime
   LD_LIBRARY_PATH. Needed for so the generation of sources for each cache
   skip those already in an already built cache.

! 2015-08-20 - Chris Jones
 - Add support for building multiple caches for different strippings
  + Each cache is made to depend on each other, in order, such that they are 
    built sequentially. This is needed so the previous caches are then 
    available when the next is built, to avoid the same functors being cached 
    more than once.
  + A timestamp is appended to the name of each cache, taken from the time the
    build in initialised. This is needed ensure the same cache generated in 
    the nightlies to that in a private user area are considered as seperate 
    things and do not mask each other, which is required as the user cache 
    will not contain functors in the release cache.

!========================= StrippingCache v1r0 2015-08-18 =========================

! 2015-08-18 - Chris Jones
 - Disable for now build on x86_64-slc6-gcc48-do0 as it seems to have problems.

! 2015-08-17 - Stefano Perazzini
 - Configured the options for S23 in order to use StrippingArchive

! 2015-08-15 - Chris Jones
 - Add some more warning message exclusions.

! 2015-08-14 - Chris Jones
 - Turn off messages again for building in the nightlies.

! 2015-08-13 - Chris Jones
 - Update S23 options to not use DaVinci() configurable directly.

! 2015-08-12 - Chris Jones
 - Updates for S23.
  + Added options/DV-Stripping23-Stripping.py
  + Note that to get things working I have added the use of the DaVinci 
    configurable to the S23 options. This means this package must be built in
    DaVinci, not the stripping. This is temporary, to try and get things working
    for the S23 DV release. To be cleanup later on (once Marco is back).

! 2015-07-21 - Marco Clemencic
 - LHCBPS-1427: Suppress spurious warnings from S20/21 functors cache generation

! 2015-07-21 - Marco Clemencic
 - Clean up
   - removed unneeded files
   - removed CMT configuration

! 2015-07-20 - Marco Clemencic
 - Fixed compilation of the caches adding required dependencies.

! 2015-07-19 - Stefano Perazzini
 - Update to cmt/requirements and CMakeList.txt

! 2015-07-18 - Stefano Perazzini
 - Changed the cmt/requirements and CMakeList.txt to add dependency on
   StrippingArchive

! 2015-07-17 - Stefano Perazzini
 - Introduced options to create caches for S21 and S20.
 - Added package to STRIPPING under Phys/StrippingCache.

! 2015-07-03 - Marco Clemencic
 - Moved the CMake code to generate functors factories to Phys/LoKiCore.

! 2015-06-25 - Marco Clemencic
 - Added (preliminary) CMake integration.

! 2015-06-23 - Vanya Belyaev
 - test with new setting of hybrid base

! 2015-02-22 - Vanya Belyaev
 - commit fixed version of script directory

! 2015-02-11 - Vanya Belyaev

 - INSTRUCTIONS:

1. get the package:

   getpack StrippingCache head
   cd StrippingCache/options


2&3. set environment variable and run stripping:

     export LOKI_GENERATE_CPPCODE=20

     gaudirun.py  <options>...

  I've actually used 2 step action:

     export LOKI_GENERATE_CPPCODE=20

     gaudirun.py DV-Stripping21-Stripping.py DataType.py -n -o Stripping21.pkl

     gaudirun.py ./Stripping21.pkl

4. move generated cpp code to src directori and build the cache:

     mv *.cpp ../src

     make -j 10

 Thats all...
 for next run of gaudirun it will pick up functors from cache:

 ToolSvc.HybridFactory         SUCCESS Number of counters : 2
 |    Counter                                      |     #     |
 | "# loaded from CACHE"                           |     14770 |
 | "# loaded from PYTHON"                          |         1 |
ToolSvc.CoreFactory           SUCCESS Number of counters : 1
 |    Counter                                      |     #     |
 | "# loaded from CACHE"                           |      1212 |


! 2015-02-04 - Vanya Belyaev
 - the first import

! -----------------------------------------------------------------------------
! The END
! -----------------------------------------------------------------------------
