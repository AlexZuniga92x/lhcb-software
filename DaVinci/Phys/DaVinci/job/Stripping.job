#!/bin/csh -f
###########################################################
#   Initialize LSF queue parameters
#
# "-q" gives the queue (1nh by default)
#
# -q 8nm     express
# -q 1nh     short
# -q 8nh     medium
# -q 1nd     long
# -q 1nw     verylong
#
#
#  define the job name
#BSUB -J myjob
#  define the queue
#BSUB -q 8nh
#
###########################################################
#
# in BATCH output files are written in the BATCH machine
# and copy at the end to your $MYWORKDIR output directory
# in INTERACTIVE output files are written onto $WORKDIR
# you have to set $WORKDIR to what you want
#
if ($#argv >= 1 ) then
  echo " Usage: DaVinci.job [<mode>]" 
  echo " where:"
  echo "  <mode>          (optional)  is execution mode (e.g. $CMTDEB)"
  if ("$1" != "$CMTDEB") then
    exit 0
  endif
endif
#
set MODE = $CMTCONFIG
if ($?LS_SUBCWD) then 
# in BATCH go to the BATCH local directory
  cd $WORKDIR
else
# in interactive set WORKDIR to your output directory
  setenv WORKDIR $HOME/w1
  if ($#argv == 1) set MODE = "$1" 
  cd `dirname $0`
endif
set current = $PWD
#
# set location of DaVinci executable
set Dversion = "v12r15"
setenv MYJOBROOT $HOME/cmtuser/Phys/DaVinci/$Dversion

# == set the program environment
source $DaVinci_release_area/DaVinciEnv/$Dversion/cmt/setup.csh
source $MYJOBROOT/cmt/setup.csh -tag=$MODE

# == set executable name
setenv EXEC DaVinci

# == set output streams
setenv Presel_Filename Presel.oodst
setenv TDRsel_Filename TDRsel.oodst
setenv ETC_Filename ETC.root

# == in batch copy the executable,======================================= 
#    in interactive create a link to the executable you want to run =======
#
if ($?LS_SUBCWD) then
  cp $MYJOBROOT/$MODE/$EXEC.exe $current/tmpjob.exe
else
  ln -fs $MYJOBROOT/$MODE/$EXEC.exe $current/tmpjob.exe
endif
#
#==  create temporary joboptions file ==================
cp $MYJOBROOT/options/DVStripping.opts $current/tmpjob.opts

# == run $EXEC.exe ============================================
#
if ($MODE == "$CMTDEB") then
  setenv JOBOPTPATH $current/tmpjob.opts
  gvd $current/tmpjob.exe
else
  time $current/tmpjob.exe $current/tmpjob.opts
endif

# == job is finished: if in batch copy output files on user directories
if ($?LS_SUBCWD) then 
  ls core* > /dev/null
  if ($status == 0) then
     gdb $current/tmpjob.exe core* << EOF
where
quit
EOF
    rm core*
  endif
  ls *.* >! RETURN
endif

# == job is finished: remove temporary files ==========
rm -f tmp*

exit 0










