#!/bin/csh
###########################################################
#   Initialize LSF queue parameters
#
# "-q" gives the queue (1nh by default)
# "-c" gives the CPU time in minutes
#
# -q 8nm  = about 30 min HP735     express
# -q 1nh           3 hours         short
# -q 8nh           1 day           medium
# -q 1nd           3 days          long
# -q 1nw          10 days HP K260  verylong
#
#
#  define the job name
#BSUB -J myjob
#  define the queue
#BSUB -q z5_1nh
#
###########################################################
#
# in BATH output files are written in the BATCH machine
# and copy at the end to your $MYWORKDIR output directory
# in INTERACTIVE output files are written onto $WORKDIR
# you have to set $WORKDIR to what you want
#
set MODE = $CMTCONFIG
if ($?LS_SUBCWD) then 
# in BATCH go to the BATCH local directory
  cd $WORKDIR
else
# in interactive set WORKDIR to your output directory
  setenv WORKDIR $HOME/w1
  if ($#argv == 1) set MODE = "$1" 
endif
set current = $PWD
#
# == set the root directory of your job
setenv MYJOBROOT $HOME/newmycmt/Phys/DaVinci/v2r0
# == set the program environment
source $MYJOBROOT/cmt/setup.csh -tag=$MODE

# == if not linked in Static mode set soft_links to use packages
if ($MODE != "LinuxStatic") then
  cd $MYJOBROOT/cmt
  $CMTROOT/mgr/cmt build library_links
  cd $current
endif

# == executable 
setenv EXEC DaVinci

# == in batch copy the executable,======================================= 
#    in interactive create a link to the executable you want to run =======
#
if ($?LS_SUBCWD) then
  cp $MYJOBROOT/$MODE/$EXEC.exe tmpjob.exe
else
  ln -fs $MYJOBROOT/$MODE/$EXEC.exe tmpjob.exe
endif
#
#==  create temporary joboptions file ==================
#
#
cat >! tmpjob.opts<<EOF
//##############################################################
// Default DaVinci job Options
//
// This file defines, sequences and configures the algorithms 
// to be executed
//==============================================================
// Standard Gaudi configuration and additional DLLs are in 
// DaVinciCommon.opts
//--------------------------------------------------------------
#include "$DAVINCIROOT/options/DaVinciCommon.opts"

//--------------------------------------------------------------
// Histogram persistency 
// Hbook or Root are available, uncomment the one you want to use
// Keep in mind that the hbook file referred to here contains 
// all the C++ generated histograms, not those filled in Fortran
//--------------------------------------------------------------
// #include "$STDOPTS/Hbook.opts"
// #include "$STDOPTS/RootHist.opts"
// HistogramPersistencySvc.OutputFile = "Histos.hbook";
// HistogramPersistencySvc.OutputFile = "Histos.rt";

//--------------------------------------------------------------
// No Ntuples by default. Uncomment to switch on
//--------------------------------------------------------------
// ApplicationMgr.ExtSvc += { "NTupleSvc" };
// NTupleSvc.Output={"FILE1 DATAFILE='Ntuples.hbook' TYP='HBOOK' OPT='NEW'"};
// NTupleSvc.Output={"FILE1 DATAFILE='Ntuples.rt' TYP='ROOT' OPT='NEW'"};

//--------------------------------------------------------------
// Set up some profiling. Enable/Disable setting lines below to true/false
//--------------------------------------------------------------
AuditorSvc.Auditors  = { "NameAuditor", "ChronoAuditor", "MemoryAuditor" };
NameAuditor.Enable   = false;
ChronoAuditor.Enable = true;
MemoryAuditor.Enable = false;

//--------------------------------------------------------------
// DaVinci Algorithms to be always executed as the first one
//--------------------------------------------------------------
ApplicationMgr.TopAlg = { "DaVinciInitialisation" };

//--------------------------------------------------------------
// Other additional algorithms to be executed, from public 
// or private code.
// >>>>>>>>>>>> To be customized for a specific job <<<<<<<<<<<<
//--------------------------------------------------------------

//ApplicationMgr.TopAlg += { "AxPrimVertexAlgorithm" };
ApplicationMgr.TopAlg += { "PhysSelectAlgorithm" };
ApplicationMgr.TopAlg += { "DaVinciTestAlgorithm" }; 

//--------------------------------------------------------------
// DaVinci Algorithms to be always executed as the last one,
// the fortran suanal is called in here 
//--------------------------------------------------------------
ApplicationMgr.TopAlg += { "DaVinciFinalisation" };

//--------------------------------------------------------------
// Uncomment the following line if you want static version
//--------------------------------------------------------------
//ApplicationMgr.DLL = {"NONE"};

//-----------------------------------------------------------------
// Default options for algorithms and tools in DaVinciTools library
// you can overwrite any of the default options
//-----------------------------------------------------------------
#include "$DAVINCITOOLSROOT/options/DaVinciTools.opts"
#include "$DAVINCISICBROOT/options/DaVinciSicb.opts"
// The next lines are an example of changing the default behaviour
// of algorithms in the library 
//PhysSelectAlgorithm.DecayName    = "B0JM";
PhysSelectAlgorithm.Histograms   = 1;

//-----------------------------------------------------------------
// Private algorithms options
//-----------------------------------------------------------------
DaVinciTestAlgorithm.SearchParticle       = "B0";
DaVinciTestAlgorithm.DecayProducts        = { "pi+", "pi-" };

//--------------------------------------------------------------
// Set output level thresholds (2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL )
//--------------------------------------------------------------
MessageSvc.OutputLevel = 3;
ToolSvc.OutputLevel    = 3;
//DaVinciTestAlgorithm.OutputLevel        = 2;
//AxPrimaryVertexAlgorithm.OutputLevel    = 2;
//PhysSelectAlgorithm.OutputLevel         = 2;

//---------------------------------------------------------------
// Number of events to process, skip and printing frequency
//---------------------------------------------------------------
ApplicationMgr.EvtMax = 500;
//EventSelector.FirstEvent = 6;
//EventSelector.PrintFreq = 1;
 
  
//---------------------------------------------------------------
// Examples of input data
//---------------------------------------------------------------
// B->pi+pi-, Brunel v5r1
EventSelector.Input = {"JOBID='64026,64025'"};
//################################################################

EOF

#
# == run $EXEC.exe ============================================
#
if ($MODE == "Linuxdbx") then
  setenv JOBOPTPATH tmpjob.opts
  ddd tmpjob.exe
else
  time tmpjob.exe tmpjob.opts
endif

# == job is finished: remove temporary files ==========
rm tmp*

# == job is finished: if in batch copy output files on user directories
#
if ($?LS_SUBCWD) then 
  ls *.* >! RETURN
endif

exit 0










