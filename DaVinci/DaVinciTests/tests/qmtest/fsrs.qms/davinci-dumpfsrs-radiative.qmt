<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<!--
#######################################################
# SUMMARY OF THIS TEST
# ...................
# Author: rlambert
# Purpose: Check whether FSRs are consistent before/after merging
# Prerequisites: This is a full test suite which creates its own input
# Common failure modes, severities and cures: 
#               . SEVERE: Segfault or raised exception, stderr, nonzero return code
#               . MAJOR: additional FATAL/ERROR messages always a major problem. no ERROR messages should ever be printed when running this test.
#               . MAJOR: Any difference in the FSRs is a major problem and signifies a major FSR problem to be followed up with Jaap et al.
#######################################################
-->
<extension class="GaudiTest.GaudiExeTest" kind="test">
  <argument name="program"><text>gaudirun.py</text></argument>
  <argument name="args"><set>
    <text>$DAVINCIROOT/options/DaVinci-Default.py</text>
    <text>$DAVINCITESTSROOT/tests/options/fsrs/davinci-dumpfsrs.py</text>
    <text>--option</text>
    <text>from Configurables import DaVinci; DaVinci().DataType = "2010"; EventSelector().Input = ["DATAFILE='PFN:DaVinci-Merged-2010.dst' TYP='POOL_ROOTTREE' OPT='READ'"]; DaVinci().InputType="DST"; </text>
  </set></argument>
  <argument name="timeout"><integer>3000</integer></argument>
  <argument name="prerequisites"><set>
    <tuple><text>fsrs.davinci-merge-radiative</text><enumeral>PASS</enumeral></tuple>
    <tuple><text>fsrs.davinci-dumpfsrs-tofile</text><enumeral>PASS</enumeral></tuple>
  </set></argument>
  <argument name="use_temp_dir"><enumeral>true</enumeral></argument>
  <argument name="validator"><text>
import os
f=open(os.path.expandvars('$DAVINCITESTSROOT/tests/refs/test-FSRs-aftermerge.ref'),'r')
reflines=f.readlines()

#split the entry after FileRecords to get the shortes string to match
reflines=[r.strip().split('/FileRecords')[-1] for r in reflines]
stdlines=stdout

#print reflines, 'test'

if '\n' in stdout:
  stdlines=stdout.split('\n')

foundlines=[]
for line in reflines:
  for stdline in stdlines:
    if line in stdline:
      foundlines.append(line)
      break

#print foundlines

######## Check for consistency #############
if foundlines!=reflines:
  t=open(os.path.expandvars('$DAVINCITESTSROOT/tests/refs/test-FSRs-aftermerge.ref.new'),'w')
  t.write('\n'.join(foundlines))
  t.close()
  f.close()
  causes.append('missing FSRs')
  result['fsrs.davinci-dumpfsrs-radiative']=result.Quote('\n'.join(['+'+line for line in foundlines if line not in reflines]+['-'+line for line in reflines if line not in foundlines]))

f.close()
</text></argument> 
</extension>
