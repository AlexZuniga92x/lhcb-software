#!/usr/bin/env python 
# -*- coding: utf-8 -*-
# =============================================================================
# $Id$ 
# =============================================================================
## @file ostap
#  
#     .oooooo.                .                        
#    d8P'  `Y8b             .o8                        
#   888      888  .oooo.o .o888oo  .oooo.   oo.ooooo.  
#   888      888 d88(  "8   888   `P  )88b   888' `88b 
#   888      888 `"Y88b.    888    .oP"888   888   888 
#   `88b    d88' o.  )88b   888 . d8(  888   888   888 
#    `Y8bood8P'  8""888P'   "888" `Y888""8o  888bod8P' 
#                                            888       
#                                           o888o      
#                                                    
#  Simple interactive PyRoot-based analysis environment to provide access
#  to zillions useful decorators for ROOT (and not only ROOT!) objects&classes  
# 
#  This file is a part of 
#  <a href="http://cern.ch/lhcb-comp/Analysis/Bender/index.html">Bender project</a>
#  <b>``Python-based Interactive Environment for Smart and Friendly Physics Analysis''</b>
#
#  The package has been designed with the kind help from
#  Pere MATO and Andrey TSAREGORODTSEV. 
#  And it is based on the 
#  <a href="http://cern.ch/lhcb-comp/Analysis/LoKi/index.html">LoKi project:</a>
#  <b>``C++ ToolKit for Smart and Friendly Physics Analysis''</b>
#
#  By usage of this code one clearly states the disagreement 
#  with the smear campaign of Dr.O.Callot et al.: 
#  ``No Vanya's lines are allowed in LHCb/Gaudi software''
#
#  @date   2012-02-15
#  @author Vanya BELYAEV Ivan.Belyaev@itep.ru
#
#                    $Revision$
#  Last modification $Date$
#                 by $Author$
# =============================================================================
"""
Simple interactive PyRoot-based analysis environment
to provide access to zillions useful decorators for ROOT
(and not only ROOT) objects&classes

This file is a part of BENDER project:

``Python-based Interactive Environment for Smart and Friendly Physics Analysis''

The project has been designed with the kind help from Pere MATO and Andrey TSAREGORODTSEV. 

And it is based on the LoKi project: ``C++ ToolKit for Smart and Friendly Physics Analysis''

By usage of this code one clearly states the disagreement with the smear campaign
of Dr.O.Callot et al.:

``No Vanya's lines are allowed in LHCb/Gaudi software''
"""
# =============================================================================
__author__  = 'Vanya BELYAEV Ivan.Belyaev@itep.ru'
__date__    = "2012-09-10"
__version__ = '$Revision$'
# =============================================================================
import ROOT, sys, os  
ROOT.PyConfig.IgnoreCommandLineOptions = True
# =============================================================================
# logging 
# =============================================================================
from AnalysisPython.Logger import getLogger 
_my_name_ = __name__
if _my_name_ in ( '__main__' , '__builtins__' ) : _my_name_ = 'Ostap'
# =============================================================================
logger = getLogger( _my_name_ )
import Ostap.Line
logger.info ( "Welcome to Ostap\n" + Ostap.Line.line )
logger.info ( __doc__ )
# =============================================================================
## parse arguments 
def parse_args ( ) :
    """
    Parse arguments 
    """
    from argparse import ArgumentParser 
    parser = ArgumentParser ( prog = 'ostap' )
    parser.add_argument (
        "files" ,
        metavar = "FILE" , nargs = '*' , 
        help    = "ROOT/python files to be opened/processed" )
    parser.add_argument ( 
        "-m" , "--modules" ,
        metavar = "MODULE" , nargs = '*' , 
        help    = "ROOT/python modules to be imported" )
    parser.add_argument ( 
        "-n" , "--nocanvas"     , dest = 'canvas' , 
        action  = 'store_false' , 
        help    = "Do not create canvas" )
    group = parser.add_mutually_exclusive_group()
    group.add_argument ( '-i' ,  
                         '--interactive' , dest='batch', 
                         action = 'store_false' , default = False ,
                         help = "Interactive shell/start_ipython" )
    group.add_argument ( '-e' ,
                         '--embed' , 
                         action = 'store_true' ,
                         help = "Interactive embedded shell" )
    group.add_argument ( '-s' ,
                         '--simple' ,
                         action = 'store_true' ,
                         help = "Simple python shell" )
    group.add_argument ( '-b' ,
                         '--batch' ,
                         action = 'store_true' , default = False , 
                         help = "Batch processing: execute files and exit" )

    v = [ a for a in sys.argv[1:] ]
    if '--' in v : v.remove('--')
    
    return parser.parse_args( v )

# =============================================================================
def with_ipython() :
    try :
        __IPYTHON__
        return True
    except NameError :
        return False 
# =============================================================================
if with_ipython () :
    raise RuntimeError("Can't start Ostap from ipython!")

# =============================================================================
## parse arguments
# =============================================================================
arguments = parse_args()

# =============================================================================
## set ROOT into batch mode 
# =============================================================================
ROOT.gROOT.SetBatch ( arguments.batch )
if ROOT.gROOT.IsBatch() : logger.info ('Batch processing is activated') 

# =============================================================================
## import everything from Ostap
# =============================================================================
from   Ostap.OstapBender import * 

# =============================================================================
## create default canvas
# =============================================================================
if arguments.canvas : 
    import Ostap.Canvas 
    logger.debug ( "Create the default canvas" )
    canvas    = Ostap.Canvas.getCanvas ()
    
# =============================================================================
## import modules
# ============================================================================= 
if arguments.modules :
    import importlib 
    for m in arguments.modules :
        mod = importlib.import_module ( m )
        logger.info ("Imported module '%s' from '%s' " % ( mod.__name__ , mod.__file__ ) )
        locals()[m] = mod 
    del importlib
    
# =============================================================================
## execute the files, defined as arguments
# =============================================================================
if arguments.files:
    import glob 
    from   copy import deepcopy
    _myself    = sys.modules[ __name__ ] 
    _mykeys    = deepcopy ( dir( _myself ) ) 
    _copied    = set() 
    _skept     = set()
    
    root_files = []
    py_files   = []

    import glob 
    for pattern in arguments.files : 

        for a in glob.iglob ( pattern ) :

            p1     = a.rfind('.root')
            if 0 < p1 and len ( a ) == p1 + 5 :
                try :
                    with ROOTCWD() : 
                        f = ROOT.TFile.Open( a , 'READ')
                        root_files.append ( f )
                        logger.info ("Open ROOT file '%s'" % a )
                        f.ls()
                        continue 
                except :
                    logger.error ("Unable to open ROOT file '%s'" % a )
                        
        
            p2     = a.rfind( '.py' )
            if 1<= p2  and len(a) == p2 + 3 :
        
                logger.info  ('Try    to execute "%s"' % a )
        
                myvars =  {} 
                execfile ( a , myvars )
                for k,val in myvars.iteritems() : 
                    ## do not redefine already defined symbols!  
                    if k in _mykeys : 
                        # do not redefine local symbols [ needed? ] 
                        _skept.add ( k )
                        continue
                ## copy symbol into the local namespace  
                    setattr ( _myself , k , val ) 
                    _copied.add ( k )
                #
                py_files.append ( a )
                continue
            
            logger.warning ("Unknown command line symbol/pattern '%s'/'%s', skip it" % ( a , pattern )  ) 
                    
    if _copied    : logger.info ( 'Copied   %d symbols'      % len ( _copied    ) )  
    if _skept     : logger.info ( 'Skept    %d symbols'      % len ( _skept     ) )  
    if py_files   : logger.info ( 'Executed %d files'        % len ( py_files   ) )
    if root_files : logger.info ( 'Opened   %d ROOT files'   % len ( root_files ) )
    ## do not polllute namespace 
    del _copied
    del _skept
    del _mykeys 
    del _myself 
    del glob, deepcopy, pattern, a 
    
# =============================================================================
del with_ipython, parse_args, getLogger


## exit it! 
if arguments.batch :
    ## nothing to do 
    logger.debug  ('EXIT AT BATCH!')
    exit()
    
elif arguments.embed :

    ## the only one option up to Ostap v1r9
    logger.info ('Start embedded interactive shell') 
    import IPython
    IPython.embed ()

elif arguments.simple :
        
    __vars = globals().copy()
    __vars.update( locals() )
    
    import readline
    import code
    
    ## new from Ostap v1r10 
    logger.info ('Start simple interactive shell') 
    
    shell = code.InteractiveConsole(__vars)
    shell.interact()
    
else :
    

    __vars = globals().copy()
    __vars.update( locals() )

    ## new from Ostap v1r10 
    logger.info ('Start interactive shell') 
    
    import IPython
    IPython.start_ipython ( argv = [] , user_ns = __vars )


exit () 
# =============================================================================
# The END 
# =============================================================================

