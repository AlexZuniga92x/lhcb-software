#include "$DAVINCIROOT/options/DaVinciCommon.opts"
// #include "$DAVINCIROOT/options/DaVinciReco.opts"


ApplicationMgr.DLLs    += { "DaVinciAssociators" };
ApplicationMgr.DLLs    += { "DaVinciUser" };
ApplicationMgr.DLLs    += { "MicroDST"};
ApplicationMgr.TopAlg  += { "GaudiSequencer/TestSeq" };

// ========================================================================
// =================  Number of events to process
// =======================================================================
ApplicationMgr.EvtMax            = -1;

// Modify printout defaults
EventSelector.PrintFreq = 10;
//MessageSvc.OutputLevel = 1;
MessageSvc.Format = "% F%40W%S%7W%R%T %0W%M";

// ========================================================================
// =================  dictionary for event model
// =======================================================================

PoolDbCacheSvc.DLLs       += { "PhysEventDict"};

// ========================================================================
// =================  Input file
// =======================================================================
EventSelector.Input   = {
        "DATAFILE='PFN:microDST.dst'  TYP='POOL_ROOTTREE' OPT='READ'"    
};

//
// Catalogue to the original DST files if SmartRefs should
// be followed
//
//PoolDbCacheSvc.Catalog = {
//  "xmlcatalog_file:DSTCatalog.xml",
//  "xmlcatalog_file:/lhcb/XmlFileDB/Brunel-v30r14-eType13102000.xml"
//};

// ================================================================================
// ==================  ROOT persistency
// =================================================================================
#include "$STDOPTS/RootHist.opts"
RootHistCnv.ForceAlphaIds           = true;
ApplicationMgr.HistogramPersistency = "ROOT";
HistogramPersistencySvc.OutputFile  = "Histos.root";







//
// TEST DST
//

ChargedProtoCombineDLLsAlg.RootOnTES             = "microDST";
// ChargedProtoCombineDLLsAlg.OutputLevel           = 1;
ChargedProtoCombineDLLsAlg.ProtoParticleLocation = "microDST/Rec/ProtoP/Charged";

CreateRichPIDs.OutputLevel                       = 1;
CreateRichPIDs.InputProtoParticles               = "microDST/Rec/ProtoP/Charged";

CreateMuonPIDs.OutputLevel                       = 1;
CreateMuonPIDs.InputProtoParticles               = "microDST/Rec/ProtoP/Charged";

ToolSvc.PhysDesktop.OutputLevel                  = 1;
ToolSvc.PhysDesktop.RootOnTES                    = "microDST";

// Data-on-Demand?
TestSeq.Members                                 += {"MuonPIDsFromProtoParticlesAlg/CreateMuonPIDs"};
TestSeq.Members                                 += {"RichPIDsFromProtoParticlesAlg/CreateRichPIDs"};
//TestSeq.Members                                 += {"CellularAutomaton/EcalClust"};
//TestSeq.Members                                 += {"CaloSharedCellAlg/EcalShare"};
//TestSeq.Members                                 += {"CaloClusterCovarianceAlg/EcalCovar"};
//TestSeq.Members                                 += {"CaloClusterCorrect3x3Position"};
//TestSeq.Members                                 += {"CaloDigitsFromRaw/SpdFromRaw"};
//TestSeq.Members                                 += {"CaloDigitsFromRaw/PrsFromRaw"};
//TestSeq.Members                                 += {"CaloZSupAlg/EcalZSup"};
//TestSeq.Members                                 += {"CaloZSupAlg/HcalZSup"};

TestSeq.Members                                 += {"StoreExplorerAlg" };

//EcalClust.OutputLevel                            = 1;
//EcalShare.OutputLevel                            = 1;
//EcalCovar.OutputLevel                            = 1;
//CaloClusterCorrect3x3Position.OutputLevel        = 1;
//SpdFromRaw.OutputLevel                           = 1;
//PrsFromRaw.OutputLevel                           = 1;
//EcalZSup.OutputLevel                             = 1;
//HcalZSup.OutputLevel                             = 1;

// ApplicationMgr.TopAlg                += { "StoreExplorerAlg" };
StoreExplorerAlg.Load                = 1;
StoreExplorerAlg.PrintFreq           = 1.0;
StoreExplorerAlg.Outputlevel         = 1;


TestSeq.Members                                 += {"TestDST/TestDST"};
TestDST.PhysDesktop.OutputLevel                  = 1;
TestDST.PhysDesktop.RootOnTES                    = "microDST";
TestDST.PhysDesktop.InputPrimaryVertices         = "microDST/Rec/Vertex/Primary";
TestDST.PhysDesktop.InputLocations               = {"/Event/microDST/Phys/PreSelBsKK"};
TestDST.OutputLevel                              = 1;
TestDST.RootOnTES                                = "microDST";






