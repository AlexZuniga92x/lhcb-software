// $Id: MicroDSTCommon.icpp,v 1.16 2010-05-26 09:56:56 jpalac Exp $
//-----------------------------------------------------------------------------
// Implementation file for templated methods of class : MicroDSTCommon
//
// 2007-12-04 : Juan PALACIOS
//-----------------------------------------------------------------------------
#include "GaudiKernel/MsgStream.h"
#include "GaudiKernel/StatusCode.h"
//=============================================================================
template <class PBASE>
StatusCode MicroDSTCommon<PBASE>::initialize() 
{
  StatusCode sc = PBASE::initialize();

  if ( sc.isFailure() ) return sc;  // error printed already by GaudiAlgorithm

  this->debug() << "==> Initialize" << endmsg;

  return StatusCode::SUCCESS;
}
//=============================================================================
template <class PBASE>
StatusCode MicroDSTCommon<PBASE>::finalize() 
{
  this->debug() << "==> Finalize" << endmsg;

  return PBASE::finalize();  // must be called after all other actions 
}
//=============================================================================
template <class PBASE>
template <class T, class CopyFunctor>
const T* MicroDSTCommon<PBASE>::copyAndStoreObject( const std::string& from,
                                                    const std::string& to   )
  
{
  this->verbose() << "try to get data container" << endmsg;

  if (exist<T>( to ) ) {
    this->Warning("Object "+ to + " already exists. Not cloning.", 
                  StatusCode::SUCCESS,0).ignore();
    return this->get<T>( to );
  }
  if (exist<T>( from ) ) {
    const T* data = this->get<T>( from );
    this->verbose() << "now copy information" << endmsg;
    T* newData = CopyFunctor::copy(data);
    this->put (newData, to );
    this->verbose() << "Data values set to\n" << *newData << "\n" << endmsg;
    return newData;
  } else {
    this->Warning("No data container found at "+ from, 
                  StatusCode::FAILURE, 0).ignore();
    return 0;
  } // if exist

}
//=============================================================================
template <class PBASE>
template <class T, class ContainedItemCloner >
const T* MicroDSTCommon<PBASE>::copyKeyedContainer( const std::string& from,
                                                    const std::string& to    ) 
{
  this->verbose() << "now store container for location " << from << endmsg;

  if (!exist<T>(from)) {
    this->Warning("Container location "+ from+"does not exist",
                  StatusCode::FAILURE, 0).ignore();
    return 0;    
  } else {
    const T* data = this->get<T>( from );
    if (!data) {
      return 0;
    }
    T* clones = getOutputContainer<T>(to);

    this->verbose() << "copyKeyedContainer " << data->size() 
              << " elements from " << from 
              << " into " << to << ", size " << clones->size()
              << endmsg;
    return  copyKeyedContainer<T, ContainedItemCloner>(data, 
                                                       clones); 
  } // if !exist
}
//=============================================================================
template <class PBASE>
template <class T, class ContainedItemCloner >
const T* MicroDSTCommon<PBASE>::copyKeyedContainer( const std::string& from,
                                                    ContainedItemCloner* cloner    ) 
{
  this->verbose() << "now store container for location " << from << endmsg;

  const T* data = this->getInputContainer<T>( from );
  if (!data) {
    this->Warning("copyKeyedContainer found no data at "+from, 
                  StatusCode::FAILURE, 0).ignore();
    
    return 0;
  }

  for (typename T::const_iterator i = data->begin(); i != data->end(); ++i) {
    cloner->operator()(*i);
  }

  T* clones = getOutputContainer<T>( outputTESLocation(from) );

  if (0!=clones) {
    this->verbose() << "copyKeyedContainer copied  " << data->size() 
                    << " elements from " << from 
                    << " into " << outputTESLocation(from)
                    <<", size " << clones->size() << endmsg;
  } else {
    this->Warning("CopyKeyedContainer failed to clone "+ from,
                  StatusCode::FAILURE, 0).ignore();
  }


  return  clones; 

}
//=============================================================================
template <class PBASE>
template <class T, class ContainedItemCloner >
const typename T::Container* MicroDSTCommon<PBASE>::copyContainer( const std::string& from,
                                                                   ContainedItemCloner* cloner    ) 
{
  this->verbose() << "now store container for location " << from << endmsg;

  if ( (!exist<typename T::Container>(from)) && 
       (!exist<typename T::Selection>(from))    )   {
    this->Warning("copyContainer found no data at "+from, 
                  StatusCode::FAILURE, 0).ignore();
    return 0;
  }
  
  typename T::Range data = PBASE:: template get<typename T::Range>(from);

  if (data.empty()) {
    this->Warning("copyContainer found no data at "+from, 
                  StatusCode::FAILURE, 0).ignore();
    return 0;
  }

  for (typename T::Range::const_iterator i = data.begin(); i != data.end(); ++i) {
    cloner->operator()(*i);
  }

  typename T::Container* clones = getOutputContainer<typename T::Container>( outputTESLocation(from) );

  if (0!=clones) {
    this->verbose() << "copyContainer copied  " << data.size() 
                    << " elements from " << from 
                    << " into " << outputTESLocation(from)
                    <<", size " << clones->size() << endmsg;
  } else {
    this->Warning("copyContainer failed to clone "+ from,
                  StatusCode::FAILURE, 0).ignore();
  }


  return  clones; 

}
//=============================================================================
template <class PBASE>
template <class T, class itemCloner>
T* MicroDSTCommon<PBASE>::cloneKeyedContainerItem( const T* item )
{
  if (0==item) return 0;
  const std::string cloneLocation = 
    outputTESLocation( MicroDST::objectLocation( item->parent()) );
  typename T::Container* clones = getOutputContainer<typename T::Container>(cloneLocation);
  if (0==clones) return 0;
  this->verbose() << "cloneKeyedContainerItem to location " << cloneLocation << endmsg;
  MicroDST::CloneKeyedContainerItem<T, itemCloner> cloner(clones);
  return cloner(item);
  
}
//=============================================================================
template <class PBASE>
template <class T>
const T* MicroDSTCommon<PBASE>::getStoredClone( const KeyedObject<int>* original    ) const
{
  return getStoredClone<T>(original);
}
//=============================================================================
template <class PBASE>
template <class T>
T* MicroDSTCommon<PBASE>::getStoredClone( const KeyedObject<int>* original ) 
{

  if (0==original) return 0;
  
  const std::string cloneLocation = 
    outputTESLocation(MicroDST::objectLocation(original->parent()));

  if (!exist<typename T::Container>(cloneLocation)) return 0;

  typename T::Container* clones = get<typename T::Container>(cloneLocation);

  if (0==clones) {
    this->Error("Didn't find container at "+ cloneLocation,
                StatusCode::FAILURE,1).ignore();
    return 0;
  }

  return clones->object(original->key() ); 
    
}
//=============================================================================
template <class PBASE>
template <class T>
T* MicroDSTCommon<PBASE>::getOutputContainer( const std::string& location ) 
{
  if ( !exist<T>( location ) ) {
    T* container = new T();
    this->put(container, location);
  }
  return this->get<T>( location );     
}
//=============================================================================
template <class PBASE>
template <class T>
const T* MicroDSTCommon<PBASE>::getInputContainer( const std::string& location ) 
{
  if (!exist<T>(location)) {
    this->Warning("Container location "+location+" does not exist",
                  StatusCode::FAILURE, 0).ignore();
    return 0;    
  } else {
    return this->get<T>( location );
  }
  
}
//=============================================================================
template <class PBASE>
template <class T, class ContainedItemCloner >
const T* MicroDSTCommon<PBASE>::copyKeyedContainer( const T* from, T* to    ) 
{
  if (!from || !from ) return 0;
  this->verbose() << "copyKeyedContainer output container size " << to->size() 
            << endmsg;
  std::for_each(from->begin(), from->end(), 
                ContainedItemCloner(to) );

  this->verbose() << "copyKeyedContainer copied # elements into output container: " 
            << to->size() << endmsg;

  return to;
}
//=============================================================================
// Destructor
//=============================================================================
template <class PBASE>
MicroDSTCommon<PBASE>::~MicroDSTCommon() { }
//=============================================================================
