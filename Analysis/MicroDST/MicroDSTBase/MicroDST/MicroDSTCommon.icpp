// $Id: MicroDSTCommon.icpp,v 1.19 2010-08-12 14:47:51 jpalac Exp $
//-----------------------------------------------------------------------------
// Implementation file for templated methods of class : MicroDSTCommon
//
// 2007-12-04 : Juan PALACIOS
//-----------------------------------------------------------------------------

#include "GaudiKernel/MsgStream.h"
#include "GaudiKernel/StatusCode.h"
#include "GaudiKernel/IDataManagerSvc.h"
#include "GaudiKernel/SmartIF.h"

//=============================================================================

template <class PBASE>
StatusCode MicroDSTCommon<PBASE>::initialize()
{
  const StatusCode sc = PBASE::initialize();
  if ( sc.isFailure() ) return sc;

  if ( !PBASE::rootInTES().empty() ) m_rootInTES = PBASE::rootInTES();
  this->debug() << "Set rootInTES to " << m_rootInTES << endmsg;

  return sc;
}

//=============================================================================

template <class PBASE>
StatusCode MicroDSTCommon<PBASE>::finalize()
{
  return PBASE::finalize();
}

//=============================================================================

template <class PBASE>
template <class CopyFunctor>
const typename CopyFunctor::Type*
MicroDSTCommon<PBASE>::copyAndStoreObject( const std::string& from,
                                           const std::string& to   )

{
  if ( this->msgLevel(MSG::VERBOSE) )
    this->verbose() << "try to get data container" << endmsg;
  typedef typename CopyFunctor::Type _type;
  if ( exist<_type>(to) )
  {
    this->Warning("Object "+ to + " already exists. Not cloning.",
                  StatusCode::SUCCESS,0).ignore();
    return this->get<_type>( to );
  }
  if ( exist<_type>(from) )
  {
    const _type* data = this->get<_type>( from );
    if ( this->msgLevel(MSG::VERBOSE) )
      this->verbose() << "now copy information" << endmsg;
    _type* newData = CopyFunctor::copy(data);
    this->put (newData, to );
    if ( this->msgLevel(MSG::VERBOSE) )
      this->verbose() << "Data values set to\n" << *newData << "\n" << endmsg;
    return newData;
  }
  else
  {
    this->Warning("No data container found at "+ from,
                  StatusCode::FAILURE, 0).ignore();
    return NULL;
  }
}

//=============================================================================

template <class PBASE>
template <class Cloner >
const typename Cloner::Type::Container*
MicroDSTCommon<PBASE>::copyKeyedContainer( const std::string& from,
                                           Cloner* cloner    )
{

  typedef typename Cloner::Type _type;
  typedef typename _type::Container _container;
  //if ( this->msgLevel(MSG::VERBOSE) )
  //  this->verbose() << "Trying to load data at '" << from << "'" << endmsg;
  const _container* data = this->getInputContainer<_container>( from );
  if ( !data )
  {
    //if ( this->msgLevel(MSG::VERBOSE) )
    //  this->verbose() << "  -> No data object" << endmsg;
    //this->Warning("copyKeyedContainer found no data at "+from,
    //              StatusCode::FAILURE, 0).ignore();
    return NULL;
  }

  return this->copyKeyedContainer<Cloner>( data, cloner );
}

//=============================================================================

template <class PBASE>
template <class Cloner >
const typename Cloner::Type::Container*
MicroDSTCommon<PBASE>::copyKeyedContainer( const typename Cloner::Type::Container* from,
                                           Cloner* cloner )
{
  typedef typename Cloner::Type _type;
  typedef typename _type::Container _container;

  const std::string location = MicroDST::objectLocation(from);
  if ( this->msgLevel(MSG::VERBOSE) )
    this->verbose() << "now copy container for location " << location
                    << " to location " << outputTESLocation(location) << endmsg;

  if ( !from )
  {
    //     this->Warning("copyKeyedContainer found no data at "+ location,
    //                   StatusCode::FAILURE, 0).ignore();
    return NULL;
  }

  for ( const auto& i : *from ) { cloner->operator()(i); }

  _container* clones = getOutputContainer<_container>( outputTESLocation(location) );

  if ( clones )
  {
    if ( this->msgLevel(MSG::VERBOSE) )
      this->verbose() << "copyKeyedContainer copied  " << from->size()
                      << " elements from " << location
                      << " into " << outputTESLocation(location)
                      <<", size " << clones->size() << endmsg;
  }
  else
  {
    this->Warning( "CopyKeyedContainer failed to clone "+ location,
                   StatusCode::FAILURE, 0 ).ignore();
  }

  return clones;
}

//=============================================================================

template <class PBASE>
template <class itemCloner>
typename itemCloner::Type*
MicroDSTCommon<PBASE>::cloneKeyedContainerItem( const typename itemCloner::Type* item )
{
  if ( !item )
  {
    if ( this->msgLevel(MSG::DEBUG) )
      this->debug() << "Cannot clone a NULL pointer !" << endmsg;
    return NULL;
  }

  if ( !item->parent() )
  {
    this->Warning( "Cannot clone an object with no parent!" ).ignore();
    return NULL;
  }

  const std::string cloneLocation =
    outputTESLocation( MicroDST::objectLocation(item->parent()) );

  typename itemCloner::Type::Container* clones =
    getOutputContainer<typename itemCloner::Type::Container>(cloneLocation);
  if ( !clones ) return NULL;

  // try and get clone
  typename itemCloner::Type * clonedItem = clones->object( item->key() );
  if ( !clonedItem )
  {
    if ( this->msgLevel(MSG::DEBUG) )
    {
      this->debug() << "cloneKeyedContainerItem: Cloning item key " << item->key()
                    << " in " << item->parent()->registry()->identifier()
                    << " to " << cloneLocation << endmsg;
      if ( this->msgLevel(MSG::VERBOSE) ) this->verbose() << *item << endmsg;
    }

    clonedItem = itemCloner::clone(item);
    if ( clonedItem )
    {
      clones->insert( clonedItem, item->key() );
      if ( this->msgLevel(MSG::VERBOSE) )
        this->verbose() << "Cloned item " << *clonedItem << endmsg;
    }
    else
    {
      if ( this->msgLevel(MSG::DEBUG) )
        this->debug() << "cloneKeyedContainerItem: Cloning FAILED" << endmsg;
    }
  }

  return clonedItem;
}

//=============================================================================

template <class PBASE>
template <class T>
const T*
MicroDSTCommon<PBASE>::getStoredClone( const KeyedObject<int>* original ) const
{
  return getStoredClone<T>(original);
}

//=============================================================================

template <class PBASE>
template <class T>
T* MicroDSTCommon<PBASE>::getStoredClone( const KeyedObject<int>* original )
{
  if ( !original ) return NULL;

  const std::string cloneLocation =
    outputTESLocation(MicroDST::objectLocation(original->parent()));

  typename T::Container* clones = getIfExists<typename T::Container>(cloneLocation);

  return ( clones ? clones->object(original->key()) : NULL );
}

//=============================================================================

template <class PBASE>
template <class T>
T* MicroDSTCommon<PBASE>::getOutputContainer( const std::string& location )
{
  T * t = getIfExists<T>( location );
  if ( !t )
  {
    t = new T();
    this->put( t, location );
  }
  return t;
}

//=============================================================================

template <class PBASE>
template <class T>
const T* MicroDSTCommon<PBASE>::getInputContainer( const std::string& location )
{
  return getIfExists<T>( location );
}

//=============================================================================

template <class PBASE>
std::string MicroDSTCommon<PBASE>::niceLocationName(const std::string& location) const
{
  std::string tmp(location);
  const std::string& tmpString = m_rootInTES;
  const std::string::size_type loc = tmp.find(tmpString);
  if ( loc != std::string::npos )
  {
    tmp.replace( loc, tmpString.length(), "" );
  }
  return tmp;
}

//=============================================================================

template <class PBASE>
void MicroDSTCommon<PBASE>::selectContainers ( const DataObject * obj,
                                               std::set<std::string>& names,
                                               const unsigned int classID,
                                               const bool forceRead )
{
  SmartIF<IDataManagerSvc> mgr( this->eventSvc() );
  typedef std::vector<IRegistry*> Leaves;
  Leaves leaves;
  StatusCode sc = mgr->objectLeaves( obj, leaves );
  if ( sc )
  {
    for ( const auto& leaf : leaves )
    {
      const std::string& id = leaf->identifier();
      DataObject* tmp(NULL);
      if ( forceRead )
      {
        sc = this->eventSvc()->retrieveObject( id, tmp );
      }
      else
      {
        sc = this->eventSvc()->findObject( id, tmp );
      }
      if ( sc && NULL != tmp )
      {
        if ( 0xFFFFFFFF == classID )
        {
          if ( tmp->clID() != CLID_DataObject )
          {
            this->info() << format( "Class %8.8x (%5d) name ", tmp->clID(), tmp->clID()&0xFFFF )
                         << id << endmsg;
          }
        }
        if ( this->msgLevel(MSG::DEBUG) )
          this->debug() << "Found container '" << id << "' ClassID=" << tmp->clID()
                        << " Type='" << System::typeinfoName( typeid(*tmp) )
                        << endmsg;
        if ( tmp->clID() == classID )
        {
          if ( this->msgLevel(MSG::DEBUG) )
            this->debug() << " -> Matches target class ID " << classID << endmsg;
          names.insert( id );
        }
        selectContainers( tmp, names, classID, forceRead );
      }
    }
  }
}

//=============================================================================
// Destructor
//=============================================================================
template <class PBASE>
MicroDSTCommon<PBASE>::~MicroDSTCommon() { }
//=============================================================================
