// $Id: DV_LoKi_Bd2KStarGamma.opts,v 1.4 2004-08-05 09:54:11 ibelyaev Exp $
// ============================================================================
// CVS tag $Name: not supported by cvs2svn $
// ============================================================================
// $Log: not supported by cvs2svn $
// ============================================================================
// include files 
// ============================================================================
// Standard Gaudi configuration and additional DLLs
// ============================================================================
#pragma print off
// ============================================================================
#include "$DAVINCIROOT/options/DaVinciCommon.opts"
#include "$DAVINCIROOT/options/DaVinciReco.opts"
#include "$DAVINCIROOT/options/DaVinciNeutrals.opts"            
// ============================================================================
#pragma print on
// ============================================================================

// ============================================================================
/** @file 
 *  Options file to drive the simple LoKi example LoKi_Bd2KstarGamma algorithm
 *  @see LoKi_Bd2KstarGamma
 *  @author Galina PAKHLOVA Galina.Pakhlova@cern.ch 
 *  @author Vanya  BELYAEV  Ivan.Belyaev@itep.ru
 *  @date 2003-05-12
 */
// ============================================================================

// load nesessary libraries 
ApplicationMgr.DLLs   += { "LoKiExample" , "LoKi" } ;

// top level algorithms 
ApplicationMgr.TopAlg +=  {
  "LoKiPreLoad/Photons"       , // create and put into TES neutral particles  
  "LoKiPreLoad/Charged"       , // create and put into TES charged particles
  "LoKi_Bd2KStarGamma/KStarGamma"   // execute the algorithm itsels  
};

// configuration of algorithm 'Charged' 
Charged.PhysDesktop.ParticleMakerType =  "CombinedParticleMaker";

// configuration of algorithm 'Neutrals' 
Photons.PhysDesktop.ParticleMakerType   =  "PhotonParticleMaker";
Photons.PhysDesktop.PhotonParticleMaker.UseAllPhotons = true ;
Photons.OutputLocation                  = "Event/Phys/Photons" ;

// configuration of algorithm 'KStarGamma' 
KStarGamma.PhysDesktop.InputLocations  = {"/Event/Phys/Charged" ,
                                          "/Event/Phys/Photons" } ;
KStarGamma.OutputLocation  = "/Event/Phys/Bd2KStarGamma" ;
KStarGamma.NTupleLUN       = "TUPLES"  ; // logical file unit 
KstarGamma.DecayDescriptor = " [B0 -> ( K*(892)0 -> K+ pi- ) gamma]cc " ;

// N-Tuples
ApplicationMgr.ExtSvc += { "NTupleSvc" } ;
NTupleSvc.Output      += 
  {"TUPLES DATAFILE='KStarGamma.hbook' TYP='HBOOK' OPT='NEW'" } ;

// control for printout 
MessageSvc.OutputLevel       =   3 ;  // "WARNING" printout level
EventSelector.PrintFreq      =  50 ;  // make a print only each 50th event 
// suppress some messages 
ChargedProtoPAlg.OutputLevel     = 4 ; 
PrimVtxFinder.OutputLevel        = 4 ; 
RootEvtCnvSvc.OutputLevel        = 4 ;
NeutralPPsFromCPsAlg.OutputLevel = 4 ;

ChronoStatSvc.NumberOfSkippedEventsForMemStat = -1 ;

#pragma   print off 
// input data set:  DC04 Bd -> K* gamma
#include "$LOKIEXAMPLEOPTS/Bd_Kstgamma_DC04.opts"
#pragma   print on

PoolDbCacheSvc.Catalog = 
  { 
    "xmlcatalog_file:$LOKIEXAMPLEOPTS/LoKiExampleMutableCatalog.xml"  ,
    "xmlcatalog_file:$LOKIEXAMPLEOPTS/Bd_Kstgamma_DC04.xml"          
  };

// The number of events to process 
ApplicationMgr.EvtMax  = 500 ;

// ============================================================================
// The END 
// ============================================================================
