// $Id: DV_LoKi_EventTagTuple.opts,v 1.3 2004-08-05 09:54:12 ibelyaev Exp $
// ============================================================================
// CVS tag $Name: not supported by cvs2svn $
// ============================================================================
// $Log: not supported by cvs2svn $
// ============================================================================
// include files 
// ============================================================================
#pragma print off 
// ============================================================================
#include "$DAVINCIROOT/options/DaVinciCommon.opts"
#include "$DAVINCIROOT/options/DaVinciReco.opts"
// ============================================================================
// Histograms
// ============================================================================
#include "$STDOPTS/Hbook.opts"
// ============================================================================
#pragma print on 
// ============================================================================

// ============================================================================
/** @file 
 *  Options file to drive the simple LoKi example LoKi_EventTagTuple algorithm
 *  @see LoKi_EvenTagTuple
 *  @author Vanya BELYAEV  Ivan.Belyaev@itep.ru
 *  @date 2003-05-12
 */
// ============================================================================

// load nesessary libraries 
ApplicationMgr.DLLs   += { "LoKiExample" , "LoKi" } ;

// top level algorithms 
ApplicationMgr.TopAlg  +=  {
  "LoKiPreLoad/Charged"     // create and put into TES charged particles
};

// configuration of algorithm 'Charged' 
Charged.PhysDesktop.ParticleMakerType =  "CombinedParticleMaker";
Charged.OutputLocation                = "/Event/Phys/Charged";

ApplicationMgr.OutStream  =  { "Sequencer/SeqEvtTags"           } ;
SeqEvtTags.Members        =  { "LoKi_EventTagTuple/EvtTags"     , 
                               "EvtCollectionStream/TagsWriter" } ;

// configuration of algorithm 'EvtTags' 
EvtTags.PhysDesktop.InputLocations  = { "/Event/Phys/Charged" };
EvtTags.EvtColLUN = "EVTTAGS" ; // logical file unit 
EvtTags.EvtColsProduce = true;
EvtTags.EvtColSplitDir = false;

// configuration of tag writer 
TagsWriter.ItemList    = { "/NTUPLES/EVTTAGS/EvtTags/1" };
TagsWriter.EvtDataSvc  =   "EvtTupleSvc" ;

// event tag collections service 
ApplicationMgr.ExtSvc += {"TagCollectionSvc/EvtTupleSvc"};
EvtTupleSvc.Output = 
  { "EVTTAGS DATAFILE='PFN:EventTags.tags' TYP='POOL_ROOTTREE' OPT='RECREAT' " } ;

// control for printout 
MessageSvc.OutputLevel   =   3 ;  // "WARNING" printout level
EventSelector.PrintFreq  =  10 ;  // make a print only each 10th event 
// suppress some messages 
ChargedProtoPAlg.OutputLevel     = 4 ; 
PrimVtxFinder.OutputLevel        = 4 ; 
RootEvtCnvSvc.OutputLevel        = 4 ;

ChronoStatSvc.NumberOfSkippedEventsForMemStat = -1 ;

#pragma   print off 
// input data set: DC04 Bs -> phi phi 
#include "$LOKIEXAMPLEOPTS/Bs_phiphi_DC04.opts"
#pragma   print on 

PoolDbCacheSvc.Catalog = 
  { 
    "xmlcatalog_file:$LOKIEXAMPLEOPTS/LoKiExampleMutableCatalog.xml"  ,
    "xmlcatalog_file:$LOKIEXAMPLEOPTS/Bs_phiphi_DC04.xml"          
  };

// The number of events to process 
ApplicationMgr.EvtMax  = 1000 ;


// ============================================================================
// The END 
// ============================================================================
