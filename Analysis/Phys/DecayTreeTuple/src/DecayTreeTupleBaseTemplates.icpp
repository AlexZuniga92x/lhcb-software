/** @file DecayTreeTupleBaseTemplates.icpp
 *
 * All templates methods in DecayTreeTupleBase that need to be included
 * in header to allow proper linking with DecayTreeTuple and MCDecayTreeTuple
 *
 * \sa DecayTreeTuple, MCDecayTreeTuple
 *
 * \author Patrick Koppenburg based on Jérémie Borels DecayTreeTuple
 * \date 2009-01-20
 */
//=============================================================================
//=============================================================================
//! Trigger all fill procedures
template<class PARTICLEVECTOR,class DECAYFINDER>
StatusCode fillTuple( Tuples::Tuple& tuple
                      , const PARTICLEVECTOR& heads
                      , DECAYFINDER* dkFinder )
{
  typename PARTICLEVECTOR::const_iterator pit = heads.begin();
  PARTICLEVECTOR row;

  unsigned int nCandidates=0;
  StatusCode test = StatusCode::FAILURE;

  for( ; heads.end()!=pit; ++pit )
  {
    if (msgLevel(MSG::DEBUG)) debug() << "######################################## New head" << endmsg ;
    test = StatusCode::FAILURE;
    row.clear();
    dkFinder->decayMembers( *pit, row );
    row.insert( row.begin(), *pit ); // must insert the head as it cant be flagged.

    if( fillParticles( tuple, row ) )
    {
      tuple->column( "nCandidate", nCandidates ).ignore();
      tuple->column( "totCandidates", (unsigned long long)heads.size()).ignore();
      tuple->column( "EventInSequence", (unsigned long long)counter("Event").nEntries()).ignore();
      ++nCandidates;
    }
    else 
    {
      Warning("Failed to fill a candidate. Will skip it.").ignore();
      continue;
    }

    test = fillEventRelatedVariables( tuple );

    if( test )
    {
      test = tuple->write();
    }
    else 
    {
      Warning("Failed to fill some variable, will skip this candidate.").ignore();
    }
  }


  return test;
}
//=============================================================================
/// get offset in tree
template<class PARTICLE>
int getOffset( const PARTICLE* p, const std::vector<const PARTICLE*>& v, bool secure=true )
{
  typename std::vector<const PARTICLE*>::const_iterator it, f;
  f = std::find( v.begin(), v.end(), p );
  if( secure ) Assert( f != v.end() );
  return f-v.begin();
}
//=============================================================================
/// Recursively fill (MC)Particles. PARTICLEVECTOR is LHCb::(MC)Particle::ConstVector
template<class PARTICLEVECTOR>
StatusCode fillParticles( Tuples::Tuple& tuple,
                          const PARTICLEVECTOR& row )
{
  if ( sizeCheckOrInit( row ) )
  {
    bool test = true;
    const int size = m_parts.size();
    for( int k=0; size>k; ++k )
    { // row[0] is the deday head.
      if (msgLevel(MSG::DEBUG)) debug() << "#### Filling "
                                        << row[k]->particleID().pid() << endmsg ;
      test &= fillOnePart( m_parts[k], tuple, row[0], row[k] );
    }
    return StatusCode(test);
  }
  return StatusCode::FAILURE;
}
//=============================================================================
/// Initialize Tuple, or check all is consistent PARTICLE is LHCb::(MC)Particle
template<class PARTICLE>
bool sizeCheckOrInit( const std::vector<const PARTICLE*> & row )
{
  const unsigned int size = row.size();
  if( m_parts.size() == size ) return true;

  if( !m_parts.empty() )
  {
    Error( "The number of matched particles with the DecayFinder ("
           + m_headDecay
           + ") has changed. Skipping the candidate.").ignore();
    return false;
  }

  if (msgLevel(MSG::DEBUG))
    debug() << "Entering the initialization process" << endreq;

  // initializing the particles object.
  m_parts.reserve( size );
  bool revertChain = false ;
  bool revertHead = false ;
  if (m_revertToPositiveID){
    revertHead = ( row[0]->particleID().pid()<0 ) ; // revert all heads
    bool oscillated = hasOscillated(row[0]) ; // only makes sense for MC
    // revert chain only for particles oscillating :
    revertChain =  ( revertHead != oscillated )  ; // Bbar -> Bbar or B -> Bbar
    info() << "The head of chain is a " << ppSvc()->find( row[0]->particleID() )->particle() ;
    if (oscillated) info() << " that has oscillated" ;
    info() << " : " ;
    if (revertHead) info() << "Will change to its antiparticle. " ;
    if (revertChain) info() << "Will change daughters to antiparticles. " ;
    if (! (revertHead || revertChain )) info() << "Will keep whole chain as is. " ;
    info() << endmsg ;
  }

  for( unsigned int i=0; i<size; ++i )
  {
    bool revert = ((i==0) ? revertHead : revertChain ) ;
    const LHCb::ParticleProperty* pp = (revert ?
                                        ppSvc()->find ( row[i]->particleID() )->antiParticle() :
                                        ppSvc()->find ( row[i]->particleID() )) ;
    Decays::OnePart *p = new Decays::OnePart( pp->particle() ,
                                              getBranchName( pp->particle() ) );
    // inherit the default properties:
    m_parts.push_back( p );
  }

  if (msgLevel(MSG::DEBUG)) debug() << "There are " << m_parts.size()
                                    << " particles to initialize." << endreq;

  // set the base properties...
  switchStufferTools(row[0]); // that's a cheat
  if (msgLevel(MSG::VERBOSE)) verbose() << "Done switchStufferTools" << endmsg ;
  // set the branch names and inherit the particle specific tools
  std::vector<TupleToolDecay*>::iterator mit;
  std::vector<const PARTICLE*> buffer;

  if (msgLevel(MSG::VERBOSE)) verbose() << "Decays size " << m_decays.size() << endmsg ;
  // is there any special name for this MCParticle ?:
  for( mit=m_decays.begin(); m_decays.end()!=mit; ++mit )
  {
    if (msgLevel(MSG::VERBOSE)) verbose() << "Looping over Decays" << *mit << endmsg ;
    if( 0==*mit ) continue;
    buffer.clear();
    if (msgLevel(MSG::VERBOSE)) verbose() << "Cleared buffer" << *mit << endmsg ;
    matchSubDecays( row, buffer, *mit );
    if (msgLevel(MSG::VERBOSE)) verbose() << "Matched sub decays" << *mit << endmsg ;
  }

  if (msgLevel(MSG::VERBOSE))
    verbose() << "Going to re-recreate daughter-mother relationship" << endmsg ;

  // re-creating mother->daughter relationship,
  // allows better printout later on
  for( int i=0; i<(int)row.size(); ++i )
  {
    Decays::OnePart* Mother = m_parts[i];

    std::vector<const PARTICLE*> dau = daughtersVector(row[i]); // row[i]->daughtersVector()
    typename std::vector<const PARTICLE*>::const_iterator dauit, f ;
    for( dauit=dau.begin(); dau.end()!=dauit; ++dauit )
    {
      if (msgLevel(MSG::VERBOSE)) 
        verbose() << "Looping over daughter " << (*dauit)->particleID().pid() << endmsg ;
      // am I in the search decay ?
      f = std::find( row.begin(), row.end(), *dauit );
      if( f==row.end() ) continue;
      int off = getOffset( *f, row );
      Mother->addDaughter( m_parts[off] );
      m_parts[off]->setMother( Mother );
    }
  }

  if (!checkUnicity()) return false ;
  printInfos();
  return true ;
}
//=============================================================================
/// Find associated OneParts
template<class PARTICLEVECTOR,class ITUPLETOOL>
void findAssociatedOneParts(  PARTICLEVECTOR& buffer, const PARTICLEVECTOR& row,
                              const TupleToolDecay* mit, std::vector< ITUPLETOOL* >& pTools ) 
{
  const int size=buffer.size();
  for( int k=0; k<size; ++k )
  {
    if (msgLevel(MSG::VERBOSE)) 
      verbose() << "Looping on " << buffer[k]->particleID().pid() << " with " << mit->name() 
                << endmsg ;
    // loop on the matched particles and find the associated Decays::OnePart* object
    int off = getOffset( buffer[k], row, false );
    if ( off == (int)row.size() )
    {
      Error( "The decay descriptor '" + mit->getInfo() +
             "' returned a match which is not also matched by your main decay descriptor. Ignoring it.");
      break;
    }
    if( m_tupleNameAsToolName )
    {
      std::string n = mit->getName();
      // if there is more than one, append numerical values:
      if( size>1 ) n.append( boost::lexical_cast<std::string>(k) );
      m_parts[off]->headName( Decays::escape(n) );
    }
    // assign the correct tools:
    initializeOnePartsStufferTools( m_parts[off], mit, pTools );
  }
}
//=============================================================================
/// Initialize all Particle tools
template<class ITUPLETOOL>
void initializeStufferTools(std::vector< ITUPLETOOL* >& pTools)
{
  if(msgLevel(MSG::VERBOSE)) 
    verbose() << "input tool list " << m_toolList << " size " << m_toolList.size() 
              << endmsg;

  std::sort( m_toolList.begin(), m_toolList.end() );
  m_toolList.erase( std::unique(m_toolList.begin(),m_toolList.end()), m_toolList.end() );
  
  if(msgLevel(MSG::VERBOSE)) 
    verbose() << "unique tool list " << m_toolList << " size " << m_toolList.size() 
              << endmsg;

  // base instantiation:
  for ( std::vector<std::string>::const_iterator it = m_toolList.begin(); 
        m_toolList.end() != it; ++it )
  {
    if (msgLevel(MSG::VERBOSE)) 
      verbose() << (*it) << " " << (*it).find("TupleToolDecay",0)  << endmsg ;
    if ( 0 == (*it).find("TupleToolDecay",0) )
    { // ignore TupleToolDecay
      if (msgLevel(MSG::DEBUG)) debug() << "Ignoring " << (*it) << endmsg ;
      continue;
    }     
    IAlgTool* tt = tool<IAlgTool>( *it, this );
    if( !tt )
    {
      Error("Not AlgTool: Cannot get the tool '" + *it + "', check your syntax" ).ignore();
      continue;
    }
    // splitting in the correct list.
    SmartIF<IEventTupleTool> test1(tt);
    if (msgLevel(MSG::VERBOSE)) verbose() << *it << " is IEventTupleTool? " << test1 << endmsg ;
    if( test1 ) m_eTools.push_back( test1 );
    SmartIF<ITUPLETOOL> test2(tt);
    if (msgLevel(MSG::VERBOSE)) verbose() << *it << " is ITUPLETOOL " << test2 << endmsg ;
    if( test2 )
    {
      pTools.push_back( test2 );

      // inherit by default: give all the tools to the particles:
      for( std::vector<Decays::OnePart*>::iterator op = m_parts.begin(); 
           op != m_parts.end(); ++op )
      {
        if (msgLevel(MSG::VERBOSE)) 
          verbose() << "Adding " << test2->type() << " to " << (*op)->headName() << endmsg ;
        (*op)->addTool( test2 );
      }
    }

    if( !test1 && !test2 )
    {
      Error("Can't get the tool '" + *it + "', check your syntax" ).ignore();
    }
    if( test1 && test2 )
    {
      Warning("The tool '" + *it +
              "', will be called both by the IParticleTupleTool" +
              " and IEventTupleTool interfaces. That's fine as long as you" +
              " know what you are doing." ).ignore();
    }
    if( test1 && !test2 )
      if (msgLevel(MSG::VERBOSE)) verbose() << *it << " instantiated as an Event related tool" << endreq;
    if( !test1 && test2 )
      if (msgLevel(MSG::VERBOSE)) verbose() << *it << " instantiated as a Particle related tool" << endreq;
  }

  if (msgLevel(MSG::DEBUG)) debug() << "Generic and inherited tool list successfully created" << endreq;
}
//=============================================================================
//=============================================================================
/// Initialize all Particle tools
template<class ITUPLETOOL> 
void initializeOnePartsStufferTools( Decays::OnePart* P
                                     , const TupleToolDecay* m
                                     , std::vector< ITUPLETOOL* >& pTools   )
{
  if (!m) Exception("No TupleToolDecay");
  if (!P) Exception("No Particle");
  if (msgLevel(MSG::DEBUG)) 
  {
    debug() << "initializeOnePartsStufferTools for " << P->headName() << " " << P->info() << endmsg ;
    debug() << " - Tool: " << m->name() << " " << m->getName() << " " << m->decay() << endmsg ;
  }
  // there is a specific descriptor for P, i.e. default settings are wrong
  P->clearTools();

  // tool list must become : specific + (inherited-specific)
  std::vector<std::string> remainTools;
  std::vector<std::string> globalTools = getParticleTools(pTools);
  const std::vector<std::string>& locTools = m->getStuffers();
  if (msgLevel(MSG::VERBOSE)) 
  {
    verbose() << "Stuffers are " ;
    for ( std::vector<std::string>::const_iterator i = locTools.begin() ; 
          i != locTools.end() ; ++i ) { verbose() << *i << " " ; }
    verbose() << endmsg ;
  }

  std::insert_iterator<std::vector<std::string> > ii( remainTools, remainTools.begin() );
  std::set_difference( globalTools.begin(), globalTools.end(),
                       locTools.begin(), locTools.end(),
                       ii );

  if (msgLevel(MSG::VERBOSE)) 
    verbose() << "Remains " << remainTools.size() << " to inherit" << endmsg;

  // inherit again the remaining global tools:
  if( m->inheritTools() )
  {
    for( std::vector<std::string>::const_iterator it = remainTools.begin(); 
         remainTools.end() != it ; ++it )
    {
      if (msgLevel(MSG::VERBOSE)) verbose() << "Remaining tool " << *it << endmsg ;
      // find the right tool:
      bool flag = false;
      for( unsigned int k=0; k< pTools.size(); ++k )
      {
        if( *it == pTools[k]->type() )
        {
          if (msgLevel(MSG::VERBOSE)) 
            verbose() << "Found! Part " << P->info() << " inherits "
                      << pTools[k]->type() << endreq;
          P->addTool( pTools[k] );
          flag = true;
          break;
        }
      }
      if( !flag )
        Warning( "Hmm, should not happen, the tool '" +
                 *it + "' will be ignored for some reason..." ).ignore();
    }
  }

  // now instanciate the specific tools from the TupleToolDecay:
  for( std::vector<std::string>::const_iterator it = locTools.begin(); 
       locTools.end() != it; ++it )
  {
    if (msgLevel(MSG::DEBUG)) 
      debug() << "locTools: Creating tool " << *it << " for " << P->headName() << endmsg ;
    ITUPLETOOL* tt = tool<ITUPLETOOL>( *it, m );
    if( !tt )
    {
      Error("Cannot instanciate the tool '" + *it + "', check your syntax").ignore();
      continue;
    }
    if (msgLevel(MSG::VERBOSE)) verbose() << "locTools: Part " << P->info() << " inherits "
                                          << tt->type() << endreq;
    P->addTool( tt );
  }
}
//=============================================================================
/// get (MC)Particle tools
template<class ITUPLETOOL>
std::vector<std::string> getParticleTools(const std::vector< ITUPLETOOL* > pTools ) const
{
  std::vector<std::string> ret;
  ret.reserve( pTools.size() );
  for ( typename std::vector<ITUPLETOOL*>::const_iterator it = pTools.begin();
        pTools.end() != it; ++it ) { ret.push_back( (*it)->type() ); }
  return ret;
}
//=============================================================================}
