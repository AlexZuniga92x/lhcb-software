//##############################################################
// Example of DaVinci job Options
// to run BTagging with an event selection
//##############################################################
#pragma print off
#include "$DAVINCIROOT/options/DaVinciCommon.opts"
#pragma print on
#include "$DAVINCIROOT/options/DaVinciReco.opts"

//includes upstream/downstream tracks (not mandatory) 
ChargedProtoPAlg.VeloTTTracks = true ;

////--------------------------------------------------------------
///example Bd Channel Selection -------------------
//#include "$B2HHROOT/options/DoTDRselBd2PiPi.opts"
//BTagging.PhysDesktop.InputLocations = { "Phys/TDRselBd2PiPi" };
//TamperingL1Alg.SelectionName = "TDRselBd2PiPi";

///example Bs Channel Selection -----------------
//#include "$B2HHROOT/options/DoTDRselBs2KK.opts"
//BTagging.PhysDesktop.InputLocations = { "Phys/TDRselBs2KK" };
//TamperingL1Alg.SelectionName = "TDRselBs2KK";

//#include "$BS2DSHROOT/options/DoTDRselBs2DsK.opts"
//BTagging.PhysDesktop.InputLocations = { "Phys/TDRselBs2DsK" };
//TamperingL1Alg.SelectionName = "TDRselBs2DsK";

///or Cheated Selection ----------------------------
#include "$FLAVOURTAGGINGCHECKEROPTS/CheatedSelection.opts"

///---------------------------------------------------------------
//   L1 buffer TAMPERING
///---------------------------------------------------------------
// if you uncomment this part, to allow for tampering,
// you will have slightly better performance, but
// you need to run the Trigger first (uncomment what follows)
//--------
// #include "$DAVINCIROOT/options/L0.opts"
// #include "$TRGSYSROOT/options/L1.opts"
// #include "$TAMPERINGROOT/options/TamperingCommon.opts"
// TamperingL1Alg.InputType = "Selection";
// TamperingL0Alg.InputType = @TamperingL1Alg.InputType ;
// TamperingL0Alg.SelectionName = @TamperingL1Alg.SelectionName ;
// BTagging.BTaggingTool.RequireTrigger     = true;
// BTagging.BTaggingTool.RequireL1Tampering = true; 
// tampering info is used only with NNet combination of taggers:
// BTagging.BTaggingTool.CombinationTechnique = "NNet";
///---------------------------------------------------------------

///---------------------------------------------------------------
///               BTagging
///---------------------------------------------------------------
ApplicationMgr.DLLs   += { "VeloDAQ" };
ApplicationMgr.TopAlg += { "DecodeVeloRawBuffer" };

#include "$FLAVOURTAGGINGOPTS/BTagging.opts"
BTagging.OutputLevel = 3;

///---------------------------------------------------------------
/// 		BTaggingChecker
/// example of an optional algorithm that reads in what is in TES
///---------------------------------------------------------------
#include "$FLAVOURTAGGINGCHECKEROPTS/BTaggingChecker.opts"

//---------------------------------------------------------------
// Number of events to process, skip and printing frequency
MessageSvc.Format = "% F%40W%S%7W%R%T %0W%M";
ApplicationMgr.EvtMax    = 100;
EventSelector.FirstEvent = 1;
EventSelector.PrintFreq  = 1;

//---------------------------------------------------------------
// Example input data 
//---------------------------------------------------------------
EventSelector.Input = {"DATAFILE='PFN:rfio:/castor/cern.ch/user/p/pkoppenb/L0L1TDR-Bs2DsK11.dst' TYP='POOL_ROOTTREE' OPT='READ'"}; //BsDsK selected events
//EventSelector.Input = {"DATAFILE='PFN:rfio:/castor/cern.ch/lhcb/DC04/00000641_00000005_5.dst' TYP='POOL_ROOTTREE' OPT='READ'"}; //again BsDsK events
//EventSelector.Input = {"DATAFILE='PFN:rfio:/castor/cern.ch/user/p/pkoppenb/L0L1TDR-Bd2PiPi11.dst' TYP='POOL_ROOTTREE' OPT='READ'"}; //Bd2PiPi selected events
//---------------------------------------------------------------
