
private:

//=============================================================================
// The templated method filling the tuple for Particles and MCParticles
//=============================================================================
/// The templated method that does it all
template<class TYPE>
StatusCode fill( const std::vector<const TYPE*>& dauts     /// daughters
                 , const std::string& head                 /// header
                 , Tuples::Tuple& tuple                    /// tuple
                 , bool revert ) /// revert all PID (because mother is antiparticle)
{                         

  const std::string prefix = fullName(head);
  bool test = true;

  std::set<std::string> usedNames;
  unsigned int add = 0;
  
  for ( typename std::vector<const TYPE*>::const_iterator i = dauts.begin(); 
        i != dauts.end(); ++i )
  {
    const std::string n1 = particleName( (*i)->particleID(), revert );
    const Gaudi::LorentzVector& p1 = (*i)->momentum() ;
    for ( typename std::vector<const TYPE*>::const_iterator j = dauts.begin(); 
          i != j; ++j ) 
    {
      const std::string n2 = particleName( (*j)->particleID(), revert );
      const Gaudi::LorentzVector p = p1 + (*j)->momentum();
      const std::string basename = prefix+"_Dalitz_"+n1+"_"+n2+"_M2";
      std::string name = basename;
      bool renamed = false;
      while ( usedNames.find(name) != usedNames.end() ) 
      {
        renamed = true;
        name = basename + "_" + boost::lexical_cast<std::string>(add++);
      }
      if ( renamed ) Info("Renaming duplicate to "+name,StatusCode::SUCCESS,1);
      if (msgLevel(MSG::VERBOSE))
      {
        verbose() << (*i)->particleID().pid() << " " << (*j)->particleID().pid() 
                  << " " << name << " " << revert << endmsg ;
      }
      test &= tuple->column( name, p .M2() );
    }
  }

  return StatusCode(test);
}

/// get name of particle or anti-particle
std::string particleName( const LHCb::ParticleID& id, bool revert ) const
{
  const LHCb::ParticleProperty* ppp = ppSvc()->find( id );
  if ( !ppp )
  {
    std::ostringstream mess;
    mess << "Unknown ParticleID " << id;
    Exception( mess.str() );
  }
  return Decays::escape( ( revert ?
                           ppp->antiParticle()->particle() :
                           ppp->particle() ) ) ;
}

/// get particle property serivce
const LHCb::IParticlePropertySvc* ppSvc() const
{
  return m_ppSvc;
}

public:

StatusCode initialize()
{
  const StatusCode sc = TupleToolBase::initialize();
  if ( sc.isSuccess() ) 
  {
    m_ppSvc = svc<LHCb::IParticlePropertySvc>("LHCb::ParticlePropertySvc", true );
  }
  return sc;
}

private:

LHCb::IParticlePropertySvc* m_ppSvc ;
