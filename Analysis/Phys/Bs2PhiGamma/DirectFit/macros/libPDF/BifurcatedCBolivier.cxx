/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h"
#include "BifurcatedCB.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include "RooComplex.h"
#include <math.h> 

#include "TMath.h" 

ClassImp(BifurcatedCB) 

 BifurcatedCB::BifurcatedCB(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _mean,
                        RooAbsReal& _sigma,
                        RooAbsReal& _a1,
                        RooAbsReal& _n1,
                        RooAbsReal& _a2,
                        RooAbsReal& _n2) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   mean("mean","mean",this,_mean),
   sigma("sigma","sigma",this,_sigma),
   a1("a1","a1",this,_a1),
   n1("n1","n1",this,_n1),
   a2("a2","a2",this,_a2),
   n2("n2","n2",this,_n2)
 { 
 } 


 BifurcatedCB::BifurcatedCB(const BifurcatedCB& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   mean("mean",this,other.mean),
   sigma("sigma",this,other.sigma),
   a1("a1",this,other.a1),
   n1("n1",this,other.n1),
   a2("a2",this,other.a2),
   n2("n2",this,other.n2)
 { 
 } 



 Double_t BifurcatedCB::evaluate() const {

  double t = (x-mean)/sigma;
  double func = 0;

  if (a1 < 0) return 0.;
  if (a2 > 0) return 0.;

  if (n1 < 0) return 0.;
  if (n2 < 0) return 0.;


  double absAlpha = fabs((double)a1);
  double absAlpha2 = fabs((double)a2);

  if (t >= -absAlpha && t <= +absAlpha2) {
    func= 1./sigma/sqrt(2*3.14159)*exp(-0.5*t*t);
  }
  else if (t < -absAlpha){
    double a = n1/absAlpha;
    double b= n1/absAlpha - absAlpha - t;
    func= 1./sigma/sqrt(2*3.14159)*exp(-0.5*absAlpha*absAlpha) *pow(a/b,n1);
  }
  else if( t > absAlpha2) {
    double a =  pow(n2/absAlpha2,n2)*exp(-0.5*absAlpha2*absAlpha2);
    double b= n2/absAlpha2 - absAlpha2;
    func= 1./sigma/sqrt(2*3.14159)*(a/pow(b + t, n2));
  }
  return func;
}
