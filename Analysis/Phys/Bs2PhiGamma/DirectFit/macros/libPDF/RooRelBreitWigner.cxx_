/*****************************************************************************
 * Project: RooFit                                                           *
 * Package: RooFitModels                                                     *
 *****************************************************************************/

//////////////////////////////////////////////////////////////////////////////
//
// BEGIN_HTML
// Class RooRelBreitWigner is a RooAbsPdf implementation 
// that models a relativistic Breit-Wigner shape
// See:
// The European Physical Journal C - Particles and Fields
// Volume 50, Number 2, 315-328, DOI: 10.1140/epjc/s10052-007-0237-3
// For details. 
//
// END_HTML
//


#include "RooFit.h"

#include "Riostream.h"
#include "Riostream.h"
#include <math.h>

#include "RooRelBreitWigner.h"
#include "RooAbsReal.h"
#include "RooRealVar.h"
// #include "RooFitTools/RooRandom.h"

ClassImp(RooRelBreitWigner)


//_____________________________________________________________________________
RooRelBreitWigner::RooRelBreitWigner(const char *name, const char *title,
			 RooAbsReal& _x, RooAbsReal& _mean,
			 RooAbsReal& _width, RooAbsReal& _md1, RooAbsReal& _md2) :
  RooAbsPdf(name,title),
  x("x","Dependent",this,_x),
  mean("mean","Mean",this,_mean),
  width("width","Width",this,_width),
  md1("md1","md1",this,_md1),
  md2("md2","md2",this,_md2)
{
}

//_____________________________________________________________________________
RooRelBreitWigner::RooRelBreitWigner(const RooRelBreitWigner& other, const char* name) : 
  RooAbsPdf(other,name), x("x",this,other.x), mean("mean",this,other.mean),
  width("width",this,other.width),  md1("md1",this,other.md1),  md2("md2",this,other.md2)
{
}

//_____________________________________________________________________________
Double_t RooRelBreitWigner::evaluate() const
{

  Double_t q = sqrt((x*x-((md1+md2)*(md1+md2))) *(x*x-((md1-md2)*(md1-md2))))/(2*x);
  Double_t qm0 = sqrt((mean*mean-((md1+md2)*(md1+md2))) *(mean*mean-((md1-md2)*(md1-md2))))/(2*mean);
  Double_t G = width*(q/qm0)*(q/qm0)*(q/qm0)*(mean/x);
  return (x*mean*G)/((mean*mean - x*x)*(mean*mean - x*x)+(mean*G*mean*G));
}
