//Created by Murilo Rangel

// ============================================================================
// LoKi
// ============================================================================
#include "LoKi/LoKi.h"
#include "LoKi/LoKiAlgoMC.h"
#include "LoKi/Algo.h"
#include "LoKi/CoreCuts.h"
#include "LoKi/GenTypes.h"
#include "LoKi/GenTypes.h"
#include "LoKi/GenParticleCuts.h"
#include "LoKi/Vertices.h"
#include "LoKi/VertexCast.h"
#include "LoKi/Particles.h"
#include "LoKi/ParticleCuts.h"
#include "LoKi/VertexCuts.h"
#include "LoKi/ParticleContextCuts.h"
#include "Kernel/IParticle2MCAssociator.h"
#include <iostream>
#include "stdio.h"
#include "stdlib.h"

#include "JetUtils.h"

#include <Kernel/IJetMaker.h>

using namespace LHCb;
using namespace LoKi;
using namespace LoKi::GenTypes;
using namespace LoKi::Types;
using namespace LoKi::Cuts;
using namespace LoKi::Particles;
using namespace LoKi::Vertices;

LOKI_MCALGORITHM(PFJetsMC)
{

	const IJetMaker* jetMaker = tool<IJetMaker> ( "LoKi::FastJetMaker");//FastJetMaker",this ) ;                                                                          
	IJetMaker::Jets   mcjets,hepgenjets,vbpvhepgenjets,mcjetsinLHCb; 

  Tuple tuple_stdpfjets = nTuple("StdPFJets","StdPFJets");
  Tuple tuple_mcpfjets = nTuple("MCPFJets","MCPFJets");
  Tuple tuple_genpfjets = nTuple("GENPFJets","GENPFJets");
  Tuple tuple_VBPVgenpfjets = nTuple("VBPVGENPFJets","VBPVGENPFJets");
  Tuple tuple_VB = nTuple("VB","VB");

  const double MaxRdistance = 0.6;
  unsigned int jetcounter = 0;

  LoKi::GenTypes::GRange GFinal		= gselect( "GFinal" , 1 == GSTATUS || 999 == GSTATUS);

  LoKi::GenTypes::GRange GQuarks	= gselect( "GQuarks" , (4 == GABSID || 2 == GABSID || 1 == GABSID || 3 == GABSID || 21 == GABSID || 5 == GABSID || 6 == GABSID ) && GPT > 2000); 

  //LoKi::GenTypes::GRange GVBON		= gselect( "GVBON" , GABSID == 1000022 || 24 == GABSID || 23 == GABSID );
  LoKi::GenTypes::GRange GVB		= gselect( "GVB" , GABSID == 1000022 || 24 == GABSID || 23 == GABSID );

  MCRange mcparticles = mcselect("mcparticles", MCNENDVERTICES == 0);

  LHCb::Particle::Range rstdjets	= get<LHCb::Particle::Range>("Phys/StdJets/Particles");

  //tuple_stdpfjets->farray("stdjet_pt",PT,rstdjets.begin(),rstdjets.end(),"NMaxjets",10000);
  //tuple_stdpfjets->farray("stdjet_p",P,rstdjets.begin(),rstdjets.end(),"NMaxjets",10000);
  tuple_stdpfjets->farray("stdjet_px",PX,
				"stdjet_py",PY,
				"stdjet_pz",PZ,
				"stdjet_e",E,rstdjets.begin(),rstdjets.end(),"NMaxjets",10000);
  tuple_stdpfjets->farray("stdjet_pdgid",ID,rstdjets.begin(),rstdjets.end(),"NMaxjets",10000);
  //tuple_stdpfjets->farray("stdjet_eta",ETA,rstdjets.begin(),rstdjets.end(),"NMaxjets",10000);
  //tuple_stdpfjets->farray("stdjet_phi",PHI,rstdjets.begin(),rstdjets.end(),"NMaxjets",10000);
  tuple_stdpfjets->farray("stdjet_ndaughters",NDAUGHTERS,rstdjets.begin(),rstdjets.end(),"NMaxjets",10000);

  tuple_stdpfjets->column("NumberOfstdjets",rstdjets.size());
   
  std::vector<const LHCb::Particle *> jetdaughters;
  std::vector<unsigned int> jetcounterdaughters;

  jetcounter = 0;

  for (LHCb::Particle::Range::iterator ijet = rstdjets.begin() ; ijet != rstdjets.end() ; ++ijet)
  {
	  const LHCb::Particle * jet = * ijet;
	  std::vector<const LHCb::Particle *> daughtersvector = jet->daughtersVector();
	  jetcounter++;

	  for (std::vector<const LHCb::Particle *>::iterator idaughter = daughtersvector.begin() ; idaughter != daughtersvector.end() ; ++idaughter){

		  const LHCb::Particle * daughter = *idaughter;
		  jetdaughters.push_back(daughter);
		  jetcounterdaughters.push_back(jetcounter);

	  }
  }
  

  //tuple_stdpfjets->farray("jetdaughters_pt",PT,jetdaughters.begin(),jetdaughters.end(),"NMaxdaughters",10000);
  //tuple_stdpfjets->farray("jetdaughters_p",P,jetdaughters.begin(),jetdaughters.end(),"NMaxdaughters",10000);
  tuple_stdpfjets->farray("jetdaughters_px",PX,
				"jetdaughters_py",PY,
				"jetdaughters_pz",PZ,
				"jetdaughters_e",E,jetdaughters.begin(),jetdaughters.end(),"NMaxdaughters",10000);
  tuple_stdpfjets->farray("jetdaughters_jetid",jetcounterdaughters,"NMaxdaughters",10000);
  tuple_stdpfjets->farray("jetdaughters_pdgid",ID,
			  "jetdaughters_info",INFO4JET,jetdaughters.begin(),jetdaughters.end(),"NMaxdaughters",10000);
  //tuple_stdpfjets->farray("jetdaughters_eta",ETA,jetdaughters.begin(),jetdaughters.end(),"NMaxdaughters",10000);
  //tuple_stdpfjets->farray("jetdaughters_phi",PHI,jetdaughters.begin(),jetdaughters.end(),"NMaxdaughters",10000);

  std::vector<int> Ngendaughters;
  std::vector<const HepMC::GenParticle *> jetgendaughters;
  std::vector<const LHCb::Particle *> genjets;
  std::vector<unsigned int> jetcountergenjetsdaughters;
  jetcounter = 0;

  for (LHCb::Particle::Range::iterator ijet = rstdjets.begin() ; ijet != rstdjets.end() ; ++ijet)
   {
           const LHCb::Particle * jet = * ijet;
	   int numberofgendaughters = 0;
	   LHCb::Particle * GenJet = new LHCb::Particle() ;//98 = jetid
	   LorentzVector * genjet4vector = new LorentzVector(0,0,0,0);
	   jetcounter++;

	   for (LoKi::GenTypes::GRange::iterator igen = GFinal.begin() ; igen != GFinal.end() ; ++igen)
	   {

	           const HepMC::GenParticle * gen = * igen;

		   double deltaPhi = std::abs(jet->momentum().phi() - gen->momentum().phi());
		   if(deltaPhi > std::acos(-1)) deltaPhi = 2*std::acos(-1) - deltaPhi;
		   double deltaEta = jet->momentum().eta() - gen->momentum().eta(); 

	           if (std::sqrt( std::pow(deltaPhi,2) + std::pow(deltaEta,2)) < MaxRdistance)
	           {
	        	   jetgendaughters.push_back(gen);
			   jetcountergenjetsdaughters.push_back(jetcounter);
	        	   numberofgendaughters++;
			   *genjet4vector += (LorentzVector(gen->momentum().px(),gen->momentum().py(),gen->momentum().pz(),gen->momentum().e()));
	           }


	   }

	   GenJet->setMomentum(*genjet4vector);
	   Ngendaughters.push_back(numberofgendaughters);
	   genjets.push_back(GenJet);
   }

  tuple_stdpfjets->farray("stdjet_ngendaughters",Ngendaughters,"NMaxjets",10000);

  //tuple_stdpfjets->farray("jetgendaughters_jetid",jetcountergenjetsdaughters,"NMaxgendaughters",10000);
  //tuple_stdpfjets->farray("jetgendaughters_pt",GPT,jetgendaughters.begin(),jetgendaughters.end(),"NMaxgendaughters",10000);
  //tuple_stdpfjets->farray("jetgendaughters_p",GP,jetgendaughters.begin(),jetgendaughters.end(),"NMaxgendaughters",10000);
  tuple_stdpfjets->farray("jetgendaughters_px",GPX,
			  "jetgendaughters_py",GPY,
			  "jetgendaughters_pz",GPZ,
			  "jetgendaughters_e",GE,jetgendaughters.begin(),jetgendaughters.end(),"NMaxgendaughters",10000);
  tuple_stdpfjets->farray("jetgendaughters_pdgid",GID,jetgendaughters.begin(),jetgendaughters.end(),"NMaxgendaughters",10000);
  //tuple_stdpfjets->farray("jetgendaughters_eta",GETA,jetgendaughters.begin(),jetgendaughters.end(),"NMaxgendaughters",10000);
  //tuple_stdpfjets->farray("jetgendaughters_phi",GPHI,jetgendaughters.begin(),jetgendaughters.end(),"NMaxgendaughters",10000);

  //tuple_stdpfjets->farray("genjet_p",PT,genjets.begin(),genjets.end(),"NMaxgenjets",10000);
  //tuple_stdpfjets->farray("genjet_pt",P,genjets.begin(),genjets.end(),"NMaxgenjets",10000);
  tuple_stdpfjets->farray("genjet_px",PX,
			  "genjet_py",PY,
			  "genjet_pz",PZ,
			  "genjet_e",E,genjets.begin(),genjets.end(),"NMaxgenjets",10000);
  //tuple_stdpfjets->farray("genjet_eta",ETA,genjets.begin(),genjets.end(),"NMaxgenjets",10000);
  //tuple_stdpfjets->farray("genjet_phi",PHI,genjets.begin(),genjets.end(),"NMaxgenjets",10000);


  std::vector<const HepMC::GenParticle *> jetqgmothers;
  std::vector<unsigned int> jetcounterjetqgmothers;
  //std::vector<const LHCb::Particle *> genjets;

  jetcounter = 0;

  for (LHCb::Particle::Range::iterator ijet = rstdjets.begin() ; ijet != rstdjets.end() ; ++ijet)
   {
           const LHCb::Particle * jet = * ijet;
	   jetcounter++;

	   for (LoKi::GenTypes::GRange::iterator iquark = GQuarks.begin() ; iquark != GQuarks.end() ; ++iquark)
	   {

	           const HepMC::GenParticle * quark = * iquark;

		   double deltaPhi = std::abs(jet->momentum().phi() - quark->momentum().phi());
		   if(deltaPhi > std::acos(-1)) deltaPhi = 2*std::acos(-1) - deltaPhi;
		   double deltaEta = jet->momentum().eta() - quark->momentum().eta(); 

	           if (std::sqrt( std::pow(deltaPhi,2) + std::pow(deltaEta,2)) < MaxRdistance)
	           {
			   jetcounterjetqgmothers.push_back(jetcounter);
	        	   jetqgmothers.push_back(quark);
	           }


	   }

   }


  //tuple_stdpfjets->farray("jetqgmothers_pt",GPT,jetqgmothers.begin(),jetqgmothers.end(),"NMaxqgmothers",10000);
  //tuple_stdpfjets->farray("jetqgmothers_p",GP,jetqgmothers.begin(),jetqgmothers.end(),"NMaxqgmothers",10000);
  tuple_stdpfjets->farray("jetqgmothers_px",GPX,
			  "jetqgmothers_py",GPY,
			  "jetqgmothers_pz",GPZ,
			  "jetqgmothers_e",GE,jetqgmothers.begin(),jetqgmothers.end(),"NMaxqgmothers",10000);
  tuple_stdpfjets->farray("jetqgmothers_jetid",jetcounterjetqgmothers,"NMaxqgmothers",10000);
  tuple_stdpfjets->farray("jetqgmothers_pdgid",GID,jetqgmothers.begin(),jetqgmothers.end(),"NMaxqgmothers",10000);
  //tuple_stdpfjets->farray("jetqgmothers_eta",GETA,jetqgmothers.begin(),jetqgmothers.end(),"NMaxqgmothers",10000);
  //tuple_stdpfjets->farray("jetqgmothers_phi",GPHI,jetqgmothers.begin(),jetqgmothers.end(),"NMaxqgmothers",10000);

  //std::vector<const LHCb::Particle *> mcp4jets;
  //for (MCRange::iterator imcp = mcparticles.begin() ; imcp != mcparticles.end() ; ++imcp)
  //  {
  //          const LHCb::MCParticle * mcp = * imcp;
  //          LHCb::Particle * part = new LHCb::Particle();
  //          part->setMomentum(mcp->momentum());
  //          mcp4jets.push_back(part);
  //  }

  //StatusCode sc = jetMaker -> makeJets ( mcp4jets , mcjets ) ;                                                                                    
  //tuple_mcpfjets->farray("mcjet_pt",PT,mcjets.begin(),mcjets.end(),"NMaxmcjets",10000);
  //tuple_mcpfjets->farray("mcjet_p",P,mcjets.begin(),mcjets.end(),"NMaxmcjets",10000);
  //tuple_mcpfjets->farray("mcjet_px",PX,mcjets.begin(),mcjets.end(),"NMaxmcjets",10000);
  //tuple_mcpfjets->farray("mcjet_py",PY,mcjets.begin(),mcjets.end(),"NMaxmcjets",10000);
  //tuple_mcpfjets->farray("mcjet_pz",PZ,mcjets.begin(),mcjets.end(),"NMaxmcjets",10000);
  //tuple_mcpfjets->farray("mcjet_e",E,mcjets.begin(),mcjets.end(),"NMaxmcjets",10000);
  //tuple_mcpfjets->farray("mcjet_pdgid",ID,mcjets.begin(),mcjets.end(),"NMaxmcjets",10000);
  //tuple_mcpfjets->farray("mcjet_eta",ETA,mcjets.begin(),mcjets.end(),"NMaxmcjets",10000);
  //tuple_mcpfjets->farray("mcjet_phi",PHI,mcjets.begin(),mcjets.end(),"NMaxmcjets",10000);


  std::vector<const LHCb::Particle *> genp4jets;
  for (LoKi::GenTypes::GRange::iterator igenp = GFinal.begin() ; igenp != GFinal.end() ; ++igenp)
    {
            const HepMC::GenParticle * genp = * igenp;
	    LHCb::Particle * part = new LHCb::Particle();
	    LorentzVector gen4vectortmp(genp->momentum().px(),genp->momentum().py(),genp->momentum().pz(),genp->momentum().e());
	    part->setMomentum(gen4vectortmp);
	    part->setParticleID(LHCb::ParticleID(genp->pdg_id()));
	    genp4jets.push_back(part);
    }

  StatusCode sc2 = jetMaker -> makeJets ( genp4jets , hepgenjets ) ;                                                                                    
  //tuple_genpfjets->farray("hepgenjet_pt",PT,hepgenjets.begin(),hepgenjets.end(),"NMaxhepgenjets",10000);
  //tuple_genpfjets->farray("hepgenjet_p",P,hepgenjets.begin(),hepgenjets.end(),"NMaxhepgenjets",10000);
  tuple_genpfjets->farray("hepgenjet_px",PX,
			  "hepgenjet_py",PY,
			  "hepgenjet_pz",PZ,
			  "hepgenjet_e",E,hepgenjets.begin(),hepgenjets.end(),"NMaxhepgenjets",10000);
  tuple_genpfjets->farray("hepgenjet_pdgid",ID,
			  "hepgenjet_ndaughters",NDAUGHTERS,hepgenjets.begin(),hepgenjets.end(),"NMaxhepgenjets",10000);
  //tuple_genpfjets->farray("hepgenjet_eta",ETA,hepgenjets.begin(),hepgenjets.end(),"NMaxhepgenjets",10000);
  //tuple_genpfjets->farray("hepgenjet_phi",PHI,hepgenjets.begin(),hepgenjets.end(),"NMaxhepgenjets",10000);

  HepMC::GenVertex *GV;
  LHCb::Vertex *PV = new LHCb::Vertex();
  HepMC::GenEvent *VBosonEvent;

  for(LoKi::GenTypes::GRange::iterator ik1 = GVB.begin(); GVB.end() != ik1 ; ++ik1 ) {
	  const HepMC::GenParticle *Vgen = *ik1;

	  if(ik1==GVB.begin()) {
		  GV = Vgen->production_vertex(); VBosonEvent = Vgen->parent_event();
		  const Gaudi::XYZPoint xyz(GV->point3d().x(),GV->point3d().y(),GV->point3d().z());
		  PV->setPosition(xyz);
		  tuple_VB->column("V_px",Vgen->momentum().px());
		  tuple_VB->column("V_py",Vgen->momentum().py());
		  tuple_VB->column("V_pz",Vgen->momentum().pz());
		  tuple_VB->column("V_e",Vgen->momentum().e());
	  }

	  break;
  }

  std::vector<const HepMC::GenParticle *> genparts_from_pv_vboson;

  for(LoKi::GenTypes::GRange::iterator ik1 = GFinal.begin(); GFinal.end() != ik1 ; ++ik1 ) {
    const HepMC::GenParticle *gen = *ik1;
    if(gen->momentum().pz()<0) continue;
    if(VBosonEvent->signal_process_id() == gen->parent_event()->signal_process_id()) {

            genparts_from_pv_vboson.push_back(gen);

    }
  }

  std::vector<const LHCb::Particle *> vbpvgenp4jets;
  for (std::vector<const HepMC::GenParticle *>::iterator igenp = genparts_from_pv_vboson.begin() ; igenp != genparts_from_pv_vboson.end() ; ++igenp)
    {
            const HepMC::GenParticle * genp = * igenp;
	    LHCb::Particle * part = new LHCb::Particle();
	    LorentzVector gen4vectortmp(genp->momentum().px(),genp->momentum().py(),genp->momentum().pz(),genp->momentum().e());
	    part->setMomentum(gen4vectortmp);
	    part->setParticleID(LHCb::ParticleID(genp->pdg_id()));
	    vbpvgenp4jets.push_back(part);
    }

  sc2 = jetMaker -> makeJets ( vbpvgenp4jets , vbpvhepgenjets ) ;                                                                       

  //tuple_VBPVgenpfjets->farray("vbpvhepgenjet_pt",PT,vbpvhepgenjets.begin(),vbpvhepgenjets.end(),"NMaxvbpvhepgenjets",10000);
  //tuple_VBPVgenpfjets->farray("vbpvhepgenjet_p",P,vbpvhepgenjets.begin(),vbpvhepgenjets.end(),"NMaxvbpvhepgenjets",10000);
  tuple_VBPVgenpfjets->farray("vbpvhepgenjet_px",PX,
				  "vbpvhepgenjet_py",PY,
				  "vbpvhepgenjet_pz",PZ,
				  "vbpvhepgenjet_e",E,vbpvhepgenjets.begin(),vbpvhepgenjets.end(),"NMaxvbpvhepgenjets",10000);
  tuple_VBPVgenpfjets->farray("vbpvhepgenjet_pdgid",ID,
				  "vbpvhepgenjet_ndaughters",NDAUGHTERS,vbpvhepgenjets.begin(),vbpvhepgenjets.end(),"NMaxvbpvhepgenjets",10000);
  //tuple_VBPVgenpfjets->farray("vbpvhepgenjet_eta",ETA,vbpvhepgenjets.begin(),vbpvhepgenjets.end(),"NMaxvbpvhepgenjets",10000);
  //tuple_VBPVgenpfjets->farray("vbpvhepgenjet_phi",PHI,vbpvhepgenjets.begin(),vbpvhepgenjets.end(),"NMaxvbpvhepgenjets",10000);

  tuple_VB->write();
  tuple_VBPVgenpfjets->write();
  tuple_genpfjets->write();
  //tuple_mcpfjets->write();
  tuple_stdpfjets->write();

  return StatusCode::SUCCESS ;

}
