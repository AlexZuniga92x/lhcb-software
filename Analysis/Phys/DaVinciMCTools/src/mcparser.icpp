#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define yyparse MCDecayFinder::yparse
#define yylex MCDecayFinder::ylex
#define yyerror MCDecayFinder::yerror
#define yychar MCDecayFinder::ychar
#define yyval MCDecayFinder::yval
#define yylval MCDecayFinder::ylval
#define yydebug MCDecayFinder::ydebug
#define yynerrs MCDecayFinder::ynerrs
#define yyerrflag MCDecayFinder::yerrflag
#define yyss MCDecayFinder::yss
#define yyssp MCDecayFinder::yssp
#define yyvs MCDecayFinder::yvs
#define yyvsp MCDecayFinder::yvsp
#define yylhs MCDecayFinder::ylhs
#define yylen MCDecayFinder::ylen
#define yydefred MCDecayFinder::ydefred
#define yydgoto MCDecayFinder::ydgoto
#define yysindex MCDecayFinder::ysindex
#define yyrindex MCDecayFinder::yrindex
#define yygindex MCDecayFinder::ygindex
#define yytable MCDecayFinder::ytable
#define yycheck MCDecayFinder::ycheck
#define yyname MCDecayFinder::yname
#define yyrule MCDecayFinder::yrule
#define YYPREFIX "MCDecayFinder::y"
#define YYSTYPE MCDecayFinder::YYSTYPE
#if 0
  char *text;
  double dval;
  Quarks quarkval;
  Quantums quantumval;
  Descriptor *desc;
  ParticleMatcher *match;
  std::vector<ParticleMatcher *> *mvect;
#endif
#define LPAREN 257
#define RPAREN 258
#define LBRACK 259
#define OSCIL 260
#define CCONJ 261
#define LBRACE 262
#define RBRACE 263
#define LANGLE 264
#define RANGLE 265
#define ARROW 266
#define RARROW 267
#define COMMA 268
#define EXCLAM 269
#define ELIPSIS 270
#define PP 271
#define QMARK 272
#define METAX 273
#define EQEQUAL 274
#define LESSEQUAL 275
#define GREATEREQUAL 276
#define NOTEQUAL 277
#define UP_QUARK 278
#define DOWN_QUARK 279
#define CHARM_QUARK 280
#define STRANGE_QUARK 281
#define TOP_QUARK 282
#define BOTTOM_QUARK 283
#define ANTI_UP_QUARK 284
#define ANTI_DOWN_QUARK 285
#define ANTI_CHARM_QUARK 286
#define ANTI_STRANGE_QUARK 287
#define ANTI_TOP_QUARK 288
#define ANTI_BOTTOM_QUARK 289
#define CHARGE 290
#define BARYON 291
#define LEPTON 292
#define ISOSPIN 293
#define TOTALSPIN 294
#define SPIN 295
#define ANGULAR 296
#define G_PARITY 297
#define CP_PARITY 298
#define C_PARITY 299
#define P_PARITY 300
#define CHARM 301
#define STRANGE 302
#define TOP 303
#define BOTTOM 304
#define NAME 305
#define VALUE 306
#define YYERRCODE 256
short MCDecayFinder::ylhs[] = {                                        -1,
    0,    0,    0,    0,    0,    0,    3,    3,   13,   13,
   13,   13,   13,   14,   14,    9,    9,    9,    9,    8,
    8,    8,    4,    4,    5,    5,    6,    6,    6,    6,
    6,    7,    7,    7,    7,   10,   10,   11,   11,   11,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,   12,   12,   12,   12,   12,   12,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,
};
short MCDecayFinder::ylen[] = {                                         2,
    3,    1,    3,    3,    1,    3,    3,    3,    3,    3,
    3,    3,    1,    3,    1,    3,    3,    3,    1,    1,
    2,    1,    2,    1,    2,    1,    3,    3,    3,    3,
    1,    3,    2,    1,    0,    2,    1,    3,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    3,    3,    3,    3,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,
};
short MCDecayFinder::ydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,   22,   20,    0,    2,
   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   15,    0,    0,    0,   19,    0,    0,   59,   60,   61,
   62,   63,   64,   65,   66,   69,   67,   68,   70,   71,
   72,   73,    0,    0,   37,   21,    0,    0,    0,    0,
    0,    0,    1,    9,    6,   11,    0,    0,    0,   10,
   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
   51,   52,    0,   36,    0,    0,    0,    0,    0,    0,
   12,    0,    0,    0,    3,    0,   26,   31,    4,    7,
    8,   17,   16,    0,   14,   18,    0,   56,   57,   53,
   54,   55,   58,    0,    0,   34,    0,    0,   23,   25,
   38,   27,   28,   30,    0,   29,   32,
};
short MCDecayFinder::ydgoto[] = {                                       9,
   73,   43,   10,   85,   86,   87,  107,   25,   88,   44,
   74,   45,   19,   22,
};
short MCDecayFinder::ysindex[] = {                                   -238,
 -218, -218, -249, -192, -305, -193,    0,    0,    0,    0,
    0, -176, -249, -249, -192, -220,    0, -206, -176, -221,
    0, -199, -258, -192,    0, -188, -165,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -182, -216,    0,    0, -209, -209, -209, -209,
 -118, -207,    0,    0,    0,    0, -249, -118, -194,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -165,    0, -230, -179, -166, -162, -161, -160,
    0, -218, -209, -209,    0, -227,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -165,    0,    0,    0,
    0,    0,    0, -170, -128,    0, -191, -137,    0,    0,
    0,    0,    0,    0, -209,    0,    0,
};
short MCDecayFinder::yrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  147,    0,    0,    0,    0, -133,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -120,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -116,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -189, -127,    0,    1,    0,    0,    0,    0,
    0,    0,    0, -129,    0,    0, -115,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -204,    0,    0,
};
short MCDecayFinder::ygindex[] = {                                      0,
  -61,    0,    7,  -21,    0,  -18,   67,    2,    4,   -2,
    0,    0,  152,  150,
};
#define YYTABLESIZE 262
short MCDecayFinder::ytable[] = {                                      46,
   24,   11,   17,   17,   18,   21,   21,   16,   20,   23,
    5,   97,   52,    7,   24,   51,   18,   21,    1,    5,
    2,   59,    7,    3,   58,    4,   89,   90,   91,   82,
    5,   83,    6,    7,   84,  111,   24,   53,   13,   55,
   14,    5,  109,    3,    7,   15,    8,   82,   81,   83,
    5,   54,   84,    7,   24,    8,   33,   94,   33,    5,
   95,   56,    7,   33,  106,  106,    8,  110,   57,  114,
   96,   35,   47,   48,   60,   98,  115,    8,   35,   57,
   27,   75,   76,   17,   51,  105,    8,  112,  104,   49,
   50,   77,   78,   79,   80,    8,  117,   28,   29,   30,
   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
   41,   42,   61,   62,   63,   64,   65,   66,   67,   68,
   69,   70,   71,   72,   19,  116,   99,   19,   18,  113,
  115,   18,   13,   13,   19,   35,   12,   12,   18,  100,
   35,   92,   93,  101,  102,  103,    5,   19,   40,   39,
  108,   12,   26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   24,    0,
    0,   24,
};
short MCDecayFinder::ycheck[] = {                                     305,
    0,    0,    1,    2,    1,    2,    3,    1,    2,  259,
  269,   73,   15,  272,  264,   14,   13,   14,  257,  269,
  259,   24,  272,  262,   23,  264,   48,   49,   50,  257,
  269,  259,  271,  272,  262,   97,  264,  258,  257,  261,
  259,  269,  270,  262,  272,  264,  305,  257,  265,  259,
  269,  258,  262,  272,  264,  305,  261,  265,  263,  269,
   57,  261,  272,  268,   83,   84,  305,   86,  268,  261,
  265,  261,  266,  267,  263,  306,  268,  305,  268,  268,
  273,  264,  265,   82,   83,   82,  305,  258,   82,  266,
  267,  274,  275,  276,  277,  305,  115,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,  289,  258,  263,  306,  261,  258,  258,
  268,  261,  266,  267,  268,  263,  266,  267,  268,  306,
  268,  260,  261,  306,  306,  306,    0,  268,  265,  265,
   84,    0,    3,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,   -1,
   -1,  261,
};
#define YYFINAL 9
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 306
#if YYDEBUG
char *MCDecayFinder::yname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"LPAREN","RPAREN","LBRACK",
"OSCIL","CCONJ","LBRACE","RBRACE","LANGLE","RANGLE","ARROW","RARROW","COMMA",
"EXCLAM","ELIPSIS","PP","QMARK","METAX","EQEQUAL","LESSEQUAL","GREATEREQUAL",
"NOTEQUAL","UP_QUARK","DOWN_QUARK","CHARM_QUARK","STRANGE_QUARK","TOP_QUARK",
"BOTTOM_QUARK","ANTI_UP_QUARK","ANTI_DOWN_QUARK","ANTI_CHARM_QUARK",
"ANTI_STRANGE_QUARK","ANTI_TOP_QUARK","ANTI_BOTTOM_QUARK","CHARGE","BARYON",
"LEPTON","ISOSPIN","TOTALSPIN","SPIN","ANGULAR","G_PARITY","CP_PARITY",
"C_PARITY","P_PARITY","CHARM","STRANGE","TOP","BOTTOM","NAME","VALUE",
};
char *MCDecayFinder::yrule[] = {
"$accept : start",
"start : LPAREN decay RPAREN",
"start : decay",
"start : PP ARROW daughters_el",
"start : PP RARROW daughters_el",
"start : mother",
"start : LBRACK decay CCONJ",
"decay : mother ARROW daughters_el",
"decay : mother RARROW daughters_el",
"mother : LPAREN particle_cc RPAREN",
"mother : LBRACE particle_list RBRACE",
"mother : LBRACK particle_list CCONJ",
"mother : LANGLE particle_wc RANGLE",
"mother : particle",
"particle_list : particle_list COMMA particle_cc",
"particle_list : particle_cc",
"particle_cc : LBRACK particle CCONJ",
"particle_cc : LBRACK particle OSCIL",
"particle_cc : LANGLE particle_wc RANGLE",
"particle_cc : particle",
"particle : NAME",
"particle : EXCLAM NAME",
"particle : QMARK",
"daughters_el : daughters ELIPSIS",
"daughters_el : daughters",
"daughters : daughters daughter",
"daughters : daughter",
"daughter : LPAREN decay RPAREN",
"daughter : LPAREN particle_cc RPAREN",
"daughter : LBRACE daughter_list RBRACE",
"daughter : LBRACK daughter_list CCONJ",
"daughter : particle_cc",
"daughter_list : daughter_list COMMA daughter",
"daughter_list : daughter_list COMMA",
"daughter_list : daughter",
"daughter_list :",
"particle_wc : METAX quarks",
"particle_wc : quantum_test",
"quarks : quark quark quark",
"quarks : quark quark",
"quarks : quark",
"quark : UP_QUARK",
"quark : DOWN_QUARK",
"quark : CHARM_QUARK",
"quark : STRANGE_QUARK",
"quark : TOP_QUARK",
"quark : BOTTOM_QUARK",
"quark : ANTI_UP_QUARK",
"quark : ANTI_DOWN_QUARK",
"quark : ANTI_CHARM_QUARK",
"quark : ANTI_STRANGE_QUARK",
"quark : ANTI_TOP_QUARK",
"quark : ANTI_BOTTOM_QUARK",
"quantum_test : quantum EQEQUAL VALUE",
"quantum_test : quantum LESSEQUAL VALUE",
"quantum_test : quantum GREATEREQUAL VALUE",
"quantum_test : quantum LANGLE VALUE",
"quantum_test : quantum RANGLE VALUE",
"quantum_test : quantum NOTEQUAL VALUE",
"quantum : CHARGE",
"quantum : BARYON",
"quantum : LEPTON",
"quantum : ISOSPIN",
"quantum : TOTALSPIN",
"quantum : SPIN",
"quantum : ANGULAR",
"quantum : G_PARITY",
"quantum : C_PARITY",
"quantum : P_PARITY",
"quantum : CP_PARITY",
"quantum : CHARM",
"quantum : STRANGE",
"quantum : TOP",
"quantum : BOTTOM",
};
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ m_decay = yyvsp[-1].desc; }
break;
case 2:
{ m_decay = yyvsp[0].desc; }
break;
case 3:
{{ m_decay = yyvsp[0].desc;
                                   Descriptor *a = yyvsp[0].desc;
                                   while( a )
                                   {
                                     a->setElipsis();
                                     a = a->getAlternate();
                                   }
                                }}
break;
case 4:
{{ m_decay = yyvsp[0].desc;
                                   Descriptor *a = yyvsp[0].desc;
                                   while( a )
                                   {
                                     a->setResonnance();
                                     a->setElipsis();
                                     a = a->getAlternate();
                                   }
                                }}
break;
case 5:
{{ Descriptor *last = NULL;
                                   std::vector<ParticleMatcher*>::iterator m;
                                   for( m=yyvsp[0].mvect->begin(); m!=yyvsp[0].mvect->end(); m++ )
                                   {
                                     Descriptor *d = new Descriptor(*m,m_ppSvc,m_resThreshold);
                                     if( last )
                                       last->setAlternate(d);
                                     else
                                       m_decay = d;
                                     last = d;
                                   }
                                   delete yyvsp[0].mvect;
                                }}
break;
case 6:
{{ Descriptor *a = yyvsp[-1].desc, *last = NULL;
                               m_decay = NULL;
                               while( a )
                               {
                                 Descriptor *cc = new Descriptor( *a );
                                 cc->conjugate();
                                 if( m_decay == NULL )
                                   m_decay = cc;
                                 else
                                   last->setAlternate(cc);
                                 cc->setAlternate(a);
                                 last = a;
                                 a = a->getAlternate();
                               }
                            }}
break;
case 7:
{{ Descriptor *a = yyvsp[0].desc, *last = NULL; yyval.desc = NULL;
                                    while( a )
                                    {
                                      std::vector<ParticleMatcher *>::iterator m;
                                      for( m=yyvsp[-2].mvect->begin(); m!=yyvsp[-2].mvect->end(); m++ )
                                      {
                                        Descriptor *d;
                                        if( *m == yyvsp[-2].mvect->back() )
                                          d = a;
                                        else
                                          d = new Descriptor( *a );
                                        if( yyval.desc == NULL )
                                          yyval.desc = d;
                                        else
                                          last->setAlternate(d);
                                        last = d;
                                        ParticleMatcher *mother;
                                        if( a->getAlternate() )
                                          mother = new ParticleMatcher(**m);
                                        else
                                          mother = *m;
                                        d->setMother(mother);
                                      }
                                      a = a->getAlternate();
                                    }                                 
                                   delete yyvsp[-2].mvect;
                                 }}
break;
case 8:
{{ Descriptor *a = yyvsp[0].desc, *last = NULL; yyval.desc = NULL;
                                    while( a )
                                    {
                                      std::vector<ParticleMatcher *>::iterator m;
                                      for( m=yyvsp[-2].mvect->begin(); m!=yyvsp[-2].mvect->end(); m++ )
                                      {
                                        Descriptor *d;
                                        if( *m == yyvsp[-2].mvect->back() )
                                          d = a;
                                        else
                                          d = new Descriptor( *a );
                                        if( yyval.desc == NULL )
                                          yyval.desc = d;
                                        else
                                          last->setAlternate(d);
                                        last = d;
                                        ParticleMatcher *mother;
                                        if( a->getAlternate() )
                                          mother = new ParticleMatcher(**m);
                                        else
                                          mother = *m;
                                        d->setMother(mother);
                                        d->setResonnance();
                                      }
                                      a = a->getAlternate();
                                    }                                 
                                    delete yyvsp[-2].mvect;
                                 }}
break;
case 9:
{ yyval.mvect = new std::vector<ParticleMatcher *>(0);
                                        yyvsp[-1].match->setStable(); yyval.mvect->push_back(yyvsp[-1].match); }
break;
case 10:
{ yyval.mvect = yyvsp[-1].mvect; }
break;
case 11:
{{ yyval.mvect = yyvsp[-1].mvect;
                                         std::vector<ParticleMatcher *>::iterator p;
                                         for( p=yyval.mvect->begin(); p!=yyval.mvect->end(); p++ )
                                           (*p)->setConjugate();
                                      }}
break;
case 12:
{ yyval.mvect = new std::vector<ParticleMatcher *>(0);
                                        yyval.mvect->push_back(yyvsp[-1].match); }
break;
case 13:
{ yyval.mvect = new std::vector<ParticleMatcher *>(0);
                                        yyval.mvect->push_back(yyvsp[0].match); }
break;
case 14:
{ yyval.mvect = yyvsp[-2].mvect; yyval.mvect->push_back(yyvsp[0].match); }
break;
case 15:
{ yyval.mvect = new std::vector<ParticleMatcher *>(0);
                                        yyval.mvect->push_back(yyvsp[0].match); }
break;
case 16:
{ yyval.match = yyvsp[-1].match; yyval.match->setConjugate(); }
break;
case 17:
{ yyval.match = yyvsp[-1].match; yyval.match->setOscilate(); }
break;
case 18:
{ yyval.match = yyvsp[-1].match; }
break;
case 19:
{ yyval.match = yyvsp[0].match; }
break;
case 20:
{ yyval.match = new ParticleMatcher(yyvsp[0].text, m_ppSvc); }
break;
case 21:
{ yyval.match = new ParticleMatcher(yyvsp[0].text, m_ppSvc); yyval.match->setInverse(); }
break;
case 22:
{ yyval.match = new ParticleMatcher(m_ppSvc); yyval.match->setQmark(); }
break;
case 23:
{{ yyval.desc = yyvsp[-1].desc; Descriptor *a = yyval.desc;
                                   while( a )
                                   {
                                     a->setElipsis();
                                     a = a->getAlternate();
                                   }
                                }}
break;
case 24:
{ yyval.desc = yyvsp[0].desc; }
break;
case 25:
{{ Descriptor *a = yyvsp[-1].desc, *b = yyvsp[0].desc, *last = NULL; yyval.desc = NULL;
                                 while( a )
                                 {
                                   while( b )
                                   {
                                     Descriptor *d, *s;
                                     if( b->getAlternate() )
                                       d = new Descriptor( *a );
                                     else
                                       d = a;
                                     if( a->getAlternate() )
                                       s = new Descriptor( *b );
                                     else
                                       s = b;
                                     d->addDaughter(s);
                                     if( yyval.desc == NULL )
                                       yyval.desc = d;
                                     else
                                       last->setAlternate(d);
                                     last = d;
                                     Descriptor *next = b->getAlternate();
                                     s->setAlternate(NULL);
                                     b = next;
                                   }
                                   a = a->getAlternate();
                                   b = yyvsp[0].desc;
                                 }
                              }}
break;
case 26:
{{ Descriptor *a = yyvsp[0].desc, *last = NULL; yyval.desc = NULL;
                                 while( a )
                                 {
                                   Descriptor *d = new Descriptor(m_ppSvc,m_resThreshold);
                                   d->addDaughter(a);
                                   if( yyval.desc == NULL )
                                     yyval.desc = d;
                                   else
                                     last->setAlternate(d);
                                   last = d;
                                   Descriptor *next = a->getAlternate();
                                   a->setAlternate(NULL);
                                   a = next;
                                 }
                              }}
break;
case 27:
{ yyval.desc = yyvsp[-1].desc; }
break;
case 28:
{ yyvsp[-1].match->setStable();
                                          yyval.desc = new Descriptor(yyvsp[-1].match,m_ppSvc,m_resThreshold); }
break;
case 29:
{ yyval.desc = yyvsp[-1].desc; }
break;
case 30:
{{ Descriptor *a = yyvsp[-1].desc, *last = NULL;
                                           yyval.desc = NULL;
                                           while( a )
                                           {
                                             Descriptor *cc = new Descriptor( *a );
                                             cc->conjugate();
                                             if( m_decay == NULL )
                                               yyval.desc = cc;
                                             else
                                               last->setAlternate(cc);
                                             cc->setAlternate(a);
                                             last = a;
                                             a = a->getAlternate();
                                           }
                                        }}
break;
case 31:
{ yyval.desc = new Descriptor(yyvsp[0].match,m_ppSvc,m_resThreshold); }
break;
case 32:
{{ yyval.desc = yyvsp[-2].desc; Descriptor *a = yyvsp[-2].desc;
                                               while( a->getAlternate() )
                                                 a = a->getAlternate();
                                               a->setAlternate(yyvsp[0].desc);
                                            }}
break;
case 33:
{{ yyval.desc = yyvsp[-1].desc; Descriptor *a = yyvsp[-1].desc;
                                               while( a->getAlternate() )
                                                 a = a->getAlternate();
                                               a->setAlternate(new Descriptor(m_ppSvc,m_resThreshold));
                                            }}
break;
case 34:
{ yyval.desc = yyvsp[0].desc; }
break;
case 35:
{ yyval.desc = new Descriptor(m_ppSvc,m_resThreshold); }
break;
case 36:
{ yyval.match = yyvsp[0].match; }
break;
case 37:
{ yyval.match = yyvsp[0].match; }
break;
case 38:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quarkval,yyvsp[-1].quarkval,yyvsp[0].quarkval,m_ppSvc); }
break;
case 39:
{ yyval.match = new ParticleMatcher(yyvsp[-1].quarkval,yyvsp[0].quarkval,empty,m_ppSvc); }
break;
case 40:
{ yyval.match = new ParticleMatcher(yyvsp[0].quarkval,empty,empty,m_ppSvc); }
break;
case 41:
{ yyval.quarkval = up; }
break;
case 42:
{ yyval.quarkval = down; }
break;
case 43:
{ yyval.quarkval = charm; }
break;
case 44:
{ yyval.quarkval = strange; }
break;
case 45:
{ yyval.quarkval = top; }
break;
case 46:
{ yyval.quarkval = bottom; }
break;
case 47:
{ yyval.quarkval = antiup; }
break;
case 48:
{ yyval.quarkval = antidown; }
break;
case 49:
{ yyval.quarkval = anticharm; }
break;
case 50:
{ yyval.quarkval = antistrange; }
break;
case 51:
{ yyval.quarkval = antitop; }
break;
case 52:
{ yyval.quarkval = antibottom; }
break;
case 53:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quantumval,eq_rel,yyvsp[0].dval,m_ppSvc); }
break;
case 54:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quantumval,lesseq_rel,yyvsp[0].dval,m_ppSvc); }
break;
case 55:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quantumval,greatereq_rel,yyvsp[0].dval,m_ppSvc); }
break;
case 56:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quantumval,less_rel,yyvsp[0].dval,m_ppSvc); }
break;
case 57:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quantumval,greater_rel,yyvsp[0].dval,m_ppSvc); }
break;
case 58:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quantumval,noteq_rel,yyvsp[0].dval,m_ppSvc); }
break;
case 59:
{ yyval.quantumval = Q_quantum; }
break;
case 60:
{ yyval.quantumval = B_quantum; }
break;
case 61:
{ yyval.quantumval = l_quantum; }
break;
case 62:
{ yyval.quantumval = I_quantum; }
break;
case 63:
{ yyval.quantumval = J_quantum; }
break;
case 64:
{ yyval.quantumval = S_quantum; }
break;
case 65:
{ yyval.quantumval = L_quantum; }
break;
case 66:
{ yyval.quantumval = G_quantum; }
break;
case 67:
{ yyval.quantumval = C_quantum; }
break;
case 68:
{ yyval.quantumval = P_quantum; }
break;
case 69:
{ yyval.quantumval = CP_quantum; }
break;
case 70:
{ yyval.quantumval = c_quantum; }
break;
case 71:
{ yyval.quantumval = s_quantum; }
break;
case 72:
{ yyval.quantumval = t_quantum; }
break;
case 73:
{ yyval.quantumval = b_quantum; }
break;
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
