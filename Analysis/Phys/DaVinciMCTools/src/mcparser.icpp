#ifndef lint
static char const 
yyrcsid[] = "$FreeBSD: src/usr.bin/yacc/skeleton.c,v 1.28 2000/01/17 02:04:06 bde Exp $";
#endif
#include <stdlib.h>
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYLEX yylex()
#define YYEMPTY -1
#define yyclearin (yychar=(YYEMPTY))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING() (yyerrflag!=0)

#define yyparse MCDecayFinder::yparse
#define yylex MCDecayFinder::ylex
#define yyerror MCDecayFinder::yerror
#define yychar MCDecayFinder::ychar
#define yyval MCDecayFinder::yval
#define yylval MCDecayFinder::ylval
#define yydebug MCDecayFinder::ydebug
#define yynerrs MCDecayFinder::ynerrs
#define yyerrflag MCDecayFinder::yerrflag
#define yyss MCDecayFinder::yss
#define yyssp MCDecayFinder::yssp
#define yyvs MCDecayFinder::yvs
#define yyvsp MCDecayFinder::yvsp
#define yylhs MCDecayFinder::ylhs
#define yylen MCDecayFinder::ylen
#define yydefred MCDecayFinder::ydefred
#define yydgoto MCDecayFinder::ydgoto
#define yysindex MCDecayFinder::ysindex
#define yyrindex MCDecayFinder::yrindex
#define yygindex MCDecayFinder::ygindex
#define yytable MCDecayFinder::ytable
#define yycheck MCDecayFinder::ycheck
#define yyname MCDecayFinder::yname
#define yyrule MCDecayFinder::yrule
#define yysslim MCDecayFinder::ysslim
#define yystacksize MCDecayFinder::ystacksize
#define YYPREFIX "MCDecayFinder::y"
#define YYSTYPE MCDecayFinder::YYSTYPE
#if 0
  std::string *text;
  double dval;
  Quarks quarkval;
  Quantums quantumval;
  Descriptor *desc;
  ParticleMatcher *match;
  std::vector<ParticleMatcher *> *mvect;
#endif
#define YYERRCODE 256
#define NAME 257
#define VALUE 258
#define CHARGE 259
#define BARYON 260
#define LEPTON 261
#define ISOSPIN 262
#define TOTALSPIN 263
#define SPIN 264
#define ANGULAR 265
#define G_PARITY 266
#define C_PARITY 267
#define P_PARITY 268
#define CP_PARITY 269
#define CHARM 270
#define STRANGE 271
#define TOP 272
#define BOTTOM 273
#define COLON 274
#define BANG 275
#define QMARK 276
#define METAX 277
#define COMMA 278
#define CARET 279
#define LBRACK 280
#define LBRACE 281
#define LANGLE 282
#define LPAREN 283
#define CCONJ 284
#define OSCIL 285
#define NOSCIL 286
#define RBRACE 287
#define RANGLE 288
#define RPAREN 289
#define EQEQUAL 290
#define LESSEQUAL 291
#define GREATEREQUAL 292
#define NOTEQUAL 293
#define ARROW 294
#define RARROW 295
#define ELIPSIS 296
#define PP 297
#define U_Q 298
#define D_Q 299
#define C_Q 300
#define S_Q 301
#define T_Q 302
#define B_Q 303
#define AU_Q 304
#define AD_Q 305
#define AC_Q 306
#define AS_Q 307
#define AT_Q 308
#define AB_Q 309
const short MCDecayFinder::ylhs[] = {                                        -1,
    0,    0,   19,   19,   19,   19,   19,   19,   20,   20,
   21,   21,   16,   16,   16,   16,   16,   18,   17,   17,
   15,   15,   15,   15,   14,   14,   11,   11,   12,   12,
   12,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,   13,   13,   13,   13,   13,   13,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    6,    6,    6,    5,    5,    5,
    5,    5,    5,    3,    3,    3,    3,    3,    4,    4,
   10,   10,    9,    9,    9,    9,    8,    8,    7,    7,
    7,    7,    7,    7,
};
const short MCDecayFinder::ylen[] = {                                         2,
    3,    1,    3,    3,    3,    3,    2,    1,    3,    1,
    2,    2,    3,    3,    3,    1,    1,    5,    3,    1,
    3,    2,    1,    1,    3,    1,    2,    1,    3,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    3,    3,    3,    3,    3,    3,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    5,    3,    1,    3,    3,    3,
    3,    3,    3,    3,    5,    5,    3,    5,    3,    1,
    3,    3,    2,    1,    2,    1,    3,    1,    2,    1,
    4,    3,    2,    1,
};
const short MCDecayFinder::ydefred[] = {                                      0,
   23,    0,   24,    0,    0,    0,    0,    0,    0,   67,
    0,   17,    0,    0,   16,   22,    0,    0,    0,    0,
   50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
   60,   61,   62,   63,   64,    0,    0,   26,   28,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
   13,   14,   15,    0,    0,   32,   33,   34,   35,   36,
   37,   38,   39,   40,   41,   42,   43,    0,   27,    0,
    0,    0,    0,    0,    0,    0,   21,   72,    0,    0,
    0,    0,   90,    0,   68,    0,    8,   94,   69,    0,
   66,   70,   71,    0,    0,   19,    0,    0,    0,   47,
   48,   44,   45,   46,   49,   25,    0,    0,    7,    0,
    0,    0,   88,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   85,   89,   93,   83,   20,   65,
   18,   29,   10,    0,    0,   74,    0,   82,    0,    3,
    4,    5,    0,    0,   81,    0,    6,   92,    0,    0,
   77,    0,   80,    0,    0,    0,   79,   87,    9,    0,
    0,    0,   91,   78,   75,   76,
};
const short MCDecayFinder::ydgoto[] = {                                       9,
   68,   37,   83,  117,   10,   11,   84,  112,  113,   86,
   38,   69,   39,   40,   87,   42,   18,   15,   88,  115,
  120,
};
const short MCDecayFinder::ysindex[] = {                                   -199,
    0, -249,    0, -199, -199,  -13, -199, -204,    0,    0,
 -263,    0, -183, -139,    0,    0, -255,    9, -251, -236,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -32,  -86,    0,    0, -227,
 -237, -183, -243, -243, -161, -243, -243, -199,  -37,    0,
    0,    0,    0, -161,  -37,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -32,    0, -209,
 -201, -188, -141, -115, -100,  -13,    0,    0,  -46, -243,
 -150,  -46,    0,  -93,    0, -133,    0,    0,    0,  -37,
    0,    0,    0, -263,  -37,    0, -116, -113,  -32,    0,
    0,    0,    0,    0,    0,    0,  -46,  -46,    0,    0,
 -213, -191,    0,    0,   14,  -46, -110, -174, -160, -102,
 -138, -234,  -57,  -66,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -118, -143,    0, -243,    0,  -46,    0,
    0,    0,  -84, -143,    0,  -46,    0,    0, -243, -243,
    0,  -57,    0,  -95, -143, -143,    0,    0,    0,  -92,
  -91,  -90,    0,    0,    0,    0,
};
const short MCDecayFinder::yrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  197,    0, -119,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -189,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    1,    0,    2,    0,    0,    0,    0,
    0,    0,    0,  201,    0,    0,  -70,  -51, -154,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -103,
    0,    0,    0, -134,    0,    0,    0,    0,    0,    0,
 -211,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -59,    0,    0,  -56,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -41,
    0,    0,    0,    0,    0,    0,
};
const short MCDecayFinder::ygindex[] = {                                      0,
  -33,    0,  -50,  -80,  116,   21,    0,  140,  -40,    0,
  156,    0,    0,    0,    5,   13,   11,    0,  -60,  -36,
  117,
};
#define YYTABLESIZE 300
const short MCDecayFinder::ytable[] = {                                     111,
   86,   84,   85,   89,   12,   92,   93,   16,   12,   12,
   14,   12,   13,    1,   45,   20,   13,   13,  109,  114,
  114,  121,   45,  127,   17,   19,   54,   41,   50,  110,
  110,    2,    3,  126,   99,   79,   80,   81,    6,   82,
   45,   55,  111,  139,  119,  122,  133,  133,  100,   12,
   76,   78,   12,   12,  151,  133,  101,    1,   12,   12,
   77,   96,  133,  133,  135,  132,   10,   98,   94,  102,
  136,  134,  153,  153,  111,    2,    3,   10,  159,  143,
    4,    5,    6,    7,  157,  159,  137,  119,   31,   43,
   44,  133,  138,  160,   12,    1,  158,    8,   31,   12,
   20,  153,  129,  137,  153,  153,    1,  129,  161,  162,
   46,   47,  145,    2,    3,  134,  103,  146,    4,   90,
    6,    7,   94,   30,    2,    3,  147,  116,   79,   80,
   81,    6,   82,   30,   48,    8,  155,  156,   49,   82,
   94,   94,  104,   10,   94,   94,   94,   94,   94,   10,
   10,   10,   10,   90,   20,  149,  150,  105,   20,  139,
   91,   94,  128,    1,   20,   20,   20,  144,  147,   97,
  130,   90,   90,  131,   80,   90,   90,   90,   90,   90,
   80,    2,    3,   90,  148,   79,  123,  124,    6,   82,
    1,  163,   90,  139,  164,   70,    2,  165,  166,    1,
    1,   71,  125,   72,   73,   74,   75,   66,    2,    3,
    1,  116,   79,  123,  152,    6,   82,    2,    3,    1,
  118,   79,  123,  152,    6,   82,   19,   12,    2,    3,
   11,  106,   79,  107,  108,    6,   79,    2,    3,    0,
  154,    0,   95,   90,    6,   21,   22,   23,   24,   25,
   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
    0,    0,    0,   36,    0,   56,   57,   58,   59,   60,
   61,   62,   63,   64,   65,   66,   67,    0,   86,   84,
    0,    0,    0,    0,   86,   84,   49,   86,   84,   86,
   84,  139,   51,   52,   53,    0,    0,  140,  141,  142,
};
const short MCDecayFinder::ycheck[] = {                                      80,
    0,    0,   43,   44,    0,   46,   47,  257,    4,    5,
    0,    7,    0,  257,  278,    5,    4,    5,   79,   80,
   81,   82,  278,   84,    4,    5,  278,    7,  284,   80,
   81,  275,  276,   84,   68,  279,  280,  281,  282,  283,
  278,  278,  123,  278,   81,   82,  107,  108,  258,   45,
  278,  289,   48,   49,  289,  116,  258,  257,   54,   55,
  288,   49,  123,  124,  278,   99,  278,   55,   48,  258,
  284,  108,  123,  124,  155,  275,  276,  289,  139,  116,
  280,  281,  282,  283,  135,  146,  278,  124,  278,  294,
  295,  152,  284,  144,   90,  257,  137,  297,  288,   95,
   90,  152,   90,  278,  155,  156,  257,   95,  149,  150,
  294,  295,  287,  275,  276,  152,  258,  278,  280,  281,
  282,  283,  257,  278,  275,  276,  287,  278,  279,  280,
  281,  282,  283,  288,  274,  297,  280,  281,  278,  283,
  275,  276,  258,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,  257,  274,  294,  295,  258,  278,  278,
   45,  296,  296,  257,  284,  285,  286,  278,  287,   54,
  287,  275,  276,  287,  278,  279,  280,  281,  282,  283,
  284,  275,  276,  287,  287,  279,  280,  281,  282,  283,
  257,  287,  296,  278,  287,  282,    0,  289,  289,  257,
    0,  288,  296,  290,  291,  292,  293,  278,  275,  276,
  257,  278,  279,  280,  281,  282,  283,  275,  276,  257,
   81,  279,  280,  281,  282,  283,  278,  287,  275,  276,
  287,   76,  279,  280,  281,  282,  278,  275,  276,   -1,
  124,   -1,  280,  281,  282,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
   -1,   -1,   -1,  277,   -1,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,   -1,  278,  278,
   -1,   -1,   -1,   -1,  284,  284,  278,  287,  287,  289,
  289,  278,  284,  285,  286,   -1,   -1,  284,  285,  286,
};
#define YYFINAL 9
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 309
#if YYDEBUG
const char * const MCDecayFinder::yname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"NAME","VALUE","CHARGE","BARYON",
"LEPTON","ISOSPIN","TOTALSPIN","SPIN","ANGULAR","G_PARITY","C_PARITY",
"P_PARITY","CP_PARITY","CHARM","STRANGE","TOP","BOTTOM","COLON","BANG","QMARK",
"METAX","COMMA","CARET","LBRACK","LBRACE","LANGLE","LPAREN","CCONJ","OSCIL",
"NOSCIL","RBRACE","RANGLE","RPAREN","EQEQUAL","LESSEQUAL","GREATEREQUAL",
"NOTEQUAL","ARROW","RARROW","ELIPSIS","PP","U_Q","D_Q","C_Q","S_Q","T_Q","B_Q",
"AU_Q","AD_Q","AC_Q","AS_Q","AT_Q","AB_Q",
};
const char * const MCDecayFinder::yrule[] = {
"$accept : start",
"start : particle_list COLON top_decay_list",
"start : top_decay_list",
"lifted_particle : LBRACK lifted_particle_list CCONJ",
"lifted_particle : LBRACK lifted_particle_list OSCIL",
"lifted_particle : LBRACK lifted_particle_list NOSCIL",
"lifted_particle : LBRACE lifted_particle_list RBRACE",
"lifted_particle : CARET lifted_particle",
"lifted_particle : particle_terminal",
"lifted_particle_list : lifted_particle_list COMMA lifted_particle",
"lifted_particle_list : lifted_particle",
"empty_particle_list : lifted_particle_list COMMA",
"empty_particle_list : COMMA lifted_particle_list",
"particle : LBRACK particle_list CCONJ",
"particle : LBRACK particle_list OSCIL",
"particle : LBRACK particle_list NOSCIL",
"particle : particle_set",
"particle : particle_terminal",
"particle_set : LBRACE particle_list COMMA particle RBRACE",
"particle_list : particle_list COMMA particle",
"particle_list : particle",
"particle_terminal : LANGLE particle_wc_list RANGLE",
"particle_terminal : BANG NAME",
"particle_terminal : NAME",
"particle_terminal : QMARK",
"particle_wc_list : particle_wc_list COMMA particle_wc",
"particle_wc_list : particle_wc",
"particle_wc : METAX quarks",
"particle_wc : quantum_test",
"quarks : quark quark quark",
"quarks : quark quark",
"quarks : quark",
"quark : U_Q",
"quark : D_Q",
"quark : C_Q",
"quark : S_Q",
"quark : T_Q",
"quark : B_Q",
"quark : AU_Q",
"quark : AD_Q",
"quark : AC_Q",
"quark : AS_Q",
"quark : AT_Q",
"quark : AB_Q",
"quantum_test : quantum EQEQUAL VALUE",
"quantum_test : quantum LESSEQUAL VALUE",
"quantum_test : quantum GREATEREQUAL VALUE",
"quantum_test : quantum LANGLE VALUE",
"quantum_test : quantum RANGLE VALUE",
"quantum_test : quantum NOTEQUAL VALUE",
"quantum : CHARGE",
"quantum : BARYON",
"quantum : LEPTON",
"quantum : ISOSPIN",
"quantum : TOTALSPIN",
"quantum : SPIN",
"quantum : ANGULAR",
"quantum : G_PARITY",
"quantum : C_PARITY",
"quantum : P_PARITY",
"quantum : CP_PARITY",
"quantum : CHARM",
"quantum : STRANGE",
"quantum : TOP",
"quantum : BOTTOM",
"top_decay_list : LBRACE top_decay_list COMMA top_decay RBRACE",
"top_decay_list : top_decay_list COMMA top_decay",
"top_decay_list : top_decay",
"top_decay : PP ARROW daughters_set",
"top_decay : PP RARROW daughters_set",
"top_decay : particle ARROW daughters_set",
"top_decay : particle RARROW daughters_set",
"top_decay : LPAREN top_decay_list RPAREN",
"top_decay : LBRACK top_decay_list CCONJ",
"decay : LBRACK decay_list CCONJ",
"decay : LPAREN lifted_particle ARROW daughters_set RPAREN",
"decay : LPAREN lifted_particle RARROW daughters_set RPAREN",
"decay : LPAREN lifted_particle_list RPAREN",
"decay : LBRACE decay_list COMMA decay RBRACE",
"decay_list : decay_list COMMA decay",
"decay_list : decay",
"daughters_group : LBRACE daughters_list RBRACE",
"daughters_group : LBRACK daughters_list CCONJ",
"daughters_set : daughters_group ELIPSIS",
"daughters_set : daughters_group",
"daughters_set : daughters ELIPSIS",
"daughters_set : daughters",
"daughters_list : daughters_list COMMA daughters_set",
"daughters_list : daughters_set",
"daughters : daughters decay",
"daughters : decay",
"daughters : daughters LBRACE empty_particle_list RBRACE",
"daughters : LBRACE empty_particle_list RBRACE",
"daughters : daughters lifted_particle",
"daughters : lifted_particle",
};
#endif
#if YYDEBUG
#include <stdio.h>
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH 10000
#endif
#endif
#define YYINITSTACKSIZE 200
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short *yyss;
short *yysslim;
YYSTYPE *yyvs;
int yystacksize;
/* allocate initial stack or double stack size, up to YYMAXDEPTH */
int MCDecayFinder::yygrowstack()
{
    int newsize, i;
    short *newss;
    YYSTYPE *newvs;

    if ((newsize = yystacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return -1;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;
    i = yyssp - yyss;
    newss = yyss ? (short *)realloc(yyss, newsize * sizeof *newss) :
      (short *)malloc(newsize * sizeof *newss);
    if (newss == NULL)
        return -1;
    yyss = newss;
    yyssp = newss + i;
    newvs = yyvs ? (YYSTYPE *)realloc(yyvs, newsize * sizeof *newvs) :
      (YYSTYPE *)malloc(newsize * sizeof *newvs);
    if (newvs == NULL)
        return -1;
    yyvs = newvs;
    yyvsp = newvs + i;
    yystacksize = newsize;
    yysslim = yyss + newsize - 1;
    return 0;
}

#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab

#ifndef YYPARSE_PARAM
#if defined(__cplusplus) || __STDC__
#define YYPARSE_PARAM_ARG void
#define YYPARSE_PARAM_DECL
#else	/* ! ANSI-C/C++ */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif	/* ANSI-C/C++ */
#else	/* YYPARSE_PARAM */
#ifndef YYPARSE_PARAM_TYPE
#define YYPARSE_PARAM_TYPE void *
#endif
#if defined(__cplusplus) || __STDC__
#define YYPARSE_PARAM_ARG YYPARSE_PARAM_TYPE YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else	/* ! ANSI-C/C++ */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL YYPARSE_PARAM_TYPE YYPARSE_PARAM;
#endif	/* ANSI-C/C++ */
#endif	/* ! YYPARSE_PARAM */

int
yyparse (YYPARSE_PARAM_ARG)
    YYPARSE_PARAM_DECL
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register const char *yys;

    if ((yys = getenv("YYDEBUG")))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    if (yyss == NULL && yygrowstack()) goto yyoverflow;
    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if ((yyn = yydefred[yystate])) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yysslim && yygrowstack())
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#if defined(lint) || defined(__GNUC__)
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#if defined(lint) || defined(__GNUC__)
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yysslim && yygrowstack())
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ m_members = yyvsp[-2].mvect; m_decay = yyvsp[0].desc; }
break;
case 2:
{ m_decay = yyvsp[0].desc; }
break;
case 3:
{{ yyval.mvect = yyvsp[-1].mvect;
                               std::vector<ParticleMatcher *>::iterator i;
                               for( i=yyval.mvect->begin(); i!=yyval.mvect->end(); i++ ) (*i)->setConjugate(); }}
break;
case 4:
{{ yyval.mvect = yyvsp[-1].mvect;
                               std::vector<ParticleMatcher *>::iterator i;
                               for( i=yyval.mvect->begin(); i!=yyval.mvect->end(); i++ ) (*i)->setOscillate(); }}
break;
case 5:
{{ yyval.mvect = yyvsp[-1].mvect;
                               std::vector<ParticleMatcher *>::iterator i;
                               for( i=yyval.mvect->begin(); i!=yyval.mvect->end(); i++ ) (*i)->setNotOscillate(); }}
break;
case 6:
{ yyval.mvect = yyvsp[-1].mvect; }
break;
case 7:
{{ yyval.mvect = yyvsp[0].mvect; std::vector<ParticleMatcher *>::iterator i;
                                   for( i=yyval.mvect->begin(); i!=yyval.mvect->end(); i++ ) (*i)->setLift(); }}
break;
case 8:
{ yyval.mvect = yyvsp[0].mvect; }
break;
case 9:
{ yyval.mvect=yyvsp[-2].mvect;
                                             yyval.mvect->insert(yyval.mvect->end(),yyvsp[0].mvect->begin(),yyvsp[0].mvect->end());
                                             delete yyvsp[0].mvect; }
break;
case 10:
{ yyval.mvect = yyvsp[0].mvect; }
break;
case 11:
{{
                                                 yyval.mvect = yyvsp[-1].mvect;
                                                 ParticleMatcher *e = new ParticleMatcher(m_ppSvc);
                                                 e->setEmpty(); yyval.mvect->push_back(e);
                                               }}
break;
case 12:
{{
                                                 yyval.mvect = yyvsp[0].mvect;
                                                 ParticleMatcher *e = new ParticleMatcher(m_ppSvc);
                                                 e->setEmpty(); yyval.mvect->push_back(e);
                                               }}
break;
case 13:
{{ yyval.mvect = yyvsp[-1].mvect; std::vector<ParticleMatcher *>::iterator i;
                               for( i=yyval.mvect->begin(); i!=yyval.mvect->end(); i++ ) (*i)->setConjugate(); }}
break;
case 14:
{{ yyval.mvect = yyvsp[-1].mvect; std::vector<ParticleMatcher *>::iterator i;
                               for( i=yyval.mvect->begin(); i!=yyval.mvect->end(); i++ ) (*i)->setOscillate(); }}
break;
case 15:
{{ yyval.mvect = yyvsp[-1].mvect; std::vector<ParticleMatcher *>::iterator i;
                            for( i=yyval.mvect->begin(); i!=yyval.mvect->end(); i++ ) (*i)->setNotOscillate(); }}
break;
case 16:
{ yyval.mvect = yyvsp[0].mvect; }
break;
case 17:
{ yyval.mvect = yyvsp[0].mvect; }
break;
case 18:
{ yyval.mvect = yyvsp[-3].mvect; }
break;
case 19:
{ yyval.mvect=yyvsp[-2].mvect;
                                             yyval.mvect->insert(yyval.mvect->end(),yyvsp[0].mvect->begin(),yyvsp[0].mvect->end());
                                             delete yyvsp[0].mvect; }
break;
case 20:
{ yyval.mvect = yyvsp[0].mvect; }
break;
case 21:
{ yyval.mvect = yyvsp[-1].mvect; }
break;
case 22:
{{ yyval.mvect = new std::vector<ParticleMatcher *>(0);
                                ParticleMatcher *m = new ParticleMatcher(yyvsp[0].text, m_ppSvc);
                                m->setInverse(); yyval.mvect->push_back(m); }}
break;
case 23:
{{ yyval.mvect = new std::vector<ParticleMatcher *>(0);
                                ParticleMatcher *m = new ParticleMatcher(yyvsp[0].text, m_ppSvc);
                                yyval.mvect->push_back(m); }}
break;
case 24:
{{ yyval.mvect = new std::vector<ParticleMatcher *>(0);
                                ParticleMatcher *m = new ParticleMatcher(m_ppSvc);
                                m->setQmark(); yyval.mvect->push_back(m); }}
break;
case 25:
{ yyval.mvect = yyvsp[-2].mvect; yyval.mvect->push_back(yyvsp[0].match); }
break;
case 26:
{ yyval.mvect=new std::vector<ParticleMatcher *>(0); yyval.mvect->push_back(yyvsp[0].match); }
break;
case 27:
{ yyval.match = yyvsp[0].match; }
break;
case 28:
{ yyval.match = yyvsp[0].match; }
break;
case 29:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quarkval,yyvsp[-1].quarkval,yyvsp[0].quarkval,m_ppSvc); }
break;
case 30:
{ yyval.match = new ParticleMatcher(yyvsp[-1].quarkval,yyvsp[0].quarkval,empty,m_ppSvc); }
break;
case 31:
{ yyval.match = new ParticleMatcher(yyvsp[0].quarkval,empty,empty,m_ppSvc); }
break;
case 32:
{ yyval.quarkval = up; }
break;
case 33:
{ yyval.quarkval = down; }
break;
case 34:
{ yyval.quarkval = charm; }
break;
case 35:
{ yyval.quarkval = strange; }
break;
case 36:
{ yyval.quarkval = top; }
break;
case 37:
{ yyval.quarkval = bottom; }
break;
case 38:
{ yyval.quarkval = antiup; }
break;
case 39:
{ yyval.quarkval = antidown; }
break;
case 40:
{ yyval.quarkval = anticharm; }
break;
case 41:
{ yyval.quarkval = antistrange; }
break;
case 42:
{ yyval.quarkval = antitop; }
break;
case 43:
{ yyval.quarkval = antibottom; }
break;
case 44:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quantumval,eq_rel,yyvsp[0].dval,m_ppSvc); }
break;
case 45:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quantumval,lesseq_rel,yyvsp[0].dval,m_ppSvc); }
break;
case 46:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quantumval,greatereq_rel,yyvsp[0].dval,m_ppSvc); }
break;
case 47:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quantumval,less_rel,yyvsp[0].dval,m_ppSvc); }
break;
case 48:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quantumval,greater_rel,yyvsp[0].dval,m_ppSvc); }
break;
case 49:
{ yyval.match = new ParticleMatcher(yyvsp[-2].quantumval,noteq_rel,yyvsp[0].dval,m_ppSvc); }
break;
case 50:
{ yyval.quantumval = Q_quantum; }
break;
case 51:
{ yyval.quantumval = B_quantum; }
break;
case 52:
{ yyval.quantumval = l_quantum; }
break;
case 53:
{ yyval.quantumval = I_quantum; }
break;
case 54:
{ yyval.quantumval = J_quantum; }
break;
case 55:
{ yyval.quantumval = S_quantum; }
break;
case 56:
{ yyval.quantumval = L_quantum; }
break;
case 57:
{ yyval.quantumval = G_quantum; }
break;
case 58:
{ yyval.quantumval = C_quantum; }
break;
case 59:
{ yyval.quantumval = P_quantum; }
break;
case 60:
{ yyval.quantumval = CP_quantum; }
break;
case 61:
{ yyval.quantumval = c_quantum; }
break;
case 62:
{ yyval.quantumval = s_quantum; }
break;
case 63:
{ yyval.quantumval = t_quantum; }
break;
case 64:
{ yyval.quantumval = b_quantum; }
break;
case 65:
{{ yyval.desc = yyvsp[-3].desc; Descriptor *a = yyvsp[-3].desc;
                                                  while( a->getAlternate() ) a = a->getAlternate();
                                                  a->setAlternate(yyvsp[-1].desc); }}
break;
case 66:
{{ yyval.desc = yyvsp[-2].desc; Descriptor *a = yyvsp[-2].desc;
                                                  while( a->getAlternate() ) a = a->getAlternate();
                                                  a->setAlternate(yyvsp[0].desc); }}
break;
case 67:
{ yyval.desc = yyvsp[0].desc; }
break;
case 68:
{{ yyval.desc = yyvsp[0].desc; Descriptor *a = yyvsp[0].desc;
                                     while( a ) {
                                       a->setElipsis();
                                       a = a->getAlternate();
                                     }
                                  }}
break;
case 69:
{{ yyval.desc = yyvsp[0].desc; Descriptor *a = yyvsp[0].desc;
                                      while( a ) {
                                        a->setResonnance();
                                        a->setElipsis();
                                        a = a->getAlternate();
                                      }
                                   }}
break;
case 70:
{{ Descriptor *a = yyvsp[0].desc, *last = NULL; yyval.desc = NULL;
                                      while( a ) {
                                        std::vector<ParticleMatcher *>::iterator m;
                                        for( m=yyvsp[-2].mvect->begin(); m!=yyvsp[-2].mvect->end(); m++ ) {
                                          Descriptor *d;
                                          if( *m == yyvsp[-2].mvect->back() ) d = a;
                                          else d = new Descriptor( *a );
                                          if( yyval.desc == NULL ) yyval.desc = d;
                                          else last->setAlternate(d);
                                          last = d;
                                          ParticleMatcher *mother;
                                          if(a->getAlternate()) mother=new ParticleMatcher(**m);
                                          else mother = *m;
                                          d->setMother( mother );
                                        }
                                        a = a->getAlternate();
                                      }
                                      delete yyvsp[-2].mvect;
                                   }}
break;
case 71:
{{ Descriptor *a = yyvsp[0].desc, *last = NULL; yyval.desc = NULL;
                                      while( a ) {
                                        std::vector<ParticleMatcher *>::iterator m;
                                        for( m=yyvsp[-2].mvect->begin(); m!=yyvsp[-2].mvect->end(); m++ ) {
                                          Descriptor *d;
                                          if( *m == yyvsp[-2].mvect->back() ) d = a;
                                          else d = new Descriptor( *a );
                                          if( yyval.desc == NULL ) yyval.desc = d;
                                          else last->setAlternate(d);
                                          last = d;
                                          ParticleMatcher *mother;
                                          if(a->getAlternate()) mother=new ParticleMatcher(**m);
                                          else mother = *m;
                                          d->setMother( mother ); d->setResonnance();
                                        }
                                        a = a->getAlternate();
                                      }
                                      delete yyvsp[-2].mvect;
                                   }}
break;
case 72:
{ yyval.desc = yyvsp[-1].desc; }
break;
case 73:
{{ Descriptor *a = yyvsp[-1].desc, *last = NULL; yyval.desc = NULL;
                                   while( a ) {
                                      Descriptor *cc = new Descriptor(*a);
                                      cc->conjugate();
                                      if( yyval.desc == NULL ) yyval.desc = cc;
                                      else last->setAlternate(cc);
                                      cc->setAlternate(a);
                                      last = a;
                                      a = a->getAlternate();
                                    }
                                 }}
break;
case 74:
{{ Descriptor *a = yyvsp[-1].desc, *last = NULL;
                                   while( a ) {
                                      Descriptor *cc = new Descriptor(*a);
                                      cc->conjugate();
                                      if( last == NULL ) last = cc;
                                      else last->setAlternate(cc);
                                      cc->setAlternate(a);
                                      last = a;
                                      a = a->getAlternate();
                                    }
                                 }}
break;
case 75:
{{
                                      Descriptor *a = yyvsp[-1].desc, *last = NULL; yyval.desc = NULL;
                                      while( a ) {
                                        std::vector<ParticleMatcher *>::iterator m;
                                        for( m=yyvsp[-3].mvect->begin(); m!=yyvsp[-3].mvect->end(); m++ ) {
                                          Descriptor *d;
                                          if( *m == yyvsp[-3].mvect->back() ) d = a;
                                          else d = new Descriptor( *a );
                                          if( yyval.desc == NULL ) yyval.desc = d;
                                          else last->setAlternate(d);
                                          last = d;
                                          ParticleMatcher *mother;
                                          if(a->getAlternate()) mother=new ParticleMatcher(**m);
                                          else mother = *m;
                                          d->setMother( mother );
                                        }
                                        a = a->getAlternate();
                                      }
                                      delete yyvsp[-3].mvect;
                                   }}
break;
case 76:
{{
                                      Descriptor *a = yyvsp[-1].desc, *last = NULL; yyval.desc = NULL;
                                      while( a ) {
                                        std::vector<ParticleMatcher *>::iterator m;
                                        for( m=yyvsp[-3].mvect->begin(); m!=yyvsp[-3].mvect->end(); m++ ) {
                                          Descriptor *d;
                                          if( *m == yyvsp[-3].mvect->back() ) d = a;
                                          else d = new Descriptor( *a );
                                          if( yyval.desc == NULL ) yyval.desc = d;
                                          else last->setAlternate(d);
                                          last = d;
                                          ParticleMatcher *mother;
                                          if(a->getAlternate()) mother=new ParticleMatcher(**m);
                                          else mother = *m;
                                          d->setMother( mother ); d->setResonnance();
                                        }
                                        a = a->getAlternate();
                                      }
                                      delete yyvsp[-3].mvect;
                                   }}
break;
case 77:
{{ Descriptor *last = NULL; yyval.desc = NULL;
                                      std::vector<ParticleMatcher *>::iterator m;
                                      for( m=yyvsp[-1].mvect->begin(); m!=yyvsp[-1].mvect->end(); m++ ) {
                                        (*m)->setStable();
                                        Descriptor *d=new Descriptor(*m,m_ppSvc,m_resThreshold);
                                        if( yyval.desc == NULL ) yyval.desc = d;
                                        else last->setAlternate(d);
                                        last = d;
                                      }
                                      delete yyvsp[-1].mvect;
                                   }}
break;
case 78:
{{ yyval.desc = yyvsp[-3].desc; Descriptor *a = yyvsp[-3].desc;
                                      while( a ) a = a->getAlternate();
                                      a->setAlternate(yyvsp[-1].desc); }}
break;
case 79:
{{ yyval.desc = yyvsp[-2].desc; Descriptor *a = yyvsp[-2].desc;
                                      while( a ) a = a->getAlternate();
                                      a->setAlternate(yyvsp[0].desc); }}
break;
case 80:
{ yyval.desc = yyvsp[0].desc; }
break;
case 81:
{ yyval.desc = yyvsp[-1].desc; }
break;
case 82:
{{ Descriptor *a = yyvsp[-1].desc, *last = NULL; yyval.desc = NULL;
                                   while( a ) {
                                      Descriptor *cc = new Descriptor(*a);
                                      cc->conjugate();
                                      if( yyval.desc == NULL ) yyval.desc = cc;
                                      else last->setAlternate(cc);
                                      cc->setAlternate(a);
                                      last = a;
                                      a = a->getAlternate();
                                    }
                                 }}
break;
case 83:
{{ yyval.desc = yyvsp[-1].desc; Descriptor *a = yyval.desc;
                                    while( a ) {
                                      a->setElipsis();
                                      a = a->getAlternate();
                                    }
                                 }}
break;
case 84:
{ yyval.desc = yyvsp[0].desc; }
break;
case 85:
{{ yyval.desc = yyvsp[-1].desc; Descriptor *a = yyval.desc;
                                    while( a ) {
                                      a->setElipsis();
                                      a = a->getAlternate();
                                    }
                                 }}
break;
case 86:
{ yyval.desc = yyvsp[0].desc; }
break;
case 87:
{{ yyval.desc = yyvsp[-2].desc; Descriptor *a = yyval.desc;
                                                  while( a->getAlternate() )
                                                    a = a->getAlternate();
                                                  a->setAlternate(yyvsp[0].desc);
                                                  }}
break;
case 88:
{ yyval.desc = yyvsp[0].desc; }
break;
case 89:
{{ Descriptor *a = yyvsp[-1].desc, *b = yyvsp[0].desc, *last = NULL; yyval.desc = NULL;
                              while( a ) {
                                while( b ) {
                                  Descriptor *d, *s;
                                  if( b->getAlternate() ) d = new Descriptor( *a );
                                  else d = a;
                                  if( a->getAlternate() ) s = new Descriptor( *b );
                                  else s = b;
                                  d->addDaughter(s);
                                  if( yyval.desc == NULL ) yyval.desc = d;
                                  else last->setAlternate(d);
                                  last = d;
                                  Descriptor *next = b->getAlternate();
                                  s->setAlternate(NULL);
                                  b = next;
                                }
                                a = a->getAlternate();
                                b = yyvsp[0].desc;
                              }
                           }}
break;
case 90:
{{ Descriptor *a = yyvsp[0].desc, *last = NULL; yyval.desc = NULL;
                    while( a ) {
                      Descriptor *d = new Descriptor(m_ppSvc, m_resThreshold);
                      d->addDaughter(a);
                      if( yyval.desc == NULL ) yyval.desc = d;
                      else last->setAlternate(d);
                      last = d;
                      Descriptor *next = a->getAlternate();
                      a->setAlternate(NULL);
                      a = next;
                    }
                 }}
break;
case 91:
{{
                              Descriptor *a = yyvsp[-3].desc, *last = NULL; yyval.desc = NULL;
                              std::vector<ParticleMatcher *>::iterator m;
                              while( a ) {
                                for( m=yyvsp[-1].mvect->begin(); m!=yyvsp[-1].mvect->end(); m++ ) {
                                  Descriptor *d, *s;
                                  ParticleMatcher *pm;
                                  if( *m == yyvsp[-1].mvect->back() ) d = a;
                                  else d = new Descriptor( *a );
                                  if( !(*m)->getEmpty() ) {
                                    if( a->getAlternate() ) pm = new ParticleMatcher(**m);
                                    else pm = *m;
                                    s = new Descriptor(pm,m_ppSvc,m_resThreshold);
                                    d->addDaughter(s);
                                  }
                                  if( yyval.desc == NULL ) yyval.desc = d;
                                  else last->setAlternate(d);
                                  last = d;
                                }
                                a = a->getAlternate();
                              }
                           }}
break;
case 92:
{{ Descriptor *last = NULL; yyval.desc = NULL;
                    std::vector<ParticleMatcher *>::iterator m;
                    for( m=yyvsp[-1].mvect->begin(); m!=yyvsp[-1].mvect->end(); m++ ) {
                      Descriptor *a = new Descriptor(m_ppSvc, m_resThreshold);
                      if( !(*m)->getEmpty() ) {
                        Descriptor *d = new Descriptor(*m, m_ppSvc, m_resThreshold);
                        a->addDaughter(d);
                      }
                      if( yyval.desc == NULL ) yyval.desc = a;
                      else last->setAlternate(a);
                      last = a;
                    }
                    delete yyvsp[-1].mvect;
                 }}
break;
case 93:
{{
                              Descriptor *a = yyvsp[-1].desc, *last = NULL; yyval.desc = NULL;
                              std::vector<ParticleMatcher *>::iterator m;
                              while( a ) {
                                for( m=yyvsp[0].mvect->begin(); m!=yyvsp[0].mvect->end(); m++ ) {
                                  Descriptor *d, *s;
                                  ParticleMatcher *pm;
                                  if( *m == yyvsp[0].mvect->back() ) d = a;
                                  else d = new Descriptor( *a );
                                  if( a->getAlternate() ) pm = new ParticleMatcher(**m);
                                  else pm = *m;
                                  s = new Descriptor(pm,m_ppSvc,m_resThreshold);
                                  d->addDaughter(s);
                                  if( yyval.desc == NULL ) yyval.desc = d;
                                  else last->setAlternate(d);
                                  last = d;
                                }
                                a = a->getAlternate();
                              }
                           }}
break;
case 94:
{{
                    Descriptor *last = NULL; yyval.desc = NULL;
                    std::vector<ParticleMatcher *>::iterator m;
                    for( m=yyvsp[0].mvect->begin(); m!=yyvsp[0].mvect->end(); m++ ) {
                      Descriptor *a = new Descriptor(m_ppSvc, m_resThreshold);
	              Descriptor *d = new Descriptor(*m, m_ppSvc, m_resThreshold);
                      a->addDaughter(d);
                      if( yyval.desc == NULL ) yyval.desc = a;
                      else last->setAlternate(a);
                      last = a;
                    }
                    delete yyvsp[0].mvect;
                 }}
break;
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yysslim && yygrowstack())
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
