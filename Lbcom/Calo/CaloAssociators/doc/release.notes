! $Id: release.notes,v 1.35 2005-05-08 09:19:06 ibelyaev Exp $
! =============================================================================
! Package     : CaloAssociators
! =============================================================================
! Responsible : Vanya BELYAEV Ivan.Belyaev@itep.ru
! =============================================================================

! 2005-05-05 - Vanya BELYAEV

 - Complete redesign of MC Relations.
   Many thanks to Marco CATTANEO for useful 
   discussions, thanks to Olivier DESCHAMPS 
   for kind feedback and Cristina CARLOGANU 
   for problem discovery. 
  
   From now the basic low level MC-relation is CaloDigit->MC 

    A) "Linker" object for CaloDigit->MCParticle relations  
       ("LinkerWithKey<MCParticle,CaloDigit>") is created by 
       the algorithm CaloDigitMCTruth 
    
     This algorithm can be run in Boole or Brunel 
     (depending on policy and preferences of application manager)
      - in Boole in can be run directly
      - in Brunel the algorithm "CaloReCreateMCLinks"
        must be run *BEFORE* 
   
     The MC history for given digit is extracted using generic 
     and extremly effecient functions from 
     $CALOEVENTROOT/Event/CaloMCTools.h file, which exploit 
     the internal structure of Calorimete Event Model in the most 
     efficient way 

    B) Relation Table  for CaloDigit -> MCParticle relations 
      ("RelationWeighted1D<CaloDigit,MCParticle,float>")
      is created *ON-DEMAND* from object (A)  by algorithm 
      CaloDigit2MCLinks2Table

    C) Relation Table for CaloCluster->MCParticle relations 
      ("RelationWeighted1D<CaloCluster,MCParticle,float>")
      is created *ON-DEMAND* from the object (B) by algorithm 
      CaloClusterMCTruth

    D) Relation Table for TrgCaloCluster->MCParticle relations 
      ("RelationWeighted1D<TrgCaloCluster,MCParticle,float>")
      is created *ON-DEMAND* from the object (B) by algorithm 
      CaloTrgClusterMCTruth

  Please note that objects (B),(C) and (D) are supposed to be 
  *TRANSIENT* only, they will be created *AUTOMATICALLY* 
  *ON-DEMAND* (however, it is not a crime to write them on tape!).
  In particulat it means that *ALL* existing code, which 
  relies on the existence of object  (C) are not affected.
  In this sence new scheme is absolutely transparent and 
  backward compatible on the level of code 
  However, it is not backward compatible at the level of DST
  content ("data-level") - one can use thies e scema only with "new" 
  DST tapes with persistent object (A) 

  IMPORTANT NOTES:
  ================
  I) Let me remind you that in the previouse scheme the object C 
  is the persistent object. The replacement of object (C) by 
  object (A) in (MC)DST tape results in 10k/event increase of 
  tape size   
  II) Previously the object of type  (C) has been created by 
  using the functions from $CALOEVENT/CaloMCTools.h file with 
  direct navigation till MCCaloHits. 
  New way of building of object (C) result is a bit smaller 
  number of Monte Carlo links (of about ~5% smaller), due to 
  cuts used in the construction ob object (A). Hopefully it 
  causes no problems in real High-Pt physics.  
  
  Here I'd like to summarize the "typical" usage of MC relations 
  in "high-level" application, like HTL or DaVinci:

  It is assumed that the code fragments are placed inside 
  some algorithm, derived from one of "smart bases": 
     GaudiAlgorithm, GaudiHistoAlg, GaudiTupleAlg, 
     CaloAlgorith, CaloHistoAlg(aka CaloMoniAlg), 
     CaloTupleAlg, DVAlgorithm, LoKi::Algo, ... 
 
   =================================================================
   *           ALL MC links from a given cluster:                  *
   =================================================================
   
   typedef const IRelationWeighted<CaloCluster,MCParticle,float> Table ;
   typedef Table::Range                                          Range ;
 
   const Table* table = 
             get<Table>("/Event/Rec/Relations/CaloClusters2MCParticles");
   if ( 0 == table ) { return StatusCode::FAILURE ; }

   const CaloCluster* cluster = ... ; 
 
   /// get *ALL* MC links for the cluster: 
   Range links = table->relations ( cluster ) ;
   
   /// make some printout  
   info() << " Found #relations for the cluster " << links.size() ;
  
   /// make a loop over all relations for given cluster :
   for ( Range::iterator link = links.begin() ; links.end() != link ; ++link )
   {
     /// Monte Carlo particle 
     const MCParticle* particle = link -> to     () ;
     /// its accumulated energy deposition into this cluster
     const double      energy   = link -> weight () ;
     /// make some printout 
     info() << " MC particle accumulated deposition " << energy << endreq ; 
   }
  
   =================================================================
   *           ALL MC links from a given Trg cluster:              *
   =================================================================
  
   typedef const IRelationWeighted<TrgCaloCluster,MCParticle,float> Table ;
   typedef Table::Range                                             Range ;
 
   const Table* table = 
             get<Table>("/Event/Rec/Relations/TrgCaloClusters2MCParticles");
   if ( 0 == table ) { return StatusCode::FAILURE ; }

   const TrgCaloCluster* cluster = ... ; 
 
   /// get *ALL* MC links for the Trg cluster: 
   Range links = table->relations ( cluster ) ;
   
   /// make some printout  
   info() << " Found #relations for the Trg cluster " << links.size() ;
  
   /// make a loop over all relations for given Trg cluster :
   for ( Range::iterator link = links.begin() ; links.end() != link ; ++link )
   {
     /// Monte Carlo particle 
     const MCParticle* particle = link -> to     () ;
     /// its accumulated energy deposition into this cluster
     const double      energy   = link -> weight () ;
     /// make some printout 
     info() << " MC particle accumulated deposition " << energy << endreq ; 
   }
   
   =================================================================
   *           ALL MC links from a given Ecal digit("cell")        *
   =================================================================
  
   typedef const IRelationWeighted<CaloDigit,MCParticle,float> Table ;
   typedef Table::Range                                        Range ;
 
   const Table* table = 
             get<Table>("/Event/Rec/Relations/EcalDigits2MCParticles");
   if ( 0 == table ) { return StatusCode::FAILURE ; }

   const CaloDigit* digit = ... ; 
 
   /// get *ALL* MC links for the calorimeter digit : 
   Range links = table->relations ( digit ) ;
   
   /// make some printout  
   info() << " Found #relations for the digit  " << links.size() ;
  
   /// make a loop over all relations for given digit  :
   for ( Range::iterator link = links.begin() ; links.end() != link ; ++link )
   {
     /// Monte Carlo particle 
     const MCParticle* particle = link -> to     () ;
     /// its accumulated energy deposition into this cluster
     const double      energy   = link -> weight () ;
     /// make some printout 
     info() << " MC particle accumulated deposition " << energy << endreq ; 
   }

   
  The major configurable properties for new algorithms and their default values 
  =============================================================================
   
                     CaloDigitMCTruth 
                     ================
   - "Input" 
      The default value is            CaloDigitLocation::Ecal  
      The location of input container of CaloDigits.
   - "Detector"
      The default value is            DeCalorimeterLocation::Ecal 
      The name of corresponding detector element, it is used to 
      extract the notorious eActive/eTotal ratio and evaluation of 
      transverse energy of calorimeter energy depositions
   - "MinDigitET"
      The default value is            1 MeV          
      Calorimeter digits with the transverse energy over this threshold
      will be used for building of Linker object
   - "MinDigitE"
      The default value is            50 MeV          
      Calorimeter digits with the energy over this threshold
      will be used for building of Linker object
   - "MinParticleETdeposit"
      The default value is            1 MeV        
      The particle with accumulated ET deposit over this 
      threshold will be will be used for construction of 
      Linker object
   - "MinParticleEdeposit"
      The default value is            50 MeV        
      The particle with accumulated E deposit over this 
      threshold will be will be used for construction of Linker object
   - "MinParticleFraction"
      The default value is            1%        
      The particle with relative accumulated E deposit over this 
      threshold will be will be used for construction of Linker object
   - "MinParticleEnergy"
      The default value is            50 MeV 
      Only particles with their energy ove the threshold 
      will be used for construction of Linker object
   
                        CaloDigit2MCLinks2Table
                        =======================

    - "Inputs", 
      The default value is            CaloDigitLocation::Ecal  
      The location of Calorimeter digits (the location of Linker 
      object is derived automatically from this value) 

    - "Output"
      The default value is            "Rec/Relations/CaloDigits2MCParticles"
      The location of relation table 

      In general *FEW* Linkers object could be merges into one relation table
      (E.g. for HCal digits (in needed at all), one MUST to get a separate 
      Linker, but the same Relation Table could be used) 

                        CaloClusterMCTruth
                        ==================
     
     - "Input"
      The default value is        "Rec/Relations/CaloDigits2MCParticles"
      The location of relation table for CaloDigit -> MCParticles relations 

     - "Inputs"
      The default value is         CaloClusterLocation::Ecal + EcalSplit 
      The addresses of Calorimeter Clusters 
 
     - "Output"
      The default value is         "Rec/Relations/CaloClusters2MCParticles"           
      The location of Relation Table for CaloCluster -> MCParticle relations

                        CaloTrgClusterMCTruth
                        =====================

     - "Input"
      The default value is          "Rec/Relations/CaloDigits2MCParticles"
      The location of relation table for CaloDigit -> MCParticles relations 

     - "Inputs"
      The default value is           TrgCaloClusterLocation::Ecal
      The addresses of Calorimeter Trigger Clusters 

     - "Digits"
      The defualt value is           CaloDigitLocation::Ecal 
      The location of Calorimeter Digits, the container used 
      as a function for CaloCellID -> CaloDigit mapping 

     - "Output"
      The default value is          "Rec/Relations/TrgCaloClusters2MCParticles"           
      The location of Relation Table for TrgCaloCluster -> MCParticle relations


   
!===================== CaloAssociators v4r4 2004-11-22 =====================
! 2004-11-22 - Marco Cattaneo
 - Remove direct use of MsgStream from algorithms
 - Adapt options to Relations v2r*

!===================== CaloAssociators v4r3 2004-09-06 =====================
! 2004-07-31 - Ivan Belyaev
 - the factories and associators are moved into Associators/Associators package 

!===================== CaloAssociators v4r2 2004-07-19 =====================
! 2004-07-19 - Marco Cattaneo
 - Add dependency on new Relations package

!===================== CaloAssociators v4r1 2004-03-18 =====================
! 2004-03-17 - Vanya BELYAEV

 - src/CaloClustersMCTruth5Alg.cpp 

   add "warning" printout for 'empty' relation tables, 
   which could be a signature of NULL MC links
   (one need to run CaloReCreateMCLinks algorithm for 
    the data with "RawBuffer")

!===================== CaloAssociators v4r0 2004-02-26 =====================
! 2004-02-17 - Vanya BELYAEV
 - update for new CaloKernel package 
 - increase the *MAJOR* version to v4r0 

!===================== CaloAssociators v3r5 2003-12-16 =====================
! 2003-12-16 - Marco Cattaneo
 - Move to Gaudi v14

!===================== CaloAssociators v3r4 2003-07-16 =====================
! 2003-07-16 - Marco Cattaneo
 - Use CaloEvent v12r*

!===================== CaloAssociators v3r3 2003-04-15 =====================
! 2003-04-02 - Ivan BELYAEV
 - src/CaloClustersMCTruth5Alg.h,.cpp   new *VERY* EFFECTIVE algorithms 
                                        based on MCCaloHistory<CaloCluster> 
                                        evaluator
   src/CaloMCTools.h                    now it is empty 
                                        the contents is moved to 
                                        Event/CaloEvent package 


! 2003-03-28 - Vanya BELYAEV
 - src/CaloClustersMCTruth4Alg.h,.cpp   new algorithm for building the
                                        relation table for CaloClusters.
                                        new features:
                                        1) the relations for
                                        split clusters built
                                        2) Allthresholds are lowered.
 - src/CaloAssociators_load.cpp         add new algorithm
 - cmt/requeirements                    increase the version

! 2003-01-17 - Sebastien Ponce
 - support for gcc 3.2

!================== CaloAssociators v3r2 2002-12-04 =====================
! 2002-11-29 - Ivan Belyaev
 - cmt/requirements      version update

! 2002-11-19 - Florence Ranjard
 - requirements - use new versions

!===================== CaloAssociators v3r1 2002-11-14 =====================
! 2002-11-13 - Ivan Belyaev
 - Minor update of default options

!===================== CaloAssociators v3r0 2002-10-11 =====================
! 2002-09-10 - Gloria Corti
 - move NPPs2MCPs and NeutralPPMCTrughAlg to DaVinciAssociators

! 2002-09-07 - Ivan Belyaev
 - options/NPPs2MCPs.opts      - fix the bug, kindly found by Gloria and Galina
 - src/NeutralPPMCTruthAlh.cpp - fix the bug, kindly found by Gloria and Galina

!=================== CaloAssociators v2r3 2002-09-06 ==========================
! 2002-09-04 - Ivan Belyaev
  - cmt./requirements               - update the version
  - options/NPPs2MCPs.opts          - new file with options for
                                     NeutralProtoParticles
  - src/NeutralPPMCTrithAlg.h,.cpp  - new algorithm to set MCTruth
                                     for neutral ProtoParticles

!=================== CaloAssociators v2r2 2002-07-29 ==========================
! 2002-07-29 - Marco Cattaneo
 - Relink with bug fix in LHCbKernel

!=================== CaloAssociators v2r1 2002-07-18 ==========================
! 2002-07-18 - Ivan Belyaev
 - use new CaloEvent

!=================== CaloAssociators v2r0 2002-07-09 ==========================
! 2002-07-08 - Vanya Belyaev
   src/CaloMCTools.cpp - few changes to make Bill Gates happy

! 2002-06-26 - Ivan Belyaev
 - Add one more MC truth algorithms. Probably it is the most general
  and the most useful. Unfortunately it is quite slow.

! 2002-06-16 - Ivan Belyaev
 - update the options file to make "complex" MC links algoritm default

! 2002-06-15 - Ivan Belyaev
 - version update (to use CaloDet v5r* )

! 2002-06-14 - Ivan Belyaev
 - change the options (remove the misprint)
 - cmt/requiremewnts   update the version (v1r2)

!=================== CaloAssociators v1r1 2002-06-13 ==========================
! 2002-06-13 - v1r1 Ivan Belyaev
 - add new algorithm to make more flexible relations to MC particles

! =============================================================================
! 09 Apr 2002  - v1r0 - Vanya Belyaev
!  Add options files to drive the relation tool and relation uilder algorithm
! NB!!!
! names are not fixed and should be considered as 'temporary'. We are expected
! soem naming conventions from Gloria and Philippe soon. Do not rely heavity
! to current names of Tools, Algorithms and Relation Tables!
! =============================================================================

! =============================================================================
! 07 Apr 2002  - v1r0 - Vanya Belyaev
!  Add trivial primitive relation builder algorithm just as an example
! =============================================================================

! =============================================================================
! 07 Apr 2002  - v1r0 - Vanya Belyaev
!  The first version (new package)
! =============================================================================

! =============================================================================
! The End
! =============================================================================

