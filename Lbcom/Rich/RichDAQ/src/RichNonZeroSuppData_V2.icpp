
//-----------------------------------------------------------------------------
/** @file RichNonZeroSuppData_V2.icpp
 *
 *  Implementation file for RICH DAQ helper class : RichNonZeroSuppData
 *
 *  $Id: RichNonZeroSuppData_V2.icpp,v 1.1 2006-09-07 17:14:11 jonrob Exp $
 *
 *  @author Chris Jones  Christopher.Rob.Jones@cern.ch
 *  @date   2004-12-17
 */
//-----------------------------------------------------------------------------

// Gaudi
#include "GaudiKernel/MsgStream.h"

// local
#include "RichNonZeroSuppData_V2.h"

// namespaces
using namespace LHCb; ///< LHCb general namespace

// =================================================================================================

namespace RichNonZeroSuppDataV2
{

  template< class Version, class Header, class Footer >
  RichDAQ::ShortType RichNonZeroSuppData<Version,Header,Footer>::fillRichSmartIDs( RichSmartID::Vector & ids,
                                                                     const LHCb::RichSmartID hpdID ) const
  {
    m_nHits = 0; // reset number of hits to zero

    // Fill with active channels
    for ( RichDAQ::ShortType iRow = 0; iRow < RichDAQ::MaxDataSize; ++iRow )
    {
      for ( RichDAQ::ShortType iCol = 0; iCol < RichDAQ::MaxDataSize; ++iCol )
      {
        if ( isPixelActive(iRow,iCol) )
        {
          ids.push_back( RichSmartID( hpdID.rich(),
                                      hpdID.panel(),
                                      hpdID.hpdNumInCol(),
                                      hpdID.hpdCol(),
                                      iRow, iCol ) );
          ++m_nHits; // count hits
        }
      }
    }

    return m_nHits;
  }

  template< class Version, class Header, class Footer >
  RichDAQ::ShortType RichNonZeroSuppData<Version,Header,Footer>::hitCount() const
  {
    if ( m_nHits < 0 )
    {
      // not yet calculated, so need to do it here
      m_nHits = 0;
      for ( RichDAQ::ShortType iRow = 0; iRow < RichDAQ::MaxDataSize; ++iRow )
      {
        for ( RichDAQ::ShortType iCol = 0; iCol < RichDAQ::MaxDataSize; ++iCol )
        {
          if ( isPixelActive(iRow,iCol) )
          {
            ++m_nHits; // count hits
          }
        }
      }
    }
    return static_cast<RichDAQ::ShortType>(m_nHits);
  }

} // end V2 namespace
