
//-----------------------------------------------------------------------------
/** @file RichNonZeroSuppData_V1.icpp
 *
 *  Implementation file for RICH DAQ helper class : RichNonZeroSuppData
 *
 *  $Id: RichNonZeroSuppData_V1.icpp,v 1.2 2006-09-16 20:00:22 jonrob Exp $
 *
 *  @author Chris Jones  Christopher.Rob.Jones@cern.ch
 *  @date   2004-12-17
 */
//-----------------------------------------------------------------------------

// Gaudi
#include "GaudiKernel/MsgStream.h"

// local
#include "RichNonZeroSuppData_V1.h"

// namespaces
using namespace LHCb; ///< LHCb general namespace

// =================================================================================================

namespace RichNonZeroSuppDataV1
{

  template< class Version, class Header, class Footer >
  RichDAQ::ShortType RichNonZeroSuppData<Version,Header,Footer>::fillRichSmartIDs( RichSmartID::Vector & ids,
                                                                                   const LHCb::RichSmartID hpdID ) const
  {
    RichDAQ::ShortType nHits(0);

    // Fill with active channels
    for ( RichDAQ::ShortType iRow = 0; iRow < RichDAQ::MaxDataSize; ++iRow )
    {
      for ( RichDAQ::ShortType iCol = 0; iCol < RichDAQ::MaxDataSize; ++iCol )
      {
        if ( isPixelActive(iRow,iCol) )
        {
          ids.push_back( RichSmartID( hpdID.rich(),
                                      hpdID.panel(),
                                      hpdID.hpdNumInCol(),
                                      hpdID.hpdCol(),
                                      iRow, iCol ) );
          ++nHits;
        }
      }
    }

    return nHits;
  }

  template< class Version, class Header, class Footer >
  RichDAQ::ShortType RichNonZeroSuppData<Version,Header,Footer>::hitCount() const
  {
    // For this implementation the header nEightBitBlocksPlusOne word contains the number of hits
    return this->header().nEightBitBlocksPlusOne();
  }

} // end V1 namespace

