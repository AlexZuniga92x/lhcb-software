
//-----------------------------------------------------------------------------
/** @file RichNonZeroSuppData_V3.icpp
 *
 *  Implementation file for RICH DAQ helper class : RichNonZeroSuppData
 *
 *  $Id: RichNonZeroSuppData_V3.icpp,v 1.1 2007-02-01 17:42:29 jonrob Exp $
 *
 *  @author Chris Jones  Christopher.Rob.Jones@cern.ch
 *  @date   2004-12-17
 */
//-----------------------------------------------------------------------------

// Gaudi
#include "GaudiKernel/MsgStream.h"

// local
#include "RichNonZeroSuppData_V3.h"

// RichKernel
#include "RichKernel/RichMap.h"

// =================================================================================================

namespace Rich
{
  namespace DAQ
  {

    namespace RichNonZeroSuppDataV3
    {

      // ------------------------------------------------------------------------------------------------
      template< class Version, class Header, class Footer >
      void
      RichNonZeroSuppData<Version,Header,Footer>::buildData( const LHCb::RichSmartID::Vector & digits )
      {

        // Set data words
        for ( LHCb::RichSmartID::Vector::const_iterator iDig = digits.begin();
              iDig != digits.end(); ++ iDig )
        {
          setPixelActive( (*iDig).pixelRow(), (*iDig).pixelCol() );
        }

        // In extended format mode set footer parity
        // basically, we don't simulate bit errors, so parity word here is just zero
        if ( this->header().extendedFormat() )
        {
          this->setFooter ( Footer(1,0) );
        }

        // Fill the number of 8 bit words + 1 field in header
        Header head ( this->header() );
        head.setNEightBitBlocks ( calcEightBitword(digits) );
        this->setHeader( head );
      }
      // ------------------------------------------------------------------------------------------------

      // ------------------------------------------------------------------------------------------------
      template< class Version, class Header, class Footer >
      ShortType
      RichNonZeroSuppData<Version,Header,Footer>::calcEightBitword( const LHCb::RichSmartID::Vector & digits ) const
      {
        // temporary data map
        typedef Rich::Map< ShortType, ShortType > DataMap;
        DataMap dataM;

        // Loop over digits
        for ( LHCb::RichSmartID::Vector::const_iterator iID = digits.begin();
              iID != digits.end(); ++iID )
        {

          // Get bit and address
          const ShortType bit     =
            RichZSPacked_V2::RichZSPacked::bitFromCol( (*iID).pixelCol() );
          const ShortType address =
            RichZSPacked_V2::RichZSPacked::addressFromRowCol( (*iID).pixelRow(), (*iID).pixelCol() );

          // Set the correct bit on for this address
          this->setBit( dataM[address], bit );

        }

        // How many words ?
        const ShortType nWords = dataM.size()/2 + dataM.size()%2;
        return nWords;
      }
      // ------------------------------------------------------------------------------------------------

      // ------------------------------------------------------------------------------------------------
      template< class Version, class Header, class Footer >
      ShortType
      RichNonZeroSuppData<Version,Header,Footer>::fillRichSmartIDs( LHCb::RichSmartID::Vector & ids,
                                                                    const LHCb::RichSmartID hpdID ) const
      {
        m_nHits = 0; // reset number of hits to zero

        // reserve size in hit vector
        ids.reserve( 96 );

        // Fill with active channels
        for ( ShortType iRow = 0; iRow < MaxDataSize; ++iRow )
        {
          for ( ShortType iCol = 0; iCol < MaxDataSize; ++iCol )
          {
            if ( isPixelActive(iRow,iCol) )
            {
              ids.push_back( LHCb::RichSmartID( hpdID.rich(),
                                                hpdID.panel(),
                                                hpdID.hpdNumInCol(),
                                                hpdID.hpdCol(),
                                                iRow, iCol ) );
              ++m_nHits; // count hits
            }
          }
        }

        return m_nHits;
      }
      // ------------------------------------------------------------------------------------------------

      // ------------------------------------------------------------------------------------------------
      template< class Version, class Header, class Footer >
      ShortType RichNonZeroSuppData<Version,Header,Footer>::hitCount() const
      {
        if ( m_nHits < 0 )
        {
          // not yet calculated, so need to do it here
          m_nHits = 0;
          for ( ShortType iRow = 0; iRow < MaxDataSize; ++iRow )
          {
            for ( ShortType iCol = 0; iCol < MaxDataSize; ++iCol )
            {
              if ( isPixelActive(iRow,iCol) )
              {
                ++m_nHits; // count hits
              }
            }
          }
        }
        return static_cast<ShortType>(m_nHits);
      }
      // ------------------------------------------------------------------------------------------------

    } // end V3 namespace

  }
}
