// $Id: TTOccupancy.icpp,v 1.1 2008-10-16 13:12:03 mneedham Exp $


// Gaudi
#include "GaudiKernel/AlgFactory.h"

// xml geometry
#include "STDet/DeSTDetector.h"
#include "STDet/DeTTSector.h"

#include "Kernel/STLexicalCaster.h"

// LHCbKernel
#include "Kernel/ISTSignalToNoiseTool.h"

// local
#include "TTOccupancy.h"

using namespace LHCb;

//--------------------------------------------------------------------
//
//  TTOccupancy : Monitor occupancies in Trigger Tracker
//
//--------------------------------------------------------------------

template <class PBASE>
inline TTOccupancy<PBASE>::TTOccupancy( const std::string& name, 
                          ISvcLocator* pSvcLocator) :
  ST::HistoAlgBase(name, pSvcLocator),
  m_sigNoiseTool(0)
{
  // constructer
  declareProperty("Threshold", m_threshold);
  declareProperty("SigNoiseTool",m_sigNoiseToolName = "STSignalToNoiseTool");
  declareProperty("BinSize", m_binSize = 32);
  declareProperty("DataLocation",m_dataLocation = dataLocation());

  m_threshold.reserve(2);
  for (int iThres=0; iThres<2; ++iThres ) {
    m_threshold.push_back(defaultThreshold());
  }

  setDetType("TT");
  setForcedInit();
}

template <class PBASE>
inline TTOccupancy<PBASE>::~TTOccupancy()
{
  // destructer
}

template <class PBASE>
StatusCode TTOccupancy<PBASE>::initialize()
{
  // Set the top directory to IT or TT.
  setHistoDir(histoDirName());
  if( "" == histoTopDir() ) setHistoTopDir(detType()+"/");

  // Initialize GaudiHistoAlg
  StatusCode sc = ST::HistoAlgBase::initialize();
  if (sc.isFailure()) return Error("Failed to initialize", sc);

  // sig to noise tool
  m_sigNoiseTool = tool<ISTSignalToNoiseTool>(m_sigNoiseToolName, 
                                              m_sigNoiseToolName + detType());

  m_hMax = 512*8;
  m_nBins = m_hMax/m_binSize;

  return StatusCode::SUCCESS;
}

template <class PBASE>
StatusCode TTOccupancy<PBASE>::execute()
{
  // retrieve Digitizations
  typedef typename PBASE::Container Container; 
  typedef typename Container::const_iterator iterator;

  const Container* objCont = get<Container>(m_dataLocation);

  // histos per digit
  iterator iterObj =  objCont->begin();
  for( ; iterObj != objCont->end(); ++iterObj){
    this->fillHistograms(*iterObj);
  } // loop iterDigit

 
  return StatusCode::SUCCESS;
}

template <class PBASE>
void TTOccupancy<PBASE>::fillHistograms(const PBASE* obj )
{
  // retrieve geom info
  if ( m_sigNoiseTool->signalToNoise(obj) >
       m_threshold[obj->station()-1u]){
  
    const STChannelID aChan = obj->channelID();  

    DeSTSector* aSector = tracker()->findSector(aChan);
    DeTTSector* ttSector = dynamic_cast<DeTTSector*>(aSector);

    const unsigned int nstrips = ttSector->nStrip();
         
    int offset;
    if (aChan.detRegion() == 1) {
      offset = ttSector->column() - 1;
    }
    else if (aChan.detRegion() == 2) {
      aChan.station() == 1 ? 
        offset = ttSector->column() - 7: offset = ttSector->column() - 8;
    }
    else if (aChan.detRegion() == 3){
      aChan.station() == 1 ? 
        offset = ttSector->column() - 10: offset = ttSector->column() - 11;
    }
    else {
      warning() << "Unknown row " << aChan.detRegion() << endmsg;
      return;
    } 
  
    std::string row = ST::toString(ttSector->row());
    plot((double)aChan.strip()-1.+(nstrips*offset),
         "N_"+uniqueDetRegion(aChan)+"_Row_"+row, 0.,m_hMax,m_nBins);

  } // if above threshold

}
