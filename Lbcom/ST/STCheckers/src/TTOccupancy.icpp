// $Id: TTOccupancy.icpp,v 1.3 2009-03-17 14:46:51 mneedham Exp $


// Gaudi
#include "GaudiKernel/AlgFactory.h"

// xml geometry
#include "STDet/DeSTDetector.h"
#include "STDet/DeTTSector.h"

#include "Kernel/LHCbConstants.h"
#include "Kernel/STLexicalCaster.h"

// LHCbKernel
#include "Kernel/ISTSignalToNoiseTool.h"

// local
#include "TTOccupancy.h"

using namespace LHCb;

//--------------------------------------------------------------------
//
//  TTOccupancy : Monitor occupancies in Trigger Tracker
//
//--------------------------------------------------------------------

template <class PBASE>
inline TTOccupancy<PBASE>::TTOccupancy( const std::string& name, 
                          ISvcLocator* pSvcLocator) :
  ST::HistoAlgBase(name, pSvcLocator),
  m_sigNoiseTool(0)
{
  // constructer
  declareProperty("Threshold", m_threshold);
  declareProperty("SigNoiseTool",m_sigNoiseToolName = "STSignalToNoiseTool");
  declareProperty("BinSize", m_binSize = 32);
  declareProperty("DataLocation",m_dataLocation = dataLocation());

  m_threshold.reserve(2);
  for (int iThres=0; iThres<2; ++iThres ) {
    m_threshold.push_back(defaultThreshold());
  }

  setDetType("TT");
  setForcedInit();
}

template <class PBASE>
inline TTOccupancy<PBASE>::~TTOccupancy()
{
  // destructer
}

template <class PBASE>
StatusCode TTOccupancy<PBASE>::initialize()
{
  // Set the top directory to IT or TT.
  setHistoDir(histoDirName());
  if( "" == histoTopDir() ) setHistoTopDir(detType()+"/");

  // Initialize GaudiHistoAlg
  StatusCode sc = ST::HistoAlgBase::initialize();
  if (sc.isFailure()) return Error("Failed to initialize", sc);

  // sig to noise tool
  m_sigNoiseTool = tool<ISTSignalToNoiseTool>(m_sigNoiseToolName, 
                                              m_sigNoiseToolName + detType());

  m_hMax = 512*8;
  m_nBins = m_hMax/m_binSize;

  return StatusCode::SUCCESS;
}

template <class PBASE>
StatusCode TTOccupancy<PBASE>::execute()
{
  // retrieve Digitizations
  typedef typename PBASE::Container Container; 
  typedef typename Container::const_iterator iterator;

  const Container* objCont = get<Container>(m_dataLocation);

  std::map<unsigned int, unsigned int> SectorMap;
  std::map<std::string, unsigned int> BeetleMap;
  std::map<std::string, unsigned int> PortMap;

  // histos per digit
  iterator iterObj =  objCont->begin();
  for( ; iterObj != objCont->end(); ++iterObj){
    this->fillHistograms(*iterObj);
    SectorMap[(*iterObj)->channelID().uniqueSector()] += weight(*iterObj);
    BeetleMap[uniqueBeetle((*iterObj)->channelID())] += weight(*iterObj) ;
    PortMap[uniquePort((*iterObj)->channelID())] += weight(*iterObj) ;
  } // loop iterDigit


  // fill histogram of sector occupancy
  for (std::map<unsigned int, unsigned int>::iterator iterS = SectorMap.begin();    iterS != SectorMap.end(); ++iterS){
    double occ = iterS->second/double(tracker()->sectors().front()->nStrip());
    plot(occ,"module occupancy", -0.005, 1.005, 101);
  } //iter

  // fill histogram of beetle occupancy
  for (std::map<std::string, unsigned int>::iterator iterS = BeetleMap.begin();   iterS != BeetleMap.end(); ++iterS){
    double occ = iterS->second/double(LHCbConstants::nStripsInBeetle);
    plot(occ,"beetle occupancy", -0.005, 1.005, 101);
  } //iter


 // fill histogram of port occupancy
  for (std::map<std::string, unsigned int>::iterator iterP = PortMap.begin(); 
  iterP != PortMap.end(); ++iterP){
    const double occ = iterP->second/double(LHCbConstants::nStripsInPort);
    plot(occ,"port occupancy", -0.005, 1.005, 101);
  } //iter


  return StatusCode::SUCCESS;
}

template <class PBASE>
void TTOccupancy<PBASE>::fillHistograms(const PBASE* obj )
{
  // retrieve geom info
  if ( m_sigNoiseTool->signalToNoise(obj) >
       m_threshold[obj->station()-1u]){
  
    const STChannelID aChan = obj->channelID();  

    DeSTSector* aSector = tracker()->findSector(aChan);
    DeTTSector* ttSector = dynamic_cast<DeTTSector*>(aSector);

    const unsigned int nstrips = ttSector->nStrip();
         
    int offset;

    if (aChan.detRegion() == TTNames::RegionC) {
      offset = ttSector->column() - 1;
    }
    else if (aChan.detRegion() == TTNames::RegionB) {
       offset = ttSector->column() - 7;
    }
    else if (aChan.detRegion() == TTNames::RegionA){
      aChan.station() == TTNames::TTa ? 
        offset = ttSector->column() - 10: offset = ttSector->column() - 12;
    }
    else {
      warning() << "Unknown region " << aChan.detRegion() << endmsg;
      return;
    } 
  
    unsigned int row = ttSector->row();
    if (aChan.detRegion() == TTNames::RegionB && aChan.station() == TTNames::TTb){
      // we have to hack up the row for the LM modules
      if (ttSector->halfModuleType() == "LM" && ttSector->position() == "T" ){
        row = row  + 2u;
      }
    }

    std::string rowString = ST::toString(row);
    plot((double)aChan.strip()-1.+(nstrips*offset),
         "N_"+uniqueDetRegion(aChan)+"_Row_"+rowString, 0.,m_hMax,m_nBins);

  } // if above threshold

}


template <class PBASE>
inline unsigned int TTOccupancy<PBASE>::weight(const PBASE* ) const{
  return 1;
}
