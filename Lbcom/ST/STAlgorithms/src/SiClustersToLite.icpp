#include "SiClustersToLite.h"
#include "SiClusterTraits.h"

template <class TYPE>
inline SiClustersToLite<TYPE>::~SiClustersToLite()
{
  // STClustersToLite destructor
}

template <class TYPE>
inline StatusCode SiClustersToLite<TYPE>::execute()
{
  // output (always make)
  typedef typename SiClusterTraits<TYPE>::LITECONT LiteCont;
  LiteCont* fCont = new LiteCont();
  GaudiAlgorithm::put(fCont, m_outputLocation);

  // get the input data
  typedef typename SiClusterTraits<TYPE>::CLUSCONT Container;
  const Container* clusterCont = 
    GaudiAlgorithm::template getIfExists<Container>(m_inputLocation);
  if ( clusterCont )
  {
    fCont->reserve(clusterCont->size());
    for ( typename Container::const_iterator iterC = clusterCont->begin();
          iterC != clusterCont->end() ; ++iterC ) 
    {
      fCont->push_back((*iterC)->liteCluster());
    } // loop clusters
  }

  return StatusCode::SUCCESS;
}
