/** @file 
 *
 *  Hlt exclusive selections particle making
 *
 *  @author P. Koppenburg
 *  @date 2006-02-01
 */
//---------------------------------------------------------------------
// Charged ProtoParticles
//---------------------------------------------------------------------
Hlt2.Members += { "GaudiSequencer/SeqHlt2Particles" } ;
SeqHlt2Particles.MeasureTime = true ;
SeqHlt2Particles.IgnoreFilterPassed = true ; // do all
SeqHlt2Particles.Members += { "GaudiSequencer/SeqHlt2Charged" } ;
SeqHlt2Charged.MeasureTime = true ;
SeqHlt2Charged.IgnoreFilterPassed = false ;
/**
 * @todo TEMPORARY clone killer - waiting to understand duplicated tracks
 */
SeqHlt2Charged.Members += {
  "TrackEventCloneKiller/HltFullRecoTEMPORARYCloneKiller"} ;
HltFullRecoTEMPORARYCloneKiller.TracksInContainers = { "Hlt/Track/Forward" };
HltFullRecoTEMPORARYCloneKiller.TracksOutContainer = "Hlt/Track/ForwardCLEANED" ;
HltFullRecoTEMPORARYCloneKiller.SkipSameContainerTracks = false ;
HltFullRecoTEMPORARYCloneKiller.CloneFinderTool.CompareAtLHCbIDsLevel = true ;
/**
 * @todo TEMPORARY kill huge events
 */
SeqHlt2Charged.Members += { "NumberOfTracksFilter" };
NumberOfTracksFilter.TrackLocations = { "Hlt/Track/ForwardCLEANED" };
NumberOfTracksFilter.MaxTracks = 1000 ;
/*
 * MC truth associated tracks
 */
SeqHlt2Charged.Members += { "GaudiSequencer/SeqTrueSignalTracks" }; // debug
/*
 * Hacking of errors
 */
SeqHlt2Charged.Members += { "HltInsertTrackErrParam"} ;
HltInsertTrackErrParam.InputLocation = "Hlt/Track/ForwardCLEANED" ;


// -------------------------
// Calo Reco & PIDs --------
// -------------------------
SeqHlt2Particles.Members += {"GaudiSequencer/RecoCALOSeq" };
// Options for Calo reconstruction
#include "$CALORECOROOT/options/HltCaloSeq.opts"

// Special online setting (will be moved to $CALORECOOPT/HltCaloSeq.opts wiht next release)
MergedPi0Rec.EtCut = 2.*GeV;
ToolSvc.InSpd.Extrapolator = "TrackHerabExtrapolator";


// temporary : rededine HLT track location to "Hlt/Track/ForwardCleaned"
InSPD.Inputs =  {"Hlt/Track/ForwardCLEANED" };
InPRS.Inputs =  {"Hlt/Track/ForwardCLEANED" };
InHCAL.Inputs =  {"Hlt/Track/ForwardCLEANED" };
InECAL.Inputs =  {"Hlt/Track/ForwardCLEANED" };
InBREM.Inputs =  {"Hlt/Track/ForwardCLEANED" };
ClusterMatch.Tracks =  {"Hlt/Track/ForwardCLEANED" };
BremMatch.Tracks ={"Hlt/Tracks/ForwardCLEANED"};
ElectronMatch.Tracks ={"Hlt/Tracks/ForwardCLEANED"};
SpdE.Inputs =  {"Hlt/Track/ForwardCLEANED" };
PrsE.Inputs =  {"Hlt/Track/ForwardCLEANED" };
EcalE.Inputs =  {"Hlt/Track/ForwardCLEANED" };
HcalE.Inputs =  {"Hlt/Track/ForwardCLEANED" };
EcalChi22ID.Tracks ={"Hlt/Tracks/ForwardCLEANED"};
ClustChi22ID.Tracks ={"Hlt/Tracks/ForwardCLEANED"};
BremChi22ID.Tracks ={"Hlt/Tracks/ForwardCLEANED"};




//---------------------------------------------------------------------
// MuonID
//---------------------------------------------------------------------
SeqHlt2Particles.Members += { "GaudiSequencer/HltMuonIDSeq"} ;
HltMuonIDSeq.Members += { "MuonRec", "MuonID/HltMuonID" };
#include "$HLTSYSROOT/options/HltMuonID.opts"
HltMuonID.TrackLocation = "Hlt/Track/ForwardCLEANED" ;
HltMuonID.MuonIDLocation = "Hlt/Muon/MuonPID" ;
HltMuonID.MuonTrackLocation = "Hlt/Track/Muon";

//----------------------------------------------------------------------------------------------------
// C.Jones : RICH options
// Disabled by default. To enable uncomment the lines below
//----------------------------------------------------------------------------------------------------

// Global algorithm, using all three radiators
//#include "$RICHHLTSYSOPTS/GlobalPID_AllRads.opts"

// Global algorithm, using only the gas radiators (faster, but no low P PID)
//#include "$RICHHLTSYSOPTS/GlobalPID_GasRads.opts"

// Local algorithm (fastest)
#include "$RICHHLTSYSOPTS/LocalPID.opts"

// temporary, to use the cleaned forward tracks
ToolSvc.HLT.RichTrackCreator.TracksLocation = "Hlt/Track/ForwardCLEANED";

// Explicitly run the RICH reco sequence
//SeqHlt2Charged.Members += { "GaudiSequencer/HltRICHReco" };
// ... or on-demand only when really needed
//DataOnDemandSvc.Algorithms += {"DATA='/Event/Rec/Rich/HltPIDs' TYPE='GaudiSequencer/HltRICHReco'"};
//----------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------
// ChargedProtoPAlg
//---------------------------------------------------------------------
SeqHlt2Particles.Members += { "ChargedProtoPAlg/HltChargedProtoPAlg" } ;
HltChargedProtoPAlg.InputTrackLocation = "Hlt/Track/ForwardCLEANED" ; // Correct this
// HltChargedProtoPAlg.InputTrackLocation = "Hlt/Track/Forward" ; // Correct this
HltChargedProtoPAlg.OutputProtoParticleLocation = "Hlt/ProtoP/Charged" ;
SeqHlt2Particles.Members += { "ChargedProtoCombineDLLsAlg/HltChargedProtoCombDLL" };
HltChargedProtoCombDLL.ProtoParticleLocation = "Hlt/ProtoP/Charged" ;


//---------------------------------------------------------------------
// NeutralProtoPAlg
//---------------------------------------------------------------------
SeqHlt2Particles.Members += { "NeutralProtoPAlg/HltNeutralProtoPAlg" } ;
#include "$CALOPIDSROOT/options/PhotonPDF.opts"


//---------------------------------------------------------------------
// ProtoParticles
//---------------------------------------------------------------------
//HltChargedProtoPAlg.InputRichPIDLocation = "Rec/Rich/HltPIDs";
HltChargedProtoPAlg.InputMuonPIDLocation = "Hlt/Muon/MuonPID";
// Calo PID
HltChargedProtoPAlg.UseCaloSpdPID = true ;
HltChargedProtoPAlg.UseCaloPrsPID = true ;
HltChargedProtoPAlg.UseCaloEcalPID = true ;
HltChargedProtoPAlg.UseCaloHcalPID = true ;
HltChargedProtoPAlg.UseCaloBremPID = true ;
//HltChargedProtoPAlg.UseRichPID = false ; // Protos will NOT have any RICH information - HltRichPIDsKaons will not work
HltChargedProtoPAlg.UseRichPID = true ;    // Use this to add RICH info to the HLT protos, needed for HltRichPIDsKaons
HltChargedProtoPAlg.UseMuonPID = true ;
HltChargedProtoPAlg.UseVeloPID = false ;






//---------------------------------------------------------------------
// Charged Particles - Here make all to Pi and K
//---------------------------------------------------------------------
SeqHlt2Particles.Members += { "PreLoadParticles/HltNoPIDsPions",
                                   "PreLoadParticles/HltNoPIDsKaons" }; 

HltNoPIDsPions.PhysDesktop.ParticleMakerType = "NoPIDsParticleMaker" ;
HltNoPIDsPions.PhysDesktop.NoPIDsParticleMaker.Inputs =  {"Hlt/ProtoP/Charged"} ;
HltNoPIDsPions.PhysDesktop.NoPIDsParticleMaker.Particle =  "pion" ;
HltNoPIDsPions.DecayDescriptor = "Pion" ;

HltNoPIDsKaons.PhysDesktop.ParticleMakerType = "NoPIDsParticleMaker" ;
HltNoPIDsKaons.PhysDesktop.NoPIDsParticleMaker.Inputs =  {"Hlt/ProtoP/Charged"} ;
HltNoPIDsKaons.PhysDesktop.NoPIDsParticleMaker.Particle =  "kaon" ;
HltNoPIDsKaons.DecayDescriptor = "Kaon" ;

// CRJ : Hack to make the 'NoPIDs' kaons use the RICH - Easy way to get everything downstream using the RICH
/*
HltNoPIDsKaons.PhysDesktop.ParticleMakerType = "CombinedParticleMaker" ;
HltNoPIDsKaons.PhysDesktop.CombinedParticleMaker.ExclusiveSelection = false ;
HltNoPIDsKaons.PhysDesktop.CombinedParticleMaker.InputProtoParticles = "Hlt/ProtoP/Charged";
HltNoPIDsKaons.PhysDesktop.CombinedParticleMaker.Particles = {"kaon"} ;
HltNoPIDsKaons.PhysDesktop.CombinedParticleMaker.TrackSelector.TrackTypes = {"Long"};
HltNoPIDsKaons.PhysDesktop.CombinedParticleMaker.Kaon.Selection = {"RequiresDet='RICH' CombDLL(k-pi)>'-5.0'"} ;
HltNoPIDsKaons.DecayDescriptor = "Kaon" ;
*/

//---------------------------------------------------------------------
// Kaons using RICH HLT reco results
//---------------------------------------------------------------------
SeqHlt2Particles.Members += { "PreLoadParticles/HltRichPIDsKaons" }; 

HltRichPIDsKaons.PhysDesktop.ParticleMakerType = "CombinedParticleMaker" ;
HltRichPIDsKaons.PhysDesktop.CombinedParticleMaker.ExclusiveSelection = false ;
HltRichPIDsKaons.PhysDesktop.CombinedParticleMaker.InputProtoParticles = "Hlt/ProtoP/Charged";
HltRichPIDsKaons.PhysDesktop.CombinedParticleMaker.Particles = {"kaon"} ;
HltRichPIDsKaons.PhysDesktop.CombinedParticleMaker.TrackSelector.TrackTypes = {"Long"};
HltRichPIDsKaons.PhysDesktop.CombinedParticleMaker.Kaon.Selection = {"RequiresDet='RICH' CombDLL(k-pi)>'-5.0'"} ;
HltRichPIDsKaons.DecayDescriptor = "Kaon" ;

//---------------------------------------------------------------------
// Muons sequence
//---------------------------------------------------------------------
SeqHlt2Particles.Members += { "GaudiSequencer/SeqHlt2Muons" } ;
SeqHlt2Muons.IgnoreFilterPassed = true ;
//---------------------------------------------------------------------
// Muons from Long tracks
//---------------------------------------------------------------------
SeqHlt2Muons.Members += { "PreLoadParticles/HltForwardMuons" }; 
HltForwardMuons.PhysDesktop.ParticleMakerType = "CombinedParticleMaker" ;
HltForwardMuons.PhysDesktop.CombinedParticleMaker.ExclusiveSelection = false ;
HltForwardMuons.PhysDesktop.CombinedParticleMaker.Particles = {"muon"} ;
HltForwardMuons.PhysDesktop.CombinedParticleMaker.Muon.Selection = {"RequiresDet='MUON'" } ;
HltForwardMuons.PhysDesktop.CombinedParticleMaker.TrackSelector.TrackTypes = {"Long"};
HltForwardMuons.PhysDesktop.CombinedParticleMaker.InputProtoParticles =  "/Event/Hlt/ProtoP/Charged" ;
HltForwardMuons.DecayDescriptor = "Muon" ;
//---------------------------------------------------------------------
// Special case for muons from L0
//---------------------------------------------------------------------
SeqHlt2Muons.Members += { "HltMuonForTES"} ;
//HltMuonForTES.InputSingleLocation ="Hlt/Track/MuonsForwardSingle";
//HltMuonForTES.InputDimuonLocation ="Hlt/Track/DiMuonsForward";
HltMuonForTES.InputSingleLocation ="Hlt/Selection/Track/Hlt1MuonSingleTMVeloT";
HltMuonForTES.InputDimuonLocation ="Hlt/Selection/Track/Hlt1MuonDiMuonTMVeloT";

HltMuonForTES.OutputMuonLocation ="Hlt/Track/MuonsFromAlley";
HltMuonForTES.OutputLevel =3;
// ToolSvc.CloneFinderTool.CompareAtLHCbIDsLevel=true;
HltMuonForTES.CloneFinderTool.CompareAtLHCbIDsLevel=true;

// Hacking of errors
SeqHlt2Muons.Members += { "HltInsertTrackErrParam/HltInsertTrackErrParamMuons"} ;
HltInsertTrackErrParamMuons.InputLocation = "Hlt/Track/MuonsFromAlley" ;

SeqHlt2Muons.Members += { "GaudiSequencer/SeqTrueSignalMuons" } ; // debug

SeqHlt2Muons.Members += { "ChargedProtoPAlg/HltMuonPAlg" } ;
//HltMuonPAlg.InputTrackLocation = "Hlt/Track/ForwardMuonRefined" ; 
//HltMuonPAlg.InputTrackLocation = "Hlt/Track/MuonsForward" ; 
HltMuonPAlg.InputTrackLocation = "Hlt/Track/MuonsFromAlley";
HltMuonPAlg.OutputProtoParticleLocation = "Hlt/ProtoP/Muons" ;
HltMuonPAlg.OutputLevel=3;
HltMuonPAlg.UseCaloSpdPID = true ;
HltMuonPAlg.UseCaloPrsPID = true ;
HltMuonPAlg.UseCaloEcalPID = true ;
HltMuonPAlg.UseCaloHcalPID = true ;
HltMuonPAlg.UseCaloBremPID = true ;
HltMuonPAlg.UseRichPID = false ;
HltMuonPAlg.UseMuonPID = false ; // not needed
HltMuonPAlg.UseVeloPID = false ;

SeqHlt2Muons.Members += { "PreLoadParticles/HltAlleyMuons" };
HltAlleyMuons.PhysDesktop.ParticleMakerType = "NoPIDsParticleMaker" ;
HltAlleyMuons.PhysDesktop.NoPIDsParticleMaker.Inputs =  { "Hlt/ProtoP/Muons"} ;
HltAlleyMuons.PhysDesktop.NoPIDsParticleMaker.Particle =  "muon" ;
HltAlleyMuons.DecayDescriptor = "Muon" ;

//---------------------------------------------------------------------
/// Now merge muons    @todo : kill clones
//---------------------------------------------------------------------
SeqHlt2Muons.Members += { "FilterDesktop/HltMuons"};
HltMuons.PhysDesktop.InputLocations = { "Phys/HltAlleyMuons", "Phys/HltForwardMuons" };

//---------------------------------------------------------------------
// Special case for electrons 
//---------------------------------------------------------------------
SeqHlt2Particles.Members += { "PreLoadParticles/HltElectrons"};
HltElectrons.PhysDesktop.ParticleMakerType = "CombinedParticleMaker" ;
HltElectrons.PhysDesktop.CombinedParticleMaker.ExclusiveSelection = false ;
HltElectrons.PhysDesktop.CombinedParticleMaker.Particles =  {"electron"} ;
HltElectrons.PhysDesktop.CombinedParticleMaker.InputProtoParticles =  "/Event/Hlt/ProtoP/Charged" ;
HltElectrons.PhysDesktop.CombinedParticleMaker.Electron.Selection = {"RequiresDet='CALO' CombDLL(e-pi)>'-2.0'" } ;
HltElectrons.DecayDescriptor = "Electron" ;


//---------------------------------------------------------------------
// Special case for neutrals (photons & pi0s)
//---------------------------------------------------------------------
HltNeutrals.IgnoreFilterPassed = true;
SeqHlt2Particles.Members += {"GaudiSequencer/HltNeutrals"};
HltNeutrals.Members += { 
  "PreLoadParticles/HltPhotons",
  "PreLoadParticles/HltMergedPi0s",
  "PreLoadParticles/HltResolvedPi0s"
};
//Make the photons
HltPhotons.PhysDesktop.ParticleMakerType = "CaloParticleMaker" ;
HltPhotons.PhysDesktop.CaloParticleMaker.Type = "PhotonMaker" ;
HltPhotons.DecayDescriptor = "Gamma" ;
HltPhotons.PhysDesktop.CaloParticleMaker.PhotonMaker.Input= "Hlt/ProtoP/Neutrals"; 
HltPhotons.PhysDesktop.CaloParticleMaker.PhotonMaker.ConvertedPhotons = true  ;
HltPhotons.PhysDesktop.CaloParticleMaker.PhotonMaker.UnConvertedPhotons = true  ;
HltPhotons.PhysDesktop.CaloParticleMaker.PhotonMaker.PtCut = 200.* MeV;
//Make the resolved Pi0s
HltResolvedPi0s.PhysDesktop.ParticleMakerType = "CaloParticleMaker" ;
HltResolvedPi0s.PhysDesktop.CaloParticleMaker.Type = "ResolvedPi0Maker" ;
HltResolvedPi0s.DecayDescriptor = "Pi0" ;
HltResolvedPi0s.PhysDesktop.CaloParticleMaker.ResolvedPi0Maker.PhotonMaker.Input = "Hlt/ProtoP/Neutrals";
HltResolvedPi0s.PhysDesktop.CaloParticleMaker.ResolvedPi0Maker.Pi0MassWindow = 60.* MeV;
HltResolvedPi0s.PhysDesktop.CaloParticleMaker.ResolvedPi0Maker.PhotonMaker.PtCut = 200.*MeV;
//Make the merged Pi0s
HltMergedPi0s.PhysDesktop.ParticleMakerType = "CaloParticleMaker" ;
HltMergedPi0s.PhysDesktop.CaloParticleMaker.Type = "MergedPi0Maker" ;
HltMergedPi0s.DecayDescriptor = "Pi0" ;
HltMergedPi0s.PhysDesktop.CaloParticleMaker.MergedPi0Maker.Input= "Hlt/ProtoP/Neutrals"; 
HltMergedPi0s.PhysDesktop.CaloParticleMaker.MergedPi0Maker.Pi0MassWindow = 60.* MeV;


//---------------------------------------------------------------------
// Special case for Vzero particles
//---------------------------------------------------------------------
SeqHlt2Particles.Members += { "GaudiSequencer/SeqHlt2VzeroLL" } ;
SeqHlt2VzeroLL.MeasureTime = true ;
SeqHlt2VzeroLL.IgnoreFilterPassed = false ;
#include "$HLTKSHORTROOT/options/HltV0LL.opts"
HltV0LL.InputTrackContainer = "Hlt/Track/ForwardCLEANED";
// Kzero from two long tracks
SeqHlt2VzeroLL.Members += {
  "CreateHltVzero/HltV0LL",
  "GaudiSequencer/SeqMakeHltKsLL",
  "GaudiSequencer/SeqMakeHltLambdaLL"
};
SeqMakeHltKsLL.Members += { "HltV0ParticleMakerAlg/HltKsLLParticles" };
SeqMakeHltKsLL.IgnoreFilterPassed = true ;
HltKsLLParticles.V0Location = "Hlt/Vertex/KsLL" ;
HltKsLLParticles.MakeKs = true ;
HltKsLLParticles.MakeLambda = false ;
HltKsLLParticles.PhysDesktop.InputLocations = { "Phys/HltNoPIDsPions" };

SeqMakeHltLambdaLL.Members += { "HltV0ParticleMakerAlg/HltLambdaLLParticles" };
SeqMakeHltLambdaLL.IgnoreFilterPassed = true ;
HltLambdaLLParticles.V0Location = "Hlt/Vertex/KsLL" ;
HltLambdaLLParticles.MakeKs = false ;
HltLambdaLLParticles.MakeLambda = true ;
HltLambdaLLParticles.PhysDesktop.InputLocations = { "Phys/HltNoPIDsPions",
                                                    "Phys/HltNoPIDsProtons"};

/* printout 
SeqMakeHltKsLL.Members += {  "PrintTree/PrintKs" };
PrintKs.PhysDesktop.InputLocations = { "Phys/HltKsLLParticles" };
SeqMakeHltLambdaLL.Members += {  "PrintTree/PrintLambda" };
PrintLambda.PhysDesktop.InputLocations = { "Phys/HltLambdaLLParticles" };
*/

/* debug
HltKsLLParticles.OutputLevel = 2;
HltLambdaLLParticles.OutputLevel = 2;
*/

HltKsLLParticles.RefitVertex = true ; /// @todo Remove when covariance is fixed
HltLambdaLLParticles.RefitVertex = true ; /// @todo Remove when covariance is fixe
