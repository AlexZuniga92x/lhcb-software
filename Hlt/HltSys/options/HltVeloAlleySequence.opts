/*
 * VELO-SPECIFIC HLT SEQUENCES
 */
HltSummaryWriter.Save += {
  "ASideVertexTrigger"
 ,"CSideVertexTrigger"
 ,"OverlapTrackTrigger"
};

HltAlleys.InputSelections += {
  "ASideVertexTrigger"
 ,"CSideVertexTrigger"
 ,"OverlapTrackTrigger"
};

HltVeloClosingSequence.Members = {
  "GaudiSequencer/ASideVertexerSequence"
 ,"GaudiSequencer/CSideVertexerSequence"
};

HltVeloAligningSequence.Members = {
 "GaudiSequencer/OverlapTracksSequence"
};

HltVeloMonitoringSequence.Members = {
 "GaudiSequencer/LiteClusterMonitorSequence"
};

HltVeloClosingSequence.IgnoreFilterPassed=true;
HltVeloAligningSequence.IgnoreFilterPassed=true;
HltVeloMonitoringSequence.IgnoreFilterPassed=true;
ASideVertexerSequence.MeasureTime=true;
CSideVertexerSequence.MeasureTime=true;
OverlapTracksSequence.MeasureTime=true;
LiteClusterMonitorSequence.MeasureTime=true;
ASideVertexerSequence.ModeOR=false;
CSideVertexerSequence.ModeOR=false;
OverlapTracksSequence.ModeOR=false;
LiteClusterMonitorSequence.ModeOR=false;




/*
 * A-side vertexing sequence
 */

ASideVertexerSequence.Members = {
  "DecodeVeloRawBuffer"
 ,"VeloClusterFilter/ASideClusterFilter"
 ,"Tf::PatVeloRTracking/ASideRTracking"
 ,"Tf::PatVeloSpaceTracking/ASideSpaceTracking"
 ,"Tf::PatVeloGeneralTracking/ASideGeneralTracking"
 ,"PatPV3D/ASidePatPV3D"
 ,"HltVertexFilter/ASideVertexTrigger"
};

ASideClusterFilter.MinimumNumberOfRClusters = 12;//4tracks with 3 hits
ASideClusterFilter.MinimumNumberOfPhiClusters = 12;//4tracks with 3 hits
ASideClusterFilter.MaximumNumberOfClusters = 450;//0.5% occupancy
ASideClusterFilter.OutputLiteClusterLocation = "/Event/Raw/Velo/ASideLiteClusters";
ASideClusterFilter.OutputClusterLocation = "/Event/Raw/Velo/ASideClusters";
ASideClusterFilter.FilterOption = "Left";

ASideRTracking.OutputTracksName = "Hlt/Track/ASideRZVelo";
ASideRTracking.HitManagerName = "ASideDefaultVeloRHitManager";

ASideSpaceTracking.InputTracksName = "Hlt/Track/ASideRZVelo";
ASideSpaceTracking.OutputTracksName = "Hlt/Track/ASideVelo";
ASideSpaceTracking.SpaceToolName = "ASideSpaceTool";
ASideSpaceTracking.ASideSpaceTool.RHitManagerName="ASideRHitManager"; 
ASideSpaceTracking.ASideSpaceTool.PhiHitManagerName="ASidePhiHitManager"; 
ASideSpaceTracking.ASideSpaceTool.TrackToolName="ASideTrackTool";

ASideGeneralTracking.RHitManagerName = "ASideRHitManager";
ASideGeneralTracking.PhiHitManagerName= "ASidePhiHitManager";
ASideGeneralTracking.TrackToolName="ASideTrackTool"; 
ASideGeneralTracking.OutputTracksLocation = "Hlt/Track/ASideVelo";

ToolSvc.ASideTrackTool.RHitManagerName="ASideRHitManager"; 
ToolSvc.ASideTrackTool.PhiHitManagerName="ASidePhiHitManager"; 

ToolSvc.ASideRHitManager.DefaultHitManagerName="ASideDefaultVeloRHitManager"; 
ToolSvc.ASidePhiHitManager.DefaultHitManagerName="ASideDefaultVeloPhiHitManager";

ToolSvc.ASideDefaultVeloRHitManager.ClusterLocation = "/Event/Raw/Velo/ASideClusters";
ToolSvc.ASideDefaultVeloRHitManager.LiteClusterLocation = "/Event/Raw/Velo/ASideLiteClusters";

ToolSvc.ASideDefaultVeloPhiHitManager.ClusterLocation = "/Event/Raw/Velo/ASideClusters";
ToolSvc.ASideDefaultVeloPhiHitManager.LiteClusterLocation = "/Event/Raw/Velo/ASideLiteClusters";

ASidePatPV3D.OutputVerticesName = "Hlt/Vertex/ASidePV3D";
ASidePatPV3D.PVOfflineTool.InputTracks = {"Hlt/Track/ASideVelo"};
ASidePatPV3D.PVOfflineTool.PVFitterName = "LSAdaptPV3DFitter";
ASidePatPV3D.PVOfflineTool.PVSeedingName = "PVSeed3DTool";

ASideVertexTrigger.InputSelection  = "TES:Hlt/Vertex/ASidePV3D";
ASideVertexTrigger.FilterDescriptor = {"VertexNumberOfASideTracks,>,4"};
ASideVertexTrigger.HistogramUpdatePeriod = 1;
ASideVertexTrigger.HistoDescriptor = {"VertexNumberOfASideTracks" : ( "VertexNumberOfASideTracks",-0.5,39.5,40)};





/*
 * C-side vertexing sequence
 */

CSideVertexerSequence.Members = {
  "DecodeVeloRawBuffer"
 ,"VeloClusterFilter/CSideClusterFilter"
 ,"Tf::PatVeloRTracking/CSideRTracking"
 ,"Tf::PatVeloSpaceTracking/CSideSpaceTracking"
 ,"Tf::PatVeloGeneralTracking/CSideGeneralTracking"
 ,"PatPV3D/CSidePatPV3D"
 ,"HltVertexFilter/CSideVertexTrigger"
};

CSideClusterFilter.MinimumNumberOfRClusters = 12;//4tracks with 3 hits
CSideClusterFilter.MinimumNumberOfPhiClusters = 12;//4tracks with 3 hits
CSideClusterFilter.MaximumNumberOfClusters = 450;//0.5% occupancy
CSideClusterFilter.OutputLiteClusterLocation = "/Event/Raw/Velo/CSideLiteClusters";
CSideClusterFilter.OutputClusterLocation = "/Event/Raw/Velo/CSideClusters";
CSideClusterFilter.FilterOption = "Right";

CSideRTracking.OutputTracksName = "Hlt/Track/CSideRZVelo";
CSideRTracking.HitManagerName = "CSideDefaultVeloRHitManager";

CSideSpaceTracking.InputTracksName = "Hlt/Track/CSideRZVelo";
CSideSpaceTracking.OutputTracksName = "Hlt/Track/CSideVelo";
CSideSpaceTracking.SpaceToolName = "CSideSpaceTool";
CSideSpaceTracking.CSideSpaceTool.RHitManagerName="CSideRHitManager"; 
CSideSpaceTracking.CSideSpaceTool.PhiHitManagerName="CSidePhiHitManager"; 
CSideSpaceTracking.CSideSpaceTool.TrackToolName="CSideTrackTool";

CSideGeneralTracking.RHitManagerName = "CSideRHitManager";
CSideGeneralTracking.PhiHitManagerName= "CSidePhiHitManager";
CSideGeneralTracking.TrackToolName="CSideTrackTool"; 
CSideGeneralTracking.OutputTracksLocation = "Hlt/Track/CSideVelo";

ToolSvc.CSideTrackTool.RHitManagerName="CSideRHitManager"; 
ToolSvc.CSideTrackTool.PhiHitManagerName="CSidePhiHitManager"; 

ToolSvc.CSideRHitManager.DefaultHitManagerName="CSideDefaultVeloRHitManager"; 
ToolSvc.CSidePhiHitManager.DefaultHitManagerName="CSideDefaultVeloPhiHitManager";

ToolSvc.CSideDefaultVeloRHitManager.ClusterLocation = "/Event/Raw/Velo/CSideClusters";
ToolSvc.CSideDefaultVeloRHitManager.LiteClusterLocation = "/Event/Raw/Velo/CSideLiteClusters";

ToolSvc.CSideDefaultVeloPhiHitManager.ClusterLocation = "/Event/Raw/Velo/CSideClusters";
ToolSvc.CSideDefaultVeloPhiHitManager.LiteClusterLocation = "/Event/Raw/Velo/CSideLiteClusters";

CSidePatPV3D.OutputVerticesName = "Hlt/Vertex/CSidePV3D";
CSidePatPV3D.PVOfflineTool.InputTracks = {"Hlt/Track/CSideVelo"};
CSidePatPV3D.PVOfflineTool.PVFitterName = "LSAdaptPV3DFitter";
CSidePatPV3D.PVOfflineTool.PVSeedingName = "PVSeed3DTool";

CSideVertexTrigger.InputSelection  = "TES:Hlt/Vertex/CSidePV3D";
CSideVertexTrigger.FilterDescriptor = {"VertexNumberOfCSideTracks,>,4"};
CSideVertexTrigger.HistogramUpdatePeriod = 1;
CSideVertexTrigger.HistoDescriptor = {"VertexNumberOfCSideTracks" : ( "VertexNumberOfCSideTracks",-0.5,39.5,40)};





/*
 * Overlap-track-finding sequence
 */

OverlapTracksSequence.Members = {
  "DecodeVeloRawBuffer"
 ,"VeloClusterFilter/OverlapTracksClusterFilter"
 ,"Tf::PatVeloGeneric/OverlapTracksGenericTracking"
 ,"HltTrackFilter/OverlapTrackTrigger"
};

OverlapTracksClusterFilter.OutputLiteClusterLocation = "/Event/Raw/Velo/OverlapTracksLiteClusters";
OverlapTracksClusterFilter.OutputClusterLocation = "/Event/Raw/Velo/OverlapTracksClusters";
OverlapTracksClusterFilter.FilterOption = "Overlap";
OverlapTracksClusterFilter.MinimumNumberOfPhiClusters =18;//1 track with 18 hits
OverlapTracksClusterFilter.MaximumNumberOfPhiClusters =84;//4 tracks with 21 hits

ToolSvc.OverlapTracksTrackTool.RHitManagerName="OverlapTracksRHitManager"; 
ToolSvc.OverlapTracksTrackTool.PhiHitManagerName="OverlapTracksPhiHitManager"; 

ToolSvc.OverlapTracksRHitManager.DefaultHitManagerName="OverlapTracksDefaultVeloRHitManager"; 
ToolSvc.OverlapTracksPhiHitManager.DefaultHitManagerName="OverlapTracksDefaultVeloPhiHitManager";

ToolSvc.OverlapTracksDefaultVeloRHitManager.ClusterLocation = "/Event/Raw/Velo/OverlapTracksClusters";
ToolSvc.OverlapTracksDefaultVeloRHitManager.LiteClusterLocation = "/Event/Raw/Velo/OverlapTracksLiteClusters";

ToolSvc.OverlapTracksDefaultVeloPhiHitManager.ClusterLocation = "/Event/Raw/Velo/OverlapTracksClusters";
ToolSvc.OverlapTracksDefaultVeloPhiHitManager.LiteClusterLocation = "/Event/Raw/Velo/OverlapTracksLiteClusters";

OverlapTracksGenericTracking.RHitManagerName = "OverlapTracksRHitManager";
OverlapTracksGenericTracking.PhiHitManagerName= "OverlapTracksPhiHitManager";
OverlapTracksGenericTracking.Output = "Hlt/Track/OverlapTracks";
OverlapTracksGenericTracking.ConsiderOverlaps = true;
OverlapTracksGenericTracking.CheckReadOut = true;
OverlapTracksGenericTracking.ForwardProp = true;
OverlapTracksGenericTracking.MinModules=10;

OverlapTracksAssociator.TracksInContainer = "Hlt/Track/OverlapTracks";

OverlapTracksPatChecker.VeloTrackLocation = "Hlt/Track/OverlapTracks";

OverlapTrackTrigger.InputSelection  = "TES:Hlt/Track/OverlapTracks";
OverlapTrackTrigger.FilterDescriptor += {"NumberOfASideVeloHits,>,20"};
OverlapTrackTrigger.FilterDescriptor += {"NumberOfCSideVeloHits,>,20"};
OverlapTrackTrigger.HistogramUpdatePeriod = 1;
OverlapTrackTrigger.HistoDescriptor = {
  "NumberOfASideVeloHits" : ( "NumberOfASideVeloHits",0.,100.,100),
  "NumberOfCSideVeloHits" : ( "NumberOfCSideVeloHits",0.,100.,100)
};





/*
 * VELO-specific, HLT-resident monitoring sequence
 */

LiteClusterMonitorSequence.Members = {
  "DecodeVeloRawBuffer"
 ,"Velo::VeloHltLiteClusterMonitor/VeloLiteClusterMonitor"
};

VeloLiteClusterMonitor.HistogramByZone=True;
VeloLiteClusterMonitor.VeloLiteClusterLocation="Raw/Velo/LiteClusters";




/*
 * Overrides to vertexing sequences relevant for a few-module scenario
 *

ASideVertexerSequence.Members = {
  "DecodeVeloRawBuffer"
 ,"VeloClusterFilter/ASideClusterFilter"
 ,"Tf::PatVeloGeneric/ASideGenericTracking"
 ,"PatPV3D/ASidePatPV3D"
 ,"HltVertexFilter/ASideVertexTrigger"
};
CSideVertexerSequence.Members = {
  "DecodeVeloRawBuffer"
 ,"VeloClusterFilter/CSideClusterFilter"
 ,"Tf::PatVeloGeneric/CSideGenericTracking"
 ,"PatPV3D/CSidePatPV3D"
 ,"HltVertexFilter/CSideVertexTrigger"
};

ASideGenericTracking.RHitManagerName = "ASideRHitManager";
ASideGenericTracking.PhiHitManagerName= "ASidePhiHitManager";
ASideGenericTracking.Output = "Hlt/Track/ASideVelo";
ASideGenericTracking.MinModules=3;
ASideGenericTracking.ForwardProp=true;
ASideGenericTracking.CheckReadOut=true;

CSideGenericTracking.RHitManagerName = "CSideRHitManager";
CSideGenericTracking.PhiHitManagerName= "CSidePhiHitManager";
CSideGenericTracking.Output = "Hlt/Track/CSideVelo";
CSideGenericTracking.MinModules=3;
CSideGenericTracking.ForwardProp=true;
CSideGenericTracking.CheckReadOut=true;

ASidePatPV3D.PVOfflineTool.PVSeed3DTool.TrackPairMaxDistance = 2.;
ASidePatPV3D.PVOfflineTool.PVSeed3DTool.MinSeedMultiplicity = 3;
ASidePatPV3D.PVOfflineTool.PVSeed3DTool.zMaxSpread = 10.;
ASidePatPV3D.PVOfflineTool.PVSeed3DTool.xyMaxSpread = 2.;
ASidePatPV3D.PVOfflineTool.LSAdaptPV3DFitter.MinTracks = 3;
ASidePatPV3D.PVOfflineTool.LSAdaptPV3DFitter.TrackErrorScaleFactor = 2.;

CSidePatPV3D.PVOfflineTool.PVSeed3DTool.TrackPairMaxDistance = 2.;
CSidePatPV3D.PVOfflineTool.PVSeed3DTool.MinSeedMultiplicity = 3;
CSidePatPV3D.PVOfflineTool.PVSeed3DTool.zMaxSpread = 10.;
CSidePatPV3D.PVOfflineTool.PVSeed3DTool.xyMaxSpread = 2.;
CSidePatPV3D.PVOfflineTool.LSAdaptPV3DFitter.MinTracks = 3;
CSidePatPV3D.PVOfflineTool.LSAdaptPV3DFitter.TrackErrorScaleFactor = 2.;

ASideVertexTrigger.FilterDescriptor = {"VertexNumberOfASideTracks,>,2"};
CSideVertexTrigger.FilterDescriptor = {"VertexNumberOfCSideTracks,>,2"};

OverlapTracksGenericTracking.MinModules=5;
OverlapTrackTrigger.FilterDescriptor += {"NumberOfASideVeloHits,>,8"};
OverlapTrackTrigger.FilterDescriptor += {"NumberOfCSideVeloHits,>,8"};
*/
