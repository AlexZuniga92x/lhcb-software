//---------------------------
// HLT Reconstruction
//--------------------------

#include "$HLTSYSROOT/options/HltRecoSequence.opts"

//---------------------------
// HLT Had Alley
//--------------------------
HltSummaryWriter.Save += {
  "PV2D",
  "L0EntryTriggerHadron",
  "L0TriggerHadron",
  "HadPreTriggerSingle",
  "HadTrigger"
};

HltAlleys.InputSelections += {"HadTrigger"};

HltHadAlleySequence.MeasureTime = true;
HltHadAlleySequence.Members = {
  "L0Entry/HadL0Entry",
  "HltSequencer/HadPrepareMainHadron",
  "HltTrackFilter/HadPreTriggerSingle",
  "HltSequencer/HadPrepareDiHadron",
  "HltVertexMaker/HadDiHadronVMaker",
  "HltVertexFilter/HadTrigger"
};

HadPrepareMainHadron.MeasureTime = true;
HadPrepareMainHadron.Members = {
  "GaudiSequencer/HltRecoVeloRZSeq" ,
  "HltTrackFilter/HadSingleTFRZVelo",
  "HltTrackUpgrade/HadSingleTRVelo",
  "HltTrackFilter/HadSingleTFVelo",
  "HltTrackMatch/HadSingleTMVeloCalo",
  "GaudiSequencer/HltDecodeT",
  "GaudiSequencer/HltDecodeTT",
  "HltTrackUpgrade/HadSingleTRForward"
};

HadPrepareDiHadron.MeasureTime = true;
HadPrepareDiHadron.ModeOr = true;
HadPrepareDiHadron.Members += {
  "HltTrackFilter/HadPreTriggerSingle",
  "HltSequencer/HadPrepareCompanionHadron"
};

HadPrepareCompanionHadron.MeasureTime = true;
HadPrepareCompanionHadron.Members += {
  "HltTrackUpgrade/HltRecoVelo",
  "HltTrackFilter/HadCompanionTFVelo",
  "HltTrackUpgrade/HadCompanionTRForward",
  "HltTrackFilter/HadCompanionTFForward"
};
HltHadAlleySequence.MeasureTime = true;
HltHadAlleySequence.OutputLevel = 3;

//-------------------------------------------------------------------------
// HLT HadAlley options
//-------------------------------------------------------------------------

//
// Enter if there is a L0Hadron yes
//
HadL0Entry.L0ChannelsName = {"Hadron"};
HadL0Entry.OutputLevel = 3;

// HadL0Calos.MinEt = 3500.;
// HadL0Calos.CaloType = 2;
// HadL0Calos.OutputLevel = 3;
// HadL0Calos.HistogramUpdatePeriod = 0;
// HadL0Calos.HistoDescriptor = {"HadL0Calos":("HadL0Calos",0.,10.,10)};

HadSingleTFRZVelo.InputSelection = "RZVelo";
HadSingleTFRZVelo.FilterDescriptor = {"Calo2DChi2_L0TriggerHadron,<,4"};
HadSingleTFRZVelo.OutputLevel = 3;
HadSingleTFRZVelo.HistogramUpdatePeriod = 0;
HadSingleTFRZVelo.HistoDescriptor = {
  "RZVelo":("RZVelo",0.,100.,100),
  "HadSingleTFRZVelo":("HadSingleTFRZVelo",0,100.,100)
};

HadSingleTRVelo.InputSelection = "HadSingleTFRZVelo";
HadSingleTRVelo.RecoName = "Velo";
HadSingleTRVelo.OutputLevel = 3;

HadSingleTFVelo.InputSelection = "HadSingleTRVelo";
HadSingleTFVelo.FilterDescriptor = {
  "IP_PV2D,||[],0.1,3",
  "Calo3DChi2_L0TriggerHadron,<,4"
};
HadSingleTFVelo.OutputLevel = 3;

HadSingleTMVeloCalo.InputSelection = "HadSingleTRVelo";
HadSingleTMVeloCalo.InputSelection2 = "L0TriggerHadron";
HadSingleTMVeloCalo.MatchName = "VeloCalo";
HadSingleTMVeloCalo.OutputLevel = 3;

HadSingleTRForward.InputSelection  = "HadSingleTFVelo";
HadSingleTRForward.RecoName = "Forward";
HadSingleTRForward.OutputLevel = 3;


HadPreTriggerSingle.InputSelection  = "HadSingleTRForward";
HadPreTriggerSingle.FilterDescriptor = {"PT,>,2500."};
HadPreTriggerSingle.OutputLevel = 3;

HadCompanionTFVelo.InputSelection = "Velo";
HadCompanionTFVelo.FilterDescriptor = {
  "IP_PV2D,||[],0.1,3",
  "MatchIDsFraction_HadPreTriggerSingle,<,0.9",
  "DOCA_HadPreTriggerSingle,<,0.2"
};
HadCompanionTFVelo.OutputLevel = 3;

HadCompanionTRForward.InputSelection = "HadCompanionTFVelo";
HadCompanionTRForward.RecoName = "Forward";
HadCompanionTRForward.OutputLevel = 3;

HadCompanionTFForward.InputSelection = "HadCompanionTRForward";
HadCompanionTFForward.FilterDescriptor = {"PT,>,1000."};
HadCompanionTFForward.OutputLevel = 3;

HadDiHadronVMaker.InputSelection    = "HadPreTriggerSingle";
HadDiHadronVMaker.InputSelection2   = "HadCompanionTFForward";
HadDiHadronVMaker.FilterDescriptor = {"DOCA,<,0.2" };
HadDiHadronVMaker.OutputLevel = 3;
HadDiHadronVMaker.HistogramUpdatePeriod = 0;
HadDiHadronVMaker.HistoDescriptor = {"DOCA":("DOCA",0.,2.,100)};


HadTrigger.InputSelection  = "HadDiHadronVMaker";
HadTrigger.FilterDescriptor = {
  "VertexPointing_PV2D,<,0.4",
  "VertexDz_PV2D,>,2."
};
HadTrigger.OutputLevel = 3;




