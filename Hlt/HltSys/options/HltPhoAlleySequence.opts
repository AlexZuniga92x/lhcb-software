//---------------------------
// HLT Reconstruction
//--------------------------

// in Had Alley #include "$HLTSYSROOT/options/HltRecoSequence.opts"

//---------------------------
// HLT Pho Alley
//--------------------------
HltSummaryWriter.Save += {"L0PhotonDecision",
                          "Hlt1PhotonPhoTrkDecision"
};

HltAlleys.InputSelections += {"Hlt1PhotonPhoTrkDecision"};

Hlt1PhoAlleySequence.Members = {
  "GaudiSequencer/PrepareL0PhotonDecisionSeq",
  "HltL0CaloPrepare/Hlt1PhoTightL0Calos",
  "GaudiSequencer/Hlt1RecoRZVeloSequence",
  "HltTrackFilter/Hlt1PhoTFRZVelo",
  "HltTrackUpgrade/Hlt1PhoTUVelo",
  "HltTrackFilter/Hlt1PhoTFVelo",
  "GaudiSequencer/HltDecodeT",
  "GaudiSequencer/HltDecodeTT",
  "HltTrackUpgrade/Hlt1PhoTUForward",
  "HltTrackFilter/Hlt1PhoTFForward",
  "HltVertexMaker/Hlt1PhotonPhoTrkDecision"
};
Hlt1PhoAlleySequence.MeasureTime = true;




//-------------------------------------------------------------------------
// HLT PhoAlley options (CaloAlleySequence cuts)
//-------------------------------------------------------------------------



Hlt1PhoTightL0Calos.InputSelection   = "L0PhotonDecision";
Hlt1PhoTightL0Calos.CaloType = 1;  // photon !
Hlt1PhoTightL0Calos.MinEt = 2890.0;   // this trigger threshold; tighter than L0 threshold
Hlt1PhoTightL0Calos.OutputLevel = 3;


//    2D IP selection


Hlt1PhoTFRZVelo.InputSelection     = "RZVelo";
//  fake dependence (no matching)
Hlt1PhoTFRZVelo.FilterDescriptor = {"rIP_PV2D,||[],0.10,3.0"};
Hlt1PhoTFRZVelo.HistogramUpdatePeriod = 0;
Hlt1PhoTFRZVelo.HistoDescriptor = {
  "rIP" : ("rIP",-1.,3.,400),
  "rIPBest" : ("rIPBest",-1.,3.,400)};
Hlt1PhoTFRZVelo.OutputLevel = 3;

//  Velo Reco

Hlt1PhoTUVelo.InputSelection = "Hlt1PhoTFRZVelo";
Hlt1PhoTUVelo.RecoName = "Velo";

//    3D IP selection


Hlt1PhoTFVelo.InputSelection     = "Hlt1PhoTUVelo";
Hlt1PhoTFVelo.FilterDescriptor = {"IP_PV2D,||[],0.15,3.0"};
Hlt1PhoTFVelo.HistogramUpdatePeriod = 0;
Hlt1PhoTFVelo.HistoDescriptor = {
  "IP" : ("IP",-1.,3.,400),
  "IPBest" : ("IPBest",-1.,3.,400)
};
Hlt1PhoTFVelo.OutputLevel = 3;

//  Forward 

Hlt1PhoTUForward.InputSelection = "Hlt1PhoTFVelo";
Hlt1PhoTUForward.RecoName = "Forward";
//  Pt cut (call it pretrigger sice couldn't implement veloTT)

Hlt1PhoTFForward.InputSelection     = "Hlt1PhoTUForward";
Hlt1PhoTFForward.FilterDescriptor = {"PT,>,1274."};
Hlt1PhoTFForward.HistogramUpdatePeriod = 0;
Hlt1PhoTFForward.HistoDescriptor =  { 
  "PT"     : ("PT",0.,8000.,100),
  "PTBest" : ("PTBest",0.,8000.,100)
};
Hlt1PhoTFForward.OutputLevel = 3;


// Hlt1PhotonPhoTrkDecision:  Fake Hlt1PhoTFForward-L0Pho vertices (there is no matching here!)

Hlt1PhotonPhoTrkDecision.InputSelection    = "Hlt1PhoTFForward";
Hlt1PhotonPhoTrkDecision.InputSelection2   = "Hlt1PhoTightL0Calos";
Hlt1PhotonPhoTrkDecision.OutputLevel = 3;


