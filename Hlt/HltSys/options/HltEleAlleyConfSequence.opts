//---------------------------
// HLT Reconstruction
//--------------------------

// in Had Alley #include "$HLTSYSROOT/options/HltRecoSequence.opts"

//---------------------------
// HLT Ele Alley
//--------------------------
HltSummaryWriter.Save += {"EleL0Entry",
                          "ElePreTriggerSingle",
                          "EleTriggerSingle",
                          "EleTriggerEleTrk"
};

HltAlleys.InputSelections += {"EleTriggerSingle",
                              "EleTriggerEleTrk"
};

HltEleAlleySequence.Members = {
  "L0Entry/EleL0Entry",
  "GaudiSequencer/HltRecoVeloRZSeq",
  //                       "HltPrepareL0Calos/EleL0Prepare",
  "GaudiSequencer/DVHltEleAlley",
  "HltTrackFilter/EleSingleTFRZVelo",
  "HltTrackUpgrade/EleSingleTRVelo",
  "HltTrackFilter/EleSingleTFVelo",
  "GaudiSequencer/HltDecodeT",
  "GaudiSequencer/HltDecodeTT",
  "HltTrackUpgrade/EleSingleTRForward",
  "HltTrackFilter/ElePreTriggerSingle",
  "HltSequencer/HltEleTriggers"
};
HltEleAlleySequence.MeasureTime = true;

HltEleTriggers.ModeOr = true;
HltEleTriggers.MeasureTime = true;
HltEleTriggers.Members += { "HltTrackFilter/EleTriggerSingle",
                            "HltSequencer/EleTriggerEleTrkSeq"
};

EleTriggerEleTrkSeq.Members += { 
                       "HltTrackUpgrade/HltRecoVelo",
                       "HltTrackFilter/EleCompanionTFVelo",
                       "HltTrackUpgrade/EleCompanionTRForward",
                       "HltTrackFilter/EleCompanionTFForward",
                       "HltVertexMaker/EleDiElectronVMaker",
                       "HltVertexFilter/EleTriggerEleTrk"
};
EleTriggerEleTrkSeq.MeasureTime = true;



//-------------------------------------------------------------------------
// HLT EleAlley options
//-------------------------------------------------------------------------


//
// Enter if there is a L0Electron yes
//
EleL0Entry.L0ChannelsName = {"Electron"};
EleL0Entry.OutputLevel = 3;


//
// select RZVelo tracks with an IP and matched to L0Calo
//
EleSingleTFRZVelo.InputSelection     = "RZVelo";
EleSingleTFRZVelo.FilterDescriptor = {
  "Calo2DChi2_L0TriggerElectron,<,4."
};
EleSingleTFRZVelo.HistogramUpdatePeriod = 0;
EleSingleTFRZVelo.HistoDescriptor = {  
  "Calo2DChi2"     : ("Calo2DChi2",0.,20.,100),
  "Calo2DChi2Best" : ("Calo2DChi2Best",0.,20.,100) 
};
EleSingleTFRZVelo.OutputLevel = 3;

//
// Velo reconstruction of selected RZVelo
//
EleSingleTRVelo.InputSelection  = "EleSingleTFRZVelo";
EleSingleTRVelo.RecoName = "Velo";
EleSingleTRVelo.OutputLevel = 3;

//
// Select Velo tracks with an IP and matched to L0Calo
//
EleSingleTFVelo.InputSelection  = "EleSingleTRVelo";
EleSingleTFVelo.HistogramUpdatePeriod = 0;
EleSingleTFVelo.FilterDescriptor = {
  "IP_PV2D,||[],0.1,3.",
  "Calo3DChi2_L0TriggerElectron,<,4."
};
EleSingleTFVelo.HistoDescriptor = {
  "IP" :           ("IP",-1.,3.,400),
  "IPBest" :       ("IPBest",-1.,3.,400),
  "Calo3DChi2":    ("Calo3DChi2",0.,20.,100),
  "Calo3DChi2Best":("Calo3DChi2Best",0.,20.,100)
};
EleSingleTFVelo.OutputLevel = 3;

//
// Make forward the selected velo tracks
//
EleSingleTRForward.InputSelection  = "EleSingleTFVelo";
EleSingleTRForward.RecoName = "Forward";
EleSingleTRForward.OutputLevel = 3;

//
// Select forward track with a given Pt
//
ElePreTriggerSingle.InputSelection  = "EleSingleTRForward";
ElePreTriggerSingle.FilterDescriptor = {"PT,>,1300."};
ElePreTriggerSingle.HistogramUpdatePeriod = 0;
ElePreTriggerSingle.HistoDescriptor = {
  "PT"     : ("PT",0.,6000.,100),
  "PTBest" : ("PTBest",0.,6000.,100)
};
ElePreTriggerSingle.OutputLevel = 3;

//
// select velo tracks as companions 
//
EleCompanionTFVelo.InputSelection     = "Velo";
EleCompanionTFVelo.PrimaryVerticesName = "PV2D";
EleCompanionTFVelo.HistogramUpdatePeriod = 0;
EleCompanionTFVelo.FilterDescriptor = {
  "IP_PV2D,||[],0.1,3.",
  "DOCA_ElePreTriggerSingle,<,0.2"
};
EleCompanionTFVelo.HistoDescriptor = {
  "IP":       ( "IP",-1.,.3,600),
  "IPBest":   ( "IPBest",-1.,3.,600),
  "DOCA":     ( "DOCA",0.,1.,100),
  "DOCABest": ( "DOCABest",0.,1.,100)
};
EleCompanionTFVelo.OutputLevel = 3;

//
// Do forward the companion tracks
//
EleCompanionTRForward.InputSelection  = "EleCompanionTFVelo";
EleCompanionTRForward.RecoName = "Forward";
EleCompanionTRForward.OutputLevel = 3;

//
// Select companion tracks if they have a fiven Pt
//
EleCompanionTFForward.InputSelection = "EleCompanionTRForward";
EleCompanionTFForward.FilterDescriptor = {"PT,>,1000."};
EleCompanionTFForward.HistogramUpdatePeriod = 0;
EleCompanionTFForward.HistoDescriptor = {
  "PT"     : ("PT",0.,8000.,100),
  "PTBest" : ("PTBest",0.,8000.,100)};
EleCompanionTFForward.OutputLevel = 3;

//
// Make vertices with the forward companion tracks 
//
EleDiElectronVMaker.InputSelection    = "ElePreTriggerSingle";
EleDiElectronVMaker.InputSelection2   = "EleCompanionTFForward";
EleDiElectronVMaker.OutputLevel = 3;
EleDiElectronVMaker.FilterDescriptor = {"DOCA,<,0.2"};
EleDiElectronVMaker.HistogramUpdatePeriod = 0;
EleDiElectronVMaker.HistoDescriptor = { 
  "DOCA" :     ("DOCA",0.,1.,100),
  "DOCABest" : ("DOCABest",0.,0.5,100)
};

//
// select vertices if Pt, poiting, and distance
//
EleTriggerEleTrk.InputSelection   = "EleDiElectronVMaker";
EleTriggerEleTrk.OutputLevel = 3;
EleTriggerEleTrk.FilterDescriptor = {
  "VertexPointing_PV2D,<,0.5",
  "VertexDz_PV2D,>,0."
};
EleTriggerEleTrk.HistogramUpdatePeriod = 0;
EleTriggerEleTrk.HistoDescriptor = {
  "VertexPointing"    : ("VertexPointing",0.,1.,100),
  "VertexPointingBest": ("VertexPointingBest",0.,1.,100),
  "VertexDz"          : ("VertexDz",-10.,50.,100),
  "VertexDzBest"      : ("VertexDzBest",-10.,50.,100)
};

//   TS-added compared to HadAlley:


EleTriggerSingle.InputSelection  = "ElePreTriggerSingle";
EleTriggerSingle.FilterDescriptor = {"PT,>,3000."};
EleTriggerSingle.HistogramUpdatePeriod = 0;
EleTriggerSingle.HistoDescriptor = {
  "PT"     : ("PT",0.,8000.,100),
  "PTBest" : ("PTBest",0.,8000.,100)};
EleTriggerSingle.OutputLevel = 3;




