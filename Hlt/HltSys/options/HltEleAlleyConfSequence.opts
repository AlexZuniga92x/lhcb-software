//---------------------------
// HLT Reconstruction
//--------------------------

// in Had Alley #include "$HLTSYSROOT/options/HltRecoSequence.opts"

//---------------------------
// HLT Ele Alley
//--------------------------
HltSummaryWriter.Save += {"L0ElectronDecision",
                          "Hlt1ElectronSingleDecision",
                          "Hlt1ElectronEleTrkDecision"
};

HltAlleys.InputSelections += {"Hlt1ElectronSingleDecision",
                              "Hlt1ElectronEleTrkDecision"
};

Hlt1EleAlleySequence.Members = {
  "GaudiSequencer/PrepareL0ElectronDecisionSeq", 
  "GaudiSequencer/Hlt1RecoRZVeloSequence",
  //  "GaudiSequencer/DVHlt1EleAlley",
  "HltTrackFilter/Hlt1EleSingleTFRZVelo",
  "HltTrackUpgrade/Hlt1EleSingleTUVelo",
  "HltTrackFilter/Hlt1EleSingleTFVelo",
  "GaudiSequencer/HltDecodeT",
  "GaudiSequencer/HltDecodeTT",
  "HltTrackUpgrade/Hlt1EleSingleTUForward",
  "HltTrackFilter/Hlt1EleTFForward",
  "GaudiSequencer/Hlt1EleTriggers"
};
Hlt1EleAlleySequence.MeasureTime = true;

Hlt1EleTriggers.ModeOr = true;
Hlt1EleTriggers.ShortCircuit = false;
Hlt1EleTriggers.MeasureTime = true;
Hlt1EleTriggers.Members += { "HltTrackFilter/Hlt1ElectronSingleDecision",
                            "GaudiSequencer/Hlt1ElectronEleTrkDecisionSeq"
};

Hlt1ElectronEleTrkDecisionSeq.Members += { 
                       "HltTrackUpgrade/Hlt1RecoVelo",
                       "HltTrackFilter/Hlt1EleCompanionTFVelo",
                       "HltTrackUpgrade/Hlt1EleCompanionTUForward",
                       "HltTrackFilter/Hlt1EleCompanionTFForward",
                       "HltVertexMaker2/Hlt1EleDiElectronVM",
                       "HltVertexFilter/Hlt1ElectronEleTrkDecision"
};
Hlt1ElectronEleTrkDecisionSeq.MeasureTime = true;



//-------------------------------------------------------------------------
// HLT EleAlley options
//-------------------------------------------------------------------------


//
// select RZVelo tracks with an IP and matched to L0Calo
//
Hlt1EleSingleTFRZVelo.InputSelection     = "RZVelo";
Hlt1EleSingleTFRZVelo.FilterDescriptor = {
  "Calo2DChi2_L0ElectronDecision,<,4."
};
Hlt1EleSingleTFRZVelo.HistogramUpdatePeriod = 0;
Hlt1EleSingleTFRZVelo.HistoDescriptor = {  
  "Calo2DChi2"     : ("Calo2DChi2",0.,20.,100),
  "Calo2DChi2Best" : ("Calo2DChi2Best",0.,20.,100) 
};
Hlt1EleSingleTFRZVelo.OutputLevel = 3;

//
// Velo reconstruction of selected RZVelo
//
Hlt1EleSingleTUVelo.InputSelection  = "Hlt1EleSingleTFRZVelo";
Hlt1EleSingleTUVelo.RecoName = "Velo";
Hlt1EleSingleTUVelo.OutputLevel = 3;

//
// Select Velo tracks with an IP and matched to L0Calo
//
Hlt1EleSingleTFVelo.InputSelection  = "Hlt1EleSingleTUVelo";
Hlt1EleSingleTFVelo.HistogramUpdatePeriod = 0;
Hlt1EleSingleTFVelo.FilterDescriptor = {
  "IP_PV2D,||[],0.1,3.",
  "Calo3DChi2_L0ElectronDecision,<,4."
};
Hlt1EleSingleTFVelo.HistoDescriptor = {
  "IP" :           ("IP",-1.,3.,400),
  "IPBest" :       ("IPBest",-1.,3.,400),
  "Calo3DChi2":    ("Calo3DChi2",0.,20.,100),
  "Calo3DChi2Best":("Calo3DChi2Best",0.,20.,100)
};
Hlt1EleSingleTFVelo.OutputLevel = 3;

//
// Make forward the selected velo tracks
//
Hlt1EleSingleTUForward.InputSelection  = "Hlt1EleSingleTFVelo";
Hlt1EleSingleTUForward.RecoName = "Forward";
Hlt1EleSingleTUForward.OutputLevel = 3;

//
// Select forward track with a given Pt
//
Hlt1EleTFForward.InputSelection  = "Hlt1EleSingleTUForward";
Hlt1EleTFForward.FilterDescriptor = {"PT,>,1300."};
Hlt1EleTFForward.HistogramUpdatePeriod = 0;
Hlt1EleTFForward.HistoDescriptor = {
  "PT"     : ("PT",0.,6000.,100),
  "PTBest" : ("PTBest",0.,6000.,100)
};
Hlt1EleTFForward.OutputLevel = 3;

//
// select velo tracks as companions 
//
Hlt1EleCompanionTFVelo.InputSelection    = "Velo";
Hlt1EleCompanionTFVelo.HistogramUpdatePeriod = 0;
Hlt1EleCompanionTFVelo.FilterDescriptor = {
  "IP_PV2D,||[],0.1,3.",
  "DOCA_Hlt1EleTFForward,<,0.2"
};
Hlt1EleCompanionTFVelo.HistoDescriptor = {
  "IP":       ( "IP",-1.,.3,600),
  "IPBest":   ( "IPBest",-1.,3.,600),
  "DOCA":     ( "DOCA",0.,1.,100),
  "DOCABest": ( "DOCABest",0.,1.,100)
};
Hlt1EleCompanionTFVelo.OutputLevel = 3;

//
// Do forward the companion tracks
//
Hlt1EleCompanionTUForward.InputSelection  = "Hlt1EleCompanionTFVelo";
Hlt1EleCompanionTUForward.RecoName = "Forward";
Hlt1EleCompanionTUForward.OutputLevel = 3;

//
// Select companion tracks if they have a fiven Pt
//
Hlt1EleCompanionTFForward.InputSelection = "Hlt1EleCompanionTUForward";
Hlt1EleCompanionTFForward.FilterDescriptor = {"PT,>,1000."};
Hlt1EleCompanionTFForward.HistogramUpdatePeriod = 0;
Hlt1EleCompanionTFForward.HistoDescriptor = {
  "PT"     : ("PT",0.,8000.,100),
  "PTBest" : ("PTBest",0.,8000.,100)};
Hlt1EleCompanionTFForward.OutputLevel = 3;

//
// Make vertices with the forward companion tracks 
//
Hlt1EleDiElectronVM.InputSelection1   = "Hlt1EleTFForward";
Hlt1EleDiElectronVM.InputSelection2   = "Hlt1EleCompanionTFForward";
Hlt1EleDiElectronVM.OutputLevel = 3;
Hlt1EleDiElectronVM.FilterDescriptor = {"DOCA,<,0.2"};
Hlt1EleDiElectronVM.HistogramUpdatePeriod = 0;
Hlt1EleDiElectronVM.HistoDescriptor = { 
  "DOCA" :     ("DOCA",0.,1.,100),
  "DOCABest" : ("DOCABest",0.,0.5,100)
};

//
// select vertices if Pt, poiting, and distance
//
Hlt1ElectronEleTrkDecision.InputSelection   = "Hlt1EleDiElectronVM";
Hlt1ElectronEleTrkDecision.OutputLevel = 3;
Hlt1ElectronEleTrkDecision.FilterDescriptor = {
  "VertexPointing_PV2D,<,0.5",
  "VertexDz_PV2D,>,0."
};
Hlt1ElectronEleTrkDecision.HistogramUpdatePeriod = 0;
Hlt1ElectronEleTrkDecision.HistoDescriptor = {
  "VertexPointing"    : ("VertexPointing",0.,1.,100),
  "VertexPointingBest": ("VertexPointingBest",0.,1.,100),
  "VertexDz"          : ("VertexDz",-10.,50.,100),
  "VertexDzBest"      : ("VertexDzBest",-10.,50.,100)
};

//   TS-added compared to HadAlley:


Hlt1ElectronSingleDecision.InputSelection  = "Hlt1EleTFForward";
Hlt1ElectronSingleDecision.FilterDescriptor = {"PT,>,3000."};
Hlt1ElectronSingleDecision.HistogramUpdatePeriod = 0;
Hlt1ElectronSingleDecision.HistoDescriptor = {
  "PT"     : ("PT",0.,8000.,100),
  "PTBest" : ("PTBest",0.,8000.,100)};
Hlt1ElectronSingleDecision.OutputLevel = 3;




