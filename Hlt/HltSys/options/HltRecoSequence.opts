//------------------------------
// Definition of the reconstruction
//-----------------------------

HltRecoSequence.MeasureTime = true;
HltRecoSequence.Members = {
  "GaudiSequencer/HltRecoVeloRZSeq",
  "HltTrackUpgrade/HltRecoVelo",
  "PatPV3D/HltPatPV3D",
  "GaudiSequencer/HltDecodeTT",
  // "HltTrackUpgrade/HltRecoVeloTT",
  "GaudiSequencer/HltDecodeT",
  "HltTrackUpgrade/HltRecoForward"
};


HltRecoVelo.InputSelection = "RZVelo";
HltRecoVelo.OutputSelection = "Velo";
HltRecoVelo.RecoName = "Velo";
HltRecoVelo.HistogramUpdatePeriod = 0;

HltRecoForward.InputSelection = "Velo";
HltRecoForward.OutputSelection = "Forward";
HltRecoForward.RecoName = "Forward";
HltRecoForward.HistogramUpdatePeriod = 0;


// HltRecoVeloTT.OutputTracksName = "Hlt/Track/VeloTT";
// HltRecoVeloTT.RecoName = "VeloTT";
// HltRecoVeloTT.HistogramUpdatePeriod = 0;
// HltRecoVeloTT.OutputLevel = 3;

// PatHltRecoVeloTT.removeUsedTracks = false;
// PatHltRecoVeloTT.fitTracks = false;
// PatHltRecoVeloTT.maxChi2 = 256.;
// PatHltRecoVeloTT.PatVeloTTTool.minMomentum = 2000.;
// PatHltRecoVeloTT.PatVeloTTTool.DxGroupFactor = 0.0;
// PatHltRecoVeloTT.PatVeloTTTool.maxPseudoChi2 = 256.;
// PatHltRecoVeloTT.PatVeloTTTool.maxSolutionsPerTrack = 1;
// PatHltRecoVeloTT.OutputLevel = 3;



//-----------------------------
// HLT Common reconstruction
//-----------------------------

// TODO: If unique decoding REC/HLT use same algo name
//       or both REC/HLT use DecodeOnDemand
HltRecoVeloRZSeq.MeasureTime = true;
HltRecoVeloRZSeq.Members += { 
  "DecodeVeloRawBuffer", 
  "Tf::PatVeloRTracking/PatHltVeloRTracking",
  "PatPV2D/PatHltPV2D",
  "HltTrackPrepare/HltPrepareRZVelo",
  "HltVertexPrepare/HltPreparePrimaryVertices"
};

PatHltVeloRTracking.OutputTracksName = "Hlt/Track/RZVelo";

PatHltPV2D.InputTracksName = "Hlt/Track/RZVelo";
PatHltPV2D.OutputVerticesName = "Hlt/Vertex/PV2D";

HltPrepareRZVelo.InputSelection   = "Hlt/Track/RZVelo";
HltPrepareRZVelo.AddInfo = false;
HltPrepareRZVelo.FilterDescriptor = {"IsBackward,<,0.5"};
HltPrepareRZVelo.OutputSelection     = "RZVelo";

HltPreparePrimaryVertices.InputSelection = "Hlt/Vertex/PV2D";
HltPreparePrimaryVertices.OutputSelection   = "PV2D";

// 3D Velo tracking and PV
//------------------------
HltRecoVeloSeq.MeasureTime = true;
HltRecoVeloSeq.Members += {
  "HltTrackUpgrade/HltRecoVelo",
  "PatPV3D/HltPatPV3D"
};
HltPatPV3D.PVOfflineTool.InputTracks = {"Hlt/Track/Velo_Alleys"};
HltPatPV3D.PVOfflineTool.PVFitterName = "LSAdaptPV3DFitter";


// Decode TT
//-------------
HltDecodeTT.MeasureTime = true;
HltDecodeTT.Members += { 
  "RawBankToSTLiteClusterAlg/createTTLiteClusters"
};

// Decode T
//--------------
HltDecodeT.MeasureTime = true;
HltDecodeT.Members += { 
  "RawBankToSTLiteClusterAlg/createITLiteClusters"
};
createITLiteClusters.detType = "IT";

// VeloTT
//----------------

//TODO: should be this be here or in the sequencer?

// Forward
//----------------
#include "$PATALGORITHMSROOT/options/PatFwdTool.opts"
ToolSvc.PatForwardTool.OutputLevel = 3;
ToolSvc.PatForwardTool.MinMomentum = 1000. ;  
ToolSvc.PatForwardTool.MinPt       = 80. ;   
ToolSvc.PatAddTTCoord.OutputLevel = 3;
ToolSvc.PatForwardTool.AddTTClusterName = "";

