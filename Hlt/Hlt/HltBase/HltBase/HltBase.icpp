// $Id: HltBase.icpp,v 1.13 2008-06-25 20:14:25 graven Exp $
// Include files


// local
#include "HltBase/HltBase.h"
#include "Event/HltSummary.h"
#include "Event/RecVertex.h"

//-----------------------------------------------------------------------------
// Implementation file for class : HltBase
//
// 2006-06-15 : Jose Angel Hernando Morata
//-----------------------------------------------------------------------------

template <class EBASE>
void HltBase<EBASE>::hltBaseConstructor() {
  
  EBASE::declareProperty("HistoDescriptor", m_histoDescriptor);

  m_dataSvc = 0;
  m_TES = false;
}

template <class EBASE>
HltBase<EBASE>::~HltBase() {} 

template <class EBASE>
StatusCode HltBase<EBASE>::initialize() {  
  EBASE::debug() << "==> Initialize -- calling " <<System::typeinfoName( typeid(EBASE) ) <<  "::initialize"<< endreq;
  StatusCode sc = EBASE::initialize(); 
  if ( sc.isFailure() ) return sc;  // error printed already by GaudiAlgorithm

  if (!EBASE::service( "HltANNSvc", m_hltANNSvc).isSuccess()) return StatusCode::FAILURE;
  
  initializeMsg();
  initializeHistosFromDescriptor();

  return StatusCode::SUCCESS;
}

template <class EBASE>
StatusCode HltBase<EBASE>::finalize() {  
  if (m_hltANNSvc) { m_hltANNSvc->release(); m_hltANNSvc=0;}
  if (m_dataSvc)   { m_dataSvc->release(); m_dataSvc=0;}
  EBASE::debug() << "==> Finalize -- calling " <<System::typeinfoName( typeid(EBASE) ) <<  "::finalize"<< endreq;
  return EBASE::finalize();
}  

template <class EBASE>
void HltBase<EBASE>::initializeMsg() {

  m_verbose = EBASE::msgLevel(MSG::VERBOSE);             
  m_debug   = EBASE::msgLevel(MSG::DEBUG)   || m_verbose ;
  m_info    = EBASE::msgLevel(MSG::INFO)    || m_debug   ;
  m_warning = EBASE::msgLevel(MSG::WARNING) || m_info    ;
  m_error   = EBASE::msgLevel(MSG::ERROR)   || m_warning ;
  m_fatal   = true;

  EBASE::debug() << " msg level " 
                 << m_info << m_debug << m_verbose << endreq;
}

template <class EBASE>
void HltBase<EBASE>::infoTotalEvents(int n) {
  EBASE::info() << " N Entries: \t" << n << endreq;
}

template <class EBASE>
void HltBase<EBASE>::infoSubsetEvents(  int nEventsInSubset, int  nTotEvts, 
                                    const std::string& subsetName)
{
  double f = (nTotEvts<=0? 0.: double(nEventsInSubset)/double(nTotEvts) );
  EBASE::info() << " N " <<subsetName << "\t" << nEventsInSubset 
         << " (" << 100.*f << "%)" << endreq;
}

template <class EBASE>
void HltBase<EBASE>::infoCandidates(  int nTotCandidates, int  nTotEvts, 
                                      const std::string& comment)
{
  double f = (nTotEvts<=0? 0.: double(nTotCandidates)/double(nTotEvts) );
  EBASE::info() << " N  candidates " << comment << " \t" << f  << endreq;
}

template <class EBASE>
void HltBase<EBASE>::initializeHistosFromDescriptor() {

  if (!EBASE::produceHistos()) return;

  const std::map<std::string, Gaudi::Histo1DDef>& hdes =
    m_histoDescriptor.value();
  for (std::map<std::string, Gaudi::Histo1DDef>::const_iterator 
         it = hdes.begin(); it != hdes.end(); it++){
      EBASE::book(it->second);
      EBASE::debug() << " booking histo from descriptor " 
                     << it->second << endreq;
  }
  
}

template <class EBASE>
Hlt::Histo* HltBase<EBASE>::initializeHisto(const std::string& title,
                                            double x0, double xf, int nbins) {
  Hlt::Histo* histo = 0;
  if (!EBASE::produceHistos()) return histo;

  const std::map<std::string,Gaudi::Histo1DDef>& values = 
        m_histoDescriptor.value();
  std::map<std::string,Gaudi::Histo1DDef>::const_iterator i = 
        values.find(title);
  Gaudi::Histo1DDef hd = (i!=values.end()) ? i->second 
                                           : Gaudi::Histo1DDef(title,x0,xf,nbins);
  EBASE::debug() << " booking histogram  " << hd << endreq;
  return EBASE::book(hd);
};

template <class EBASE>
void HltBase<EBASE>::fillHisto( Hlt::Histo& histo, double x, double weight) {
  if (EBASE::produceHistos()) EBASE::fill( &histo , x, weight);
}

template <class EBASE>
void HltBase<EBASE>::fillHisto( Hlt::Histo& histo, 
                                const std::vector<double>& x, 
                                double weight) {
  if (EBASE::produceHistos()) 
      for (std::vector<double>::const_iterator it = x.begin(); 
                                               it != x.end(); ++it)
         EBASE::fill( &histo, *it, weight);
}

//FIXME: don't use member data of Hlt::Counter directly...
template <class EBASE>
void HltBase<EBASE>::initializeCounter (Hlt::Counter& counter, 
                                        const std::string& inputString) { 
  counter.m_name = inputString;
  counter.m_histo = 0;
  counter.m_counter = 0;
  // if (EBASE::produceHistos())
  //  counter.m_histo = initializeHisto(inputString,0.,1.,1);
  EBASE::debug() << " counter " << counter.m_name 
                 << " " << counter.m_counter << endreq;
};

template <class EBASE>
void HltBase<EBASE>::increaseCounter( Hlt::Counter& count, 
                                      int increase) {
  count.m_counter =  count.m_counter + increase;
  EBASE::verbose() << " counter " << count.m_name 
                   << " = " << count.m_counter << endreq;;
  // if (count.m_histo)
  //  EBASE::fill( count.m_histo, 0.5, 1.*increase);
}

template <class EBASE>
IHltDataSvc& HltBase<EBASE>::dataSvc() const {
  if (m_dataSvc == 0) {
    StatusCode sc = EBASE::serviceLocator()->service("HltDataSvc", m_dataSvc);
    EBASE::Assert( sc.isSuccess() && m_dataSvc != 0, " dataSvc() no HltDataSvc");
  }
  return *m_dataSvc;
}


template <class EBASE>
IANNSvc& HltBase<EBASE>::annSvc() const {
  if (m_hltANNSvc == 0) {
    StatusCode sc = EBASE::serviceLocator()->service("HltANNSvc", m_hltANNSvc);
    EBASE::Assert( sc.isSuccess() && m_hltANNSvc != 0, " no HltANNSvc??");
  }
  return *m_hltANNSvc;
}


template <class EBASE>
bool HltBase<EBASE>::validHltSelectionName(const stringKey& selname) 
{
    // use optional<int> automatic conversion to bool...
  return annSvc().value("Hlt1SelectionID",selname.str());
}

template <class EBASE>
int HltBase<EBASE>::hltInfoID(const std::string& infoname) 
{
  boost::optional<IANNSvc::minor_value_type> i =  annSvc().value("InfoID",infoname);
  EBASE::Assert( i, " request for unknown Info ID");
  return i->second;
}

template <class EBASE>
std::string HltBase<EBASE>::hltInfoName(int id) 
{
  boost::optional<IANNSvc::minor_value_type> i =  annSvc().value("InfoID",id);
  EBASE::Assert( i, " request for unknown Info ID");
  return i->first;
}

template <class EBASE>
void HltBase<EBASE>::printInfo(const std::string& title,
                               const LHCb::Track& track) {
  EBASE::info() << title << " track  " << track.key() 
                << " slopes " << track.slopes()  
                << " pt " << track.pt() 
                << " q/p " << track.firstState().qOverP()
                << " ids " << track.lhcbIDs().size() 
                << " states " << track.states().size()
                << endreq;
  printInfo(title+" Info: ",track.extraInfo());
}

template <class EBASE>
void HltBase<EBASE>::printInfo(const std::string& title,
                             const LHCb::RecVertex& vertex) {
  EBASE::info() << title << " vertex  " << vertex.key() << " position " 
               << vertex.position()  << endreq;
  printInfo(title+" Info: ",vertex.extraInfo());
  printInfo(title,vertex.tracks());
}

template<class EBASE>
void HltBase<EBASE>::printInfo(const std::string& title,
                               const GaudiUtils::VectorMap<int,double>& vmap) {
  EBASE::info() << title;
  for (GaudiUtils::VectorMap<int,double>::const_iterator i = vmap.begin(); 
       i != vmap.end(); ++i)
    EBASE::info() << hltInfoName(i->first) << " = " 
                  << i->second << "; \t";
  EBASE::info() << endreq;
}
