
// to write in the summary
HltSummaryWriter.Save += {
  "Hlt1MuonSingleDecision",
  "Hlt1MuonSingleNoIPDecision",
  "Hlt1MuonDiMuonNoIPDecision",
  "Hlt1MuonDiMuonWithIPDecision",
  "Hlt1MuonDiMuon2L0NoIPDecision",
  "Hlt1MuonDiMuonMuonSegNoIPDecision",
  "Hlt1MuonDiMuon2L0WithIPDecision",
  "Hlt1MuonDiMuonMuonSegWithIPDecision",  
  "Hlt1MuonAlleysSF",
  "Hlt1MuonSingleAlleysSF",
  "Hlt1MuonDiMuonAlleysSF", 
  "Hlt1MuonDiMuonAlleysSFNoIP",
  "Hlt1MuonDiMuonAlleysSFWithIP",
  "Hlt1MuonSingleTMVeloT",
  "Hlt1MuonDiMuonTMVeloT",
  "Hlt1MuonDiMuonMuonSegTMVeloT"
};



// to declare as input for the OR of the muon alley
Hlt1Global.InputSelections += {
  "Hlt1MuonSingleDecision",
  "Hlt1MuonSingleNoIPDecision",
  "Hlt1MuonDiMuonNoIPDecision",
  "Hlt1MuonDiMuonWithIPDecision",
  "Hlt1MuonDiMuon2L0WithIPDecision",
  "Hlt1MuonDiMuon2L0NoIPDecision",
  "Hlt1MuonDiMuonMuonSegWithIPDecision",
  "Hlt1MuonDiMuonMuonSegNoIPDecision"
};


HltMuonAlleySequence.Members = {  
  "GaudiSequencer/Hlt1SingleMuonIPandPTSequence",
  "GaudiSequencer/Hlt1SingleMuonNoIPSequence",
  "GaudiSequencer/Hlt1DiMuonFrom2L0NoIPSequence",
  "GaudiSequencer/Hlt1DiMuonFrom2L0IPSequence",
  "GaudiSequencer/Hlt1DiMuonFromMuonSegNoIPSequence",
  "GaudiSequencer/Hlt1DiMuonFromMuonSegIPSequence",
  "GaudiSequencer/Hlt1DiMuonFromL0DiMuonNoIPSequence",
  "GaudiSequencer/Hlt1DiMuonFromL0DiMuonIPSequence",
  "HltSelectionFilter/Hlt1MuonSingleAlleysSF",
  "HltSelectionFilter/Hlt1MuonAlleysSF",
  "HltSelectionFilter/Hlt1MuonDiMuonAlleysSF",  
  "HltSelectionFilter/Hlt1MuonDiMuonAlleysSFNoIP",
  "HltSelectionFilter/Hlt1MuonDiMuonAlleysSFWithIP"
};
HltMuonAlleySequence.ModeOR=true;
HltMuonAlleySequence.ShortCircuit=false;
HltMuonAlleySequence.MeasureTime=true;

Hlt1MuonSingleAlleysSF.InputSelections = {
  "Hlt1MuonSingleDecision",
  "Hlt1MuonSingleNoIPDecision"
};

Hlt1MuonAlleysSF.InputSelections = {
  "Hlt1MuonSingleDecision",
  "Hlt1MuonSingleNoIPDecision",
  "Hlt1MuonDiMuonNoIPDecision",
  "Hlt1MuonDiMuonWithIPDecision",
  "Hlt1MuonDiMuon2L0WithIPDecision",
  "Hlt1MuonDiMuon2L0NoIPDecision",
  "Hlt1MuonDiMuonMuonSegWithIPDecision",
  "Hlt1MuonDiMuonMuonSegNoIPDecision"
};


Hlt1MuonDiMuonAlleysSF.InputSelections = {
  "Hlt1MuonDiMuonNoIPDecision",
  "Hlt1MuonDiMuonWithIPDecision",
  "Hlt1MuonDiMuon2L0WithIPDecision",
  "Hlt1MuonDiMuon2L0NoIPDecision",
  "Hlt1MuonDiMuonMuonSegWithIPDecision",
  "Hlt1MuonDiMuonMuonSegNoIPDecision"
};

Hlt1MuonDiMuonAlleysSFNoIP.InputSelections = {
  "Hlt1MuonDiMuonNoIPDecision",
  "Hlt1MuonDiMuon2L0NoIPDecision",
  "Hlt1MuonDiMuonMuonSegNoIPDecision"
};

Hlt1MuonDiMuonAlleysSFWithIP.InputSelections = {
  "Hlt1MuonDiMuonWithIPDecision",
  "Hlt1MuonDiMuon2L0WithIPDecision",
  "Hlt1MuonDiMuonMuonSegWithIPDecision"
};

HltMuonAlleySequence.Members += {
"HltSelectionFilter/Hlt1MuonAlleysNoIP"
};

Hlt1MuonAlleysNoIP.InputSelections = {
  "Hlt1MuonDiMuonNoIPDecision",
  "Hlt1MuonDiMuon2L0NoIPDecision",
  "Hlt1MuonDiMuonMuonSegNoIPDecision",
  "Hlt1MuonSingleNoIPDecision"
};
HltMuonAlleySequence.Members += {
  "HltSelectionFilter/JA_AcceptedL0Muons"  
};

JA_AcceptedL0Muons.InputSelections = {
  "L0MuonORMuonNoGlob",
  "L0DiMuonDecision"
};




//-------------------------------
//   SINGLE MUON ALLEY
//-------------------------------

Hlt1SingleMuonIPandPTSequence.Members = {
  "GaudiSequencer/Hlt1L0SingleMuonPreparation",
  "GaudiSequencer/Hlt1RecoRZPVSequence",
  "HltTrackFilter/Hlt1MuonSingleDecision"
 };

Hlt1SingleMuonNoIPSequence.Members = {
  "GaudiSequencer/Hlt1L0SingleMuonPreparation",
  "HltTrackFilter/Hlt1MuonSingleNoIPDecision"
};

Hlt1MuonSingleDecision.InputSelection ="Hlt1MuonSingleTMVeloT";
Hlt1MuonSingleDecision.FilterDescriptor = {
  "IP_PV2D,||[],0.08,30.",
  "PT,>,1300"
};
Hlt1MuonSingleDecision.HistoDescriptor = {
  "PT":("PT",0.,10000.,200),
  "PTBest":("PTBest",0.,10000.,200),
  "IP_PV2D":("IP_PV2D",0.,5.,100),
  "IP_PV2DBest":("IP_PV2DBest",0.,5.,100)
};



Hlt1MuonSingleNoIPDecision.InputSelection ="Hlt1MuonSingleTMVeloT";
Hlt1MuonSingleNoIPDecision.FilterDescriptor = {"PT,>,6000"};
Hlt1MuonSingleNoIPDecision.HistoDescriptor = {
  "PT":("PT",0.,10000.,200),
  "PTBest":("PTBest",0.,10000.,200)
};

//---- L0 muon single preparation


Hlt1L0SingleMuonPreparation.Members = { 
  "GaudiSequencer/PrepareL0MuonORMuonNoGlobSeq",
  "HltTrackFilter/Hlt1MuonSingleTFL0",
  "GaudiSequencer/HltDecodeT",
  "HltTrackUpgrade/Hlt1MuonSingleTUTConf" , 
  "HltTrackFilter/ptAt0",
  //  "HltTrackFilter/momentumCleanup",
  "HltTrackFilter/Hlt1MuonSingleTFTConf",
  "GaudiSequencer/Hlt1RecoRZVeloTracksSequence",
  "HltTrackFilter/Hlt1MuonSingleTFRZVelo",
  "HltTrackUpgrade/Hlt1MuonSingleTUVelo",
  "HltTrackMatch/Hlt1MuonSingleTMVeloT"
  
};



//--------------------------
// options of the muon alley
//--------------------------

// Hlt1L0MuonORMuonNoGlob.L0Channels = {"Muon" ,"MuonNoGlob"};

//ToolSvc.MuonSeedTool.useM1=false;

Hlt1MuonSingleTFL0.InputSelection ="L0AllMuons";
Hlt1MuonSingleTFL0.FilterDescriptor = {"PT0,||>,1300"};

Hlt1MuonSingleTUTConf.InputSelection = "Hlt1MuonSingleTFL0";
Hlt1MuonSingleTUTConf.RecoName = "TConf";

Hlt1MuonSingleTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.trackingTool = "PatConfirmTool";
Hlt1MuonSingleTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.restrictSearch = true;
Hlt1MuonSingleTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.nSigmaX=5;
Hlt1MuonSingleTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.nSigmaTx=4;
Hlt1MuonSingleTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.nSigmaY=6;
Hlt1MuonSingleTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.nSigmaTy=6;

ptAt0.InputSelection = "Hlt1MuonSingleTUTConf";
ptAt0.FilterDescriptor = {"ptAtOrigin,>,900."};
ptAt0.HistoDescriptor = {
  "ptAtOrigin":("ptAtOrigin",0.,10000.,200),
  "ptAtOriginBest":("ptAtOriginBest",0.,10000.,200)
};

Hlt1MuonSingleTFTConf.InputSelection = "ptAt0";
Hlt1MuonSingleTFTConf.FilterDescriptor = {"IsMuon,>,-1"};//always true

Hlt1MuonSingleTFRZVelo.InputSelection = "RZVelo";
Hlt1MuonSingleTFRZVelo.FilterDescriptor = {"RZVeloTMatch_Hlt1MuonSingleTFTConf,||<,200."};

Hlt1MuonSingleTUVelo.InputSelection = "Hlt1MuonSingleTFRZVelo";
Hlt1MuonSingleTUVelo.RecoName = "Velo";

Hlt1MuonSingleTMVeloT.InputSelection1 =  "Hlt1MuonSingleTUVelo";
Hlt1MuonSingleTMVeloT.InputSelection2 =  "Hlt1MuonSingleTFTConf";
Hlt1MuonSingleTMVeloT.MatchName = "VeloT";
Hlt1MuonSingleTMVeloT.PatMatchTool.maxMatchChi2 = 5; 


//----------------------------
// DIMUON ALLEY from L0Dimuon
//----------------------------

Hlt1DiMuonFromL0DiMuonNoIPSequence.MeasureTime=true;
Hlt1DiMuonFromL0DiMuonNoIPSequence.Members = {
  "GaudiSequencer/HltDiMuonFromL0DiMuonPreparation",
  "HltVertexFilter/Hlt1MuonDiMuonNoIPDecision"
};

Hlt1DiMuonFromL0DiMuonIPSequence.MeasureTime=true;
Hlt1DiMuonFromL0DiMuonIPSequence.Members = {
  "GaudiSequencer/HltDiMuonFromL0DiMuonPreparation",
  "GaudiSequencer/Hlt1RecoRZPVSequence",
  "HltVertexFilter/Hlt1MuonDiMuonWithIPDecision"
};

HltDiMuonFromL0DiMuonPreparation.MeasureTime=true;
HltDiMuonFromL0DiMuonPreparation.Members = { 
  "GaudiSequencer/PrepareL0DiMuonDecisionSeq",
  "HltVertexToTracks/Hlt1MuonDiMuonV2TL0",
  "GaudiSequencer/HltDecodeT",
  "HltTrackUpgrade/Hlt1MuonDiMuonTUTConf",
  "HltTrackFilter/Hlt1MuonDiMuonTFTConf",
  "GaudiSequencer/Hlt1RecoRZVeloTracksSequence",
  "HltTrackFilter/Hlt1MuonDiMuonTFRZVelo",
  "HltTrackUpgrade/Hlt1MuonDiMuonTUVelo",
  "HltTrackMatch/Hlt1MuonDiMuonTMVeloT",
  "HltVertexMaker1/Hlt1MuonDiMuonVMVeloT",
  "HltVertexFilter/Hlt1MuonDiMuonVFVeloT"
};


Hlt1L0DiMuon.L0Channels = {"DiMuon"};


Hlt1MuonDiMuonV2TL0.InputSelection ="L0DiMuonDecision";

Hlt1MuonDiMuonTUTConf.InputSelection = "Hlt1MuonDiMuonV2TL0";
Hlt1MuonDiMuonTUTConf.RecoName = "TConf";
Hlt1MuonDiMuonTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.trackingTool = "PatConfirmTool";
Hlt1MuonDiMuonTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.restrictSearch = false;
// Hlt1MuonDiMuonTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.nSigmaX=6;
// Hlt1MuonDiMuonTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.nSigmaTx=6;
// Hlt1MuonDiMuonTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.nSigmaY=7;
// Hlt1MuonDiMuonTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.nSigmaTy=7;

Hlt1MuonDiMuonTFTConf.InputSelection = "Hlt1MuonDiMuonTUTConf";
Hlt1MuonDiMuonTFTConf.FilterDescriptor = {"IsMuon,>,-2"};
//Hlt1MuonDiMuonTFTConf.FilterDescriptor = {"pCleanup,>,0"};

Hlt1MuonDiMuonTFRZVelo.InputSelection = "RZVelo";
Hlt1MuonDiMuonTFRZVelo.FilterDescriptor = {"RZVeloTMatch_Hlt1MuonDiMuonTFTConf,||<,80."};

Hlt1MuonDiMuonTUVelo.InputSelection = "Hlt1MuonDiMuonTFRZVelo";
Hlt1MuonDiMuonTUVelo.RecoName = "Velo";

Hlt1MuonDiMuonTMVeloT.InputSelection1 =  "Hlt1MuonDiMuonTUVelo";
Hlt1MuonDiMuonTMVeloT.InputSelection2 =  "Hlt1MuonDiMuonTFTConf";
Hlt1MuonDiMuonTMVeloT.MatchName = "VeloT";
Hlt1MuonDiMuonTMVeloT.PatMatchTool.maxMatchChi2 = 4;

Hlt1MuonDiMuonVMVeloT.InputSelection = "Hlt1MuonDiMuonTMVeloT";
Hlt1MuonDiMuonVMVeloT.FilterDescriptor   = {"DOCA,<,0.5"};
Hlt1MuonDiMuonVMVeloT.HistogramUpdatePeriod = 1;
Hlt1MuonDiMuonVMVeloT.HistoDescriptor = {
  "DOCA":("DOCA",0.,5.,100),
  "DOCABest":("DOCABest",0.,5.,100)
};

Hlt1MuonDiMuonVFVeloT.InputSelection    = "Hlt1MuonDiMuonVMVeloT";
Hlt1MuonDiMuonVFVeloT.FilterDescriptor   = { "VertexMatchIDsFraction_L0DiMuonDecision,>,1.9"};
Hlt1MuonDiMuonVFVeloT.HistoDescriptor = {
  "VertexMatchIDsFraction_L0DiMuonDecision":("VertexMatchIDsFraction_L0DiMuonDecision",0.,10.,100),
  "VertexMatchIDsFraction_L0DiMuonDecisionBest":("VertexMatchIDsFraction_L0DiMuonDecisionBest",0.,10.,100)
};


Hlt1MuonDiMuonNoIPDecision.InputSelection = "Hlt1MuonDiMuonVFVeloT";
Hlt1MuonDiMuonNoIPDecision.FilterDescriptor = {"VertexDimuonMass,>,2500."};
Hlt1MuonDiMuonNoIPDecision.HistoDescriptor = {
  "VertexDimuonMass":("VertexDimuonMass",0.,5000.,200),
  "VertexDimuonMassBest":("VertexDimuonMassBest",0.,5000.,200)
};


Hlt1MuonDiMuonWithIPDecision.InputSelection = "Hlt1MuonDiMuonVFVeloT";
Hlt1MuonDiMuonWithIPDecision.FilterDescriptor = { 
  "VertexDimuonMass,>,500.",
  "VertexMinIP_PV2D,||>,0.15"
};
Hlt1MuonDiMuonWithIPDecision.HistoDescriptor = {
  "VertexDimuonMass":("VertexDimuonMass",0.,5000.,200),
  "VertexDimuonMassBest":("VertexDimuonMassBest",0.,5000.,200),
  "VertexMinIP_PV2D":("VertexMinIP_PV2D",0.,5.,100),
  "VertexMinIP_PV2DBest":("VertexMinIP_PV2DBest",0.,5.,100)
};


//-----------------------------------------------------
// DIMUON ALLEY : from L0Muon + L0Muon
//-----------------------------------------------------



Hlt1DiMuonFrom2L0IPSequence.MeasureTime=true;
Hlt1DiMuonFrom2L0IPSequence.Members = {
  "GaudiSequencer/Hlt1L0SingleMuonPreparation",
  "HltVertexMaker1/Hlt1MuonDiMuon2L0VMVeloT",
  "GaudiSequencer/Hlt1RecoRZPVSequence",
  "HltVertexFilter/Hlt1MuonDiMuon2L0WithIPDecision"
};

Hlt1DiMuonFrom2L0NoIPSequence.MeasureTime=true;
Hlt1DiMuonFrom2L0NoIPSequence.Members = {
  "GaudiSequencer/Hlt1L0SingleMuonPreparation",
  "HltVertexMaker1/Hlt1MuonDiMuon2L0VMVeloT",
  "HltVertexFilter/Hlt1MuonDiMuon2L0NoIPDecision"
};

Hlt1MuonDiMuon2L0VMVeloT.InputSelection = "Hlt1MuonSingleTMVeloT";
Hlt1MuonDiMuon2L0VMVeloT.FilterDescriptor = {"DOCA,<,0.5"};
Hlt1MuonDiMuon2L0VMVeloT.HistoDescriptor = {
  "DOCA":("DOCA",0.,5.,100),
  "DOCABest":("DOCABest",0.,5.,100)
};


Hlt1MuonDiMuon2L0WithIPDecision.InputSelection = "Hlt1MuonDiMuon2L0VMVeloT";
Hlt1MuonDiMuon2L0WithIPDecision.FilterDescriptor = {"VertexDimuonMass,>,500.",
                                                    "VertexMinIP_PV2D,||>,0.15"};
Hlt1MuonDiMuon2L0WithIPDecision.HistoDescriptor = {
  "VertexDimuonMass":("VertexDimuonMass",0.,5000.,200),
  "VertexDimuonMassBest":("VertexDimuonMassBest",0.,5000.,200),
  "VertexMinIP_PV2D":("VertexMinIP_PV2D",0.,5.,100),
  "VertexMinIP_PV2DBest":("VertexMinIP_PV2DBest",0.,5.,100)
};


Hlt1MuonDiMuon2L0NoIPDecision.InputSelection   = "Hlt1MuonDiMuon2L0VMVeloT";
Hlt1MuonDiMuon2L0NoIPDecision.FilterDescriptor = {"VertexDimuonMass,>,2500."};
Hlt1MuonDiMuon2L0NoIPDecision.HistoDescriptor = {
  "VertexDimuonMass":("VertexDimuonMass",0.,5000.,200),
  "VertexDimuonMassBest":("VertexDimuonMassBest",0.,5000.,200)
};

//-----------------------------------------------------
// DIMUON ALLEY : from L0Muon + Muon Segment
//-----------------------------------------------------

Hlt1DiMuonFromMuonSegIPSequence.MeasureTime=true;
Hlt1DiMuonFromMuonSegIPSequence.Members = {
  "GaudiSequencer/Hlt1L0SingleMuonPreparation",
  "GaudiSequencer/HltMuonSegPreparation",
  "HltVertexMaker2/Hlt1MuonDiMuonMuonSegVMVeloT",
  "HltVertexFilter/MSegvertexMinPt",
  "GaudiSequencer/Hlt1RecoRZPVSequence",
  "HltVertexFilter/Hlt1MuonDiMuonMuonSegWithIPDecision"
};

Hlt1DiMuonFromMuonSegNoIPSequence.MeasureTime=true;
Hlt1DiMuonFromMuonSegNoIPSequence.Members = {
  "GaudiSequencer/Hlt1L0SingleMuonPreparation",
  "GaudiSequencer/HltMuonSegPreparation",
  "HltVertexMaker2/Hlt1MuonDiMuonMuonSegVMVeloT",
 "HltVertexFilter/MSegvertexMinPt",
  "HltVertexFilter/Hlt1MuonDiMuonMuonSegNoIPDecision"
};


HltMuonSegPreparation.MeasureTime = true;
HltMuonSegPreparation.Members = {
  "HltSelectionFilter/Hlt1MuonSFSingleTMVeloT",
  "HltMuonRec/Hlt1RecoMuonSeg",
  "HltTrackFilter/Hlt1PrepareMuonSeg",
  "GaudiSequencer/HltDecodeT",
  "HltTrackUpgrade/Hlt1MuonDiMuonMuonSegTUTConf",
  "HltTrackFilter/MSegPtAt0",
  "HltTrackFilter/msegPCleanup",
  "HltTrackFilter/Hlt1MuonDiMuonMuonSegTFTConf", 
  "HltTrackFilter/Hlt1MuonDiMuonMuonSegTFRZVelo",
  "HltTrackUpgrade/Hlt1MuonDiMuonMuonSegTUVelo",
  "HltTrackMatch/Hlt1MuonDiMuonMuonSegTMVeloT"
 
};


Hlt1MuonSFSingleTMVeloT.InputSelections = {"Hlt1MuonSingleTMVeloT"};

// It already Prepare the muon segments with proper error calling the tool MuonSeedTool
Hlt1RecoMuonSeg.OutputMuonTracksName="Hlt/Track/MuonSegmentForL0Single";
Hlt1RecoMuonSeg.DecodingFromCoord=true;

Hlt1RecoMuonSeg.MuonSeedTool.sigmaX2NoM1 = { 2025.,6724.,14641.,36864.  };
Hlt1RecoMuonSeg.MuonSeedTool.sigmaY2NoM1 = { 100.,324.,900.,3721};
Hlt1RecoMuonSeg.MuonSeedTool.sigmaTx2NoM1 = { 49.e-6,169.e-6,400.e-6,1024.e-6};
Hlt1RecoMuonSeg.MuonSeedTool.sigmaTy2NoM1 = { 9.e-6,49.e-6,36.e-6,64.e-6};

Hlt1PrepareMuonSeg.RequirePositiveInputs = false;
Hlt1PrepareMuonSeg.InputSelection = "TES:Hlt/Track/MuonSegmentForL0Single";
Hlt1PrepareMuonSeg.FilterDescriptor = {
  "DoShareM3_Hlt1MuonSingleTUTConf,<,0.5"
 //  "DoShareM3_Hlt1MuonSingleTUTConf,<,5.0"
};

Hlt1MuonDiMuonMuonSegTUTConf.InputSelection = "Hlt1PrepareMuonSeg";
Hlt1MuonDiMuonMuonSegTUTConf.RecoName = "TConf";

Hlt1MuonDiMuonMuonSegTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.trackingTool = "PatConfirmTool";
Hlt1MuonDiMuonMuonSegTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.nSigmaX=6;
Hlt1MuonDiMuonMuonSegTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.nSigmaTx=7;
Hlt1MuonDiMuonMuonSegTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.nSigmaY=8;
Hlt1MuonDiMuonMuonSegTUTConf.HltTrackUpgradeTool.L0ConfirmWithT.PatConfirmTool.nSigmaTy=8;

MSegPtAt0.InputSelection = "Hlt1MuonDiMuonMuonSegTUTConf";
MSegPtAt0.FilterDescriptor = {"ptAtOrigin,>,600."};
MSegPtAt0.HistoDescriptor = {
  "ptAtOrigin":("ptAtOrigin",0.,10000.,200),
  "ptAtOriginBest":("ptAtOriginBest",0.,10000.,200)
};

msegPCleanup.InputSelection = "MSegPtAt0";
msegPCleanup.FilterDescriptor = {"pCleanup,>,-1"};

Hlt1MuonDiMuonMuonSegTFTConf.InputSelection = "msegPCleanup";
//Hlt1MuonDiMuonMuonSegTFTConf.InputSelection = "MSegPtAt0";
//Hlt1MuonDiMuonMuonSegTFTConf.InputSelection = "Hlt1MuonDiMuonMuonSegTUTConf";
Hlt1MuonDiMuonMuonSegTFTConf.FilterDescriptor = {"IsMuon,>,-1"};

Hlt1MuonDiMuonMuonSegTFRZVelo.InputSelection = "RZVelo";
Hlt1MuonDiMuonMuonSegTFRZVelo.FilterDescriptor = {"RZVeloTMatch_Hlt1MuonDiMuonMuonSegTFTConf,||<,150."};

Hlt1MuonDiMuonMuonSegTUVelo.InputSelection = "Hlt1MuonDiMuonMuonSegTFRZVelo";
Hlt1MuonDiMuonMuonSegTUVelo.RecoName = "Velo";

Hlt1MuonDiMuonMuonSegTMVeloT.InputSelection1 = "Hlt1MuonDiMuonMuonSegTUVelo";
Hlt1MuonDiMuonMuonSegTMVeloT.InputSelection2 = "Hlt1MuonDiMuonMuonSegTFTConf";
Hlt1MuonDiMuonMuonSegTMVeloT.MatchName = "VeloT";
Hlt1MuonDiMuonMuonSegTMVeloT.PatMatchTool.maxMatchChi2 = 4;

Hlt1MuonDiMuonMuonSegVMVeloT.InputSelection1 = "Hlt1MuonSingleTMVeloT";
Hlt1MuonDiMuonMuonSegVMVeloT.InputSelection2   = "Hlt1MuonDiMuonMuonSegTMVeloT";
Hlt1MuonDiMuonMuonSegVMVeloT.FilterDescriptor = {"DOCA,<,0.5"};
Hlt1MuonDiMuonMuonSegVMVeloT.HistoDescriptor = {
  "DOCA":("DOCA",0.,5.,100),
  "DOCABest":("DOCABest",0.,5.,100)
};

//If you do not set DoMergeInputs = False it will make vertices
//with 2 tracks from  InputSelection and
//one track from InputSelection and another track from InputSelection2 
Hlt1MuonDiMuonMuonSegVMVeloT.DoMergeInputs = False;

MSegvertexMinPt.InputSelection = "Hlt1MuonDiMuonMuonSegVMVeloT";
MSegvertexMinPt.FilterDescriptor = { "VertexMinPT,>,700."};
MSegvertexMinPt.HistoDescriptor = {
  "VertexMinPT":("VertexMinPT",0.,10000.,200),
  "VertexMinPTBest":("VertexMinPTBest",0.,10000.,200)
};

Hlt1MuonDiMuonMuonSegWithIPDecision.InputSelection = "MSegvertexMinPt";
//Hlt1MuonDiMuonMuonSegWithIPDecision.InputSelection = "Hlt1MuonDiMuonMuonSegVMVeloT";
Hlt1MuonDiMuonMuonSegWithIPDecision.FilterDescriptor = {"VertexDimuonMass,>,500.",
                                                        "VertexMinIP_PV2D,||>,0.15"};
Hlt1MuonDiMuonMuonSegWithIPDecision.HistoDescriptor = {
  "VertexDimuonMass":("VertexDimuonMass",0.,5000.,200),
  "VertexDimuonMassBest":("VertexDimuonMassBest",0.,5000.,200),
  "VertexMinIP_PV2D":("VertexMinIP_PV2D",0.,5.,100),
  "VertexMinIP_PV2DBest":("VertexMinIP_PV2DBest",0.,5.,100)
};

Hlt1MuonDiMuonMuonSegNoIPDecision.InputSelection = "MSegvertexMinPt";
//Hlt1MuonDiMuonMuonSegNoIPDecision.InputSelection = "Hlt1MuonDiMuonMuonSegVMVeloT";
Hlt1MuonDiMuonMuonSegNoIPDecision.FilterDescriptor = {"VertexDimuonMass,>,2500."};
Hlt1MuonDiMuonMuonSegNoIPDecision.HistoDescriptor = {
  "VertexDimuonMass":("VertexDimuonMass",0.,5000.,200),
  "VertexDimuonMassBest":("VertexDimuonMassBest",0.,5000.,200)
};
