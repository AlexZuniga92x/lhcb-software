//
// This file overwrites all selection cuts
//
// kill non-VTT tracks for preselPions and Kaons
HLTPreselPions.Filter.Selections = {"pi+ : TrackTypeFilterCriterion" }; 
HLTPreselKaons.Filter.Selections = {"K+ : TrackTypeFilterCriterion" };  
// kill all other cuts
HLTFilterDs2KKPi.DaughterFilter.Selections = {};
HLTFilterDs2KKPi.MotherFilter.Selections = {};
HLTSeedingKPiMother.MotherFilter.Selections = {};
HLTSeedingKKMother.MotherFilter.Selections = {};
HLTSingleMuons.Filter.Selections = {};
HLTDimuons.MotherFilter.Selections = {};
HLTUnbiasedJpsis.Filter.Selections = {};
HLTHotJpsis.Filter.Selections = {};
HLTPreselPhotons.Filter.Selections = {} ;
HLTSeedingVertices.MotherFilter.Selections = {};
HLTFilterB2HH.DaughterFilter.Selections = {};
HLTFilterB2HH.MotherFilter.Selections = {};
HLTFilterB2MuMu.Filter.Selections = {};
FilterD0ForHLTBd2D0Kstar.Filter.Selections = {};
FilterKstarForHLTBd2D0Kstar.Filter.Selections = {};
HLTFilterBd2D0Kstar.MotherFilter.Selections = {};
FilterD0ForHLTBd2DstarPi.Filter.Selections = {};
HLTDstarForBd2DstarPi.DaughterFilter.Selections = {};
HLTDstarForBd2DstarPi.MotherFilter.Selections = {};
HLTFilterBd2DstarPi.DaughterFilter.Selections = {};
HLTFilterBd2DstarPi.MotherFilter.Selections = {};
HLTFilterBd2MuMuKstar.DaughterFilter.Selections = {};
HLTFilterBd2MuMuKstar.MotherFilter.Selections = {};
HLTFilterBs2DsH.DaughterFilter.Selections = {};
HLTFilterBs2DsH.MotherFilter.Selections = {};
HLTFilterBs2JpsiPhi.DaughterFilter.Selections = {};
HLTFilterBs2JpsiPhi.MotherFilter.Selections = {};
HLTFilterBs2PhiGamma.DaughterFilter.Selections = {};
HLTFilterBs2PhiGamma.MotherFilter.Selections = {};
HLTFilterBs2PhiPhi.DaughterFilter.Selections = {};
HLTFilterBs2PhiPhi.MotherFilter.Selections = {};
HLTFilterDstar.DaughterFilter.Selections = {}; 
HLTFilterDstar.MotherFilter.Selections = {};
HLTSharedD02KH.DaughterFilter.Selections = {};
HLTSharedD02KH.MotherFilter.Selections = {}; 
HLTLooseD02PiPi.DaughterFilter.Selections = {};
HLTLooseD02PiPi.MotherFilter.Selections = {}; 
HLTSharedKstar.MotherFilter.Selections = {} ;
HLTSharedPhi.MotherFilter.Selections = {};

// mass windows
HLTFilterDs2KKPi.Window = 14*TeV ;// hlt tuned: 45 MeV, hlt presel: 100 MeV, offline is 15 MeV
HLTSeedingKPiMother.Window = 14*TeV ; // up to 6 GeV
HLTSeedingKKMother.Window = 14*TeV ; // up to 6 GeV
HLTDimuons.LowerWindow = 14*TeV ; // go down to zero
HLTDimuons.UpperWindow = 14.*TeV ; // up to infinity
HLTSeedingVertices.Window = 14*TeV ; // up to 5.5 GeV
HLTFilterB2HH.Window = 14*TeV;// to take into account the K and Bs mass. Largely enough.
HLTFilterBd2D0Kstar.Window = 14*TeV; // hlt tuned: 500 MeV, hlt presel: 500 MeV, offline tight is 50 MeV, loose is 500 MeV
HLTDstarForBd2DstarPi.Window = 14*TeV; // hlt tuned: 40 MeV, hlt presel: 200 MeV, offline is 150 MeV for D*
HLTFilterBd2DstarPi.Window = 14*TeV; // hlt tuned: 500 MeV, hlt presel: 500 MeV, offline tight is 50 MeV, loose is 200 MeV
HLTFilterBd2MuMuKstar.Window = 14*TeV;
HLTFilterBs2DsH.Window = 14*TeV; // later corrected to 500 MeV downwards
HLTFilterBs2JpsiPhi.Window = 14*TeV ;
HLTFilterBs2PhiGamma.Window = 14*TeV; // hlt tuned: xxx MeV, hlt presel: 1000 MeV, offline tight is 200 MeV, loose 1 < GeV
HLTFilterBs2PhiPhi.Window = 14*TeV ;
HLTFilterDstar.UpperWindow = 14*TeV ; // to be revised
HLTFilterDstar.LowerWindow = 14*TeV ; // to be revised
HLTSharedD02KH.Window = 14*TeV ; //
HLTLooseD02PiPi.UpperWindow = 14*TeV ; // to be revised
HLTLooseD02PiPi.LowerWindow = 14*TeV ; // to be revised
HLTSharedKstar.Window = 14*TeV ; //
HLTSharedPhi.Window = 14*TeV ; //

// MinPt
HLTFilterDs2KKPi.MinPt = 0.; // hlt tuned: 2500 MeV, hlt presel: 0 MeV, no offline cut
HLTFilterB2HH.MinPt = 0.; // hlt tuned: 1000 MeV, hlt presel: 0 MeV, offline is 1000-1600 MeV
HLTDstarForBd2DstarPi.MinPt = 0.*MeV; // hlt tuned: 500 MeV, hlt presel: 0 MeV, offline is 1400 MeV
HLTFilterBs2DsH.MinPt = 0.*MeV; // hlt tuned: 3000 MeV, hlt presel: 0 MeV, no offline cut
HLTFilterBs2PhiGamma.MinPt = 0.*MeV;  // hlt tuned: xxx MeV, hlt presel: 0 MeV, no offline cut
HLTFilterDstar.MinPt = 0*MeV ;  // From Thomas
HLTSharedD02KH.MinPt = 0.*MeV; // MeV
HLTLooseD02PiPi.MinPt = 0.*MeV;

// MinMomentum
// nothing
