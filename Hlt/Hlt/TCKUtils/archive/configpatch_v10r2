
def initialTCKs() :
	cas = ConfigTarFileAccessSvc(Mode='ReadWrite')

	ids = { 0x80920000 : '9fe40771e93affe42e2cd59a1c4f3326' }

	patch1 = { 'id' : ids[ 0x80920000 ] 
		 , 'updates' : { 'Hlt1Tell1ErrorPreScaler' : { 'AcceptFraction':'1' } }
		 , 'label' : 'ODINPhys,Timing acc=1, ODINTech,Aux,NZS,Calib acc=PVSS, TELL1Error acc=1'
		 , 'cas'   : cas
		 }
	ids[ 0x80930000 ] = updateProperties( **patch1 )
	createTCKEntries( ids, cas =  cas )


def updateL0( parent, tck, updates, extra = None ) :
        ids={}
        ids[ tck ] = parent
        mask = tck & 0x0000
        cas = ConfigTarFileAccessSvc(Mode='ReadWrite')
        for (l0,label) in updates :
	  print label
          _tck = ( (tck&0xFFFF0000) | int(l0,16)  )
          ids[_tck] = updateL0TCK( ids[tck], l0, label, cas = cas, extra = extra ) 
        createTCKEntries( ids, cas = cas )

## keep Hlt2SingleMuon * Hlt1SingleMuonNoIPL0PreScaler constant

def getHlt1xHlt2SingleMuon( id ) :
        x = getProperties(id,'(Hlt1SingleMuonNoIPL0|Hlt2SingleMuon)PreScaler','AcceptFraction')
	return dict( [ ( i[0].split('/')[-1], float(i[1]) ) for i in x ] )

ids = { 0x0023002b: '7becb3279199b12dc862307348afae45' }


updateL0( ids[ 0x0023002b ], 0x0024002a
        , [ ( '0x002a', 'L0-hadron=180, Hlt1=Track+NoIP' ) ] 
	, extra = { 'Hlt1ElectronTrackNoIPPreScaler' :   { 'AcceptFraction':'0.2' } }
        )

muons = getHlt1xHlt2SingleMuon( ids[0x0023002b] )
updateL0( ids[ 0x0023002b ], 0x0025002a
        , [ ( '0x002a', 'L0-hadron=180, Hlt1=Track+PrescaledNoIP' ) ] 
	, extra = { 'Hlt1ElectronTrackNoIPPreScaler' :   { 'AcceptFraction':'0.2' } 
                  , 'Hlt1SingleMuonNoIPL0PreScaler' : { 'AcceptFraction':'0.2' }
                  , 'Hlt2SingleMuonPreScaler' : { 'AcceptFraction': '%s' % (muons['Hlt2SingleMuonPreScaler']*muons['Hlt1SingleMuonNoIPL0PreScaler']/0.2) }
                  }
        )
updateL0( ids[ 0x0023002b ], 0x0025002c
        , [ ( '0x002c', 'L0-hadron=180,SPD-lt-450, Hlt1=Track+PrescaledNoIP' ) ] 
	, extra = { 'Hlt1ElectronTrackNoIPPreScaler' :   { 'AcceptFraction':'0.2' } 
                  , 'Hlt1SingleMuonNoIPL0PreScaler' : { 'AcceptFraction':'0.2' }
                  , 'Hlt2SingleMuonPreScaler' : { 'AcceptFraction': '%s' % (muons['Hlt2SingleMuonPreScaler']*muons['Hlt1SingleMuonNoIPL0PreScaler']/0.2) }
                  }
        )


updateL0( ids[ 0x0023002b ], 0x0024002c
        , [ ( '0x002c', 'L0-hadron=180,SPD-lt-450, Hlt1=Track+NoIP' ) ] 
	, extra = { 'Hlt1ElectronTrackNoIPPreScaler' :   { 'AcceptFraction':'0.2' } }
        )


ids = { 0x0026002b: '7bf4c7b249b98343e2b5c8bc29ad86ee' }


updateL0( ids[ 0x0026002b ], 0x0027002a
        , [ ( '0x002a', 'L0-hadron=180, Hlt1=Track+NoIP' ) ] 
	, extra = { 'Hlt1ElectronTrackNoIPPreScaler' :   { 'AcceptFraction':'0.2' } }
        )

muons = getHlt1xHlt2SingleMuon( ids[0x0026002b] )
updateL0( ids[ 0x0026002b ], 0x0028002a
        , [ ( '0x002a', 'L0-hadron=180, Hlt1=Track+PrescaledNoIP' ) ] 
	, extra = { 'Hlt1ElectronTrackNoIPPreScaler' :   { 'AcceptFraction':'0.2' } 
                  , 'Hlt1SingleMuonNoIPL0PreScaler' : { 'AcceptFraction':'0.2' }
                  , 'Hlt2SingleMuonPreScaler' : { 'AcceptFraction': '%s' % (muons['Hlt2SingleMuonPreScaler']*muons['Hlt1SingleMuonNoIPL0PreScaler']/0.2) }
                  }
        )
updateL0( ids[ 0x0026002b ], 0x0028002c
        , [ ( '0x002c', 'L0-hadron=180,SPD-lt-450, Hlt1=Track+PrescaledNoIP' ) ] 
	, extra = { 'Hlt1ElectronTrackNoIPPreScaler' :   { 'AcceptFraction':'0.2' } 
                  , 'Hlt1SingleMuonNoIPL0PreScaler' : { 'AcceptFraction':'0.2' }
                  , 'Hlt2SingleMuonPreScaler' : { 'AcceptFraction': '%s' % (muons['Hlt2SingleMuonPreScaler']*muons['Hlt1SingleMuonNoIPL0PreScaler']/0.2) }
                  }
        )


updateL0( ids[ 0x0026002b ], 0x0027002c
        , [ ( '0x002c', 'L0-hadron=180,SPD-lt-450, Hlt1=Track+NoIP' ) ] 
	, extra = { 'Hlt1ElectronTrackNoIPPreScaler' :   { 'AcceptFraction':'0.2' } }
        )




update = { 'Hlt1BeamGasBeam2ODINFilter' : {'Code':'( ODIN_BXTYP == LHCb.ODIN.Beam2 )|scale( ODIN_BXTYP == LHCb.ODIN.NoBeam, SCALE(0.1) )'}
	 , 'Hlt1BeamGasBeam1ODINFilter' : {'Code':'( ODIN_BXTYP == LHCb.ODIN.Beam1 )|scale( ODIN_BXTYP == LHCb.ODIN.NoBeam, SCALE(0.1) )'}
         }

originals = { 0x0026002b : 'L0-hadron=130, Hlt1=Track+NoIP'
            , 0x0027002c : 'L0-hadron=180,SPD-lt-450, Hlt1=Track+NoIP'
	    , 0x0027002a : 'L0-hadron=180, Hlt1=Track+NoIP'
            , 0x0028002a : 'L0-hadron=180, Hlt1=Track+PrescaledNoIP'
            , 0x0028002c : 'L0-hadron=180,SPD-lt-450, Hlt1=Track+PrescaledNoIP'
            }

ids = dict()
cas = ConfigTarFileAccessSvc(Mode='ReadWrite')
for tck,comment in originals.iteritems():
	ids[  ((((tck>>16)+3)<<16) | (tck&0xffff)) ] = updateProperties( tck2id(tck,cas), update, label=comment + ',LimitBeamGasNoBeam', cas=cas )

createTCKEntries(ids,cas) 




ids = dict()
update = { 'Hlt1L0AnyRateLimitedPostScaler' : { 'Code':'RATE(1000)' } }
cas = ConfigTarFileAccessSvc(Mode='ReadWrite')
ids [ 0x002c002a ] = updateProperties( tck2id(0x002a002a,cas),update,label='L0-hadron=180, Hlt1=Track+NoIP,LimitBeamGasNoBeam,L0Any=1000Hz',cas=cas )
createTCKEntries(ids,cas)


###### 



cas = ConfigTarFileAccessSvc(Mode='ReadWrite')
ids = { 0x002d002b: 'd67012ec378a5bca01c7b13080296dc2' }
createTCKEntries(ids,cas)

updateL0( ids[ 0x002d002b ], 0x002e002a
        , [ ( '0x002a', 'L0-hadron=180, Hlt1=Track+NoIP,LimitBeamGasNoBeam' ) ] 
	, extra = { 'Hlt1ElectronTrackNoIPPreScaler' :   { 'AcceptFraction':'0.2' } }
        )

updateL0( ids[ 0x002d002b ], 0x002e002c
        , [ ( '0x002c', 'L0-hadron=180,SPD-lt-450, Hlt1=Track+NoIP,LimitBeamGasNoBeam' ) ] 
	, extra = { 'Hlt1ElectronTrackNoIPPreScaler' :   { 'AcceptFraction':'0.2' } }
        )


muons = getHlt1xHlt2SingleMuon( ids[0x002d002b] )
updateL0( ids[ 0x002d002b ], 0x002f002c
        , [ ( '0x002c', 'L0-hadron=180,SPD-lt-450, Hlt1=Track+PrescaledNoIP,LimitBeamGasNoBeam' ) ] 
	, extra = { 'Hlt1ElectronTrackNoIPPreScaler' :   { 'AcceptFraction':'0.2' } 
                  , 'Hlt1SingleMuonNoIPL0PreScaler' : { 'AcceptFraction':'0.2' }
                  , 'Hlt2SingleMuonPreScaler' : { 'AcceptFraction': '%s' % (muons['Hlt2SingleMuonPreScaler']*muons['Hlt1SingleMuonNoIPL0PreScaler']/0.2) }
                  }
        )
updateL0( ids[ 0x002d002b ], 0x002f002a
        , [ ( '0x002a', 'L0-hadron=180, Hlt1=Track+PrescaledNoIP,LimitBeamGasNoBeam' ) ] 
	, extra = { 'Hlt1ElectronTrackNoIPPreScaler' :   { 'AcceptFraction':'0.2' } 
                  , 'Hlt1SingleMuonNoIPL0PreScaler' : { 'AcceptFraction':'0.2' }
                  , 'Hlt2SingleMuonPreScaler' : { 'AcceptFraction': '%s' % (muons['Hlt2SingleMuonPreScaler']*muons['Hlt1SingleMuonNoIPL0PreScaler']/0.2) }
                  }
        )




#########
# create MC version without prescales
#
def createMCversion( tck, newtck = None, cas = ConfigTarFileAccessSvc() ) :
        if not newtck : newtck = tck | 0x40000000
	props = getProperties(tck,'.*','AcceptFraction')
	exceptions = { 'LumiStripper.*' : '0', '.*Debug.*' : None, 'Hlt1ODINTechnical.*': None, 'Hlt1Lumi.*': None, 'Hlt1L0.*': None, 'Hlt1MBMicroBias.*': None }
	update = { } 
	for n,v in props :
		(prefix,n) = n.split('/')
		if prefix !=  'DeterministicPrescaler' : continue
		if v == '1' or v == '0' : continue # do not modify these
		vorig = v
		m = 0  # count # of matching exceptions
		for (e,o) in exceptions.iteritems() :
			import re
			if re.match(e,n) : 
				if o : v = o
				m = m+1
		if m == 0 : v = '1'   # if no exception, put at 1
		if vorig == v : continue  # if not 
		update[ n ] = { 'AcceptFraction' : '%s'%v }

	from pprint import pprint
	pprint(update)
	label = None
	for (i,j) in getConfigurations(cas).iteritems() :
		if tck in j['TCK'] : label = j['label']
	id  = updateProperties( tck2id(tck,cas),update,label='%s - MC version of 0x%08x' % (label,tck), cas=cas)
	createTCKEntries({newtck:id},cas)

cas=ConfigTarFileAccessSvc(Mode='ReadWrite') 
for tck in [ 0x2e002c, 0x2a002a, 0x2e002a ] :
	createMCversion( tck = tck, cas=ConfigTarFileAccessSvc(Mode='ReadWrite') )

