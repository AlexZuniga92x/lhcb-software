<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<!--
#######################################################
# SUMMARY OF THIS TEST
# ...................
# Author: rlambert
# Purpose: Check that Moore can run with a very simple threshold setting, Calibration_veloMicroBias
# Prerequisites: 
# Common failure modes, severities and cures: 
#               . SEVERE: Segfault or raised exception, stderr, nonzero return code
#               . MAJOR: additional FATAL/ERROR messages always a major problem. no ERROR messages should ever be printed when running this test.
#               . MINOR: additional WARNING messages, it is unclear how severe these may be, you will need to hunt down the cause and either fix the problem or suppress the warning.
#               . MINOR: this test verifies that the output looks like pass-through, if we start doing different things with Calibration_VeloMicroBias, this would need to change
#######################################################
-->
<extension class="GaudiTest.GaudiExeTest" kind="test">
  <argument name="program"><text>../options/run_moore.py</text></argument>
  <argument name="args"><set>
    <text>-n</text>
    <text>1200</text>
    <text>Calibration_VeloMicroBias</text>
  </set></argument>
  <argument name="unsupported_platforms"><set><text>win.*</text></set></argument>
  <argument name="validator"><text>

countErrorLines({"FATAL":0,"ERROR":0,"WARNING":0})

expected_string = "SUCCESS Reading Event record 1101. Record number within stream 3: 800"
if stdout.find(expected_string) == -1:
    causes.append('missing string')
    result['moore.calibration.expected_string'] = result.Quote(expected_string)

# Parse timing table, and check that there is no entry for HLT 2 and
# that all events are seen (1200)

from LHCbAlgs import TTParser
timing_table_fn = "Calibration_VeloMicroBias.csv"
try:
    timingdict = TTParser.event_av_dict(timing_table_fn)

    hlt2_entries = [t for t in timingdict if t.startswith("Hlt2")]
    if hlt2_entries:
        causes.append('Does not look like pass-through')
        result['moore.calibration.passthrough'] = result.Quote('Expected no Hlt2 entry in timing table, saw {}'.format(hlt2_entries))

    if 'Hlt1MBMicroBiasVelo' not in timingdict:
        causes.append('No MB selection seen')
    elif timingdict['Hlt1MBMicroBiasVelo'][0] != 1200:
        causes.append('MB test does not select everything')
        result['moore.calibration.passnumber'] = result.Quote('Expected 1200 events, saw {}'.format(timingdict['Hlt1MBMicroBiasVelo'][0]))
except IOError:
    causes.append('Timing table not found')
    result['moore.calibration.timing_table'] = result.Quote('Timing table "{}" not found'.format(timing_table_fn))

</text></argument>
</extension>
