
#ifndef KERNEL_DVCOMMONBASE_ICPP
#define KERNEL_DVCOMMONBASE_ICPP 1

// ============================================================================
// STL
// ============================================================================
#include <sstream>
// ============================================================================
// Boost
// ============================================================================
#include "boost/lexical_cast.hpp"
#include "boost/assign/list_of.hpp"
#include "boost/algorithm/string.hpp"
// ============================================================================
// GaudiKernel
// ============================================================================
#include "GaudiKernel/IAlgContextSvc.h"
// ============================================================================
// DaVinci
// ============================================================================
#include "Kernel/DaVinciStringUtils.h"
#include "DaVinciUtils/Functions.h"
#include "Kernel/TreeCloners.h"
#include "Kernel/DefaultDVToolTypes.h"
// ============================================================================

// ============================================================================
// Standard constructor
// ============================================================================
template <class PBASE>
DVCommonBase<PBASE>::DVCommonBase( const std::string& name,
                                   ISvcLocator* pSvcLocator )
  : extends1<PBASE,IDVAlgorithm>( name , pSvcLocator )
    //
  , m_particleOutputLocation("")
  , m_vertexFitNames        ()
  , m_vertexFits            ()
    //
  , m_filterNames           ()
  , m_filters               ()
    //
  , m_particleCombinerNames ()
  , m_particleCombiners     ()
    //
  , m_particleReFitterNames ()
  , m_particleReFitters     ()
    //
  , m_pvReFitterNames       ()
  , m_pvReFitters           ()
    //
  , m_decayTreeFitterNames  ()
  , m_decayTreeFitters      ()
    //
  , m_massFitterNames       ()
  , m_massFitters           ()
    //
  , m_lifetimeFitterNames   ()
  , m_lifetimeFitters       ()
    //
  , m_directionFitterNames  ()
  , m_directionFitters      ()
    //
  , m_distanceCalculatorNames  ()
  , m_distanceCalculators      ()
    //
  , m_checkOverlapName      ( "CheckOverlap:PUBLIC" )
  , m_checkOverlap          ( NULL  )
  , m_taggingToolName       ( "BTaggingTool" )
  , m_taggingTool           ( NULL  )
  , m_descendants           ( NULL  )
  , m_descendantsName       ("ParticleDescendants")
  , m_pvRelator             ( NULL  )
  , m_ppSvc                 ( NULL  )
  , m_setFilterCalled       ( false )
  , m_refitPVs              ( false )
  , m_multiPV               ( false )
  , m_useP2PV               ( true  )
  , m_writeP2PV             ( true  )
  , m_forceP2PVBuild        ( true  )
  , m_ignoreP2PVFromInputLocations (false)
  , m_noPVs                 ( false )
{
  this->declareProperty( "Output",
                         m_particleOutputLocation,
                         "Output Location of Particles" );

  m_inputLocations.clear() ;
  this->declareProperty( "Inputs",
                         m_inputLocations,
                         "Input Locations forwarded of Particles" );

  m_p2PVInputLocations.clear() ;
  this->declareProperty( "P2PVInputLocations",
                         m_p2PVInputLocations,
                         "Particle -> PV Relations Input Locations" );

  this->declareProperty( "InputPrimaryVertices",
                         m_PVLocation = LHCb::RecVertexLocation::Primary );

  this->declareProperty( "UseP2PVRelations", m_useP2PV,
                         "Use P->PV relations internally. Forced to true if re-fitting PVs. Otherwise disabled for single PV events. Default: true.");

  this->declareProperty( "WriteP2PVRelations", m_writeP2PV,
                         "Write out P->PV relations table to TES. Default: true");

  this->declareProperty( "ForceP2PVBuild", m_forceP2PVBuild,
                         "Force construction of P->PV relations table. Default: false");

  this->declareProperty( "IgnoreP2PVFromInputLocations", m_ignoreP2PVFromInputLocations );

  this->declareProperty( "ReFitPVs", m_refitPVs, "Refit PV" );

  this->declareProperty( "CheckOverlapTool", m_checkOverlapName, "Name of Overlap Tool" );
  //
  this->declareProperty
    ( "VertexFitters",
      m_vertexFitNames,
      "Names of vertex fitters" ) ;
  //
  this->declareProperty
    ( "ParticleFilters",
      m_filterNames,
      "Names of ParticleFilters" ) ;
  //
  this->declareProperty
    ( "ParticleCombiners"     ,
      m_particleCombinerNames ,
      "Names of particle combiners, the basic tools for creation of composed particles" ) ;
  //
  this->declareProperty
    ( "ParticleReFitters",
      m_particleReFitterNames,
      "Names of particle refitters" ) ;
  //
  this->declareProperty
    ( "PVReFitters",
      m_pvReFitterNames,
      "Names of Primary Vertex refitters" ) ;
  //
  this->declareProperty
    ( "DecayTreeFitters"       ,
      m_decayTreeFitterNames   ,
      "The mapping of nick/name/type for IDecaytreeFitFit tools" ) ;
  //
  this->declareProperty
    ( "MassFitters"            ,
      m_massFitterNames        ,
      "The mapping of nick/name/type for IMassFit tools" ) ;
  //
  this->declareProperty
    ( "LifetimeFitters"     ,
      m_lifetimeFitterNames ,
      "The mapping of nick/name/type for ILifetimeFitter tools" ) ;
  //
  this->declareProperty
    ( "DirectionFitters"     ,
      m_directionFitterNames ,
      "The mapping of nick/name/type for IDirectionFit tools" ) ;
  //
  this->declareProperty
    ( "DistanceCalculators"     ,
      m_distanceCalculatorNames ,
      "The mapping of nick/name/type for IDistanceCalculator tools" ) ;
  //
  this->declareProperty( "PrimaryVertexRelator",
                         m_pvRelatorName = DaVinci::DefaultTools::PVRelator );
  //
  this->declareProperty( "DecayDescriptor"   , m_decayDescriptor   = "",
                         "Describes the decay" ) ;
  this->declareProperty( "ForceOutput"       , m_forceOutput       = true,
                         "If true TES location is written" ) ;
  this->declareProperty( "PreloadTools"      , m_preloadTools      = false,
                         "If true all tools are pre-loaded in initialize" ) ;
  //
  // enforce the registration for algorithm context service
  this->setProperty( "RegisterForContextService" , true ).ignore() ;
}

// ============================================================================
// Default maps
// ============================================================================
template <class PBASE>
const typename DVCommonBase<PBASE>::ToolMap &
DVCommonBase<PBASE>::defaultVertexFittersNames() const
{
  static const ToolMap m = boost::assign::map_list_of
    ( ""              , DaVinci::DefaultTools::VertexFitter )
    ( "Offline"       , "OfflineVertexFitter:PUBLIC"    )
    ( "Trigger"       , "TrgVertexFitter"        )
    ( "LoKi"          , "LoKi::VertexFitter:PUBLIC"     )
    ( "Kalman"        , "LoKi::VertexFitter:PUBLIC"     )
    ( "ParticleAdder" , "ParticleAdder"          )
    ( "LoKiFast"      , "LoKi::FastVertexFitter:PUBLIC" )
    ( "FastLoKi"      , "LoKi::FastVertexFitter:PUBLIC" )
    ;
  return m;
}
template <class PBASE>
const typename DVCommonBase<PBASE>::ToolMap &
DVCommonBase<PBASE>::defaultParticleFiltersNames() const
{
  static const ToolMap m = boost::assign::map_list_of
    ( ""       , "LoKi::Hybrid::FilterCriterion" )
    ( "LoKi"   , "LoKi::Hybrid::FilterCriterion" )
    ( "Hybrid" , "LoKi::Hybrid::FilterCriterion" )
    ;
  return m;
}
template <class PBASE>
const typename DVCommonBase<PBASE>::ToolMap &
DVCommonBase<PBASE>::defaultParticleCombinersNames() const
{
  static const ToolMap m = boost::assign::map_list_of
    ( ""                 , DaVinci::DefaultTools::ParticleCombiner )
    ( "Offline"          , "OfflineVertexFitter:PUBLIC"         )
    ( "Trigger"          , "TrgVertexFitter"             )
    ( "Kalman"           , "LoKi::VertexFitter:PUBLIC"          )
    ( "LoKi"             , "LoKi::VertexFitter:PUBLIC"          )
    ( "Smart"            , "LoKi::SmartParticleCombiner" )
    ( "ParticleAdder"    , "ParticleAdder"               )
    ( "Adder"            , "ParticleAdder"               )
    ( "Combiner"         , "MomentumCombiner"            )
    ( "MomentumCombiner" , "MomentumCombiner"            )
    ( "Momenta"          , "MomentumCombiner"            )
    ( "LoKiFast"         , "LoKi::FastVertexFitter:PUBLIC"      )
    ( "FastLoKi"         , "LoKi::FastVertexFitter:PUBLIC"      )
    ;
  return m;
}
template <class PBASE>
const typename DVCommonBase<PBASE>::ToolMap &
DVCommonBase<PBASE>::defaultParticleReFittersNames() const
{
  static const ToolMap m = boost::assign::map_list_of
    ( ""              , "OfflineVertexFitter:PUBLIC"    )
    ( "Offline"       , "OfflineVertexFitter:PUBLIC"    )
    ( "Vertex"        , "OfflineVertexFitter:PUBLIC"    )
    ( "Kalman"        , "LoKi::VertexFitter:PUBLIC"     )
    ( "LoKi"          , "LoKi::VertexFitter:PUBLIC"     )
    ( "Mass"          , "LoKi::MassFitter"       )
    ( "Direction"     , "LoKi::DirectionFitter"  )
    ( "ParticleAdder" , "ParticleAdder"          )
    ( "Adder"         , "ParticleAdder"          )
    ( "LoKiFast"      , "LoKi::FastVertexFitter:PUBLIC" )
    ( "FastLoKi"      , "LoKi::FastVertexFitter:PUBLIC" )
    ;
  return m;
}
template <class PBASE>
const typename DVCommonBase<PBASE>::ToolMap &
DVCommonBase<PBASE>::defaultPVReFittersNames() const
{
  static const ToolMap m = boost::assign::map_list_of
    ( ""           , "AdaptivePVReFitter:PUBLIC" )
    ( "PVReFitter" , "PVReFitter"         )
    ( "Adaptive"   , "AdaptivePVReFitter:PUBLIC" )
    ( "Cheated"    , "CheatedPVReFitter"  )
    ;
  return m;
}
template <class PBASE>
const typename DVCommonBase<PBASE>::ToolMap &
DVCommonBase<PBASE>::defaultDecayTreeFittersNames() const
{
  static const ToolMap m = boost::assign::map_list_of
    (  ""     , "LoKi::DecayTreeFit" )
    (  "LoKi" , "LoKi::DecayTreeFit" )
    ;
  return m;
}
template <class PBASE>
const typename DVCommonBase<PBASE>::ToolMap &
DVCommonBase<PBASE>::defaultMassFittersNames() const
{
  static const ToolMap m = boost::assign::map_list_of
    ( ""     , "LoKi::MassFitter" )
    ( "LoKi" , "LoKi::MassFitter" )
    ;
  return m;
}
template <class PBASE>
const typename DVCommonBase<PBASE>::ToolMap &
DVCommonBase<PBASE>::defaultLifetimeFittersNames() const
{
  static const ToolMap m = boost::assign::map_list_of
    ( ""     , "PropertimeFitter"     )
    ( "LoKi" , "LoKi::LifetimeFitter" )
    ;
  return m;
}
template <class PBASE>
const typename DVCommonBase<PBASE>::ToolMap &
DVCommonBase<PBASE>::defaultDirectionFittersNames() const
{
  static const ToolMap m = boost::assign::map_list_of
    ( ""     , "DirectionFitter"       )
    ( "LoKi" , "LoKi::DirectionFitter" )
    ;
  return m;
}
template <class PBASE>
const typename DVCommonBase<PBASE>::ToolMap &
DVCommonBase<PBASE>::defaultDistanceCalculatorsNames() const
{
  static const ToolMap m = boost::assign::map_list_of
    ( ""                         , "LoKi::DistanceCalculator:PUBLIC"    )
    ( "LoKi"                     , "LoKi::DistanceCalculator:PUBLIC"    )
    ( "LoKi::DistanceCalculator" , "LoKi::DistanceCalculator:PUBLIC"    )
    ( "Trg"                      , "LoKi::TrgDistanceCalculator:PUBLIC" )
    ( "Hlt"                      , "LoKi::TrgDistanceCalculator:PUBLIC" )
    ( "Trigger"                  , "LoKi::TrgDistanceCalculator:PUBLIC" )
    ( "Fast"                     , "LoKi::TrgDistanceCalculator:PUBLIC" )
    ;
  return m;
}

// ============================================================================
// Initialize the monster ...
// ============================================================================
template <class PBASE>
StatusCode DVCommonBase<PBASE>::initialize ()
{

  // register for the algorithm context service
  IAlgContextSvc* ctx = 0 ;
  if ( this->registerContext() ) { ctx = this->contextSvc() ; }
  // setup sentry/guard
  Gaudi::Utils::AlgContext sentry ( ctx , this ) ;

  // initialize the base
  StatusCode sc = PBASE::initialize();
  if ( sc.isFailure() ) { return sc; }

  if ( !this->registerContext() || !this->contextSvc() )
  {
    this->Warning( "Registration for Algorithm Context Service is disabled. Some tools/utilities could have problems." ).ignore();
  }

  // Load tools
  sc = loadTools() ;
  if ( sc.isFailure() ) { return this->Error("Unable to load tools",sc); }

  if ( this->msgLevel(MSG::DEBUG) )
  {
    if ( m_decayDescriptor.empty() )
    { this->debug() << "Decay Descriptor string not specified"   << endmsg; }
    else
    { this->debug() << "Decay Descriptor: " << m_decayDescriptor << endmsg; }
  }

  m_noPVs = ( m_PVLocation.empty() || m_PVLocation == "None" );

  initializeLocations();

  // load PV processing tools.

  if ( !m_noPVs )
  {
    if ( refitPVs() )
    {
      if ( !defaultPVReFitter() )
      {
        return this->Error("Default IPVReFitter could not be loaded");
      }
    }

    if ( !relatedPVFinder() )
    {
      return this->Error("IRelatedPVFinder could not be loaded");
    }
  }

  if ( this->msgLevel(MSG::DEBUG) )
  {
    this->debug() << "End of DVCommonBase::initialize with " << sc << endmsg;
  }

  return sc;
}

// ============================================================================

template <class PBASE>
void DVCommonBase<PBASE>::initializeLocations()
{

  if ( this->msgLevel(MSG::DEBUG) )
  {
    this->debug() << ">>> Initialised locations " << m_inputLocations
                  << endmsg;
  }

  // Check for duplication of locations
  {
    std::sort( m_inputLocations.begin(), m_inputLocations.end() );
    const std::vector<std::string>::iterator iLoc =
      std::unique(m_inputLocations.begin(),m_inputLocations.end());
    if ( iLoc != m_inputLocations.end() )
    {
      std::ostringstream mess;
      mess << "Duplication in Input locations :";
      for ( auto& i : m_inputLocations ) { mess << " " << i; }
      this->Warning( mess.str() ).ignore();
      m_inputLocations.erase( iLoc, m_inputLocations.end() );
    }
  }

  // Strip any ending "/Particles"
  for ( auto& loc : m_inputLocations )
  { DaVinci::StringUtils::removeEnding(loc,"/Particles"); }
  
  if ( this->msgLevel(MSG::DEBUG) )
  {
    this->debug() << ">>> Initialised P->PV locations "
                  << m_p2PVInputLocations << endmsg;
  }

  if ( m_particleOutputLocation.empty() )
  {
    m_outputLocation = this->name();
    DaVinci::StringUtils::expandLocation( m_outputLocation, "Phys" );
    m_particleOutputLocation = m_outputLocation+"/Particles";
  }
  else
  {
    m_outputLocation = m_particleOutputLocation;
    DaVinci::StringUtils::removeEnding(m_outputLocation,"/");
  }

  m_decayVertexOutputLocation = m_outputLocation+"/decayVertices";
  m_tableOutputLocation = m_outputLocation+"/Particle2VertexRelations";

}

// ============================================================================
// Load standard tools
// ============================================================================
template <class PBASE>
StatusCode DVCommonBase<PBASE>::loadTools()
{
  if ( m_preloadTools )
  {
    vertexFitter();
    particleCombiner();
    distanceCalculator();
    checkOverlap();
    ppSvc();
  }
  return StatusCode::SUCCESS;
}

// ============================================================================
// Execute
// ============================================================================
template <class PBASE>
StatusCode DVCommonBase<PBASE>::sysExecute ()
{
  // register for the algorithm context service
  IAlgContextSvc* ctx = NULL;
  if ( this->registerContext() ) { ctx = this->contextSvc() ; }
  // setup sentry/guard
  Gaudi::Utils::AlgContext sentry ( ctx , this ) ;

  // Make sure particles, secondary vertices, primary vertices and relations
  // tables are cleared each event.
  DVAlgGuard guard(m_inputParts,
                   m_parts,
                   m_secVerts,
                   m_refittedPVs,
                   m_p2PVMap);

  StatusCode sc = loadEventInput();
  if ( sc.isFailure() ) return this->Error ( "Not able to load event input" , sc ) ;

  // execute the algorithm
  sc = this->Algorithm::sysExecute();
  if ( sc.isFailure() ) return sc;

  if ( !m_setFilterCalled )
  {
    this->Warning ( "SetFilterPassed not called for this event!" ).ignore() ;
  }

  // count number of "effective filters"
  this->counter("#accept") += this->filterPassed() ;

  if ( this->filterPassed() )
  {
    sc = saveInTES();
  }
  else if ( m_forceOutput )
  {
    this->writeEmptyTESContainers();
  }

  // Reset for next event
  m_setFilterCalled = false;

  return sc ;
}

// ============================================================================

template <class PBASE>
void DVCommonBase<PBASE>::setFilterPassed( bool state )
{
  this->Algorithm::setFilterPassed(state);
  m_setFilterCalled = true;
}

// ============================================================================

template <class PBASE>
void DVCommonBase<PBASE>::writeEmptyTESContainers()
{
  LHCb::Particle::Container* container = new LHCb::Particle::Container();
  this->put( container, particleOutputLocation() );
}

//=============================================================================

template <class PBASE>
StatusCode DVCommonBase<PBASE>::loadEventInput()
{
  if ( this->msgLevel(MSG::VERBOSE) )
  {
    this->verbose() << ">>> loadEventInput " << endmsg;
  }

  // Retrieve Particles & Vertices from all previous processing
  // as specified in jobOptions

  StatusCode sc = StatusCode::SUCCESS;

  if ( !m_inputLocations.empty() )
  {
    sc = loadParticles();
    if ( UNLIKELY(!m_p2PVInputLocations.empty()) )
    {
      sc = sc && loadParticle2PVRelations();
    }
  }

  return sc;
}

//=============================================================================

template <class PBASE>
StatusCode DVCommonBase<PBASE>::loadParticle2PVRelations()
{
  for( std::vector<std::string>::const_iterator iLoc = m_p2PVInputLocations.begin();
       iLoc != m_p2PVInputLocations.end(); ++iLoc )
  {

    if ( this->msgLevel(MSG::VERBOSE) )
      this -> verbose() << "Trying to Preload " << *iLoc << endmsg;

    const Particle2Vertex::Table * table =
      this -> template getIfExists<Particle2Vertex::Table>(*iLoc);
    if ( !table )
    {
      table = this -> template getIfExists<Particle2Vertex::Table>(*iLoc,false);
    }
    if ( table )
    {
      if ( this->msgLevel(MSG::VERBOSE) )
      {
        this -> verbose() << "Pre-loaded table from " << (*iLoc) << endmsg ;
      }
      loadRelations( table->relations() );
    }
    else
    {
      this -> Info ( "No P->PV table at " + (*iLoc),
                     StatusCode::SUCCESS, 0 ).ignore() ;
    }
  }

  return StatusCode::SUCCESS ; // could be sc
}

//=============================================================================

template <class PBASE>
void
DVCommonBase<PBASE>::loadRelations(const Particle2Vertex::Table::Range& relations) const
{
  if ( relations.empty() ) return;

  if (this->msgLevel(MSG::VERBOSE))
  {
    this->verbose() << "loadRelations reading " << relations.size()
                    << " P->PV relations" << endmsg;
  }

  for ( Particle2Vertex::Table::Range::const_iterator i = relations.begin();
        i != relations.end(); ++i )
  {
    relate( i->from(), i->to() );
    if ( this->msgLevel(MSG::VERBOSE) )
    {
      this->verbose() << "Reading a " << i->from()->particleID().pid()
                      << " related to " <<  i->to()->position() << endmsg ;
    }
  }
}

//=============================================================================

template <class PBASE>
StatusCode DVCommonBase<PBASE>::loadParticles()
{
  if ( this->msgLevel(MSG::DEBUG) )
  {
    this->debug() << "Looking for particles in " << m_inputLocations.size()
                  << " places" << endmsg ;
  }

  for ( std::vector<std::string>::iterator iloc = m_inputLocations.begin();
        iloc != m_inputLocations.end(); ++iloc )
  {
    // input location
    const std::string location = (*iloc)+"/Particles";

    // Retrieve the particles:
    LHCb::Particle::Range parts =
      this -> template getIfExists<LHCb::Particle::Range>(location);

    // statistics:
    this->counter ( "# " + (*iloc) ) += parts.size() ;

    // Empty ?
    if ( parts.empty() )
    {
      if ( this->msgLevel(MSG::DEBUG) )
      {
        this->debug() << "Non-existing/empty location " << location;
        if ( ! this->rootInTES().empty() )
        { this->debug() << " under " << this->rootInTES(); }
        this->debug() << endmsg;
      }
      continue;
    }

    // Msg number of Particles retrieved
    if ( this->msgLevel(MSG::VERBOSE) )
    {
      this->verbose() << "Number of Particles retrieved from "
                      << location << " = " << parts.size() << endmsg;
    }

    // Save to input particles list
    m_inputParts.reserve ( m_inputParts.size() + parts.size() ) ;
    for ( LHCb::Particle::Range::const_iterator icand = parts.begin();
          icand != parts.end(); ++icand )
    {
      m_inputParts.push_back(*icand);
    }

  }

  if ( this->msgLevel(MSG::VERBOSE) )
  {
    this->verbose() << "Total number of input particles " << m_inputParts.size() << endmsg;
  }

  // statistics:
  this->counter ( "# input particles" ) += m_inputParts.size() ;

  return StatusCode::SUCCESS;
}

// ============================================================================

template <class PBASE>
const LHCb::Particle*
DVCommonBase<PBASE>::markTree(const LHCb::Particle* particle)
{
  this->Assert ( NULL != particle ,
                 "mark: Attempt to mark invalid particle for saving" );

  if ( DaVinci::Utils::inTES ( particle ) ) { return particle ; }

  DaVinci::CloneMap clonemap ;
  //
  const LHCb::Particle* newp =
    DaVinci::cloneTree ( particle , clonemap , m_parts , m_secVerts ) ;

  // copy relations directly from table to avoid triggering any new P->PV
  const LHCb::VertexBase* bestPV = getStoredBestPV(particle);

  if ( bestPV ) { relate(newp, bestPV); }

  return newp;
}

//=============================================================================

template <class PBASE>
const LHCb::Particle*
DVCommonBase<PBASE>::cloneAndMarkTree(const LHCb::Particle* particle)
{
  return markTree(particle->clone());
}

//=============================================================================

template <class PBASE>
const LHCb::RecVertex*
DVCommonBase<PBASE>::mark( const LHCb::RecVertex* keptV )const
{
  if ( !keptV )
  {
    this->Exception("DVCommonBase::mark: Attempt to mark NULL Vertex for saving") ;
    return 0;
  }

  // Input vertex is given check if it already exist in the TES
  if ( DaVinci::Utils::inTES(keptV) )
  {
    if ( this->msgLevel(MSG::VERBOSE) )
      this->verbose() << " Vertex is in TES" << endmsg;
    return keptV;
  }

  // Create new vertex on the heap
  LHCb::RecVertex* newV = new LHCb::RecVertex(*keptV);
  // Put in the local container
  m_refittedPVs.push_back(newV);

  if ( this->msgLevel(MSG::VERBOSE) )
    this->verbose() << "   -> Create new and keep " << endmsg ;

  return newV;
}

//=============================================================================

template <class PBASE>
StatusCode DVCommonBase<PBASE>::saveP2PVRelations() const
{

  if ( !saveP2PV() )
  {
    return this->Info("Not saving P2PV", StatusCode::SUCCESS, 0);
  }

  if ( primaryVertices().empty() )
  {
    if ( this->msgLevel ( MSG::DEBUG ) )
    {
      this->debug() <<"Skip saveP2PVRelations: No Primary Vertices" << endmsg;
    }
    return StatusCode::SUCCESS;
  }

  if ( m_forceP2PVBuild ) buildP2PVMap();

  if ( m_p2PVMap.empty() )
  {
    if ( this->msgLevel ( MSG::DEBUG ) )
    {
      this->debug() <<"Skip saveP2PVRelations: No relations" << endmsg;
    }
    return StatusCode::SUCCESS;
  }

  LHCb::RecVertex::ConstVector verticesToSave;
  verticesToSave.reserve( m_p2PVMap.size() );

  Particle2Vertex::Table* table = new Particle2Vertex::Table(m_p2PVMap.size());

  this -> put( table, tableOutputLocation() );

  for ( P2PVMap::const_iterator iRelation = m_p2PVMap.begin();
        iRelation != m_p2PVMap.end(); ++iRelation )
  {
    const LHCb::Particle* particle = (*iRelation).first;
    if (DaVinci::Utils::inTES(particle))
    {
      const LHCb::VertexBase* vb = (*iRelation).second;
      if (vb)
      {
        const LHCb::RecVertex* pv = dynamic_cast<const LHCb::RecVertex*>(vb);
        if (pv)
        {
          verticesToSave.push_back(pv);
          table->i_removeFrom( particle ).ignore();
          table->i_relate( particle, pv ).ignore();
        }
        else
        {
          return this->Error("VertexBase to RecVertex dynamic cast FAILED");
        }
      }
    }
  }

  saveRefittedPVs(verticesToSave);

  if ( this->msgLevel(MSG::DEBUG) )
  {
    this->debug() << "Saved table to "
                  << m_outputLocation+"/Particle2VertexRelations"
                  << endmsg ;
  }

  return StatusCode::SUCCESS;
}

//=============================================================================

template <class PBASE>
void DVCommonBase<PBASE>::buildP2PVMap() const
{
  if ( m_parts.empty() ) return;

  static LHCb::Particle::ConstVector particles;
  particles.clear();
  static LHCb::Vertex::ConstVector   vertices;
  vertices.clear();

  for ( LHCb::Particle::ConstVector::const_iterator iPart = m_parts.begin();
        iPart != m_parts.end(); ++iPart )
  {
    DaVinci::Utils::findDecayTree( *iPart, particles, vertices );
  }

  if ( particles.empty() ) return;

  for ( LHCb::Particle::ConstVector::const_iterator iPart = particles.begin();
        iPart != particles.end() ; ++iPart )
  {
    if ( DaVinci::Utils::inTES(*iPart) ) bestPV(*iPart);
  }
}

//=============================================================================

template <class PBASE>
void
DVCommonBase<PBASE>::saveRefittedPVs(const LHCb::RecVertex::ConstVector& vToSave) const
{
  if ( vToSave.empty() ) return;

  LHCb::RecVertices* verticesToSave = new LHCb::RecVertex::Container();

  const std::string location(m_outputLocation+"/_RefitPVs");

  this -> put( verticesToSave, location );

  for( LHCb::RecVertex::ConstVector::const_iterator iPV = vToSave.begin();
       iPV != vToSave.end(); ++iPV )
  {
    // Check if this was already in a Gaudi container (hence in TES)
    if ( !DaVinci::Utils::inTES(*iPV) )
    {
      verticesToSave->insert(const_cast<LHCb::RecVertex*>(*iPV));
    }
  }

  if ( this->msgLevel(MSG::VERBOSE) )
  {
    this->verbose() << "Saved " << verticesToSave->size()
                    << " new re-fitted PVs in " << location
                    << " from " << vToSave.size()
                    << " vertices in local storage " << endmsg;
  }
}

// ============================================================================

template <class PBASE>
StatusCode DVCommonBase<PBASE>::_saveInTES()
{
  if ( this->msgLevel(MSG::VERBOSE) )
  {
    this->verbose() << "DVCommonBase::_saveInTES "<< m_parts.size()
                    << " Particles" << endmsg;
  }

  LHCb::Particle::Container* p_tes = new LHCb::Particle::Container () ;
  LHCb::Vertex::Container*   v_tes = new LHCb::Vertex::Container   () ;
  if ( !p_tes || !v_tes )
  {
    delete p_tes;
    delete v_tes;
    return this->Error("Could not open output TES containers");
  }
  this -> put ( p_tes , particleOutputLocation()    ) ;
  this -> put ( v_tes , decayVertexOutputLocation() ) ;

  if ( this->msgLevel(MSG::VERBOSE) )
  {
    this->verbose() << "Going to save "
                    << m_parts.size() << " particles" << endmsg;
  }

  for ( LHCb::Particle::ConstVector::const_iterator iParticle = m_parts.begin();
        iParticle != m_parts.end(); ++iParticle)
  {
    // Check if this was already in a Gaudi container (hence in TES)
    if ( !DaVinci::Utils::inTES(*iParticle) )
    {
      if (*iParticle)
      {
        p_tes->insert(const_cast<LHCb::Particle*>(*iParticle));
        const LHCb::Vertex* endVtx = (*iParticle)->endVertex();
        if ( endVtx && !DaVinci::Utils::inTES(endVtx))
        {
          v_tes->insert(const_cast<LHCb::Vertex*>(endVtx));
        }
      }
    }
    else
    {
      if ( this->msgLevel(MSG::VERBOSE) )
      {
        this->verbose() << "Skipping " << *iParticle << endmsg;
      }
    }
  }

  // check that the decay trees are fully in the TES
  for ( LHCb::Particle::ConstVector::const_iterator iParticle = m_parts.begin();
        iParticle != m_parts.end() ; ++iParticle)
  {
    if ( ! DaVinci::Utils::decayTreeInTES(*iParticle) )
    {
      return this->Error("Element of saved decay tree not in TES. Likely memory leak!");
    }
  }

  if ( this->msgLevel(MSG::VERBOSE) )
  {
    this->verbose() << "Saved " << p_tes->size()
                    << " new particles in " << particleOutputLocation()
                    << " from " << m_parts.size()
                    << " total particles in local storage" << endmsg;
  }

  return StatusCode::SUCCESS;
}

// ============================================================================

template <class PBASE>
StatusCode DVCommonBase<PBASE>::saveInTES()
{
  if ( this->msgLevel(MSG::VERBOSE) )
  {
    this->verbose() << "saveInTES "<< m_parts.size() << " Particles" << endmsg;
  }

  const StatusCode sc = _saveInTES();
  if ( sc.isFailure() ) return sc;

  // now save relations table
  if ( this->msgLevel(MSG::VERBOSE) ) this->verbose() << "Save P->PV relations" << endmsg;

  return saveP2PVRelations();
}

// ============================================================================

template <class PBASE>
const LHCb::VertexBase*
DVCommonBase<PBASE>::calculateRelatedPV(const LHCb::Particle* p) const
{
  if ( this->msgLevel(MSG::VERBOSE) )
  {
    this->verbose() << "DVCommonBase::calculateRelatedPV" << endmsg;
  }

  const LHCb::RecVertex::Range PVs = this->primaryVertices();

  if ( PVs.empty() )
  {
    this->Error("calculateRelatedPV: Empty primary vertex container",
                StatusCode::FAILURE, 0 ).ignore();
    return NULL;
  }

  // 1 PV

  const IPVReFitter* fitter = defaultPVReFitter();

  if ( PVs.size() == 1 )
  {
    if (!refitPVs()) return *(PVs.begin());
    LHCb::RecVertex reFittedPV = LHCb::RecVertex(**(PVs.begin()));
    return ( (fitter->remove(p, &reFittedPV)).isSuccess() ?
             mark(&reFittedPV) : NULL );
  }

  // more than one PV

  const IRelatedPVFinder* finder = this->relatedPVFinder();

  if ( !refitPVs() )
  { // no PV re-fit
    if (this->msgLevel(MSG::VERBOSE))
    {
      this->verbose() << "Getting related PV from finder" << endmsg;
    }

    const LHCb::VertexBase* pv = finder->relatedPV(p, PVs);

    if (this->msgLevel(MSG::VERBOSE))
    {
      if (pv)
      {
        this->verbose() << "Returning related vertex key="
                        << pv->key() << endmsg;
      }
      else
      {
        this->verbose() << "no related PV found" << endmsg;
      }
    }
    return pv;
  }
  else
  {
    // re-fit vertices, then look for the best one.
    if (this->msgLevel(MSG::VERBOSE))
    {
      this->verbose() << "Re-fitting " << PVs.size() << " PVs"<< endmsg;
    }

    LHCb::RecVertex::ConstVector reFittedPVs;
    DaVinci::Utils::PointerContainerGuard<LHCb::RecVertex::ConstVector> guard(reFittedPVs);
    for (LHCb::RecVertex::Range::const_iterator iPV = PVs.begin();
         iPV != PVs.end(); ++iPV)
    {
      LHCb::RecVertex* reFittedPV = new LHCb::RecVertex(**iPV);
      if ( (fitter->remove(p, reFittedPV)).isSuccess() )
      {
        reFittedPVs.push_back(reFittedPV);
      }
      else
      {
        delete reFittedPV;
        this->Error("PV re-fit failed", StatusCode::FAILURE, 1 ).ignore() ;
      }
    }
    if ( reFittedPVs.empty() )
    {

      this->Warning( "Failed to create refitted PV list for event with " +
                     boost::lexical_cast<std::string>(PVs.size())+ " PVs",
                     StatusCode::FAILURE, 0 ).ignore();
      return NULL;
    }

    if (this->msgLevel(MSG::VERBOSE))
    {
      this->verbose() << "have " << reFittedPVs.size()
                      << " re-fitted PVs" << endmsg;
    }

    const LHCb::VertexBase* vb = finder->relatedPV(p, reFittedPVs);

    if (!vb)
    {
      this->Warning("IRelatedPVFinder found no best vertex",
                    StatusCode::FAILURE, 0).ignore();
      return NULL;
    }

    const LHCb::RecVertex* pv = dynamic_cast<const LHCb::RecVertex*>(vb);

    if (!pv)
    {
      this->Warning("VertexBase -> RecVertex dynamic cast failed",
                    StatusCode::FAILURE, 0).ignore();
      return NULL;
    }
    else
    {
      return mark(pv);
    }
  }

}

// ============================================================================

template <class PBASE>
const LHCb::VertexBase*
DVCommonBase<PBASE>::getRelatedPV(const LHCb::Particle* part) const
{
  const LHCb::VertexBase* pv = NULL;

  if ( this->msgLevel(MSG::VERBOSE) )
    this->verbose() << "getRelatedPV! Getting range" << endmsg;

  if ( !part )
  {
    this->Error( "Input particle is NULL" ).ignore();
    return pv;
  }

  if ( !hasStoredRelatedPV(part) )
  {
    // First, see if we can find a relations table from the Particle TES location
    // and relate the P to PV via that
    pv = relatePVViaParticleTESLoc(part);
    if ( !pv )
    {
      // No, so try to calculate the relation
      if ( this->msgLevel(MSG::VERBOSE) )
      {
        this->verbose() << "particle2Vertices empty. Calling calculateRelatedPV"
                        << endmsg;
      }
      pv = calculateRelatedPV(part);
      if ( pv )
      {
        if ( this->msgLevel(MSG::VERBOSE) )
        {
          this->verbose() << "Found related vertex. Relating it" << endmsg;
        }
        relate( part, pv );
      }
      else
      {
        this->Warning("Found no related vertex", StatusCode::FAILURE, 0).ignore();
      }
    }
  }
  else
  {
    pv = getStoredBestPV(part);
  }

  if ( UNLIKELY(this->msgLevel(MSG::DEBUG)) )
  {
    if ( pv )
    {
      this->debug() << "Found related PV " << pv->key() << endmsg;
    }
    else
    {
      this->debug() << "NO related PV" << endmsg;
    }
  }

  return pv;
}

// ============================================================================
// Try and find the related PV by predicting the relations table
//  location from the Particle TES container location
// ============================================================================
template <class PBASE>
const LHCb::VertexBase*
DVCommonBase<PBASE>::relatePVViaParticleTESLoc(const LHCb::Particle* p) const
{
  const LHCb::VertexBase * pv = NULL;
  if ( p && !m_ignoreP2PVFromInputLocations )
  {
    // Load Particle container name
    std::string loc = objectLocation( p->parent() );
    if ( !loc.empty() )
    {
      // Form the relations TES location for this Particles location
      boost::replace_all( loc, "/Particles", "/Particle2VertexRelations" );

      // Try and load the relations
      if ( this->msgLevel(MSG::DEBUG) )
        this->debug() << "Trying to load Relations at " << loc << endmsg;
      const Particle2Vertex::Table * table =
        this -> template getIfExists<Particle2Vertex::Table>(loc);
      if ( !table )
      {
        table = this -> template getIfExists<Particle2Vertex::Table>(loc,false);
      }
      if ( table )
      {
        // Load the relations table
        loadRelations( table->relations() );

        // See if we have a relation
        pv = getStoredBestPV(p);
        if ( this->msgLevel(MSG::DEBUG) )
          this->debug() << " -> Table loaded. Found PV = " << pv << endmsg;
      }
    }
  }
  return pv;
}

// ============================================================================
// Finalize the algorithm + post-actions
// ============================================================================
template <class PBASE>
StatusCode DVCommonBase<PBASE>::finalize()
{
  // register for the algorithm context service
  IAlgContextSvc* ctx = NULL ;
  if ( this->registerContext() ) { ctx = this->contextSvc() ; }

  // setup sentry/guard
  Gaudi::Utils::AlgContext sentry ( ctx , this ) ;

  // finalize base class
  return PBASE::finalize();
}

// ============================================================================
#endif // KERNEL_DVCOMMONBASE_ICPP
// ============================================================================
