# This is a funny CMT req file with Qt support.
# Many thanks to: Danilo Ciminoi cimino@cli.di.unipi.it and
# Andrea Dotti andrea.dotti@pi.infn.it for their pioneering
# work.

package Presenter
version v0r1

branches cmt doc src gui inc tmp

use   DIM						v*	 Online
use	  OnlineHistDB	v2r0 Online
use   ROOT					v*   LCG_Interfaces
use   Qt						v*	 LCG_Interfaces
use   Boost					v*	 LCG_Interfaces
use   GaudiPolicy		v*

# Go for the latest and greatest ROOT:
macro ROOT_config_version "5.15.02"
#macro ROOT_config_version "5.15.04"
#macro ROOT_config_version "5.12.00f"

# Place to put Qt generated files
macro tmp "$(PRESENTERROOT)/tmp"

# When using qmake with .pro file, set QMAKESPEC env. variable:
# linux g++/MS-VS2003 - the other platforms (e.g. 64bit)
# can be found in the mkspecs dir
set QMAKESPEC "$(QTDIR)/mkspecs/linux-g++" WIN32 "%QTDIR%\mkspecs\win32-msvc.net"

# This is to create the file containing images/icons. 
# Usage:
#    [apply_pattern] qt_embedimages proj=MyProj images=../images/* 
#    Will create a file MyProj_images.cpp in $(tmp)/ that can be compiled
#    containing the emebedded code for images in ../images/
# You need to make your application depending on MyProj and add the line:
# $(tmp)/MyProj_images.cpp to the list of sources of your application
pattern	qt_embedimages action \
"$(QTDIR)/bin/uic -embed <proj> <images> -o $(tmp)/<proj>_images.cpp"

# Generation of mocs
# This can be used to generate the mocs from .h files.
# To be used when you have your own class inherited from QObject
# and you need to generate the Meta Object Compiler file(s)
# Usage:
# [apply_pattern] qt_mocgen name=myMocs dir=../src files="file1.h file2.h"
# Will create the moc files file1.moc.cpp file2.moc.cpp that will be located in
#    $(tmp)/.
# You need to make your application depending on myMocs and add the mocs file1.moc.cpp,
# file2.moc.cpp to the list of sources of your application
make_fragment moc_header
make_fragment moc -header=moc_header -suffix=moc.cpp
pattern qt_mocgen \
	document moc <name> -s=<dir> <files>

# Compilation of ui files.
# Just add your .ui (xml files) as sources of your application.
# Using QtDesigner usually you have also a .ui.h file, you don't have
# to add this file among application's sources since it is 
# already included in qt generated code
# Example:
#    application	qtApp	$(lib_opts)	../somedir/*.ui
#    Will create the qt application qtApp using ../somedir/*.ui files
#    As it was from C/C++. Of course you can mix .ui and .cpp:
#    "../somedir/*.ui ../src/main.cpp ../src/anothercpp.cpp"
# This corresponds to the following steps:
#         1- using uic to create the .h from .ui
#         2- using uic to create the .cpp from .ui and .h (generated in 1)
#         3- running moc over the .h generating .moc.cpp
#         4- compiling the .cpp and .moc.cpp in .o and .moc.o
#         5- doing the rest...
make_fragment 	uic 		
#make_fragment 	uic_library 	
language	uic	-suffix=ui -fragment=uic -linker=$(cpplink) \
						 -extra_output_suffix=.moc

# To be done: compiler parameters and linking...
# To be understood: Qt compiler definitions usually
# inside a .pro file, just one example:
# if compiling in multithread: -DQT_THREAD...
# if using ERS support exceptions...

# QtROOT generated mocs - to put % instead of list....

macro qtrootmocs_src	"$(tmp)/TQCanvasMenu.moc.cpp  \
		$(tmp)/TQRootDialog.moc.cpp  \
		$(tmp)/TQRootApplication.moc.cpp \
		$(tmp)/TQRootCanvas.moc.cpp  "
#		$(tmp)/TQApplication.moc.cpp \
#		$(tmp)/TQRootGuiFactory.moc.cpp \
#		$(tmp)/TQCanvasImp.moc.cpp"  

action qtrootmocsclean "rm -f $(tmp)/*" WIN32 "del /Q $(tmp)\*"
#action Presenterclean  "rm -rf $(bin)*" WIN32 "del $(bin)*"


#==========================================================================#
#Auto generate some qt code												   #
#==========================================================================#
# PROJECT embedded images example
# qt_embedimages	proj=PROJECT images=../PROJECT/images/*

#QtROOT
qt_mocgen	name=qtrootmocs dir=$(ROOTSYS)/include files= "TQCanvasMenu.h	\
					TQRootDialog.h	\
					TQRootApplication.h \
					TQRootCanvas.h	"
#					TQApplication.h \
#					TQRootGuiFactory.h \
#					TQCanvasImp.h"


#macro_append ROOT_linkopts  " -lm -ldl -rdynamic -lHist -lGraf -lGraf3d -lGpad -lTree -lRint -lGui -lQtGSI" \
#macro_prepend ROOT_linkopts  " -lQtGSI  -lCore -lCint -lHist -lGraf -lGraf3d -lGpad -lTree -lRint -lPostscript " \
#             WIN32 " libHist.lib libGraf.lib libGraf3d.lib libGpad.lib libTree.lib libRint.lib libGui.lib libQtGSI.lib" 
macro_append ROOT_linkopts " -lQtGSI " WIN32 " libQtGSI.lib"
#-lnsl -lm -ldl -rdynamic " \

macro_append includes " -I$(tmp)/ -I$(PRESENTERROOT)/inc"

macro_remove cpplinkflags '-Wl,--as-needed'
macro_remove componentshr_linkopts '-Wl,--as-needed'
macro_remove libraryshr_linkopts '-Wl,--as-needed'

#qt_embedimages	proj=Gui images=../gui/images/*
application Presenter " $(qtrootmocs_src)  \
			../gui/presenter/*.ui ../gui/presenter/PresenterImageCollection.cpp ../src/DimProxy.cpp ../src/main.cpp"

