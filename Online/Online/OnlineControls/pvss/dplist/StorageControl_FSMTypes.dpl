# ascii dump of database

# Datapoint/DpId
DpName	TypeName	ID
fwOT_FwChildMode	_FwFsmObjectType	5732
fwOT_FwChildrenMode	_FwFsmObjectType	5733
fwOT_FwMode	_FwFsmObjectType	5734
fwOT_FwDevMode	_FwFsmObjectType	17746
fwOT_FwDevMajority	_FwFsmObjectType	22237
fwOT_GaudiJob	_FwFsmObjectType	41768
fwOT_GauchoSubFarmControlNode	_FwFsmObjectType	53446
fwOT_GauchoClass1ControlNode	_FwFsmObjectType	53793
fwOT_RunInfo	_FwFsmObjectType	61728
fwOT_GauchoOveralFarmControlNode	_FwFsmObjectType	63075
fwOT_ECS_Domain_v1	_FwFsmObjectType	99035
fwOT_DAI_Domain_v1	_FwFsmObjectType	99036
fwOT_DAQ_Domain_v1	_FwFsmObjectType	99037
fwOT_DCS_Domain_v1	_FwFsmObjectType	99038
fwOT_HV_Domain_v1	_FwFsmObjectType	99039
fwOT_StorageControl	_FwFsmObjectType	102266
fwOT_StorageControlUnit	_FwFsmObjectType	102279
fwOT_FSM_Class0	_FwFsmObjectType	102748
fwOT_FSM_Class1	_FwFsmObjectType	102749
fwOT_FSM_Node	_FwFsmObjectType	102750
fwOT_FSM_Control	_FwFsmObjectType	102751
fwOT_FSM_DimTask	_FwFsmObjectType	107556
fwOT_GauchoFarmControlNode	_FwFsmObjectType	118527
fwOT_GauchoHLTControlNode	_FwFsmObjectType	118528
fwOT_JobOptionsControl	_FwFsmObjectType	119857
fwOT_StorageCluster	_FwFsmObjectType	119858
fwOT_JobOptionsWriter	_FwFsmObjectType	119882

# DpValue
ElementName	TypeName	_original.._value	_original.._status	_original.._stime
fwOT_FwChildMode.panel	_FwFsmObjectType	"FwChildMode.pnl"	0x101	26.04.2007 06:53:13.031
fwOT_FwChildMode.components	_FwFsmObjectType		0x141	26.04.2007 06:53:13.046
fwOT_FwChildMode.states	_FwFsmObjectType	"Excluded", "FwStateOKNotPhysics", "", "", "", "Included", "FwStateOKPhysics", "when (  $ASS$FwMode in_state Excluded )  move_to EXCLUDED|when (  $ASS$FwMode in_state Ignored )  move_to IGNORED|when (  $ASS$FwMode in_state Manual )  move_to MANUAL|", "", "", "Manual", "FwStateOKNotPhysics", "when (  $ASS$FwMode in_state Included )  move_to INCLUDED|when ( $ASS$FwMode in_state Excluded ) move_to EXCLUDED|", "", "", "Ignored", "FwStateOKNotPhysics", "when (  $ASS$FwMode in_state Included )  move_to INCLUDED|when ( $ASS$FwMode in_state Excluded ) move_to EXCLUDED|", "", "", "LockedOut", "FwStateOKNotPhysics", "", "", "", "ExcludedPerm", "FwStateOKNotPhysics", "", "", ""	0x101	26.04.2007 18:19:50.515
fwOT_FwChildMode.actions	_FwFsmObjectType	"Excluded/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "if ( $ASS$FwMode not_in_state Excluded ) then
    if ( $ASS$FwMode in_state Manual ) then
        do Take(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
    else
        move_to Excluded
    endif
else
    do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
endif
move_to Included", "0", "Excluded/Manual", "", "0", "do Manual $ASS$FwMode
move_to Manual", "0", "Excluded/Ignore", "", "0", "do Ignore $ASS$FwMode
move_to Ignored", "0", "Excluded/LockOut", "", "1", "move_to LockedOut", "0", "Excluded/Exclude", "", "1", "do Exclude $ASS$FwMode
move_to Excluded", "0", "Included/Exclude", "string OWNER = \"\"
", "1", "if ( $ASS$FwMode not_in_state Included ) then
    if ( $ASS$FwMode in_state InManual ) then
        do Release(OWNER=OWNER) $ASS$FwMode
    else
        move_to Included
    endif
else
    do Exclude(OWNER=OWNER) $ASS$FwMode
endif
move_to Excluded", "0", "Included/Manual", "string OWNER = \"\"
", "1", "do Manual(OWNER=OWNER) $ASS$FwMode
move_to Manual", "0", "Included/Ignore", "string OWNER = \"\"
", "1", "do Ignore(OWNER=OWNER) $ASS$FwMode
move_to Ignored", "0", "Included/ExcludeAll", "string OWNER = \"\"
", "1", "if ( $ASS$FwMode not_in_state {Included,Ignored,Manual} ) then
    if ( $ASS$FwMode in_state InManual ) then
        do ReleaseAll(OWNER=OWNER) $ASS$FwMode
    else
        move_to Included
    endif
else
    do ExcludeAll(OWNER=OWNER) $ASS$FwMode
endif
move_to Excluded", "0", "Included/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
move_to Included", "0", "Included/Free", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ASS$FwMode
move_to Included", "0", "Included/SetMode", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do SetMode(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode", "0", "Included/ExcludePerm", "string OWNER = \"\"
", "0", "if ( $ASS$FwMode not_in_state Included ) then
    if ( $ASS$FwMode in_state InManual ) then
        do Release(OWNER=OWNER) $ASS$FwMode
    else
        move_to Included
    endif
else
    do Exclude(OWNER=OWNER) $ASS$FwMode
endif
move_to ExcludedPerm", "0", "Manual/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "if ( $ASS$FwMode not_in_state InManual ) then
  do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
endif
move_to Manual", "0", "Manual/Exclude", "string OWNER = \"\"
", "1", "if ( $ASS$FwMode not_in_state Included ) then
    if ( $ASS$FwMode in_state InManual ) then
        do Release(OWNER=OWNER) $ASS$FwMode
    else
        do Exclude(OWNER=OWNER) $ASS$FwMode
    endif
else
    do Exclude(OWNER=OWNER) $ASS$FwMode
endif
move_to Manual", "0", "Manual/Ignore", "", "0", "do Ignore $ASS$FwMode
move_to Ignored", "0", "Manual/Free", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ASS$FwMode
move_to Manual", "0", "Manual/ExcludeAll", "string OWNER = \"\"
", "1", "!if ( $ASS$FwMode not_in_state {Included,Ignored,Manual} ) then
!    if ( $ASS$FwMode in_state InManual ) then
!        do ReleaseAll(OWNER=OWNER) $ASS$FwMode
!    else
!        move_to Included
!    endif
!else
!    do ExcludeAll(OWNER=OWNER) $ASS$FwMode
!endif
if ( $ASS$FwMode not_in_state InManual ) then
  do ExcludeAll(OWNER=OWNER) $ASS$FwMode
endif
move_to Manual", "0", "Ignored/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
move_to Included", "0", "Ignored/Exclude", "string OWNER = \"\"
", "1", "if ( $ASS$FwMode not_in_state Included ) then
    if ( $ASS$FwMode in_state InManual ) then
        do Release(OWNER=OWNER) $ASS$FwMode
    else
        do Exclude(OWNER=OWNER) $ASS$FwMode
    endif
else
    do Exclude(OWNER=OWNER) $ASS$FwMode
endif
move_to Excluded", "0", "Ignored/Manual", "string OWNER = \"\"
", "0", "do Manual(OWNER=OWNER) $ASS$FwMode
move_to Manual", "0", "Ignored/SetMode", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do SetMode(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode", "0", "Ignored/Free", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ASS$FwMode
move_to Included", "0", "Ignored/ExcludeAll", "string OWNER = \"\"
", "1", "if ( $ASS$FwMode not_in_state {Included,Ignored,Manual} ) then
    if ( $ASS$FwMode in_state InManual ) then
        do ReleaseAll(OWNER=OWNER) $ASS$FwMode
    else
        move_to Included
    endif
else
    do ExcludeAll(OWNER=OWNER) $ASS$FwMode
endif
move_to Excluded", "0", "LockedOut/UnLockOut", "", "1", "move_to Excluded", "0", "ExcludedPerm/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "if ( $ASS$FwMode not_in_state Excluded ) then
    if ( $ASS$FwMode in_state Manual ) then
        do Take(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
    else
        move_to Excluded
    endif
else
    do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
endif
move_to Included", "0"	0x101	26.04.2007 18:19:50.515
fwOT_FwChildMode.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.046
fwOT_FwChildrenMode.panel	_FwFsmObjectType	"FwChildrenMode.pnl"	0x101	26.04.2007 06:53:13.046
fwOT_FwChildrenMode.components	_FwFsmObjectType		0x141	26.04.2007 06:53:13.062
fwOT_FwChildrenMode.states	_FwFsmObjectType	"Complete", "_3DFace", "when ( $ANY$FwChildrenMode in_state Incomplete )  move_to Incomplete|when ( $ANY$FwChildrenMode in_state IncompleteDev )  move_to IncompleteDev|when ( $ANY$FwChildMode not_in_state {Included,ExcludedPerm} )  move_to Incomplete|when ( $ANY$FwDevMode in_state DISABLED )  move_to IncompleteDev|", "", "", "Incomplete", "FwStateAttention2", "when ( ( $ALL$FwChildMode in_state {Included,ExcludedPerm} ) and
       ( $ALL$FwChildrenMode not_in_state Incomplete ) )  move_to Complete|", "", "", "IncompleteDev", "FwStateAttention1", "when ( ( $ALL$FwDevMode not_in_state DISABLED ) and
       ( $ALL$FwChildrenMode not_in_state IncompleteDev ) ) move_to Complete|when ( ( $ANY$FwChildMode not_in_state {Included,ExcludedPerm} ) or
       ( $ANY$FwChildrenMode in_state Incomplete ) )  move_to Incomplete|", "", ""	0x101	26.04.2007 18:19:50.765
fwOT_FwChildrenMode.actions	_FwFsmObjectType		0x101	26.04.2007 18:19:50.765
fwOT_FwChildrenMode.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.062
fwOT_FwMode.panel	_FwFsmObjectType	"FwMode.pnl"	0x101	26.04.2007 06:53:13.062
fwOT_FwMode.components	_FwFsmObjectType		0x141	26.04.2007 06:53:13.078
fwOT_FwMode.states	_FwFsmObjectType	"Excluded", "FwStateOKNotPhysics", "", "", "", "Included", "FwStateOKPhysics", "", "", "", "InLocal", "FwStateOKNotPhysics", "", "", "", "Manual", "FwStateOKNotPhysics", "", "", "", "InManual", "FwStateOKNotPhysics", "", "", "", "Ignored", "FwStateOKNotPhysics", "", "", ""	0x101	26.04.2007 18:19:51.671
fwOT_FwMode.actions	_FwFsmObjectType	"Excluded/Take", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
move_to InLocal", "0", "Excluded/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
move_to Included", "0", "Excluded/Manual", "", "0", "move_to Manual", "0", "Excluded/Ignore", "", "0", "move_to Ignored", "0", "Included/Exclude", "string OWNER = \"\"
", "1", "!do Exclude $ALL$FwChildMode
do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded", "0", "Included/Manual", "string OWNER = \"\"
", "1", "do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Manual", "0", "Included/Ignore", "string OWNER = \"\"
", "1", "move_to Ignored", "0", "Included/ExcludeAll", "string OWNER = \"\"
", "1", "do ExcludeAll(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded", "0", "Included/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
move_to Included", "0", "Included/Free", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Included", "0", "Included/SetMode", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do SetMode(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode", "0", "InLocal/Release", "string OWNER = \"\"
", "1", "!do Exclude $ALL$FwChildMode
do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded", "0", "InLocal/ReleaseAll", "string OWNER = \"\"
", "1", "do ExcludeAll(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded", "0", "InLocal/SetMode", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do SetMode(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode", "0", "Manual/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
move_to Included", "0", "Manual/Take", "string OWNER = \"\"
", "1", "do Include(OWNER=OWNER) $ALL$FwChildMode
move_to InManual", "0", "Manual/Exclude", "string OWNER = \"\"
", "0", "do Exclude(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded", "0", "Manual/Ignore", "", "0", "move_to Ignored", "0", "Manual/Free", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded", "0", "Manual/ExcludeAll", "string OWNER = \"\"
", "0", "do ExcludeAll(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded", "0", "InManual/Release", "string OWNER = \"\"
", "1", "do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Manual", "0", "InManual/SetMode", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do SetMode(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode", "0", "InManual/ReleaseAll", "string OWNER = \"\"
", "0", "do ExcludeAll(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded", "0", "Ignored/Include", "", "1", "move_to Included", "0", "Ignored/Exclude", "string OWNER = \"\"
", "1", "do Exclude(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded", "0", "Ignored/Manual", "", "0", "move_to Manual", "0", "Ignored/SetMode", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do SetMode(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode", "0", "Ignored/Free", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Included", "0", "Ignored/ExcludeAll", "string OWNER = \"\"
", "1", "do ExcludeAll(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded", "0"	0x101	26.04.2007 18:19:51.671
fwOT_FwMode.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.078
fwOT_FwDevMode.panel	_FwFsmObjectType	"FwDevMode.pnl"	0x101	26.04.2007 06:53:13.078
fwOT_FwDevMode.components	_FwFsmObjectType	"dyn_string disabled
", "", "int Busy = 0; 
 
dyn_dyn_string Dis_ids; 
dyn_string Children; 
dyn_int Indexes;
dyn_string Lunits; 
dyn_dyn_string Incompletes;
dyn_string ChildrenInc; 
dyn_string Refered, Reference;

FwDevMode_initialize(string domain, string device)
{ 
dyn_string objs, children, items, exInfo; 
int index, i, pos; 
string lunit, lunit_name; 
dyn_int lus, flags; 
string subdomain, subobj; 
 
    while(Busy)  
	delay(0, 100);  
    Busy = 1;  
    pos = strpos(device,\"_FWDM\"); 
    lunit = substr(device, 0, pos); 
    lunit_name = lunit; 
    if((pos = strpos(lunit,\"/\")) >= 0) 
        lunit_name = substr(lunit, pos+1);
    children = fwFsm_getLogicalUnitDevices(domain, lunit_name); 
    for(i = 1; i <= dynlen(children); i++) 
        dynAppend(lus,0); 
    objs = fwFsm_getLogicalUnitObjects(domain, lunit_name); 
    for(i = 1; i <= dynlen(objs); i++) 
    {
	  items = fwFsm_getObjChildren(domain, objs[i], flags); 
        if(dynlen(items)) 
            dynAppend(lus,1); 
        else 
            dynAppend(lus,0); 
    } 
    dynAppend(children, objs);
    if(index = dynContains(children, device)) 
    {
        dynRemove(children, index); 
        dynRemove(lus, index); 
    }
    dpSetWait(lunit+\"_FWDM.n_devices\",dynlen(children)); 
    dpSetWait(lunit+\"_FWDM.disabled\",makeDynString());  
    if(!(index = dynContains(Lunits, lunit))) 
    { 
        index = dynAppend(Lunits, lunit); 
        Dis_ids[index] = makeDynString(); 
        Incompletes[index] = makeDynString(); 
    }
    for(i = 1; i <= dynlen(children); i++) 
    { 
        fwUi_connectEnabled(\"change_state\",domain, children[i]); 
        if(lus[i]) 
        { 
            fwUi_connectDUModeBits(\"change_incomplete\", domain, children[i], 0); 
        } 
/*
	  if(fwFsm_isAssociated(children[i]))  
        {
            subdomain = fwFsm_getAssociatedDomain(children[i]); 
            subobj = fwFsm_getAssociatedObj(children[i]); 
            if(subdomain != subobj) 
                fwUi_connectDUModeBits(\"change_reference\", subdomain, subobj, 0);  
            else 
                fwUi_connectCUModeBits(\"change_reference\", subdomain, subobj, 0, 0);    
DebugN(\"check ref\",domain, children[i]);  
              dynAppend(Refered,subdomain+\"|\"+subobj); 
              dynAppend(Reference, domain+\"|\"+children[i]); 
        } 
*/  
        strreplace(children[i],\"::\",\"|\"); 
        dynAppend(Children, children[i]); 
        dynAppend(Indexes, index);
    } 
    Busy = 0;
}
 
change_state(string dp, int value) 
{ 
int n, index, lunit_index; 
dyn_string items;
string domain, id, lunit; 
int done = 0; 
 
    items = strsplit(dp,\":|.\");  
    domain = items[2];  
    id = items[3]; 
    if(items[4] != \"mode\") 
        id += \"|\"+items[4];
 
    while(Busy) 
	delay(0, 100); 
    Busy = 1; 
  
    compute(domain, id, value); 
    Busy = 0; 
} 
 
change_incomplete(string dp, bit32 value)  
{  
int n, index, lunit_index, inc;  
dyn_string items; 
string domain, id, lunit;  
int done = 0; 
bit32 bits;
  
    items = strsplit(dp,\":|.\");   
    domain = items[2];   
    id = items[3];  
    if(items[4] != \"mode\")  
        id += \"|\"+items[4]; 
  
    while(Busy)  
	delay(0, 100);  
    Busy = 1; 
  
    inc = getBit(value, FwIncompleteDevBit);  
    compute(domain, id, !inc, \"Tree\"); 
    Busy = 0;  
} 
 
change_reference(string dp, bit32 value)   
{   
int n, index, lunit_index, inc;   
dyn_string items;  
string domain, id, lunit, obj;   
int done = 0;  
bit32 bits; 
   
    items = strsplit(dp,\":|.\");    
    domain = items[2];    
    id = items[3];   
    if(items[4] != \"mode\")   
        id += \"|\"+items[4];  
   
    while(Busy)   
	delay(0, 100);   
    Busy = 1;  
   
    if(strpos(domain, \"fwCU_\") == 0) 
    { 
        domain = substr(domain, 5); 
        id = domain; 
    } 
    if((index = dynContains(Refered, domain+\"|\"+id))) 
        obj = Reference[index];
DebugN(dp, domain, id, obj, value); 
//    inc = getBit(value, FwIncompleteDevBit);   
//    compute(domain, id, !inc, \"Tree\");  
    Busy = 0;   
}  
  

compute(string domain, string id, int value, string inv = \"\") 
{  
int index, lunit_index;   
string lunit;   
int done = 0;  
 
    index = dynContains(Children, id);  
    lunit_index = Indexes[index];  
      
//    dpGet(domain+\"_FWDM.disabled\", dis_ids); 
    id += inv;
    if(value == 1)  
    {  
        if(index = dynContains(Dis_ids[lunit_index], id))  
        { 
            dynRemove(Dis_ids[lunit_index], index);  
            done = 1;  
        }   
    }  
    else if(value == 0)
    {  
        if(!dynContains(Dis_ids[lunit_index], id))  
        {   
            dynAppend(Dis_ids[lunit_index], id);  
            done = 1;  
        }   
    }  
    else if(value == -1) 
    {   
        if(index = dynContains(Dis_ids[lunit_index], id))   
        {  
            dynRemove(Dis_ids[lunit_index], index);   
            done = 1;   
        }    
    }   
    if(done)  
    { 
        lunit = Lunits[lunit_index];   
        dpSetWait(lunit+\"_FWDM.disabled\", Dis_ids[lunit_index]);   
    } 
}", "FwDevMode_valueChanged( string domain, string device,
      dyn_string disabled, string &fwState )
{
	if (dynlen(disabled))
	{
		fwState = \"DISABLED\";
	}
	else 
	{
		fwState = \"ENABLED\";
	}
}

", "FwDevMode_doCommand(string domain, string device, string command)
{
}
"	0x101	26.04.2007 18:19:44.359
fwOT_FwDevMode.states	_FwFsmObjectType	"ENABLED", "FwStateOKPhysics", "", "", "", "DISABLED", "FwStateAttention1", "", "", ""	0x101	26.04.2007 18:19:44.359
fwOT_FwDevMode.actions	_FwFsmObjectType		0x101	26.04.2007 18:19:44.343
fwOT_FwDevMode.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.093
fwOT_FwDevMajority.panel	_FwFsmObjectType	"FwDevMajority.pnl"	0x101	26.04.2007 06:53:13.093
fwOT_FwDevMajority.components	_FwFsmObjectType	"dyn_string bad_devices
", "", "int BusyThreshold = 0; 

dyn_string Types; 
dyn_dyn_string Devices; 
dyn_dyn_string States;  
dyn_dyn_int Enableds; 
dyn_dyn_string Bad_states; 
dyn_int And_enabled; 
dyn_int Or_disabled; 
 
dyn_int N_devices; 
dyn_int Threshold; 
dyn_int LowThreshold;  

dyn_dyn_string Bad_devices;
 
FwDevMajority_initialize(string domain, string device)
{ 
dyn_string children, items; 
int maj_index, index, i; 
string type, modeObj, lunit, dp, typeindex, dom; 
  
 
    while(BusyThreshold)   
	delay(0, 100);   
    BusyThreshold = 1;  
 
    typeindex = get_lunittype(device, dom, lunit, type);   
    maj_index = get_maj_index(typeindex);  
 
    BusyThreshold = 0;   
 
    children = fwFsm_getLogicalUnitChildrenOfType(domain, lunit, type); 
//    fwFsm_getDomainObjectsOfType(domain, type, children);   
    if(index = dynContains(children, domain))  
      dynRemove(children, index); 
    N_devices[maj_index] = dynlen(children);     
    if(domain == lunit) 
        dp = domain+\"/\"+type+\"_FWMAJ\"; 
    else 
        dp = domain+\"/\"+lunit+\"/\"+type+\"_FWMAJ\"; 
    dpConnect(\"new_settings\",  
          dp+\".bad_states\",    
          dp+\".disabled\",   
          dp+\".enabled\", 
          dp+\".threshold\", 
          dp+\".low_threshold\",
          dp+\".reverse\");     
 
    dpSetWait(dp+\".bad_devices\",makeDynString()); 
    for(i = 1; i <= dynlen(children); i++) 
    { 
        States[maj_index][i] = \"\"; 
        Enableds[maj_index][i] = -2; 
        Devices[maj_index][i] = children[i];
        fwUi_connectCurrentState(\"change_state_threshold\",domain, children[i]);
	  modeObj = fwUi_getModeObj(domain, children[i]); 
        if(modeObj == domain) 
        { 
//            if(fwFsm_isDU(domain, children[i]))
                fwUi_connectEnabled(\"change_enabled\",domain, children[i]); 
//            else 
//                Enableds[maj_index][i] = 1; 
        } 
        else
		fwUi_connectCurrentState(\"change_excluded\", domain, modeObj+\"_FWM\"); 
    } 
}

new_settings(string dp1, dyn_string bad_states, 
             string dp2, int or_enabled,
             string dp3, int and_enabled, 
             string dp4, int threshold, 
             string dp5, int low_threshold, 
             string dp6, int reverse) 
{ 
int maj_index, tmp;   
dyn_string items;   
string domain, lunit, type, typeindex;   
 
    items = strsplit(dp1,\":.\"); 

    typeindex = get_lunittype(items[2], domain, lunit, type); 
    maj_index = get_maj_index(typeindex);  
  
    Bad_states[maj_index] = bad_states; 
    And_enabled[maj_index] = and_enabled; 
    Or_disabled[maj_index] = or_enabled;  
    if(low_threshold == 0) 
        low_threshold = 1;
    LowThreshold[maj_index] = low_threshold;  

    if(reverse) 
    { 
        tmp = reverse - threshold; 
        Threshold[maj_index] = N_devices[maj_index] - tmp;  
    } 
    else 
        Threshold[maj_index] = threshold; 

    recalculate_all(domain, maj_index); 
}  
 
string get_lunittype(string device,  
    string &domain, string &lunit, string &type) 
{ 
int pos;  
dyn_string items;  
string typeindex;  
   
    items = strsplit(device,\"/\"); 
    domain = items[1];  
    if(dynlen(items) == 3) 
    { 
        lunit = items[2];
        type = items[3]; 
        typeindex = lunit+\"/\";  
    }
    else 
    { 
        lunit = domain;
        type = items[2]; 
        typeindex = \"\";  
    }  
    strreplace(type,\"_FWMAJ\",\"\"); 
    typeindex += type;  
    return typeindex; 
} 

int get_maj_index(string type) 
{ 
int index; 
 
    if(!(index = dynContains(Types, type))) 
    { 
        index = dynAppend(Types, type); 
	  States[index] = makeDynString(); 
        Enableds[index] = makeDynInt();  
        Devices[index] = makeDynString(); 
        Bad_states[index] = makeDynString();
        Bad_devices[index] = makeDynString(); 
    } 
    return index; 
} 
  
int find_maj_index(string device) 
{ 
    int i; 
 
    for(i = 1; i <= dynlen(Devices); i++) 
    { 
        if(dynContains(Devices[i], device)) 
        { 
            return i; 
        } 
    } 
    return 0; 
} 

change_state_threshold(string dp, string state) 
{ 
int n, maj_index, index; 
dyn_string items, dis_ids, bad_states, bad_devices; 
string domain, device, type; 
 
    items = strsplit(dp,\":.\");   
    items = strsplit(items[2],fwFsm_separator);  
    domain = items[1];  
    device = items[2]; 
    if(dynlen(items) > 2) 
    {
        device += \"::\"+items[3]; 
    } 
 
    maj_index = find_maj_index(device);
 
    index = dynContains(Devices[maj_index], device); 
    States[maj_index][index] = state; 
    calculate_bad_devices(domain, maj_index, index); 
} 
 
change_excluded(string dp, string state)  
{  
int n, maj_index, index, cu;  
dyn_string items, dis_ids, bad_states, bad_devices;  
string domain, device, type, modeObj, mode;  
  
    items = strsplit(dp,\":.\");    
    items = strsplit(items[2],fwFsm_separator);   
    domain = items[1];   
    modeObj = items[2];  
    device = modeObj; 
    strreplace(device,\"_FWM\",\"\");
    device += \"::\"+device;  
   
    maj_index = find_maj_index(device); 
 
    index = dynContains(Devices[maj_index], device);  
    fwUi_getCurrentState(domain, modeObj, mode); 
    fwUi_convertObjState(domain, modeObj, mode); 
    if((mode == \"Included\") || (mode == \"Manual\"))
      Enableds[maj_index][index] = 1; 
    else 
      Enableds[maj_index][index] = 0;   
    calculate_bad_devices(domain, maj_index, index);  
}  
 
change_enabled(string dp, int enabled)  
{  
int n, maj_index, index, or_disabled;  
dyn_string items, dis_ids, bad_states, bad_devices;  
string domain, device, type;  
    
    items = strsplit(dp,\":.\");   
    items = strsplit(items[2],fwFsm_separator);  
    domain = items[1];  
    device = items[2];  
    if(dynlen(items) > 2)  
    { 
        device += \"::\"+items[3];  
    }  
    
    maj_index = find_maj_index(device); 
 
    index = dynContains(Devices[maj_index], device); 
    Enableds[maj_index][index] = enabled; 
    calculate_bad_devices(domain, maj_index, index); 
} 
 
calculate_bad_devices(string domain, int maj_index, int index) 
{ 
dyn_string bad_devices;  
string device, typeindex, state; 
int enabled, done;  
      
    if((States[maj_index][index] == \"\") ||  
       (Enableds[maj_index][index] == -2)) 
        return; 
 
    while(BusyThreshold)  
	delay(0, 100);  
    BusyThreshold = 1; 
  
    done = 0;
    device = Devices[maj_index][index]; 
    state = States[maj_index][index]; 
    enabled = Enableds[maj_index][index]; 
    typeindex = Types[maj_index]; 
    if(dynContains(Bad_states[maj_index], state))  
    { 
        if(And_enabled[maj_index])  
        { 
            if(enabled == 1)   
            {   
                if(!dynContains(Bad_devices[maj_index], device)) 
                {
                    dynAppend(Bad_devices[maj_index], device); 
                    done = 1; 
                } 
            } 
            else  
            {    
                if(index = dynContains(Bad_devices[maj_index], device))     
                { 
                    dynRemove(Bad_devices[maj_index], index);  
                    done = 1; 
                }  
            }   
        } 
        else 
        { 
            if(!dynContains(Bad_devices[maj_index], device))    
            { 
                dynAppend(Bad_devices[maj_index], device); 
                done = 1; 
            }  
        } 
    }  
    else  
    {   
        if(Or_disabled[maj_index])   
        {  
            if(enabled <= 0)    
            {    
                if(!dynContains(Bad_devices[maj_index], device))      
                { 
                    dynAppend(Bad_devices[maj_index], device);      
                    done = 1; 
                }  
            }    
            else   
            {     
                if(index = dynContains(Bad_devices[maj_index], device))      
                { 
                    dynRemove(Bad_devices[maj_index], index);      
                    done = 1; 
                }  
            }  
        } 
        else 
        {   
            if(index = dynContains(Bad_devices[maj_index], device))    
            { 
                dynRemove(Bad_devices[maj_index], index); 
                done = 1; 
            }  
        }  
    } 
    if(done)
        dpSetWait(domain+\"/\"+typeindex+\"_FWMAJ.bad_devices\", Bad_devices[maj_index]);    
    BusyThreshold = 0;  
} 
 
recalculate_all(string domain, int maj_index) 
{ 
int i; 
 
    for(i = 1; i <= dynlen(Devices[maj_index]); i++) 
        calculate_bad_devices(domain, maj_index, i); 
}", "FwDevMajority_valueChanged( string domain, string device,
      dyn_string bad_devices, string &fwState )
{ 
int threshold, low_threshold, maj_index; 
string type, typeindex, dom, lunit; 
 
//      type = get_type(device); 
//      maj_index = get_maj_index(type); 
 
      typeindex = get_lunittype(device, dom, lunit, type); 
      maj_index = get_maj_index(typeindex);   
   
      threshold = Threshold[maj_index]; 
      low_threshold = LowThreshold[maj_index]; 
//DebugN(device, threshold, low_threshold, dynlen(bad_devices));
      if (dynlen(bad_devices) > threshold) 
	    fwState = \"MAJORITY_ERROR\"; 
      else if (dynlen(bad_devices) >= low_threshold) 
	    fwState = \"MAJORITY_WARNING\"; 
	else  
	    fwState = \"MAJORITY_OK\"; 
/*
	if (!dynlen(bad_devices))
	{
		fwState = \"MAJORITY_OK\";
	}
	else if (dynlen(bad_devices) > threshold)
	{
		fwState = \"MAJORITY_WARNING\";
	}
	else 
	{
		fwState = \"MAJORITY_ERROR\";
	} 
*/
}

", "FwDevMajority_doCommand(string domain, string device, string command)
{
}
"	0x101	26.04.2007 18:19:44.109
fwOT_FwDevMajority.states	_FwFsmObjectType	"MAJORITY_OK", "FwStateOKPhysics", "", "", "", "MAJORITY_WARNING", "FwStateAttention2", "", "", "", "MAJORITY_ERROR", "FwStateAttention3", "", "", ""	0x101	26.04.2007 18:19:44.093
fwOT_FwDevMajority.actions	_FwFsmObjectType		0x101	26.04.2007 18:19:44.093
fwOT_FwDevMajority.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.109
fwOT_GaudiJob.panel	_FwFsmObjectType	"fwGaucho/GaudiJobControlNode.pnl"	0x101	26.04.2007 06:53:13.109
fwOT_GaudiJob.components	_FwFsmObjectType	"string Status.Actual.Value
", "string Command.Actual.Value
", "GaudiJob_initialize(string domain, string device)
{
}
", "GaudiJob_valueChanged( string domain, string device, 
      string Status_dot_Actual_dot_Value, string &fwState ) 
{ 
	if (Status_dot_Actual_dot_Value == \"RUNNING\") 
	{ 
		fwState = \"RUNNING\"; 
	}  
	else if (Status_dot_Actual_dot_Value == \"NOT_READY\")  
	{  
		fwState = \"NOT_READY\";  
	} 
	else if (Status_dot_Actual_dot_Value == \"READY\") 
	{ 
		fwState = \"READY\"; 
	} 
	else if (Status_dot_Actual_dot_Value == \"UNKNOWN\")  
	{  
		fwState = \"UNKNOWN\";  
	} 
	else if (Status_dot_Actual_dot_Value == \"ERROR\")  
	{  
		fwState = \"ERROR\";  
	} 
        
} 
", "GaudiJob_doCommand(string domain, string device, string command) 
{ 
	if (command == \"LOAD\")  
	{  
		startGaudijob(device);   
	} 	 
 	if (command == \"STOP\") 
	{ 
		dpSetWait(device+\".Command.Actual.Value\",\"stop\"); 
	}  
      if (command == \"RESET\")  
	{  
		dpSetWait(device+\".Command.Actual.Value\",\"reset\");  
	}  

	if (command == \"START\") 
	{ 
		dpSetWait(device+\".Command.Actual.Value\",\"start\");  
	} 
	if (command == \"CONFIGURE\") 
	{ 
	      dpSetWait(device+\".Command.Actual.Value\",\"configure\");   
      } 
	if (command == \"UNLOAD\") 
	{ 
            dpSetWait(device+\".Command.Actual.Value\",\"unload\");  
      } 
} 
 
"	0x101	26.04.2007 06:53:13.109
fwOT_GaudiJob.states	_FwFsmObjectType	"UNKNOWN", "FwStateAttention1", "", "", "", "NOT_READY", "FwStateAttention2", "", "", "", "READY", "FwStateOKNotPhysics", "", "", "", "RUNNING", "FwStateOKPhysics", "", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	26.04.2007 18:19:54.000
fwOT_GaudiJob.actions	_FwFsmObjectType	"UNKNOWN/LOAD", "", "1", "", "0", "NOT_READY/CONFIGURE", "", "1", "", "0", "NOT_READY/UNLOAD", "", "1", "", "0", "READY/START", "", "1", "", "0", "READY/RESET", "", "1", "", "0", "RUNNING/STOP", "", "1", "", "0", "ERROR/UNLOAD", "", "1", "", "0"	0x101	26.04.2007 18:19:54.000
fwOT_GauchoSubFarmControlNode.panel	_FwFsmObjectType	"fwGaucho/SubFarmControlNode.pnl"	0x101	26.04.2007 06:53:13.125
fwOT_GauchoSubFarmControlNode.states	_FwFsmObjectType	"UNKNOWN", "FwStateAttention1", "when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|", "", "", "NOT_READY", "FwStateAttention2", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ANY$FwCHILDREN in_state READY ) move_to READY|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	26.04.2007 18:19:53.625
fwOT_GauchoSubFarmControlNode.actions	_FwFsmObjectType	"UNKNOWN/LOAD", "", "1", "do LOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
move_to NOT_READY
endif", "0", "NOT_READY/CONFIGURE", "", "1", "do CONFIGURE $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state READY )  then
move_to NOT_READY
endif
move_to READY", "0", "NOT_READY/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state UNKNOWN )  then
move_to NOT_READY
endif
move_to UNKNOWN ", "0", "READY/START", "", "1", "do START $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state RUNNING )  then
move_to READY
endif
move_to RUNNING  ", "0", "READY/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY )  then
move_to READY
endif
move_to NOT_READY ", "0", "RUNNING/STOP", "", "1", "do STOP $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state READY )  then
move_to RUNNING
endif
move_to READY", "0", "ERROR/RECOVER", "", "1", "do RECOVER $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY )  then
move_to ERROR
endif
move_to NOT_READY", "0"	0x101	26.04.2007 18:19:53.625
fwOT_GauchoSubFarmControlNode.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.140
fwOT_GauchoClass1ControlNode.panel	_FwFsmObjectType	"fwGaucho/FarmControlNode.pnl"	0x101	26.04.2007 06:53:13.140
fwOT_GauchoClass1ControlNode.states	_FwFsmObjectType	"UNKNOWN", "FwStateAttention1", "when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|", "", "", "NOT_READY", "FwStateAttention2", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state READY ) move_to READY|when ( $ANY$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	26.04.2007 18:19:52.062
fwOT_GauchoClass1ControlNode.actions	_FwFsmObjectType	"UNKNOWN/LOAD", "", "1", "do LOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "NOT_READY/CONFIGURE", "", "1", "do CONFIGURE $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state READY )  then
   move_to READY
endif", "0", "NOT_READY/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN 
endif", "0", "READY/START", "", "1", "do START $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
   move_to RUNNING  
endif
", "0", "READY/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif", "0", "RUNNING/STOP", "", "1", "do STOP $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state READY )  then
   move_to READY
endif", "0", "ERROR/RECOVER", "", "1", "do RECOVER $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY )  then
move_to ERROR
endif
move_to NOT_READY", "0"	0x101	26.04.2007 18:19:52.062
fwOT_GauchoClass1ControlNode.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.156
fwOT_RunInfo.panel	_FwFsmObjectType	"RunInfo.pnl"	0x101	26.04.2007 06:53:13.156
fwOT_RunInfo.components	_FwFsmObjectType	"int status
", "int status
", "RunInfo_initialize(string domain, string device)
{
}
", "RunInfo_valueChanged( string domain, string device,
      int status, string &fwState)
{
	if(status > 1)
	{
		fwState = \"RUNNING\";
	}
	else if(status > 0)
	{
		fwState = \"READY\";
	}
	else if(status > -1)
	{
		fwState = \"NOT_READY\";
	}
	else
	{
		fwState = \"ERROR\";
	}
}
", "RunInfo_doCommand(string domain, string device, string command)
{ 
int runNumber, runNTriggers; 
string runType;
	if (command == \"Stop\")
	{
		dpSet(device+\".status:_original.._value\",1);
	}
	if (command == \"Reset\")
	{
		dpSet(device+\".status:_original.._value\",0);
	}
	if (command == \"Start\")
	{
            runNumber = getNewRunNumber(device);  
            fwDU_setParameter(domain, device,   
                \"RUN_NUMBER\", runNumber);  
            runNTriggers = getNewNTriggers(device);  
            fwDU_setParameter(domain, device,   
                \"N_TRIGGERS\", runNTriggers);  
		dpSet(device+\".status:_original.._value\",2);
	}
	if (command == \"Configure\")
	{ 
            fwDU_getCommandParameter(domain, device, \"RUN_TYPE\", runType);
		dpSet(device+\".runType:_original.._value\",runType); 
		dpSet(device+\".status:_original.._value\",1);
	}
	if (command == \"Recover\")
	{
		dpSet(device+\".status:_original.._value\",0);
	}
} 
 
int getNewRunNumber(string device) 
{ 
int runNumber; 
 
    dpGet(device+\".runNumber\", runNumber); 
    runNumber++; 
    dpSet(device+\".runNumber\", runNumber); 
    return runNumber; 
}
 
int getNewNTriggers(string device)  
{  
int runNTriggers;  
  
    dpGet(device+\".runNTriggers\", runNTriggers);  
    if(runNTriggers <= 0) 
        return 0; 
    return runNTriggers;  
} 
 
"	0x101	26.04.2007 18:19:45.062
fwOT_RunInfo.states	_FwFsmObjectType	"RUNNING", "FwStateOKPhysics", "", "", "", "READY", "FwStateOKNotPhysics", "", "", "", "NOT_READY", "FwStateAttention1", "", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	26.04.2007 18:19:45.062
fwOT_RunInfo.actions	_FwFsmObjectType	"RUNNING/Stop", "", "1", "", "0", "RUNNING/Reset", "", "0", "", "0", "READY/Reset", "", "1", "", "0", "READY/Start", "", "1", "", "0", "READY/Configure", "", "1", "", "0", "NOT_READY/Configure", "", "1", "", "0", "ERROR/Recover", "", "1", "", "0"	0x101	26.04.2007 18:19:45.046
fwOT_RunInfo.parameters	_FwFsmObjectType	"int RUN_NUMBER = 0", "int N_TRIGGERS = 0"	0x101	26.04.2007 06:53:13.156
fwOT_GauchoOveralFarmControlNode.panel	_FwFsmObjectType	"fwGaucho/OveralFarmControlNode.pnl"	0x101	26.04.2007 06:53:13.171
fwOT_GauchoOveralFarmControlNode.states	_FwFsmObjectType	"UNKNOWN", "FwStateAttention1", "when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|", "", "", "NOT_READY", "FwStateAttention2", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ANY$FwCHILDREN in_state READY ) move_to READY|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	26.04.2007 18:19:53.250
fwOT_GauchoOveralFarmControlNode.actions	_FwFsmObjectType	"UNKNOWN/LOAD", "", "1", "do LOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
move_to NOT_READY
endif", "0", "NOT_READY/CONFIGURE", "", "1", "do CONFIGURE $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state READY )  then
move_to NOT_READY
endif
move_to READY", "0", "NOT_READY/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state UNKNOWN )  then
move_to NOT_READY
endif
move_to UNKNOWN ", "0", "READY/START", "", "1", "do START $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state RUNNING )  then
move_to READY
endif
move_to RUNNING  ", "0", "READY/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY )  then
move_to READY
endif
move_to NOT_READY ", "0", "RUNNING/STOP", "", "1", "do STOP $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state READY )  then
move_to RUNNING
endif
move_to READY", "0", "ERROR/RECOVER", "", "1", "do RECOVER $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY )  then
move_to ERROR
endif
move_to NOT_READY", "0"	0x101	26.04.2007 18:19:53.250
fwOT_GauchoOveralFarmControlNode.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.171
fwOT_ECS_Domain_v1.panel	_FwFsmObjectType	"lbECS/ECS_Domain_v1.pnl"	0x101	26.04.2007 06:53:13.171
fwOT_ECS_Domain_v1.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ALL$FwCHILDREN in_state {CONFIGURING,RAMPING_READY} )  move_to CONFIGURING|when ( $ALL$FwCHILDREN in_state {READY,RUNNING} )  move_to READY|", "", "", "UNKNOWN", "FwStateAttention2", "when ( $ALL$FwCHILDREN not_in_state UNKNOWN )  move_to NOT_READY|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ANY$FwCHILDREN not_in_state {READY,RUNNING} )  move_to NOT_READY|when ( $ALL$DAQ_Domain_v1 in_state READY )  move_to READY|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN not_in_state {READY,RUNNING} )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ALL$DAQ_Domain_v1 in_state RUNNING )  move_to RUNNING|", "", "", "ERROR", "FwStateAttention3", "when ( $ALL$FwCHILDREN not_in_state ERROR ) move_to NOT_READY|", "", "", "PAUSED", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|when ( $ALL$FwCHILDREN not_in_state {PAUSED,READY,RUNNING,NOT_ALLOCATED} ) move_to NOT_READY|", "", "", "CONFIGURING", "FwStateAttention1", "when ( $ALL$FwCHILDREN in_state {READY} )  move_to READY|when ( $ALL$FwCHILDREN not_in_state {CONFIGURING, RAMPING_READY} )  move_to NOT_READY|", "", ""	0x101	26.04.2007 18:19:47.296
fwOT_ECS_Domain_v1.actions	_FwFsmObjectType	"NOT_READY/PREPARE_PHYSICS", "", "1", "do PREPARE_PHYSICS $ALL$ECS_Domain_v1
do Switch_ON(RUN_TYPE = \"PHYSICS\") $ALL$DCS_Domain_v1
if ( $ALL$DCS_Domain_v1 not_in_state READY ) then
    move_to NOT_READY
endif
do Switch_ON(RUN_TYPE = \"PHYSICS\") $ALL$DAI_Domain_v1
if ( $ALL$DAI_Domain_v1 not_in_state READY ) then
    move_to NOT_READY
endif
do Go_READY(RUN_TYPE = \"PHYSICS\") $ALL$HV_Domain_v1
do Configure(RUN_TYPE = \"PHYSICS\") $ALL$DAQ_Domain_v1
do Configure(RUN_TYPE = \"PHYSICS\") $ALL$TFC_Domain
do Configure(RUN_TYPE = \"PHYSICS\") $ALL$HLT_Domain
do Reset $ALL$RunInfo
do Configure(RUN_TYPE = \"PHYSICS\") $ALL$RunInfo
move_to CONFIGURING", "0", "NOT_READY/PREPARE", "string RUN_TYPE = \"PHYSICS\"
", "1", "do PREPARE(RUN_TYPE=RUN_TYPE) $ALL$ECS_Domain_v1
do Switch_ON(RUN_TYPE=RUN_TYPE) $ALL$DCS_Domain_v1
if ( $ALL$DCS_Domain_v1 not_in_state READY ) then
    move_to NOT_READY
endif
do Switch_ON(RUN_TYPE=RUN_TYPE) $ALL$DAI_Domain_v1
if ( $ALL$DAI_Domain_v1 not_in_state READY ) then
    move_to NOT_READY
endif
do Go_READY(RUN_TYPE=RUN_TYPE) $ALL$HV_Domain_v1
do Configure(RUN_TYPE=RUN_TYPE) $ALL$DAQ_Domain_v1
do Configure(RUN_TYPE=RUN_TYPE) $ALL$TFC_Domain
do Configure(RUN_TYPE=RUN_TYPE) $ALL$HLT_Domain
do Configure(RUN_TYPE=RUN_TYPE) $ALL$RunInfo
move_to CONFIGURING", "0", "NOT_READY/STOP_RUN", "", "1", "do Stop $ALL$TFC_Domain
if ( $ALL$TFC_Domain not_in_state READY ) then
    move_to NOT_READY
endif
do STOP_RUN $ALL$ECS_Domain_v1
do Stop $ALL$DAQ_Domain_v1
do Stop $ALL$HLT_Domain
do Stop $ALL$RunInfo
if (( $ALL$ECS_Domain not_in_state READY ) or
    ( $ALL$DAQ_Domain not_in_state READY ) or
    ( $ALL$RunInfo not_in_state READY ) or
    ( $ALL$HLT_Domain not_in_state STOPPING ) ) then
    move_to NOT_READY
endif
move_to READY", "0", "UNKNOWN/RECOVER", "", "1", "do Load $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY ) then
    move_to UNKNOWN
endif
move_to NOT_READY", "0", "RUNNING/PAUSE_RUN", "", "1", "do Pause $ALL$TFC_Domain
if ( $ALL$TFC_Domain not_in_state PAUSED ) then
    move_to RUNNING
endif
move_to PAUSED", "0", "RUNNING/STOP_RUN", "", "1", "do Stop $ALL$TFC_Domain
if ( $ALL$TFC_Domain not_in_state READY ) then
    move_to RUNNING
endif
do STOP_RUN $ALL$ECS_Domain_v1
do Stop $ALL$DAQ_Domain_v1
do Stop $ALL$HLT_Domain
do Stop $ALL$RunInfo
if (( $ALL$ECS_Domain not_in_state READY ) or
    ( $ALL$DAQ_Domain not_in_state READY ) or
    ( $ALL$RunInfo not_in_state READY ) or
    ( $ALL$HLT_Domain not_in_state STOPPING ) ) then
    move_to RUNNING
endif
move_to READY", "0", "READY/START_RUN", "", "1", "do START_RUN $ALL$ECS_Domain_v1
do Start $ALL$DAQ_Domain_v1
do Start $ALL$HLT_Domain
do Start $ALL$RunInfo
if (( $ALL$ECS_Domain_v1 in_state RUNNING ) and
    ( $ALL$DAQ_Domain_v1 in_state RUNNING ) and
    ( $ALL$HLT_Domain in_state {RUNNING} ) and
    ( $ALL$RunInfo in_state RUNNING ) ) then
    set RUN_NUMBER = $RunInfo.RUN_NUMBER
    set N_TRIGGERS = $RunInfo.N_TRIGGERS
    do Start(RUN_NUMBER=RUN_NUMBER,N_TRIGGERS=N_TRIGGERS) $ALL$TFC_Domain
    if ( $ALL$TFC_Domain not_in_state RUNNING )  then
        move_to READY
    endif
    move_to RUNNING
endif", "0", "READY/RESET", "", "1", "do RESET $ALL$ECS_Domain_v1
do Reset $ALL$DAQ_Domain_v1
do Reset $ALL$TFC_Domain
do Reset $ALL$HLT_Domain
move_to NOT_READY", "0", "ERROR/RECOVER", "", "1", "do RECOVER $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY ) then
    move_to ERROR
endif
move_to NOT_READY", "0", "PAUSED/CONTINUE_RUN", "", "1", "do Continue $ALL$TFC_Domain
if ( $ALL$TFC_Domain not_in_state RUNNING )  then
    move_to PAUSED
endif
move_to RUNNING", "0", "PAUSED/STOP_RUN", "", "1", "do Stop $ALL$TFC_Domain
if ( $ALL$TFC_Domain not_in_state READY ) then
    move_to RUNNING
endif
do STOP_RUN $ALL$ECS_Domain_v1
do Stop $ALL$DAQ_Domain_v1
do Stop $ALL$HLT_Domain
do Stop $ALL$RunInfo
if ( $ALL$FwCHILDREN not_in_state {READY,STOPPING} ) then
    move_to PAUSED
endif
move_to READY", "0", "CONFIGURING/FAKE_READY", "", "1", "do FAKE_READY $ALL$FwCHILDREN
move_to READY", "0"	0x101	26.04.2007 18:19:47.296
fwOT_ECS_Domain_v1.parameters	_FwFsmObjectType	"int RUN_NUMBER = 0", "int N_TRIGGERS = 0"	0x101	26.04.2007 06:53:13.187
fwOT_DAI_Domain_v1.panel	_FwFsmObjectType	"DAI_Domain_v1.pnl"	0x101	26.04.2007 06:53:13.187
fwOT_DAI_Domain_v1.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state {ERROR, EMERGENCY_OFF} )  move_to ERROR|when ( $ALL$FwCHILDREN in_state OFF )  move_to OFF|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|", "", "", "READY", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state {ERROR, EMERGENCY_OFF} )  move_to ERROR|when ( $ALL$FwCHILDREN in_state OFF )  move_to OFF|when ( $ANY$FwCHILDREN not_in_state READY )  move_to NOT_READY|", "", "", "OFF", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state {ERROR, EMERGENCY_OFF} )  move_to ERROR|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ANY$FwCHILDREN not_in_state OFF )  move_to NOT_READY|", "", "", "ERROR", "FwStateAttention3", "when ( $ALL$FwCHILDREN in_state EMERGENCY_OFF )  move_to EMERGENCY_OFF|when ( $ALL$FwCHILDREN not_in_state ERROR )  move_to NOT_READY|", "", "", "EMERGENCY_OFF", "FwStateAttention3", "", "", ""	0x101	26.04.2007 18:19:45.875
fwOT_DAI_Domain_v1.actions	_FwFsmObjectType	"NOT_READY/Switch_ON", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_DAI
if ( $ALL$FwFSMConfDB_DAI not_in_state READY )  then
  move_to ERROR
endif
do Switch_ON(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state READY )  then
  move_to NOT_READY
endif
move_to READY", "0", "NOT_READY/Switch_OFF", "", "1", "do Switch_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state OFF )  then
  move_to NOT_READY
endif
move_to OFF", "0", "NOT_READY/Do_Emergency_OFF", "", "0", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF", "0", "NOT_READY/Load", "string RUN_TYPE = \"PHYSICS\"
", "1", "do Reset $ALL$DAI_Domain_v1
do UNLOAD $ALL$FwFSMConfDB_DAI
if ( $ALL$FwFSMConfDB_DAI not_in_state NOT_READY )  then
  move_to ERROR
endif
do LOAD(RUN_TYPE=RUN_TYPE) $ALL$DAI_Domain_v1
do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_DAI
if ( $ALL$FwFSMConfDB_DAI not_in_state READY )  then
  move_to ERROR
endif
move_to NOT_READY", "0", "READY/Switch_OFF", "", "1", "do Switch_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state OFF )  then
  move_to NOT_READY
endif
move_to OFF", "0", "READY/Do_Emergency_OFF", "", "0", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF", "0", "READY/Reset", "", "1", "do Reset $ALL$DAI_Domain_v1
do UNLOAD $ALL$FwFSMConfDB_DAI
if ( $ALL$FwFSMConfDB_DAI not_in_state NOT_READY )  then
  move_to ERROR
endif
move_to NOT_READY", "0", "OFF/Switch_ON", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_DAI
if ( $ALL$FwFSMConfDB_DAI not_in_state READY )  then
  move_to ERROR
endif
do Switch_ON(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state READY )  then
  move_to NOT_READY
endif
move_to READY", "0", "OFF/Do_Emergency_OFF", "", "0", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF", "0", "OFF/Reset", "", "1", "do Reset $ALL$DAI_Domain_v1
do UNLOAD $ALL$FwFSMConfDB_DAI
if ( $ALL$FwFSMConfDB_DAI not_in_state NOT_READY )  then
  move_to ERROR
endif
move_to NOT_READY", "0", "ERROR/Recover", "", "1", "do Recover $ALL$FwCHILDREN
move_to NOT_READY", "0", "ERROR/Do_Emergency_OFF", "", "0", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF", "0", "EMERGENCY_OFF/Clear_Emergency", "", "2", "do Clear_Emergency $ALL$FwCHILDREN
move_to NOT_READY", "0"	0x101	26.04.2007 18:19:45.875
fwOT_DAI_Domain_v1.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.203
fwOT_DAQ_Domain_v1.panel	_FwFsmObjectType	"DAQ_Domain_v1.pnl"	0x101	26.04.2007 06:53:13.203
fwOT_DAQ_Domain_v1.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ALL$FwCHILDREN in_state {CONFIGURING,READY} )  move_to CONFIGURING|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "UNKNOWN", "FwStateAttention2", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|when ( $ALL$FwCHILDREN not_in_state UNKNOWN )  move_to NOT_READY|", "", "", "CONFIGURING", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN |when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ANY$FwCHILDREN not_in_state {CONFIGURING,READY} )  move_to NOT_READY|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ANY$FwCHILDREN not_in_state {READY,RUNNING} ) move_to NOT_READY|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ANY$FwCHILDREN not_in_state RUNNING )  move_to NOT_READY|", "", "", "ERROR", "FwStateAttention3", "when ( $ALL$FwCHILDREN not_in_state ERROR ) move_to NOT_READY|", "", ""	0x101	26.04.2007 18:19:46.296
fwOT_DAQ_Domain_v1.actions	_FwFsmObjectType	"NOT_READY/Configure", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_DAQ
if ( $ALL$FwFSMConfDB_DAQ not_in_state READY )  then
  move_to ERROR
endif
do Configure(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {CONFIGURING,READY} ) then
    move_to NOT_READY
endif
move_to CONFIGURING", "0", "NOT_READY/Load", "string RUN_TYPE = \"PHYSICS\"
", "1", "do Load(RUN_TYPE=RUN_TYPE) $ALL$DAQ_Domain_v1
do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_DAQ
if ( $ALL$FwFSMConfDB_DAQ not_in_state READY )  then
  move_to ERROR
endif
if ( $ALL$DAQ_Domain_v1 not_in_state NOT_READY )  then
  move_to ERROR
endif
move_to NOT_READY", "0", "NOT_READY/Unload", "", "1", "do Unload $ALL$DAQ_Domain_v1
do UNLOAD $ALL$FwFSMConfDB_DAQ
if ( $ALL$FwFSMConfDB_DAQ not_in_state NOT_READY )  then
  move_to ERROR
endif
move_to NOT_READY", "0", "CONFIGURING/FAKE_READY", "", "1", "do FAKE_READY $ALL$FwCHILDREN
move_to READY", "0", "READY/Start", "", "1", "do Start $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state RUNNING ) then
    move_to READY
endif
move_to RUNNING", "0", "READY/Reset", "", "1", "do Reset $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY ) then
    move_to READY
endif
move_to NOT_READY", "0", "RUNNING/Stop", "", "1", "do Stop $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state READY ) then
    move_to RUNNING
endif
move_to READY", "0", "RUNNING/Reset", "", "1", "do Reset $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY ) then
    move_to READY
endif
move_to NOT_READY", "0", "ERROR/Recover", "", "1", "do Recover $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY ) then
    move_to ERROR
endif
move_to NOT_READY", "0"	0x101	26.04.2007 18:19:46.296
fwOT_DAQ_Domain_v1.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.218
fwOT_DCS_Domain_v1.panel	_FwFsmObjectType	"DCS_Domain_v1.pnl"	0x101	26.04.2007 06:53:13.218
fwOT_DCS_Domain_v1.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state {ERROR, EMERGENCY_OFF} )  move_to ERROR|when ( $ALL$FwCHILDREN in_state OFF )  move_to OFF|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|", "", "", "READY", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state {ERROR, EMERGENCY_OFF} )  move_to ERROR|when ( $ALL$FwCHILDREN in_state OFF )  move_to OFF|when ( $ANY$FwCHILDREN not_in_state READY )  move_to NOT_READY|", "", "", "OFF", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state {ERROR, EMERGENCY_OFF} )  move_to ERROR|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ANY$FwCHILDREN not_in_state OFF )  move_to NOT_READY|", "", "", "ERROR", "FwStateAttention3", "when ( $ALL$FwCHILDREN in_state EMERGENCY_OFF )  move_to EMERGENCY_OFF|when ( $ALL$FwCHILDREN not_in_state ERROR )  move_to NOT_READY|", "", "", "EMERGENCY_OFF", "FwStateAttention3", "", "", ""	0x101	26.04.2007 18:19:46.750
fwOT_DCS_Domain_v1.actions	_FwFsmObjectType	"NOT_READY/Switch_ON", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_DCS
if ( $ALL$FwFSMConfDB_DCS not_in_state READY )  then
  move_to ERROR
endif
do Switch_ON(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state READY )  then
  move_to NOT_READY
endif
move_to READY", "0", "NOT_READY/Switch_OFF", "", "1", "do Switch_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state OFF )  then
  move_to NOT_READY
endif
move_to OFF", "0", "NOT_READY/Do_Emergency_OFF", "", "0", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF", "0", "NOT_READY/Load", "string RUN_TYPE = \"PHYSICS\"
", "1", "do Reset $ALL$DCS_Domain_v1
do UNLOAD $ALL$FwFSMConfDB_DCS
if ( $ALL$FwFSMConfDB_DCS not_in_state NOT_READY )  then
  move_to ERROR
endif
do LOAD(RUN_TYPE=RUN_TYPE) $ALL$DCS_Domain_v1
do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_DCS
if ( $ALL$FwFSMConfDB_DCS not_in_state READY )  then
  move_to ERROR
endif
move_to NOT_READY", "0", "READY/Switch_OFF", "", "1", "do Switch_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state OFF )  then
  move_to NOT_READY
endif
move_to OFF", "0", "READY/Do_Emergency_OFF", "", "0", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF", "0", "READY/Reset", "", "1", "do Reset $ALL$DCS_Domain_v1
do UNLOAD $ALL$FwFSMConfDB_DCS
if ( $ALL$FwFSMConfDB_DCS not_in_state NOT_READY )  then
  move_to ERROR
endif
move_to NOT_READY", "0", "OFF/Switch_ON", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_DCS
if ( $ALL$FwFSMConfDB_DCS not_in_state READY )  then
  move_to ERROR
endif
do Switch_ON(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state READY )  then
  move_to NOT_READY
endif
move_to READY", "0", "OFF/Do_Emergency_OFF", "", "0", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF", "0", "OFF/Reset", "", "1", "do Reset $ALL$DCS_Domain_v1
do UNLOAD $ALL$FwFSMConfDB_DCS
if ( $ALL$FwFSMConfDB_DCS not_in_state NOT_READY )  then
  move_to ERROR
endif
move_to NOT_READY", "0", "ERROR/Recover", "", "1", "do Recover $ALL$FwCHILDREN
move_to NOT_READY", "0", "ERROR/Do_Emergency_OFF", "", "0", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF", "0", "EMERGENCY_OFF/Clear_Emergency", "", "2", "do Clear_Emergency $ALL$FwCHILDREN
move_to NOT_READY", "0"	0x101	26.04.2007 18:19:46.750
fwOT_DCS_Domain_v1.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.218
fwOT_HV_Domain_v1.panel	_FwFsmObjectType	"HV_Domain_v1.pnl"	0x101	26.04.2007 06:53:13.218
fwOT_HV_Domain_v1.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state EMERGENCY_OFF )  move_to EMERGENCY_OFF
|when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state {RAMPING_STANDBY1,STANDBY1} )  move_to RAMPING_STANDBY1
|when ( $ALL$FwCHILDREN in_state {RAMPING_STANDBY2,STANDBY2} )  move_to RAMPING_STANDBY2
|when ( $ALL$FwCHILDREN in_state {RAMPING_READY,READY} )  move_to RAMPING_READY
|when ( $ALL$FwCHILDREN in_state {RAMPING_OFF,OFF} )  move_to RAMPING_OFF
|", "", "", "OFF", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state EMERGENCY_OFF )  move_to EMERGENCY_OFF
|when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state {RAMPING_STANDBY1,STANDBY1} )  move_to RAMPING_STANDBY1
|when ( $ALL$FwCHILDREN in_state {RAMPING_STANDBY2,STANDBY2} )  move_to RAMPING_STANDBY2
|when ( $ALL$FwCHILDREN in_state {RAMPING_READY,READY} )  move_to RAMPING_READY
|when ( $ANY$FwCHILDREN not_in_state OFF )  move_to NOT_READY|", "", "", "RAMPING_STANDBY1", "FwStateAttention2", "when ( $ALL$FwCHILDREN in_state STANDBY1 )  move_to STANDBY1
|when ( $ALL$FwCHILDREN not_in_state {RAMPING_STANDBY1,STANDBY1} )  move_to NOT_READY
|", "", "", "STANDBY1", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state EMERGENCY_OFF )  move_to EMERGENCY_OFF
|when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state {RAMPING_OFF,OFF} )  move_to RAMPING_OFF
|when ( $ALL$FwCHILDREN in_state {RAMPING_STANDBY2,STANDBY2} )  move_to RAMPING_STANDBY2
|when ( $ALL$FwCHILDREN in_state {RAMPING_READY,READY} )  move_to RAMPING_READY
|when ( $ANY$FwCHILDREN not_in_state STANDBY1 )  move_to NOT_READY|", "", "", "RAMPING_STANDBY2", "FwStateAttention2", "when ( $ALL$FwCHILDREN in_state STANDBY2 )  move_to STANDBY2
|when ( $ALL$FwCHILDREN not_in_state {RAMPING_STANDBY2,STANDBY2} )  move_to NOT_READY
|", "", "", "STANDBY2", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state EMERGENCY_OFF )  move_to EMERGENCY_OFF
|when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state {RAMPING_STANDBY1,STANDBY1} )  move_to RAMPING_STANDBY1
|when ( $ALL$FwCHILDREN in_state {RAMPING_READY,READY} )  move_to RAMPING_READY
|when ( $ALL$FwCHILDREN in_state {RAMPING_OFF,OFF} )  move_to RAMPING_OFF
|when ( $ANY$FwCHILDREN not_in_state STANDBY2 )  move_to NOT_READY|", "", "", "RAMPING_READY", "FwStateAttention2", "when ( $ALL$FwCHILDREN in_state READY )  move_to READY
|when ( $ALL$FwCHILDREN not_in_state {RAMPING_READY,READY} )  move_to NOT_READY
|", "", "", "READY", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state EMERGENCY_OFF )  move_to EMERGENCY_OFF
|when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state {RAMPING_STANDBY1,STANDBY1} )  move_to RAMPING_STANDBY1
|when ( $ALL$FwCHILDREN in_state {RAMPING_STANDBY2,STANDBY2} )  move_to RAMPING_STANDBY2|when ( $ALL$FwCHILDREN in_state {RAMPING_OFF,OFF} )  move_to RAMPING_OFF
|when ( $ANY$FwCHILDREN not_in_state READY )  move_to NOT_READY|", "", "", "RAMPING_OFF", "FwStateAttention2", "when ( $ALL$FwCHILDREN in_state OFF )  move_to OFF
|when ( $ALL$FwCHILDREN not_in_state {RAMPING_OFF,OFF} )  move_to NOT_READY
|", "", "", "ERROR", "FwStateAttention3", "when ( $ANY$FwCHILDREN in_state EMERGENCY_OFF )  move_to EMERGENCY_OFF
|when ( $ALL$FwCHILDREN not_in_state ERROR )  move_to NOT_READY
|", "", "", "EMERGENCY_OFF", "FwStateAttention3", "when ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  move_to NOT_READY
|", "", ""	0x101	26.04.2007 18:19:55.234
fwOT_HV_Domain_v1.actions	_FwFsmObjectType	"NOT_READY/Go_OFF", "", "1", "do Go_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_OFF, OFF} ) then
    move_to NOT_READY
endif
move_to RAMPING_OFF
", "0", "NOT_READY/Go_STANDBY1", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
  move_to ERROR
endif
do Go_STANDBY1(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_STANDBY1, STANDBY1} ) then
    move_to NOT_READY
endif
move_to RAMPING_STANDBY1", "0", "NOT_READY/Go_STANDBY2", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
  move_to ERROR
endif
do Go_STANDBY2(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_STANDBY2, STANDBY2} ) then
    move_to NOT_READY
endif
move_to RAMPING_STANDBY2", "0", "NOT_READY/Go_READY", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
  move_to ERROR
endif
do Go_READY(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_READY, READY} )  then
        move_to NOT_READY
endif
move_to RAMPING_READY", "0", "NOT_READY/Do_Emergency_OFF", "", "1", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF
", "0", "NOT_READY/Load", "string RUN_TYPE = \"PHYSICS\"
", "1", "do Reset $ALL$HV_Domain_v1
do UNLOAD $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state NOT_READY )  then
  move_to ERROR
endif
do LOAD(RUN_TYPE=RUN_TYPE) $ALL$HV_Domain_v1
do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
    move_to ERROR
endif
move_to NOT_READY", "0", "OFF/Go_STANDBY1", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
  move_to ERROR
endif
do Go_STANDBY1(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_STANDBY1, STANDBY1} ) then
    move_to NOT_READY
endif
move_to RAMPING_STANDBY1", "0", "OFF/Go_STANDBY2", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
  move_to ERROR
endif
do Go_STANDBY2(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_STANDBY2, STANDBY2} ) then
    move_to NOT_READY
endif
move_to RAMPING_STANDBY2", "0", "OFF/Go_READY", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
  move_to ERROR
endif
do Go_READY(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_READY, READY} )  then
        move_to NOT_READY
endif
move_to RAMPING_READY", "0", "OFF/Do_Emergency_OFF", "", "1", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF
", "0", "OFF/Reset", "", "1", "do Reset $ALL$HV_Domain_v1
do UNLOAD $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state NOT_READY )  then
  move_to ERROR
endif
move_to NOT_READY", "0", "RAMPING_STANDBY1/Do_Emergency_OFF", "", "1", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF
", "0", "STANDBY1/Go_STANDBY2", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
  move_to ERROR
endif
do Go_STANDBY2(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_STANDBY2, STANDBY2} ) then
    move_to NOT_READY
endif
move_to RAMPING_STANDBY2", "0", "STANDBY1/Go_READY", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
  move_to ERROR
endif
do Go_READY(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_READY, READY} )  then
        move_to NOT_READY
endif
move_to RAMPING_READY", "0", "STANDBY1/Go_OFF", "", "1", "do Go_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_OFF, OFF} ) then
    move_to NOT_READY
endif
move_to RAMPING_OFF
", "0", "STANDBY1/Reset", "", "1", "do Reset $ALL$HV_Domain_v1
do UNLOAD $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state NOT_READY )  then
  move_to ERROR
endif
move_to NOT_READY", "0", "RAMPING_STANDBY2/Do_Emergency_OFF", "", "1", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF
", "0", "STANDBY2/Go_READY", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
  move_to ERROR
endif
do Go_READY(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_READY, READY} )  then
        move_to NOT_READY
endif
move_to RAMPING_READY", "0", "STANDBY2/Go_STANDBY1", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
  move_to ERROR
endif
do Go_STANDBY1(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_STANDBY1, STANDBY1} ) then
    move_to NOT_READY
endif
move_to RAMPING_STANDBY1", "0", "STANDBY2/Go_OFF", "", "1", "do Go_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_OFF, OFF} ) then
    move_to NOT_READY
endif
move_to RAMPING_OFF
", "0", "STANDBY2/Do_Emergency_OFF", "", "1", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF
", "0", "STANDBY2/Reset", "", "1", "do Reset $ALL$HV_Domain_v1
do UNLOAD $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state NOT_READY )  then
  move_to ERROR
endif
move_to NOT_READY", "0", "RAMPING_READY/Do_Emergency_OFF", "", "1", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF
", "0", "RAMPING_READY/FAKE_READY", "", "1", "do FAKE_READY $ALL$FwCHILDREN
move_to READY", "0", "READY/Go_STANDBY2", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
  move_to ERROR
endif
do Go_STANDBY2(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_STANDBY2, STANDBY2} ) then
    move_to NOT_READY
endif
move_to RAMPING_STANDBY2", "0", "READY/Go_STANDBY1", "string RUN_TYPE = \"PHYSICS\"
", "1", "do LOAD(sMode=RUN_TYPE) $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state READY )  then
  move_to ERROR
endif
do Go_STANDBY1(RUN_TYPE=RUN_TYPE) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_STANDBY1, STANDBY1} ) then
    move_to NOT_READY
endif
move_to RAMPING_STANDBY1", "0", "READY/Go_OFF", "", "1", "do Go_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state {RAMPING_OFF, OFF} ) then
    move_to NOT_READY
endif
move_to RAMPING_OFF
", "0", "READY/Do_Emergency_OFF", "", "1", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF
", "0", "READY/Reset", "", "1", "do Reset $ALL$HV_Domain_v1
do UNLOAD $ALL$FwFSMConfDB_HV
if ( $ALL$FwFSMConfDB_HV not_in_state NOT_READY )  then
  move_to ERROR
endif
move_to NOT_READY", "0", "RAMPING_OFF/Do_Emergency_OFF", "", "1", "do Do_Emergency_OFF $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state EMERGENCY_OFF )  then
  move_to ERROR
endif
move_to EMERGENCY_OFF
", "0", "ERROR/RECOVER", "", "1", "do RECOVER $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state OFF ) then
    move_to ERROR
endif
move_to OFF
", "0", "EMERGENCY_OFF/Clear_Emergency", "", "1", "do Clear_Emergency $ALL$FwCHILDREN
move_to NOT_READY", "0"	0x101	26.04.2007 18:19:55.218
fwOT_HV_Domain_v1.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.234
fwOT_StorageControl.panel	_FwFsmObjectType	"StorageControl/Control.pnl"	0x101	26.04.2007 13:57:27.671
fwOT_StorageControl.components	_FwFsmObjectType	"string State
", "string Command
", "StorageControl_initialize(string domain, string device)
{
}
", "StorageControl_valueChanged(string domain, string device, string State, string &fwState )  {
  // Receiving string of type:  \"READY/StorageSystem/LHCb/203\"
  DebugN(\"Acting on interrupt> Domain:\"+domain+\" Device:\"+device+\" State:\"+State);
  dyn_string items = strsplit(State,\"/\");        
  if ( dynlen(items) == 5 )  {
    string stateName = items[1];
    string partName  = items[3];
    int partID       = items[4];
    string slice     = items[5]; 
    fwDU_setParameter(domain,device,\"currentSlice\",slice);
    fwDU_setParameter(domain,device,\"currentPartitionID\",partID);
    fwDU_setParameter(domain,device,\"currentPartitionName\",partName);
    if (stateName == \"READY\")  {
      fwState = \"READY\";
      return;
    }
  }
  fwState = \"ERROR\";
}

", "StorageControl_doCommand(string domain, string device, string command)  {
  int partID;
  string partName;
  DebugN(\"Acting on Storage instance:\"+device);
  fwDU_getCommandParameter(domain, device, \"PART_ID\", partID);
  fwDU_getCommandParameter(domain, device, \"PART_NAME\", partName);
  // Set timeout in case the allocation task is dead ...
  fwDU_startTimeout(20,domain,device,\"ERROR\");
  dpSet(device+\".Command\",command+\"/\"+device+\"/\"+partName+\"/\"+partID);
}
"	0x101	26.04.2007 18:19:45.343
fwOT_StorageControl.states	_FwFsmObjectType	"READY", "FwStateOKPhysics", "", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	26.04.2007 18:19:45.328
fwOT_StorageControl.actions	_FwFsmObjectType	"READY/ALLOCATE", "int PART_ID = 0
string PART_NAME = \"\"
", "1", "", "0", "READY/DEALLOCATE", "int PART_ID = 0
string PART_NAME = \"\"
", "1", "", "0", "ERROR/RECOVER", "int PART_ID = 0
string PART_NAME = \"\"
", "1", "", "0"	0x101	26.04.2007 18:19:45.328
fwOT_StorageControl.parameters	_FwFsmObjectType	"int currentPartitionID = 0", "string currentPartitionName = \"\"", "string currentSlice = \"\""	0x101	26.04.2007 13:30:03.953
fwOT_StorageControlUnit.panel	_FwFsmObjectType	"StorageControl/ControlUnit.pnl"	0x101	26.04.2007 06:53:13.250
fwOT_StorageControlUnit.states	_FwFsmObjectType	"READY", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|", "", "", "ERROR", "FwStateAttention3", "when ( $ALL$FwCHILDREN not_in_state ERROR )  move_to READY|", "", ""	0x101	26.04.2007 18:19:55.796
fwOT_StorageControlUnit.actions	_FwFsmObjectType	"READY/ALLOCATE", "int PART_ID = 0
string PART_NAME = \"LHCb\"
", "1", "do ALLOCATE(PART_ID = PART_ID, PART_NAME = PART_NAME)  $ALL$StorageControl
if ( $ALL$StorageControl in_state READY )  then
  move_to READY
endif
move_to ERROR", "0", "READY/DEALLOCATE", "int PART_ID = 0
string PART_NAME = \"LHCb\"
", "1", "do DEALLOCATE(PART_ID = PART_ID, PART_NAME = PART_NAME)  $ALL$StorageControl
if ( $ALL$StorageControl in_state READY )  then
  move_to READY
endif
move_to ERROR", "0", "ERROR/RECOVER", "int PART_ID = 0
string PART_NAME = \"LHCb\"
", "1", "do RECOVER(PART_ID = PART_ID, PART_NAME = PART_NAME)  $ALL$StorageControl
if ( $ALL$StorageControl in_state READY )  then
  move_to READY
endif
move_to ERROR", "0"	0x101	26.04.2007 18:19:55.796
fwOT_StorageControlUnit.parameters	_FwFsmObjectType	"int currentPartitionID = 0", "string currentPartitionName = \"\""	0x101	26.04.2007 06:53:13.265
fwOT_FSM_Class0.panel	_FwFsmObjectType	"FSM_Class0.pnl"	0x101	26.04.2007 06:53:13.265
fwOT_FSM_Class0.states	_FwFsmObjectType	"UNKNOWN", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|when ( ( $ALL$FwCHILDREN not_in_state UNKNOWN ) and
       ( $ANY$FwCHILDREN in_state NOT_READY ) )  move_to NOT_READY|when ( ( $ALL$FwCHILDREN not_in_state UNKNOWN ) and
       ( $ANY$FwCHILDREN in_state READY ) )  move_to READY|when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "NOT_READY", "FwStateAttention2", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ALL$FwCHILDREN in_state {READY,RUNNING} )  move_to READY|when ( $ALL$FwCHILDREN in_state {READY,STOPPED} )  move_to STOPPED|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ANY$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ANY$FwCHILDREN in_state READY ) move_to READY|when ( $ALL$FwCHILDREN in_state STOPPED )  move_to STOPPED|", "", "", "ERROR", "FwStateAttention3", "when ( $ALL$FwCHILDREN not_in_state ERROR )  move_to UNKNOWN|", "", "", "STOPPED", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ANY$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|", "", ""	0x101	26.04.2007 18:19:47.921
fwOT_FSM_Class0.actions	_FwFsmObjectType	"UNKNOWN/LOAD", "", "1", "do LOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "UNKNOWN/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "UNKNOWN/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN 
endif", "0", "UNKNOWN/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif", "0", "NOT_READY/CONFIGURE", "", "1", "do CONFIGURE $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state READY )  then
   move_to READY
endif", "0", "NOT_READY/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN 
endif
", "0", "NOT_READY/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "READY/START", "", "1", "do START $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
   move_to RUNNING  
endif", "0", "READY/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif", "0", "READY/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "RUNNING/STOP", "", "1", "do STOP $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state STOPPED )  then
   move_to STOPPED
endif", "0", "RUNNING/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "ERROR/RECOVER", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "ERROR/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "ERROR/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN 
endif", "0", "ERROR/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif", "0", "STOPPED/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif", "0", "STOPPED/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "STOPPED/START", "", "1", "do START $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
   move_to RUNNING  
endif", "0"	0x101	26.04.2007 18:19:47.921
fwOT_FSM_Class0.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.281
fwOT_FSM_Class1.panel	_FwFsmObjectType	"FSM_Class1.pnl"	0x101	26.04.2007 06:53:13.281
fwOT_FSM_Class1.states	_FwFsmObjectType	"UNKNOWN", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|when ( ( $ALL$FwCHILDREN not_in_state UNKNOWN ) and
       ( $ANY$FwCHILDREN in_state NOT_READY ) )  move_to NOT_READY|when ( ( $ALL$FwCHILDREN not_in_state UNKNOWN ) and
       ( $ANY$FwCHILDREN in_state READY ) )  move_to READY|when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "NOT_READY", "FwStateAttention2", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ALL$FwCHILDREN in_state {READY,RUNNING} )  move_to READY|when ( $ALL$FwCHILDREN in_state {READY,STOPPED} )  move_to STOPPED|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ANY$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ANY$FwCHILDREN in_state READY ) move_to READY|when ( $ALL$FwCHILDREN in_state STOPPED )  move_to STOPPED|", "", "", "ERROR", "FwStateAttention3", "when ( $ALL$FwCHILDREN not_in_state ERROR )  move_to UNKNOWN|", "", "", "STOPPED", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ANY$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|", "", ""	0x101	26.04.2007 18:19:48.562
fwOT_FSM_Class1.actions	_FwFsmObjectType	"UNKNOWN/LOAD", "", "1", "do LOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "UNKNOWN/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "UNKNOWN/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN 
endif", "0", "UNKNOWN/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif", "0", "NOT_READY/CONFIGURE", "", "1", "do CONFIGURE $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state READY )  then
   move_to READY
endif", "0", "NOT_READY/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN 
endif
", "0", "NOT_READY/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "READY/START", "", "1", "do START $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
   move_to RUNNING  
endif", "0", "READY/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif", "0", "READY/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "RUNNING/STOP", "", "1", "do STOP $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state STOPPED )  then
   move_to STOPPED
endif", "0", "RUNNING/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "ERROR/RECOVER", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "ERROR/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "ERROR/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN 
endif", "0", "ERROR/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif", "0", "STOPPED/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif", "0", "STOPPED/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "STOPPED/START", "", "1", "do START $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
   move_to RUNNING  
endif", "0"	0x101	26.04.2007 18:19:48.546
fwOT_FSM_Class1.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.281
fwOT_FSM_Node.panel	_FwFsmObjectType	"StorageControl/FSM_Node.pnl"	0x101	26.04.2007 06:53:13.281
fwOT_FSM_Node.states	_FwFsmObjectType	"UNKNOWN", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( ( $ALL$FSM_Class0 in_state RUNNING ) and
       ( $ALL$FSM_Class1 in_state NOT_READY ) )  move_to READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "NOT_READY", "FwStateAttention2", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( ( $ALL$FSM_Class0 in_state RUNNING ) and
       ( $ALL$FSM_Class1 not_in_state RUNNING ) )  move_to READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( ( $ALL$FSM_Class0 in_state RUNNING ) and
       ( $ANY$FSM_Class1 in_state {NOT_READY,READY} ) )  move_to READY|when ( $ANY$FSM_Class0 not_in_state RUNNING )  move_to ERROR|", "", "", "ERROR", "FwStateAttention3", "when ( ( $ANY$FwCHILDREN in_state UNKNOWN ) and
       ( $ALL$FwCHILDREN not_in_state ERROR ) )  move_to UNKNOWN|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( ( $ALL$FSM_Class0 in_state RUNNING ) and
       ( $ALL$FSM_Class1 in_state NOT_READY ) )  move_to READY|when ( ( $ALL$FSM_Class0 in_state RUNNING ) and
       ( $ALL$FSM_Class1 in_state READY ) )  move_to READY|", "", ""	0x101	26.04.2007 18:19:49.593
fwOT_FSM_Node.actions	_FwFsmObjectType	"UNKNOWN/LOAD", "", "1", "do LOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif", "0", "UNKNOWN/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "UNKNOWN/RESET", "", "1", "if ( $ANY$FSM_Class1 in_state RUNNING ) then
  do STOP $ALL$FSM_Class1
endif
if ( $ANY$FSM_Class1 in_state {STOPPED,READY,UNKNOWN} ) then
  do RESET $ALL$FSM_Class1
endif

if ( $ANY$FSM_Class0 in_state RUNNING ) then
  do STOP $ALL$FSM_Class0
endif
if ( $ANY$FSM_Class0 in_state {STOPPED,READY,UNKNOWN} ) then
  do RESET $ALL$FSM_Class0
endif

if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif", "0", "UNKNOWN/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN 
endif", "0", "NOT_READY/CONFIGURE", "", "1", "if ( $ANY$FSM_Class0 in_state NOT_READY ) then
  do CONFIGURE $ALL$FSM_Class0
endif
if ( $ANY$FSM_Class0 in_state READY ) then
  do START $ALL$FSM_Class0
endif

if ( $ALL$FSM_Class0 in_state RUNNING ) then
   move_to READY
endif", "0", "NOT_READY/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN 
endif", "0", "NOT_READY/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "READY/START", "", "1", "if ( $ANY$FSM_Class1 in_state NOT_READY ) then
  do CONFIGURE $ALL$FSM_Class1
endif
if ( $ANY$FSM_Class1 in_state READY ) then
  do START $ALL$FSM_Class1
endif
if ( ( $ALL$FSM_Class0 in_state RUNNING ) and
       ( $ALL$FSM_Class1 in_state RUNNING ) )  then
   move_to RUNNING  
endif", "0", "READY/RESET", "", "1", "if ( $ANY$FSM_Class1 in_state RUNNING ) then
  do STOP $ALL$FSM_Class1
endif
if ( $ANY$FSM_Class1 in_state {STOPPED,READY,UNKNOWN} ) then
  do RESET $ALL$FSM_Class1
endif
if ( $ANY$FSM_Class0 in_state RUNNING ) then
  do STOP $ALL$FSM_Class0
endif
if ( $ANY$FSM_Class0 in_state {STOPPED,READY,UNKNOWN} ) then
  do RESET $ALL$FSM_Class0
endif

if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif", "0", "READY/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "RUNNING/STOP", "", "1", "if ( $ANY$FSM_Class1 in_state READY ) then
  do RESET $ALL$FSM_Class1
endif
if ( $ANY$FSM_Class1 in_state RUNNING ) then
  do STOP $ALL$FSM_Class1
endif
if ( $ANY$FSM_Class1 in_state STOPPED ) then
  do RESET $ALL$FSM_Class1
endif

if ( $ALL$FSM_Class1 in_state NOT_READY )  then
   move_to READY
endif", "0", "RUNNING/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0", "ERROR/RECOVER", "", "1", "do RECOVER $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY )  then
	move_to ERROR
endif
move_to NOT_READY", "0", "ERROR/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN
endif", "0"	0x101	26.04.2007 18:19:49.593
fwOT_FSM_Node.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.296
fwOT_FSM_Control.panel	_FwFsmObjectType	"StorageControl/FSM_Control.pnl"	0x101	26.04.2007 06:53:13.296
fwOT_FSM_Control.states	_FwFsmObjectType	"UNKNOWN", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|when ( ( $ALL$FwCHILDREN not_in_state UNKNOWN ) and
       ( $ANY$FwCHILDREN in_state NOT_READY ) )  move_to NOT_READY|when ( ( $ALL$FwCHILDREN not_in_state UNKNOWN ) and
       ( $ANY$FwCHILDREN in_state READY ) )  move_to READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "NOT_READY", "FwStateAttention2", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ANY$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ANY$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state READY ) move_to READY|", "", "", "ERROR", "FwStateAttention3", "when ( ( $ANY$FwCHILDREN in_state UNKNOWN ) and
       ( $ALL$FwCHILDREN not_in_state ERROR ) )  move_to UNKNOWN|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|", "", ""	0x101	26.04.2007 18:19:49.062
fwOT_FSM_Control.actions	_FwFsmObjectType	"UNKNOWN/LOAD", "", "1", "do LOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
	move_to NOT_READY
endif", "0", "UNKNOWN/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
    move_to UNKNOWN
endif", "0", "UNKNOWN/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
	move_to NOT_READY 
endif", "0", "UNKNOWN/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state UNKNOWN )  then
move_to NOT_READY
endif
move_to UNKNOWN ", "0", "NOT_READY/CONFIGURE", "", "1", "do CONFIGURE $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state READY )  then
move_to NOT_READY
endif
move_to READY", "0", "NOT_READY/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state UNKNOWN )  then
move_to NOT_READY
endif
move_to UNKNOWN ", "0", "NOT_READY/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
    move_to UNKNOWN
endif", "0", "READY/START", "", "1", "do START $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
  move_to RUNNING  
endif", "0", "READY/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY )  then
move_to READY
endif
move_to NOT_READY ", "0", "READY/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
	move_to UNKNOWN
endif", "0", "RUNNING/STOP", "", "1", "do STOP $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state READY )  then
move_to RUNNING
endif
move_to READY", "0", "RUNNING/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
	move_to UNKNOWN
endif", "0", "ERROR/RECOVER", "", "1", "do RECOVER $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY )  then
move_to ERROR
endif
move_to NOT_READY", "0", "ERROR/KILL", "", "1", "do KILL $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
	move_to UNKNOWN
endif", "0"	0x101	26.04.2007 18:19:49.062
fwOT_FSM_Control.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.312
fwOT_FSM_DimTask.panel	_FwFsmObjectType	"FSM_DimTask.pnl"	0x101	26.04.2007 06:53:13.312
fwOT_FSM_DimTask.components	_FwFsmObjectType	"string State
", "string Command.Actual.Value
", "string m_lastCommand = \"\";
string m_lastState   = \"\";
string m_targetState = \"\";
int startFSM_DimTask(string domain, string device)  {
/*
cmdname=\"-u \"+UTGID+\" -e -o\";
  if (user!=\"\") cmdname=cmdname+\" -n \"+user;
  if (wd!=\"\") cmdname=cmdname+\" -w \"+wd;
  cmdname=cmdname+\" \"+path;
  fwFM_startProc(farmnodename, cmdname); 

int fwFM_startProc(string nodeName, string command)
{
  //if (!dpExists(nodeName+\"/StTaskManager\")) dpCreate(nodeName+\"/StTaskManager\",\"StTaskManager\");
  string name=\"fwFMC_\"+nodeName+\".StTaskManager.settings.start\";
  dpSetWait(name,command);
  return(0);
}
*/
  DebugN(\"Starting task:\"+domain+\" - \"+device);
}

FSM_DimTask_initialize(string domain, string device)
{
}
", "FSM_DimTask_valueChanged( string domain, string device,
                         string State, string &fwState )
{
  m_lastState = State;
  //DebugN(device+\"> Last state:\"+m_lastState+\" Target:\"+m_targetState+\" Command:\"+m_lastCommand);
  if (State == \"UNKNOWN\")
  {
    fwState = \"UNKNOWN\";
    return;
  }
  if (State == \"NOT_READY\")
  {
    fwState = \"NOT_READY\";
    return;
  }
  if (State == \"READY\")
  {
    if ( m_targetState == \"STOPPED\" )  
      fwState = \"STOPPED\";
    else 
      fwState = \"READY\";
    return;
  }
  if (State == \"RUNNING\")
  {
    fwState = \"RUNNING\";
    return;
  }
  if (State == \"STOPPED\")
  {
    fwState = \"STOPPED\";
    return;
  }
  else 
  {
    fwState = \"ERROR\";
  }
}

", "FSM_DimTask_doCommand(string domain, string device, string command)
{ 
  m_lastCommand = command;
  if (command == \"LOAD\")
  {
    m_lastState   = \"UNKNOWN\";
    m_targetState = \"NOT_READY\";
    fwDU_startTimeout(20,domain,device,\"UNKNOWN\");
    dpSetWait(device+\".Command\",\"load\"); 
    startFSM_DimTask(domain,device);   
    return;
  }
  if (command == \"STOP\")
  {
    m_lastState   = \"RUNNING\";
    m_targetState = \"STOPPED\";
    fwDU_startTimeout(20,domain,device,\"ERROR\");
    dpSetWait(device+\".Command\",\"stop\"); 
    return;
  }
  if (command == \"RESET\")
  {
    m_lastState   = \"STOPPED\";
    m_targetState = \"NOT_READY\";
    fwDU_startTimeout(15,domain,device,\"ERROR\");
    dpSetWait(device+\".Command\",\"reset\");  
    return;
  }
  if (command == \"START\")
  {
    m_lastState   = \"READY\";
    m_targetState = \"RUNNING\";
    fwDU_startTimeout(20,domain,device,\"ERROR\");
    dpSetWait(device+\".Command\",\"start\");  
    return;
  }
  if (command == \"CONFIGURE\")
  {
    m_lastState   = \"NOT_READY\";
    m_targetState = \"READY\";
    fwDU_startTimeout(30,domain,device,\"NOT_READY\");
    dpSetWait(device+\".Command\",\"configure\");   
    return;
  }
  if (command == \"UNLOAD\")
  {
    m_lastState   = \"NOT_READY\";
    m_targetState = \"UNKNOWN\";
    fwDU_startTimeout(10,domain,device,\"UNKNOWN\");
    dpSetWait(device+\".Command\",\"unload\");
    return;
  }
  if (command == \"KILL\")
  {
    m_targetState = \"UNKNOWN\";
    fwDU_startTimeout(10,domain,device,\"UNKNOWN\");
    dpSetWait(device+\".Command\",\"unload\");
    return;
  }
  DebugN(device+\"> Received unknown command:\"+command);
} 

"	0x101	26.04.2007 18:19:43.828
fwOT_FSM_DimTask.states	_FwFsmObjectType	"UNKNOWN", "FwStateAttention1", "", "", "", "NOT_READY", "FwStateAttention2", "", "", "", "READY", "FwStateOKNotPhysics", "", "", "", "RUNNING", "FwStateOKPhysics", "", "", "", "ERROR", "FwStateAttention3", "", "", "", "STOPPED", "FwStateOKNotPhysics", "", "", ""	0x101	26.04.2007 18:19:43.812
fwOT_FSM_DimTask.actions	_FwFsmObjectType	"UNKNOWN/LOAD", "", "1", "", "0", "UNKNOWN/KILL", "", "1", "", "0", "NOT_READY/CONFIGURE", "", "1", "", "0", "NOT_READY/UNLOAD", "", "1", "", "0", "NOT_READY/KILL", "", "1", "", "0", "READY/START", "", "1", "", "0", "READY/RESET", "", "1", "", "0", "READY/KILL", "", "1", "", "0", "RUNNING/STOP", "", "1", "", "0", "RUNNING/KILL", "", "1", "", "0", "ERROR/UNLOAD", "", "1", "", "0", "ERROR/KILL", "", "1", "", "0", "STOPPED/RESET", "", "1", "", "0", "STOPPED/KILL", "", "1", "", "0"	0x101	26.04.2007 18:19:43.812
fwOT_FSM_DimTask.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.328
fwOT_GauchoFarmControlNode.panel	_FwFsmObjectType	"fwGaucho/FarmControlNode.pnl"	0x101	26.04.2007 06:53:13.328
fwOT_GauchoFarmControlNode.states	_FwFsmObjectType	"UNKNOWN", "FwStateAttention1", "when ( ( $ALL$GauchoClass1ControlNode in_state READY ) and
       ( $ALL$GauchoHLTControlNode in_state NOT_READY ) )  move_to NOT_READY|when ( ( $ALL$GauchoClass1ControlNode in_state READY ) and
       ( $ALL$GauchoHLTControlNode in_state READY ) )  move_to READY|when ( ( $ALL$GauchoClass1ControlNode in_state RUNNING ) and
       ( $ALL$GauchoHLTControlNode in_state RUNNING ) )  move_to RUNNING|when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|", "", "", "NOT_READY", "FwStateAttention2", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( ( $ANY$GauchoHLTControlNode in_state UNKNOWN ) or
       ( $ANY$GauchoClass1ControlNode in_state UNKNOWN ) or
       ( $ANY$GauchoClass1ControlNode in_state NOT_READY ) ) move_to UNKNOWN|when ( ( $ALL$GauchoClass1ControlNode in_state RUNNING ) and
       ( $ALL$GauchoHLTControlNode in_state RUNNING ) )  move_to RUNNING|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$GauchoHLTControlNode in_state NOT_READY )  move_to NOT_READY|when ( ( $ANY$GauchoClass1ControlNode in_state UNKNOWN ) or
       ( $ANY$GauchoHLTControlNode in_state UNKNOWN ) )  move_to UNKNOWN||when ( ( $ANY$GauchoClass1ControlNode in_state UNKNOWN ) or
       ( $ALL$GauchoHLTControlNode in_state UNKNOWN ) )  move_to UNKNOWN|when ( ( $ALL$GauchoClass1ControlNode in_state RUNNING ) and
       ( $ALL$GauchoHLTControlNode in_state RUNNING ) )  move_to RUNNING|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$GauchoHLTControlNode in_state NOT_READY )  move_to NOT_READY|when ( ( $ANY$GauchoClass1ControlNode in_state READY ) or
       ( $ANY$GauchoHLTControlNode in_state READY ) )  move_to READY|when ( ( $ANY$GauchoClass1ControlNode in_state UNKNOWN ) or
       ( $ANY$GauchoHLTControlNode in_state UNKNOWN ) )  move_to UNKNOWN|", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	26.04.2007 18:19:52.468
fwOT_GauchoFarmControlNode.actions	_FwFsmObjectType	"UNKNOWN/LOAD", "", "1", "do LOAD $ALL$GauchoClass1ControlNode
if ( $ALL$GauchoClass1ControlNode in_state NOT_READY ) then
   do LOAD $ALL$GauchoHLTControlNode
   if ( $ALL$GauchoHLTControlNode in_state NOT_READY ) then
      do CONFIGURE $ALL$GauchoClass1ControlNode
   endif
endif
if ( $ALL$GauchoClass1ControlNode in_state READY ) then
   move_to NOT_READY
endif", "0", "NOT_READY/CONFIGURE", "", "1", "do CONFIGURE $ALL$GauchoHLTControlNode
if ( $ALL$GauchoHLTControlNode in_state READY ) then
   move_to READY
endif", "0", "NOT_READY/UNLOAD", "", "1", "do RESET $ALL$GauchoClass1ControlNode
if ( $ALL$GauchoClass1ControlNode in_state NOT_READY ) then
   do UNLOAD $ALL$GauchoHLTControlNode
   if ( $ALL$GauchoHLTControlNode in_state UNKNOWN ) then
      do UNLOAD $ALL$GauchoClass1ControlNode
   endif
endif 
if ( $ALL$GauchoClass1ControlNode in_state UNKNOWN ) then
   if ( $ALL$GauchoHLTControlNode in_state NOT_READY ) then
      do UNLOAD $ALL$GauchoHLTControlNode
   endif 
   move_to UNKNOWN 
endif", "0", "READY/START", "", "1", "do START $ALL$GauchoClass1ControlNode
if ( $ALL$GauchoClass1ControlNode in_state RUNNING ) then
   do START $ALL$GauchoHLTControlNode
   if ( $ALL$GauchoHLTControlNode in_state RUNNING ) then
      move_to RUNNING  
   endif
endif", "0", "READY/RESET", "", "1", "do RESET $ALL$GauchoHLTControlNode
if ( $ALL$GauchoHLTControlNode in_state NOT_READY ) then
   move_to NOT_READY 
endif", "0", "RUNNING/STOP", "", "1", "do STOP $ALL$GauchoHLTControlNode
if ( $ALL$GauchoHLTControlNode in_state READY )  then
   do STOP $ALL$GauchoClass1ControlNode
   if ( $ALL$GauchoClass1ControlNode in_state READY )  then
      do RESET $ALL$GauchoHLTControlNode
   endif
endif
if ( $ALL$GauchoHLTControlNode in_state NOT_READY )  then
move_to NOT_READY
endif", "0", "ERROR/RECOVER", "", "1", "do RECOVER $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY ) then
   move_to NOT_READY
endif", "0"	0x101	26.04.2007 18:19:52.468
fwOT_GauchoFarmControlNode.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.328
fwOT_GauchoHLTControlNode.panel	_FwFsmObjectType	"fwGaucho/FarmControlNode.pnl"	0x101	26.04.2007 06:53:13.343
fwOT_GauchoHLTControlNode.states	_FwFsmObjectType	"UNKNOWN", "FwStateAttention1", "when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|", "", "", "NOT_READY", "FwStateAttention2", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ALL$FwCHILDREN in_state READY )  move_to READY|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR|when ( $ANY$FwCHILDREN in_state READY ) move_to READY|when ( $ANY$FwCHILDREN in_state NOT_READY )  move_to NOT_READY|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN|", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	26.04.2007 18:19:52.859
fwOT_GauchoHLTControlNode.actions	_FwFsmObjectType	"UNKNOWN/LOAD", "", "1", "do LOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "NOT_READY/CONFIGURE", "", "1", "do CONFIGURE $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state READY )  then
   move_to READY
endif
", "0", "NOT_READY/UNLOAD", "", "1", "do UNLOAD $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to UNKNOWN 
endif
", "0", "READY/START", "", "1", "do START $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
   move_to RUNNING  
endif
", "0", "READY/RESET", "", "1", "do RESET $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "RUNNING/STOP", "", "1", "do STOP $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state READY )  then
   move_to READY
endif
", "0", "ERROR/RECOVER", "", "1", "do RECOVER $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY )  then
move_to ERROR
endif
move_to NOT_READY", "0"	0x101	26.04.2007 18:19:52.843
fwOT_GauchoHLTControlNode.parameters	_FwFsmObjectType		0x141	26.04.2007 06:53:13.343
fwOT_JobOptionsControl.panel	_FwFsmObjectType	"JobOptionsControl.pnl"	0x101	26.04.2007 06:53:13.343
fwOT_JobOptionsControl.components	_FwFsmObjectType	"string State
", "string Command
", "JobOptionsControl_initialize(string domain, string device)
{
}
", "JobOptionsControl_valueChanged(string domain, string device, string State, string &fwState )  {
  // Receiving string of type:  \"READY/StorageSystem/LHCb/203\"
  DebugN(\"Acting on interrupt> Domain:\"+domain+\" Device:\"+device+\" State:\"+State);
  dyn_string items = strsplit(State,\"/\");        
  if ( dynlen(items) == 4 )  {
    int partID       = items[4]; 
    string partName  = items[3];
    string stateName = items[1];
    fwDU_setParameter(domain,device,\"currentPartitionID\",partID);
    fwDU_setParameter(domain,device,\"currentPartitionName\",partName);
    if (stateName == \"READY\")  {
      fwState = \"READY\";
      return;
    }
  }
  fwState = \"ERROR\";
}

", "JobOptionsControl_doCommand(string domain, string device, string command)  {
  int partID;
  string partName;
  DebugN(\"Acting on Storage instance:\"+device);
  fwDU_getCommandParameter(domain, device, \"PART_ID\", partID);
  fwDU_getCommandParameter(domain, device, \"PART_NAME\", partName);
  // Set timeout in case the allocation task is dead ...
  fwDU_startTimeout(10,domain,device,\"ERROR\");
  dpSet(device+\".Command\",command+\"/\"+device+\"/\"+partName+\"/\"+partID);
}
"	0x101	26.04.2007 18:19:44.671
fwOT_JobOptionsControl.states	_FwFsmObjectType	"READY", "FwStateOKPhysics", "", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	26.04.2007 18:19:44.656
fwOT_JobOptionsControl.actions	_FwFsmObjectType	"READY/ALLOCATE", "int PART_ID = 0
string PART_NAME = \"\"
", "1", "", "0", "READY/DEALLOCATE", "int PART_ID = 0
string PART_NAME = \"\"
", "1", "", "0", "ERROR/RECOVER", "int PART_ID = 0
string PART_NAME = \"\"
", "1", "", "0", "ERROR/ALLOCATE", "int PART_ID = 0
string PART_NAME = \"\"
", "1", "", "0"	0x101	26.04.2007 18:19:44.656
fwOT_JobOptionsControl.parameters	_FwFsmObjectType	"int currentPartitionID = 0", "string currentPartitionName = \"\""	0x101	26.04.2007 06:53:13.359
fwOT_StorageCluster.panel	_FwFsmObjectType	"StorageCluster.pnl"	0x101	26.04.2007 10:16:20.578
fwOT_StorageCluster.states	_FwFsmObjectType	"READY", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR|", "", "", "ERROR", "FwStateAttention3", "when ( $ALL$FwCHILDREN not_in_state ERROR )  move_to READY|", "", ""	0x101	26.04.2007 18:19:55.515
fwOT_StorageCluster.actions	_FwFsmObjectType	"READY/ALLOCATE", "int PART_ID = 0
string PART_NAME = \"LHCb\"
", "1", "do ALLOCATE(PART_ID=PART_ID,PART_NAME=PART_NAME) $ALL$StorageControl

if ( $ANY$StorageControl not_in_state READY )  then
  move_to ERROR
endif

do ALLOCATE(PART_ID=PART_ID, PART_NAME=PART_NAME) $ALL$JobOptionsControl

if ( $ANY$JobOptionsControl not_in_state READY )  then
    move_to ERROR
endif

move_to READY", "0", "READY/DEALLOCATE", "int PART_ID = 0
string PART_NAME = \"LHCb\"
", "1", "do DEALLOCATE(PART_ID=PART_ID,PART_NAME=PART_NAME) $ALL$StorageControl

if ( $ANY$StorageControl not_in_state READY )  then
  move_to ERROR
endif

do DEALLOCATE(PART_ID=PART_ID, PART_NAME=PART_NAME)  $ALL$JobOptionsControl

if ( $ANY$JobOptionsControl not_in_state READY )  then
    move_to ERROR
endif

move_to READY", "0", "ERROR/RECOVER", "int PART_ID = 0
string PART_NAME = \"LHCb\"
", "1", "do RECOVER(PART_ID=PART_ID,PART_NAME=PART_NAME) $ALL$FwCHILDREN

if ( $ANY$FwCHILDREN not_in_state READY )  then
  move_to ERROR
endif

move_to READY", "0"	0x101	26.04.2007 18:19:55.515
fwOT_StorageCluster.parameters	_FwFsmObjectType	"int currentPartitionID = 0", "string currentPartitionName = \"\""	0x101	26.04.2007 06:53:13.375
