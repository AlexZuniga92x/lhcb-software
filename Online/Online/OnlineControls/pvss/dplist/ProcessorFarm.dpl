# ascii dump of database

# Datapoint/DpId
DpName	TypeName	ID
fwOT_FSM_DimTask	_FwFsmObjectType	52820
fwOT_StreamConfigurator	_FwFsmObjectType	168054
fwOT_FSM_Slice	_FwFsmObjectType	168583
fwOT_FSM_Tasks	_FwFsmObjectType	168586

# DpValue
ElementName	TypeName	_original.._value	_original.._status	_original.._stime
fwOT_FSM_DimTask.panel	_FwFsmObjectType	"FSM_DimTask.pnl"	0x101	09.07.2008 16:30:09.650
fwOT_FSM_DimTask.components	_FwFsmObjectType	"string State
", "", "#uses \"fwExternalAlertHandler/fwExternalAlertHandler.ctl\"
dyn_string     m_lastCommand;
dyn_string     m_lastState;
dyn_string     m_targetState;
dyn_string     m_tasks;

int getTaskIndex(string domain, string device)  {
  int index;
  if ( !(index=dynContains(m_tasks,domain+device)) )  {
    index = dynAppend(m_tasks,domain+device);
  }
  return index;
}


FSM_DimTask_initialize(string domain, string device)   {
  int index = getTaskIndex(domain,device);
  m_lastCommand[index] = \"\";
  m_lastState[index] = \"\";
  m_targetState[index] = \"\";
}

int makeErrorFSM_DimTask(string error)  {
  string err = error;
  if ( dynlen(getLastError()) > 0 )  {
    err = err + \" Error:\" + getLastError();
  }
  DebugN(err);
  return -1;
}

int ignoreErrorFSM_DimTask(string msg)  {
  DebugN(msg);
  return 0;
}

int actionFSM_DimTask(string name, string value)  {
  int result = dpSetWait(name,value);
  if ( result == 0 )  return 0;
  return makeErrorFSM_DimTask(\"Failed to set datapoint:\"+name+\" to value:\"+value);
}

void sendErrorFSM_DimTask(string device, string msg)  {
  string name=\"Unknown\";
  dpGet(device+\".Name\",name);
  fwExternalAlertHandler_sendAlarm(\"error\",device,msg+\":\"+name);
}

int startFSM_DimTask(string domain, string device)  {
  string cmd, node, type, name;
  int prio, inuse;
  int res = dpGet(device+\".FMC_Start\",cmd, 
                  device+\".Name\", name,
                  device+\".Node\", node,
                  device+\".Type\", type,
                  device+\".InUse\", inuse,
                  device+\".Priority\", prio
                  );
  fwExternalAlertHandler_deactivateAllAlarms(device);
  if ( res != 0      )  {
    sendError(device,\"Failed to start FSM Task\");
    return sendErrorFSM_DimTask(\"Failed to start task:\"+node+\"::\"+name+\" Cmd:'\"+cmd+\"'\");
  }
  if ( cmd == \"NONE\" ) {
    sendError(device,\"Failed to start FSM Task\");
    return ignoreErrorFSM_DimTask(\"INVALID TASK: FSM tries to start:\"+device+\" on \"+node+\" : \"+cmd);
  }
  dyn_string cmd_vals = strsplit(cmd,\"#\");
  if ( dynlen(cmd_vals)>= 2 )  {
    string dev = cmd_vals[1]+\":\"+node+\"_StreamTaskCreator.Start\";
    DebugN(\"Starting task:\"+dev+\" on \"+node+\" : \"+cmd);
    if ( actionFSM_DimTask(dev,cmd_vals[2])==0 ) return 0;
    sendErrorFSM_DimTask(device,\"Failed to start FSM Task\");
  }
  sendErrorFSM_DimTask(device,\"Failed to start FSM Task\");
  return 0;
}

int killFSM_DimTask(string domain, string device)  {
  string node, name, cmd;
  int res = dpGet(device+\".FMC_Start\",cmd,device+\".Name\", name, device+\".Node\", node);
  fwExternalAlertHandler_deactivateAlarm(\"error\",device,\"Failed to kill FSM Task\");
  if ( res != 0 ) {
    fwExternalAlertHandler_sendAlarm(\"error\",device,\"Failed to kill FSM Task\");
    return makeErrorFSM_DimTask(\"Failed to kill task:\"+node+\"::\"+name);
  }
  if ( cmd == \"NONE\" )   {
    fwExternalAlertHandler_sendAlarm(\"error\",device,\"Failed to kill FSM Task\");
    return ignoreErrorFSM_DimTask(\"INVALID TASK: FSM tries to kill:\"+device+\" on \"+node+\" : \"+cmd);
  }
  dyn_string cmd_vals = strsplit(cmd,\"#\");
  fwExternalAlertHandler_deactivateAlarm(\"error\",device,\"Failed to kill FSM Task\");
  if ( dynlen(cmd_vals)>= 2 )  {
    string dev = cmd_vals[1]+\":\"+node+\"_StreamTaskCreator.Stop\";
    DebugN(\"Stop task:\"+dev+\" on \"+node+\" : \"+cmd);
    if ( actionFSM_DimTask(dev,\"-s 9 -d 2 \"+name)==0 ) return 0;
    fwExternalAlertHandler_sendAlarm(\"error\",device,\"Failed to kill FSM Task\");
    return -1;
  }
  DebugN(\"Invalid KILL command parameter:\"+cmd);
  fwExternalAlertHandler_sendAlarm(\"error\",device,\"Failed to kill FSM Task\");
  return 0;
}

int stopFSM_DimTask(string domain, string device)  {
  string node, name, cmd;
  int res = dpGet(device+\".FMC_Start\",cmd,device+\".Name\",name,device+\".Node\",node);
  fwExternalAlertHandler_deactivateAlarm(\"error\",device,\"Failed to stop FSM Task\");
  if ( res != 0 )  {
    fwExternalAlertHandler_sendAlarm(\"error\",device,\"Failed to stop FSM Task\");
    return makeErrorFSM_DimTask(\"Failed to stop task:\"+node+\"::\"+name);
  }
  if ( cmd == \"NONE\" )   {
    fwExternalAlertHandler_sendAlarm(\"error\",device,\"Failed to stop FSM Task\");
    return ignoreErrorFSM_DimTask(\"INVALID TASK: FSM tries to stop:\"+device+\" on \"+node+\" : \"+cmd);
  }
  dyn_string cmd_vals = strsplit(cmd,\"#\");
  if ( dynlen(cmd_vals)>= 2 )  {
    string dev = cmd_vals[1]+\":\"+node+\"_StreamTaskCreator.Stop\";
    DebugN(\"Stop task:\"+dev+\" on \"+node+\" : \"+cmd);
    if ( actionFSM_DimTask(dev,\"-s 9 -d 2 \"+name)==0 ) return 0;
    fwExternalAlertHandler_sendAlarm(\"error\",device,\"Failed to stop FSM Task\");
    return -1;
  }
  fwExternalAlertHandler_sendAlarm(\"error\",device,\"Failed to stop FSM Task\");
  DebugN(\"Invalid STOP command parameter:\"+cmd);
  return 0;
}
", "FSM_DimTask_valueChanged( string domain, string device, string State, string &fwState )
{
  int index = getTaskIndex(domain,device);
  m_lastState[index] = State;
  if (State == \"OFFLINE\" || State == \"UNKNOWN\" )  {
    fwExternalAlertHandler_deactivateAllAlarms(device);
    fwState = \"OFFLINE\";
  }
  else if (State == \"NOT_READY\")  {
    fwState = \"NOT_READY\";
  }
  else if (State == \"READY\")  {
    if ( m_targetState[index] == \"STOPPED\" )  
      fwState = \"STOPPED\";
    else 
      fwState = \"READY\";
  }
  else if (State == \"RUNNING\")  {
    fwState = \"RUNNING\";
  }
  else if (State == \"STOPPED\")  {
    fwState = \"STOPPED\";
  }
  else   {
    sendErrorFSM_DimTask(device,\"FSM Task in state ERROR\");
    DebugN(domain+\" \"+device+\"> Task goes to ERROR:\"+State);
    fwState = \"ERROR\";
  }
}


", "FSM_DimTask_doCommand(string domain, string device, string command)   { 
  string cmd = strtoupper(command);
  int index = getTaskIndex(domain,device);
  m_lastCommand[index] = cmd;
  DebugN(device+\"> Executing command:\"+cmd);
  if (cmd == \"LOAD\")  {
    m_lastState[index]   = \"OFFLINE\";
    m_targetState[index] = \"NOT_READY\";
    startFSM_DimTask(domain,device);
    fwDU_startTimeout(25,domain,device,\"OFFLINE\");
  }
  else if (cmd == \"STOP\")  {
    m_lastState[index]   = \"RUNNING\";
    m_targetState[index] = \"STOPPED\";
    fwDU_startTimeout(15,domain,device,\"ERROR\");
    dpSetWait(device+\".Command\",\"stop\"); 
  }
  else if (cmd == \"RESET\")  {
    m_lastState[index]   = \"STOPPED\";
    m_targetState[index] = \"NOT_READY\";
    fwDU_startTimeout(10,domain,device,\"ERROR\");
    dpSetWait(device+\".Command\",\"reset\");  
  }
  else if (cmd == \"START\")  {
    m_lastState[index]   = \"READY\";
    m_targetState[index] = \"RUNNING\";
    fwDU_startTimeout(20,domain,device,\"ERROR\");
    dpSetWait(device+\".Command\",\"start\");  
  }
  else if (cmd == \"CONFIGURE\")  {
    m_lastState[index]   = \"NOT_READY\";
    m_targetState[index] = \"READY\";
    fwDU_startTimeout(20,domain,device,\"NOT_READY\");
    dpSetWait(device+\".Command\",\"configure\");   
  }
  else if (cmd == \"UNLOAD\")  {
    int tmo = 10;
    bool isUnknown = m_targetState[index] == \"OFFLINE\";
    m_lastState[index]   = \"NOT_READY\";
    m_targetState[index] = \"OFFLINE\";
    if ( isUnknown ) tmo = 3;
    fwDU_startTimeout(tmo,domain,device,\"OFFLINE\");
    dpSetWait(device+\".Command\",\"unload\");
  }
  else if (cmd == \"KILL\")  {
    m_targetState[index] = \"OFFLINE\";
    stopFSM_DimTask(domain,device);   
    dpSetWait(device+\".Command\",\"unload\");
    fwDU_startTimeout(5,domain,device,\"OFFLINE\");
  }
  else {
    DebugN(device+\"> Received unknown command:\"+cmd);
    dpSetWait(device+\".State\",\"ERROR\");
  }
} 
"	0x101	09.07.2008 16:37:01.447
fwOT_FSM_DimTask.states	_FwFsmObjectType	"OFFLINE", "FwStateAttention2", "", "", "", "NOT_READY", "FwStateAttention1", "", "", "", "READY", "FwStateOKNotPhysics", "", "", "", "STOPPED", "FwStateAttention1", "", "", "", "RUNNING", "FwStateOKPhysics", "", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	09.07.2008 16:37:01.441
fwOT_FSM_DimTask.actions	_FwFsmObjectType	"OFFLINE/Load", "", "1", "", "0", "OFFLINE/Kill", "", "1", "", "0", "OFFLINE/Unload", "", "1", "", "0", "NOT_READY/Configure", "", "1", "", "0", "NOT_READY/Unload", "", "1", "", "0", "NOT_READY/Kill", "", "1", "", "0", "READY/Start", "", "1", "", "0", "READY/Reset", "", "1", "", "0", "READY/Kill", "", "1", "", "0", "READY/Unload", "", "1", "", "0", "STOPPED/Reset", "", "1", "", "0", "STOPPED/Kill", "", "1", "", "0", "STOPPED/Start", "", "1", "", "0", "STOPPED/Unload", "", "1", "", "0", "RUNNING/Stop", "", "1", "", "0", "RUNNING/Kill", "", "1", "", "0", "ERROR/Unload", "", "1", "", "0", "ERROR/Kill", "", "1", "", "0", "ERROR/Reset", "", "1", "", "0", "ERROR/Start", "", "1", "", "0"	0x101	09.07.2008 16:37:01.439
fwOT_FSM_DimTask.parameters	_FwFsmObjectType		0x141	09.07.2008 16:30:09.665
fwOT_StreamConfigurator.panel	_FwFsmObjectType	"StreamControl/Allocate.pnl"	0x101	09.07.2008 16:36:52.236
fwOT_StreamConfigurator.components	_FwFsmObjectType	"string State
", "", "#uses \"fwExternalAlertHandler/fwExternalAlertHandler.ctl\"
#uses \"ctrlUtils.cpp\"

int m_restart = 0;
StreamConfigurator_initialize(string domain, string device)
{
  fwExternalAlertHandler_deactivateAllAlarms(device);
  m_restart = 0;
}

int StreamConfigurator_gotoError(string device, string message, string err)  {
  DebugN(\"Error: \"+message);
  dpSet(device+\".State\",err);
  return 0;
}

string StreamConfigurator_sliceName(string device)  {
  dyn_string items = strsplit(device,\"_\");
  string slice = items[1]+\"_\"+items[2];
  return slice;
}

StreamConfigurator_Configured(string domain, string device, string State, string& fwState)  {
  if ( 0 == m_restart )  {
    string cfg = ctrlUtils_dimMapName();
    dyn_string items = strsplit(device,\"_\");
    if ( dynlen(items)>=2 )  {
      string typ = dpTypeName(items[1]+\"_\"+items[2]);
      if ( typ == \"FarmRunInfo\" )  {
        fwState = \"CONFIGURED\";
        m_restart = 0;
        return;
      }
      string slice = StreamConfigurator_sliceName(device);
      dyn_int    dim_immed, dim_tmo, dim_flg;
      dyn_string val_tasks, dps_cmds, dim_cmds, dps_svcs, dim_svcs, dim_defaults;
      dyn_string names = dpNames(slice+\"_*\",\"FSM_DimTask\");
      dyn_string tasks = dpNames(slice+\"_*.Name\",\"FSM_DimTask\");
  
      int res = dpGet(tasks,val_tasks);
      DebugN(\"Allocating [\"+slice+\"]..... got \"+dynlen(names)+\" \"+dynlen(tasks)+\" datapoints. dpGet result:\"+res);
      for(int j=1, m=dynlen(val_tasks);j<=m; ++j)  {
        if (val_tasks[j] != \"NONE\")  {
          DebugN(\"Tsk:\"+tasks[j]+\" \"+val_tasks[j]);
          dynAppend(dim_cmds,val_tasks[j]);
          dynAppend(dps_cmds,names[j]+\".Command\");
       
          dynAppend(dim_svcs,val_tasks[j]+\"/status\");
          dynAppend(dps_svcs,names[j]+\".State\");
          dynAppend(dim_defaults,\"OFFLINE\");
          dynAppend(dim_tmo,0);
          dynAppend(dim_flg,0);
          dynAppend(dim_immed,1);
        }
      }
      fwDim_unSubscribeCommandsByDp(cfg,\"*:\"+slice+\"_*\");
      fwDim_unSubscribeServicesByDp(cfg,\"*:\"+slice+\"_*\");
      fwDim_subscribeCommands(cfg,dim_cmds,dps_cmds);
      fwDim_subscribeServices(cfg,dim_svcs,dps_svcs,dim_defaults,dim_tmo,dim_flg,dim_immed);
      delay(5);  // Need to wait a bit to settle down SMI
    }
  }
  fwState = \"CONFIGURED\";
  m_restart = 0;
}

int StreamConfigurator_Error(string domain, string device, string State, string& fwState)  {
  fwExternalAlertHandler_sendAlarm(\"error\",device,\"Failed to configure dataflow.\");
  fwState = \"ERROR\";
  return 1;
}

int StreamConfigurator_NotReady(string domain, string device, string State, string& fwState)  {
  fwState = \"NOT_READY\";
  fwExternalAlertHandler_deactivateAllAlarms(device);
  /*
  if ( 0 == m_restart )  {
    string cfg = ctrlUtils_dimMapName();
    string slice = StreamConfigurator_sliceName(device);
    DebugN(\"Deallocating [\"+slice+\"] datapoints.\");
    fwDim_unSubscribeCommandsByDp(cfg,\"*:\"+slice+\"_*\");
    fwDim_unSubscribeServicesByDp(cfg,\"*:\"+slice+\"_*\");
  }
  else  {
    DebugN(device+\"> Restart flag is set. Resources stay allocated. Do not forget it!!!\");
  }
  */
  return 1;
}

int StreamConfigurator_reset(string domain, string device, string action, string target, string err) {
  m_restart = 0;
  DebugN(device+\"> Restart flag is 0. Will deallocate resources.\");
  dpSetWait(device+\".State\",target);
  return 1;
}

int StreamConfigurator_restart(string domain, string device, string action, string target, string err) {
  m_restart = 1;
  DebugN(device+\"> Restart flag is set. Will not deallocate resources. Do not forget this!!!\");
  dpSetWait(device+\".State\",target);
  return 1;
}

int StreamConfigurator_execute(string domain, string device, string action, string target, string err) {
  dyn_string items = strsplit(device,\"_\");
  int restart = m_restart;
  if (restart==1 && action == \"CONFIGURE\")   {
    dpSetWait(device+\".State\",target);
    return 1;
  }
  else if ( dynlen(items)>=2 )  {
    int partID;
    string partName, rundp, cmd, sys = items[1];
    string info_dp = sys+\"_\"+items[2];
    string typ = dpTypeName(info_dp);
    if ( typ == \"FarmRunInfo\" )
      rundp = info_dp;    
    else if ( 0 != dpGet(info_dp+\".RunInfo\",rundp) )
      return StreamConfigurator_gotoError(device,\"Failed to access run info location from datapoint:\"+device,err);
    string typ = dpTypeName(info_dp);
    DebugN(\"StreamConfigurator> \"+domain+\" \"+device+\" [\"+typ+\"]\");
    if ( typ == \"FarmSubInfo\" ) sys = sys+\"_\"+items[2];
    sys = sys + \"Alloc\";
    if ( 0 == dpGet(rundp+\".general.partName\",partName,rundp+\".general.partId\",partID) )  {
      fwDU_startTimeout(15,domain,device,\"ERROR\");
      cmd = action+\"/\"+sys+\"/\"+partName+\"/\"+partID+\"/\"+rundp+\"/\"+device+\".State/\"+target+\"/\"+err;
      dpSetWait(sys+\".Command\",cmd);
      return 1;
    }
    return StreamConfigurator_gotoError(device,\"Failed to access run information from datapoint:\"+rundp,err);
  }
  return StreamConfigurator_gotoError(device,\"Illegal device name:\"+device,err);
}
", "StreamConfigurator_valueChanged( string domain, string device,
                                 string State, string &fwState )
{
  string st = strtoupper(State);
  if      (st == \"OFFLINE\")        StreamConfigurator_NotReady(domain,device,st,fwState);
  else if (st == \"NOT_READY\")      StreamConfigurator_NotReady(domain,device,st,fwState);
  else if (st == \"CONFIGURED\")     StreamConfigurator_Configured(domain,device,st,fwState);
  else if (st == \"CREATED\")        fwState = \"CREATED\";
  else if (st == \"READY\")          fwState = \"READY\";
  else if (st == \"RUNNING\")        fwState = \"RUNNING\";
  else if (st == \"STOPPED\")        fwState = \"STOPPED\";
  else if (st == \"FINALIZED\")      fwState = \"FINALIZED\";
  else                             StreamConfigurator_Error(domain,device,st,fwState);
}
", "StreamConfigurator_doCommand(string domain, string device, string command)
{ 
  string action = strtoupper(command);
  DebugN(device+\"> Executing action:\"+action+\" Restart:\"+m_restart);
  if (action == \"CONFIGURE\")
    StreamConfigurator_execute(domain,device,\"CONFIGURE\",\"CONFIGURED\",\"ERROR\");
  else if (action == \"RESET\")
    StreamConfigurator_reset(domain,device,\"RESET\",\"NOT_READY\",\"ERROR\");
  else if (action == \"RESTART\")
    StreamConfigurator_restart(domain,device,\"RESTART\",\"NOT_READY\",\"ERROR\");
  else if (action == \"RECOVER\")
    StreamConfigurator_execute(domain,device,\"RECOVER_SLICE\",\"NOT_READY\",\"ERROR\");
  else if (action == \"UNLOAD\" || action == \"KILL\" )
    dpSetWait(device+\".State\",\"NOT_READY\");
  else if (action == \"LOAD\")       dpSetWait(device+\".State\",\"NOT_READY\");
  else if (action == \"CREATE\")     dpSetWait(device+\".State\",\"CREATED\");
  else if (action == \"INITIALIZE\") dpSetWait(device+\".State\",\"READY\");
  else if (action == \"START\")      dpSetWait(device+\".State\",\"RUNNING\");
  else if (action == \"STOP\")       dpSetWait(device+\".State\",\"STOPPED\");
  else if (action == \"FINALIZE\")   dpSetWait(device+\".State\",\"FINALIZED\");
  else   DebugN(device+\"> Received unknown action:\"+action);
} 
"	0x101	09.07.2008 16:37:02.583
fwOT_StreamConfigurator.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "", "", "", "READY", "FwStateOKNotPhysics", "", "", "", "STOPPED", "FwStateAttention1", "", "", "", "RUNNING", "FwStateOKPhysics", "", "", "", "ERROR", "FwStateAttention3", "", "", "", "CONFIGURED", "FwStateAttention1", "", "", "", "CREATED", "FwStateAttention1", "", "", "", "FINALIZED", "FwStateAttention1", "", "", ""	0x101	09.07.2008 16:37:02.578
fwOT_StreamConfigurator.actions	_FwFsmObjectType	"NOT_READY/Configure", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "", "0", "NOT_READY/Kill", "", "1", "", "0", "NOT_READY/Reset", "", "1", "", "0", "READY/Start", "", "1", "", "0", "READY/Reset", "", "1", "", "0", "READY/Kill", "", "1", "", "0", "READY/Unload", "", "1", "", "0", "READY/Restart", "", "1", "", "0", "STOPPED/Reset", "", "1", "", "0", "STOPPED/Start", "", "1", "", "0", "STOPPED/Finalize", "", "1", "", "0", "STOPPED/Restart", "", "1", "", "0", "RUNNING/Stop", "", "1", "", "0", "ERROR/Reset", "", "1", "", "0", "ERROR/Start", "", "1", "", "0", "ERROR/Recover", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "", "0", "ERROR/Restart", "", "1", "", "0", "CONFIGURED/Reset", "", "1", "", "0", "CONFIGURED/Kill", "", "1", "", "0", "CONFIGURED/Create", "", "1", "", "0", "CONFIGURED/Unload", "", "1", "", "0", "CONFIGURED/Restart", "", "1", "", "0", "CREATED/Initialize", "", "1", "", "0", "CREATED/Kill", "", "1", "", "0", "CREATED/Reset", "", "1", "", "0", "CREATED/Unload", "", "1", "", "0", "CREATED/Restart", "", "1", "", "0", "FINALIZED/Reset", "", "1", "", "0", "FINALIZED/Unload", "", "1", "", "0", "FINALIZED/Kill", "", "1", "", "0", "FINALIZED/Restart", "", "1", "", "0"	0x101	09.07.2008 16:37:02.576
fwOT_StreamConfigurator.parameters	_FwFsmObjectType	"int m_needDimSetup = 0"	0x101	09.07.2008 16:30:09.677
fwOT_FSM_Slice.panel	_FwFsmObjectType	"StreamControl/Allocate.pnl"	0x101	09.07.2008 16:30:09.680
fwOT_FSM_Slice.components	_FwFsmObjectType		0x141	09.07.2008 16:30:09.682
fwOT_FSM_Slice.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state {CONFIGURED,CREATED,READY,RUNNING} )  move_to CONFIGURED
|", "", "", "ERROR", "FwStateAttention3", "when ( ( $ANY$FwCHILDREN in_state NOT_READY ) and
( $ALL$FwCHILDREN not_in_state ERROR ) )  move_to NOT_READY
|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING
|when ( $ALL$FwCHILDREN in_state READY )  move_to READY
|when ( $ALL$FwCHILDREN in_state CREATED )  move_to CREATED
|when ( $ALL$FwCHILDREN in_state CONFIGURED )  move_to CONFIGURED
|when ( $ALL$FwCHILDREN in_state STOPPED )  move_to STOPPED
|when ( $ALL$FwCHILDREN in_state FINALIZED )  move_to FINALIZED
|when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY
|", "", "", "CONFIGURED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ANY$FwCHILDREN in_state NOT_READY ) move_to NOT_READY
|when ( $ALL$FwCHILDREN in_state {CREATED,READY,RUNNING} )  move_to CREATED
|", "", "", "CREATED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ANY$FwCHILDREN in_state {NOT_READY,CONFIGURED} ) move_to CONFIGURED
|when ( $ALL$FwCHILDREN in_state {READY,RUNNING} )  move_to READY
|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state CONFIGURED )  move_to CONFIGURED
|when ( $ANY$FwCHILDREN in_state {NOT_READY,CONFIGURED,CREATED} )  move_to CREATED
|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING
|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state STOPPED )  move_to STOPPED
|when ( $ALL$FwCHILDREN in_state {NOT_READY,FINALIZED,STOPPED} )  move_to STOPPED
|when ( $ANY$FwCHILDREN in_state {NOT_READY,CONFIGURED,CREATED,READY} )  move_to ERROR
|", "", "", "STOPPED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state RUNNING ) move_to RUNNING
|when ( $ALL$FwCHILDREN in_state {READY,RUNNING} ) move_to READY
|when ( $ALL$FwCHILDREN in_state {NOT_READY,FINALIZED} )  move_to FINALIZED
|", "", "", "FINALIZED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY
|when ( $ALL$FwCHILDREN in_state {STOPPED,READY} )  move_to STOPPED
|", "", ""	0x101	09.07.2008 16:37:03.518
fwOT_FSM_Slice.actions	_FwFsmObjectType	"NOT_READY/Configure", "", "1", "do Configure $ALL$StreamConfigurator
if ( $ALL$StreamConfigurator not_in_state {CONFIGURED,READY,RUNNING} )  then
        move_to NOT_READY
endif
do Configure $ALL$FSM_Tasks
if ( $ALL$FSM_Tasks in_state {CONFIGURED,READY,RUNNING} )  then
        move_to CONFIGURED
endif
", "0", "NOT_READY/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
  move_to NOT_READY 
endif
", "0", "NOT_READY/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
  move_to NOT_READY 
endif
", "0", "NOT_READY/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FSM_Tasks in_state {FINALIZED,CREATED,READY,CONFIGURED,ERROR} ) then
  do Reset $ALL$FSM_Tasks
endif
if ( $ANY$StreamConfigurator in_state {FINALIZED,CREATED,READY,CONFIGURED,ERROR} ) then
  do Reset $ALL$StreamConfigurator
endif
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
  move_to NOT_READY 
endif
", "0", "ERROR/Recover", "", "1", "do Recover $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY )  then
    move_to NOT_READY
endif
move_to NOT_READY
", "0", "ERROR/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "ERROR/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FSM_Tasks in_state {FINALIZED,CREATED,READY,CONFIGURED,ERROR} ) then
  do Reset $ALL$FSM_Tasks
endif
if ( $ANY$StreamConfigurator in_state {FINALIZED,CREATED,READY,CONFIGURED,ERROR} ) then
  do Reset $ALL$StreamConfigurator
endif
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "ERROR/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED} ) then
  do Restart $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state ERROR ) then 
  do Restart $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "ERROR/Stop_run", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FSM_Tasks in_state {FINALIZED,CREATED,CONFIGURED,ERROR} ) then
  do Reset $ALL$FSM_Tasks
endif
if ( $ANY$StreamConfigurator in_state {FINALIZED,CREATED,CONFIGURED,ERROR} ) then
  do Reset $ALL$StreamConfigurator
endif
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "ERROR/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
  move_to NOT_READY 
endif
", "0", "CONFIGURED/Create", "", "1", "do Create $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state CREATED )  then
        move_to CREATED
endif
", "0", "CONFIGURED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "CONFIGURED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "CONFIGURED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FSM_Tasks in_state {FINALIZED,CREATED,CONFIGURED,READY,ERROR} ) then
  do Reset $ALL$FSM_Tasks
endif
if ( $ANY$StreamConfigurator in_state {FINALIZED,CREATED,CONFIGURED,READY,ERROR} ) then
  do Reset $ALL$StreamConfigurator
endif
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "CONFIGURED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED,READY} ) then
  do Restart $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "CREATED/Initialize", "", "1", "do Initialize $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {READY,RUNNING} ) then
        move_to READY
endif
", "0", "CREATED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "CREATED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "CREATED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FSM_Tasks in_state {FINALIZED,CREATED,CONFIGURED,READY} ) then
  do Reset $ALL$FSM_Tasks
endif
if ( $ANY$StreamConfigurator in_state {FINALIZED,CREATED,CONFIGURED,READY} ) then
  do Reset $ALL$StreamConfigurator
endif
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "CREATED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED} ) then
  do Restart $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "READY/Start", "", "1", "do Start $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
  move_to RUNNING
endif
", "0", "READY/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED ) then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FSM_Tasks in_state {FINALIZED,CREATED,CONFIGURED,READY} ) then
  do Reset $ALL$FSM_Tasks
endif
if ( $ANY$StreamConfigurator in_state {FINALIZED,CREATED,CONFIGURED,READY} ) then
  do Reset $ALL$StreamConfigurator
endif
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "READY/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "READY/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "READY/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED ) then
  do Finalize $ALL$FwCHILDREN
endif
if ( ($ANY$FwCHILDREN in_state {FINALIZED,CREATED,READY}) and
     ($ALL$FwCHILDREN not_in_state {NOT_READY,CONFIGURED} ) )  then
  do Restart $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "RUNNING/Stop", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state STOPPED )  then
   move_to STOPPED
endif
", "0", "RUNNING/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "RUNNING/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "RUNNING/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED ) then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FSM_Tasks in_state {FINALIZED,CREATED,CONFIGURED,READY} ) then
  do Reset $ALL$FSM_Tasks
endif
if ( $ANY$StreamConfigurator in_state {FINALIZED,CREATED,CONFIGURED,READY} ) then
  do Reset $ALL$StreamConfigurator
endif
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "STOPPED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FSM_Tasks in_state {FINALIZED,CREATED,CONFIGURED,READY} ) then
  do Reset $ALL$FSM_Tasks
endif
if ( $ANY$StreamConfigurator in_state {FINALIZED,CREATED,CONFIGURED,READY} ) then
  do Reset $ALL$StreamConfigurator
endif
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "STOPPED/Start", "", "1", "if ( $ANY$FwCHILDREN in_state CREATED ) then
  do Initialize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} ) then
  do Start $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state RUNNING )  then
   move_to RUNNING  
endif
move_to RUNNING  
", "0", "STOPPED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "STOPPED/Finalize", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
do Finalize $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {FINALIZED,NOT_READY} ) then
  move_to FINALIZED
endif
", "0", "STOPPED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "STOPPED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CONFIGURED,CREATED} )  then
  do Restart $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "FINALIZED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FSM_Tasks in_state {FINALIZED,CREATED,CONFIGURED,READY} ) then
  do Reset $ALL$FSM_Tasks
endif
if ( $ANY$StreamConfigurator in_state {FINALIZED,CREATED,CONFIGURED,READY} ) then
  do Reset $ALL$StreamConfigurator
endif
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "FINALIZED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "FINALIZED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state NOT_READY ) then 
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "FINALIZED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED} ) then
  do Restart $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state {NOT_READY,CONFIGURED} )  then
   move_to NOT_READY 
endif
", "0"	0x101	09.07.2008 16:37:03.515
fwOT_FSM_Slice.parameters	_FwFsmObjectType		0x141	09.07.2008 16:30:09.693
fwOT_FSM_Tasks.panel	_FwFsmObjectType	"StreamControl/FSM_Tasks.pnl"	0x101	09.07.2008 16:30:09.697
fwOT_FSM_Tasks.components	_FwFsmObjectType		0x141	09.07.2008 16:30:09.701
fwOT_FSM_Tasks.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state {NOT_READY,READY,RUNNING} )  move_to CONFIGURED
|when ( $ALL$FwCHILDREN in_state STOPPED )  move_to STOPPED
|", "", "", "CONFIGURED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state {NOT_READY,READY,RUNNING} ) move_to CREATED
|when ( $ALL$FwCHILDREN in_state STOPPED )  move_to STOPPED
|", "", "", "CREATED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ANY$FwCHILDREN in_state OFFLINE )  move_to CONFIGURED
|when ( $ALL$FwCHILDREN in_state {READY,RUNNING} )  move_to READY
|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING
|when ( $ALL$FwCHILDREN in_state OFFLINE )  move_to CONFIGURED
|when ( $ANY$FwCHILDREN in_state {OFFLINE,NOT_READY} )  move_to CREATED
|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN not_in_state RUNNING )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state {OFFLINE,NOT_READY,STOPPED} )  move_to STOPPED
|", "", "", "STOPPED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state CREATED )  move_to CREATED
|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING
|when ( $ALL$FwCHILDREN in_state {OFFLINE,NOT_READY} )  move_to FINALIZED
|", "", "", "FINALIZED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state OFFLINE )  move_to NOT_READY
|when ( $ANY$FwCHILDREN in_state {RUNNING,READY,STOPPED} ) move_to STOPPED
|", "", "", "ERROR", "FwStateAttention3", "when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING
|when ( $ALL$FwCHILDREN in_state OFFLINE )  move_to NOT_READY
|when ( $ALL$FwCHILDREN in_state READY )  move_to READY
|when ( $ALL$FwCHILDREN in_state FINALIZED )  move_to FINALIZED
|when ( $ALL$FwCHILDREN in_state STOPPED )  move_to STOPPED
|when ( $ALL$FwCHILDREN in_state {OFFLINE,NOT_READY} )  move_to NOT_READY
|", "", ""	0x101	09.07.2008 16:37:04.434
fwOT_FSM_Tasks.actions	_FwFsmObjectType	"NOT_READY/Configure", "", "1", "move_to CONFIGURED
", "0", "NOT_READY/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "NOT_READY/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "NOT_READY/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Reset $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CONFIGURED/Create", "", "1", "do Load $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
  move_to CREATED
endif
if ( $ANY$FwCHILDREN in_state OFFLINE )  then
  move_to ERROR
endif
", "0", "CONFIGURED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CONFIGURED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CONFIGURED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Restart $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CONFIGURED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Reset $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CREATED/Initialize", "", "1", "do Configure $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {READY,RUNNING} )  then
   move_to READY
endif
move_to CREATED
", "0", "CREATED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CREATED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CREATED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Reset $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CREATED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Restart $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "READY/Start", "", "1", "do Start $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
   move_to RUNNING
endif
", "0", "READY/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state {READY,STOPPED,NOT_READY,OFFLINE} )  then
   do Reset $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "READY/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "READY/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "READY/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state {READY,STOPPED,NOT_READY,OFFLINE} )  then
   do Restart $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "RUNNING/Stop", "", "1", "do Stop $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state STOPPED )  then
   move_to STOPPED
endif           
", "0", "RUNNING/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "RUNNING/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "RUNNING/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state {READY,STOPPED,NOT_READY,OFFLINE} )  then
   do Reset $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "STOPPED/Finalize", "", "1", "do Reset $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {OFFLINE,NOT_READY} )  then
   move_to FINALIZED
endif
", "0", "STOPPED/Start", "", "1", "do Start $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
   move_to RUNNING
endif
", "0", "STOPPED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "STOPPED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "STOPPED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
do Reset $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {OFFLINE,NOT_READY} )  then
   do Unload $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "STOPPED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
do Restart $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {OFFLINE,NOT_READY} )  then
   do Unload $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "FINALIZED/Reset", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "FINALIZED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "FINALIZED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "FINALIZED/Restart", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "ERROR/Recover", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "ERROR/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Reset $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
   do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY 
endif
move_to NOT_READY
", "0", "ERROR/Finalize", "", "1", "do Reset $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {OFFLINE,NOT_READY} )  then
   move_to FINALIZED
endif
move_to FINALIZED
", "0", "ERROR/Stop", "", "1", "do Stop $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {OFFLINE,NOT_READY,STOPPED,FINALIZED} )  then
   move_to STOPPED
endif
", "0", "ERROR/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "ERROR/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY
endif
", "0", "ERROR/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Restart $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state OFFLINE )  then
  do Kill $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state OFFLINE )  then
   move_to NOT_READY 
endif
move_to NOT_READY
", "0"	0x101	09.07.2008 16:37:04.431
fwOT_FSM_Tasks.parameters	_FwFsmObjectType		0x141	09.07.2008 16:30:09.714
