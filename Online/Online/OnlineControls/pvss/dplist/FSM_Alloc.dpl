# ascii dump of database

# Datapoint/DpId
DpName	TypeName	ID
fwOT_FSM_Alloc	_FwFsmObjectType	118776

# DpValue
ElementName	TypeName	_original.._value	_original.._status64	_original.._stime
fwOT_FSM_Alloc.panel	_FwFsmObjectType	"FSM_Alloc|FSM_Alloc.pnl"	0x101	02.06.2010 11:20:13.631
fwOT_FSM_Alloc.components	_FwFsmObjectType	"string State
", "string State
", "mapping maps;
string id;

FSM_Alloc_initialize(string domain, string device)
{
  string parentNum;
  string selfname;
  string selftype;
  FSM_Alloc_getinfo(device, selfname, selftype, parentNum);
  DebugN(\"Subscribe:REC\"+strtoupper(selftype)+\":\"+selftype+\"Alloc.State\");
  int sc = dpConnect(\"FSM_Alloc_procAnswer\",true,\"REC\"+strtoupper(selftype)+\":\"+selftype+\"Alloc.State\");
  DebugN(\"Connected to \"+\"REC\"+strtoupper(selftype)+\":\"+selftype+\"Alloc.State\",sc);
/*
  for (int i=0; i<16; i++){
    string name;
    sprintf(name,\"Storage_Slice%02X\",i);
    DebugTN(\"Excluding \"+name+\" from Reco_Ctrl\"+parentNum);
    fwUi_getOwnership(name, id);
    fwUi_lockOutTree(\"Reco_Ctrl\"+parentNum,name,id,1);      
 }
*/
}

void FSM_Alloc_procAnswer(string dp1, string State){
  DebugTN(\"Callback\",State,dp1);
/*
  if ( \"NOT_ALLOCATED\" == State ) {
    for (int i=0; i<16; i++){
      string name;
      sprintf(name,\"Storage_Slice%02X\",i);
      fwUi_getOwnership(name, id);
      fwCU_excludeTree(\"Reco_Ctrl\"+parentNum,name,id,1);      
    }
  }
*/
  dyn_string items = strsplit(State,\"/\");
  DebugN(\"procAnswer> \"+dynlen(items)+\" Values: \"+items);
  if ( dynlen(items)>= 4)  {
    string command=strtoupper(items[1]);
    string origin=items[2];
    string partNameB=items[3];
    int partIdB=items[4];
    string status;
    if ( dynlen(items)>= 5 ) { status=strtoupper(items[5]);}
    string partName;
    string partId;
    string typeB=origin;
    strreplace(typeB,\"Alloc\",\"\");
    DebugN(\"DeviceMap:\"+typeB+partNameB,maps);
    if (!mappingHasKey(maps,typeB+partNameB)) return;
    string device = maps[typeB+partNameB];
    string parentNum, selfname, selftype;
    FSM_Alloc_getinfo(device, selfname, selftype, parentNum);
     
    dpGet(\"RECFARM:Farm_Reco\"+parentNum+\".general.partName\",partName,\"RECFARM:Farm_Reco\"+parentNum+\".general.partId\",partId); 
    DebugN(\"procAnswer-2> \"+command+\" Status:\"+status+\" partName: \"+partName);
    DebugN(\"procAnswer-2.2> \"+device+\" parentNum:\"+parentNum+\" selfname: \"+selfname);
    if (partNameB==partName && partIdB==partId)     {
      DebugN(\"procAnswer-3> \"+command+\" Status:\"+status+\" partName: \"+partName);
      if (status==\"SUCCESS\" || status==\"WAS_ALRDY_ALLOCATED\" || status==\"WAS_NOT_ALLOCATED\" || substr(status,0,13)==\"STORAGE_SLICE\"){      
        if (command==\"ALLOCATE\"){
          dpSet(\"RECCTRL:\"+selfname+\".State\",\"NOT_READY\");
          if (selftype == \"Storage\") {
            dpSet(\"RECFARM:Farm_Reco\"+parentNum+\".Storage.storeSlice\",items[5]);
            for (int i=0; i<16; i++){
              string name;
              sprintf(name,\"Storage_Slice%02X\",i);
              DebugTN(name,status);
              if (strtoupper(name)==status) {
                DebugTN(\"Taking \"+name+\" from Reco_Ctrl\"+parentNum);
                fwUi_getOwnership(\"Reco_Ctrl\"+parentNum, id);
                fwCU_includeTree(\"Reco_Ctrl\"+parentNum,name,id,1);                
//                fwCU_takeTree(\"Reco_Ctrl\"+parentNum,name,id,1);
              }
              else
              {
                if(fwFsmTree_isNode(name)) {
                  fwUi_getOwnership(\"Reco_Ctrl\"+parentNum, id);
                  fwCU_excludeTree(\"Reco_Ctrl\"+parentNum,name,id,1);
                }
              }
            }
          }
        }
        else if (command==\"DEALLOCATE\") {
          dpSet(\"RECCTRL:\"+selfname+\".State\",\"NOT_ALLOCATED\");
          if (selftype == \"Storage\") {
            for (int i=0; i<16; i++){
              string name;
              sprintf(name,\"Storage_Slice%02X\",i);
              if(fwFsmTree_isNode(name)) {
                fwUi_getOwnership(name, id);
//              fwCU_releaseTree(\"Reco_Ctrl\"+parentNum,name,id,1);
                fwCU_excludeTree(\"Reco_Ctrl\"+parentNum,name,id,1);
              }
            }
          }
          mappingRemove(maps,selftype+partNameB);                           
        }
        else {
          dpSet(\"RECCTRL:\"+selfname+\".State\",\"ERROR\");
          DebugTN(\"Unknown action: \"+command); 
        } 
        if ( \"ERROR\" == status ){
          dpSet(\"RECCTRL:\"+selfname+\".State\",\"ERROR\");
        }
      }
      else {
        if (command==\"ALLOCATE\"){
          DebugTN(\"Error allocating \"+selfname);
          dpSet(\"RECCTRL:\"+selfname+\".State\",\"NOT_ALLOCATED\");
        }
        else if (command==\"DEALLOCATE\") {
          DebugTN(\"Error deallocating \"+selfname);
          dpSet(\"RECCTRL:\"+selfname+\".State\",\"ERROR\");
          mappingRemove(maps,selftype+partNameB);                               
        }
        else {
          dpSet(\"RECCTRL:\"+selfname+\".State\",\"ERROR\");
          DebugTN(\"Unknown action: \"+command); 
        } 
     }
   }
  }
  else  {
    //dpSet(\"RECCTRL:\"+selfname+\".State\",\"ERROR\");
    DebugTN(\"Got wrong number of arguments from \"+State);
  } 
}

void FSM_Alloc_getinfo(string device, string &selfname, string &selftype, string &parentNum){
  int type;
  string parent = fwCU_getParent(type, device);
  parentNum=parent;
  strreplace(parentNum,\"Reco_Ctrl\",\"\");
  selfname=device;
  selftype=selfname;
  strreplace(selftype,\"_Alloc\"+parentNum,\"\");  
}
", "FSM_Alloc_valueChanged( string domain, string device,
      string State, string &fwState )
{
  DebugN(device+\" [FSM_Alloc] > New state:\"+State);
//  int type;
// string parent = strtoupper(fwCU_getParent(type, device));
//  dyn_string items = strsplit(strtoupper(State),\"/\");
//  if ( dynlen(items)>= 3)  {
//    string name=items[1];
//    string command=items[2];
//    string target=items[3];
//    DebugN(name, command, target);
//    if (parent==name){
//      fwState=target;
//    } 
//  }
//  else  {
//    fwState = \"ERROR\";
//  }
  fwState=State;
}
", "FSM_Alloc_doCommand(string domain, string device, string command)      {
  string cmd = strtoupper(command);
	if (cmd == \"ALLOCATE\" || cmd == \"DEALLOCATE\")  {
          int partId;
          dyn_string names, values;
          string parentNum, selfname, selftype, partName;
          FSM_Alloc_getinfo(device, selfname, selftype, parentNum);       
          dpGet(\"RECFARM:Farm_Reco\"+parentNum+\".general.partName\",partName,\"RECFARM:Farm_Reco\"+parentNum+\".general.partId\",partId);
          names=makeDynString(\"PART_ID\",\"PART_NAME\",\"RUN_INFO_DP\");
          values=makeDynString(partId,partName,\"RECFARM:Farm_Reco\"+parentNum);
          DebugN(device+\"> \"+cmd+\": PartName:\"+partName+\" PartID:\"+partId+\" Type:\"+selftype,names,values);
          maps[selftype+partName]=device;
          fwCU_sendCommand(\"Data\"+selftype,cmd,names,values);
          fwDU_startTimeout(20,domain,device,\"ERROR\");
          return;
	}
	else if (cmd == \"SET_DEALLOCATED\" )
	  dpSet(device+\".State\",\"NOT_ALLOCATED\");
	else if (cmd == \"CONFIGURE\" )
	  dpSet(device+\".State\",\"CONFIGURED\");
	else if (cmd == \"RESET\")
    dpSet(device+\".State\",\"NOT_READY\");
	else if (cmd == \"RECOVER\")
	  dpSet(device+\".State\",\"NOT_READY\");
	else if (cmd == \"KILL\")
	  dpSet(device+\".State\",\"NOT_READY\");
	else if (cmd == \"CREATE\")
	  dpSet(device+\".State\",\"CREATED\");
	else if (cmd == \"INITIALIZE\")
	  dpSet(device+\".State\",\"READY\");
	else if (cmd == \"START\")
	  dpSet(device+\".State\",\"RUNNING\");
	else if (cmd == \"STOP\")
	  dpSet(device+\".State\",\"STOPPED\");
	else if (cmd == \"FINALIZE\")
	  dpSet(device+\".State\",\"FINALIZED\");
  else {
    DebugTN(\"Unknown command:\"+cmd);
    dpSet(device+\".State\",\"ERROR\"); 
  }
  // Since answers are redirected, we need a timeout if the python server is down.
  DebugTN(device+\" > Command:\"+cmd);
  fwDU_startTimeout(20,domain,device,\"ERROR\");
}

"	0x101	16.11.2010 15:19:31.945
fwOT_FSM_Alloc.states	_FwFsmObjectType	"NOT_ALLOCATED", "FwStateAttention2", "", "", "", "NOT_READY", "FwStateAttention1", "", "", "", "CONFIGURED", "FwStateAttention1", "", "", "", "CREATED", "FwStateAttention1", "", "", "", "READY", "FwStateOKNotPhysics", "", "", "", "RUNNING", "FwStateOKPhysics", "", "", "", "STOPPED", "FwStateAttention1", "", "", "", "FINALIZED", "FwStateAttention1", "", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	16.11.2010 15:19:31.937
fwOT_FSM_Alloc.actions	_FwFsmObjectType	"NOT_ALLOCATED/Allocate", "", "1", "", "0", "NOT_READY/Configure", "", "1", "", "0", "NOT_READY/Reset", "", "1", "", "0", "NOT_READY/Kill", "", "1", "", "0", "NOT_READY/Deallocate", "", "1", "", "0", "NOT_READY/Set_Deallocated", "", "1", "", "0", "CONFIGURED/Create", "", "1", "", "0", "CONFIGURED/Reset", "", "1", "", "0", "CONFIGURED/Kill", "", "1", "", "0", "CREATED/Initialize", "", "1", "", "0", "CREATED/Reset", "", "1", "", "0", "CREATED/Kill", "", "1", "", "0", "READY/Start", "", "1", "", "0", "READY/Reset", "", "1", "", "0", "READY/Kill", "", "1", "", "0", "RUNNING/Stop", "", "1", "", "0", "RUNNING/Reset", "", "1", "", "0", "RUNNING/Kill", "", "1", "", "0", "STOPPED/Finalize", "", "1", "", "0", "STOPPED/Reset", "", "1", "", "0", "STOPPED/Kill", "", "1", "", "0", "STOPPED/Start", "", "1", "", "0", "FINALIZED/Reset", "", "1", "", "0", "FINALIZED/Kill", "", "1", "", "0", "FINALIZED/Start", "", "1", "", "0", "ERROR/Recover", "", "1", "", "0", "ERROR/Reset", "", "1", "", "0", "ERROR/Kill", "", "1", "", "0"	0x101	16.11.2010 15:19:31.934
fwOT_FSM_Alloc.parameters	_FwFsmObjectType	"int CURRPARTID = 0", "string CURRPARTNAME = \"\""	0x101	29.09.2008 12:41:16.484
