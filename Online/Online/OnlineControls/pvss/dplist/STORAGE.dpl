# ascii dump of database

# Datapoint/DpId
DpName	TypeName	ID
fwOT_FSM_DimTask	_FwFsmObjectType	52820
fwOT_JobOptionsControl	_FwFsmObjectType	52825
fwOT_StreamControl	_FwFsmObjectType	52828
fwOT_StreamConfigurator	_FwFsmObjectType	168054
fwOT_StreamCluster	_FwFsmObjectType	168580
fwOT_FSM_Slice	_FwFsmObjectType	168583
fwOT_FSM_Tasks	_FwFsmObjectType	168586
fwOT_FSM_Holder	_FwFsmObjectType	175458
fwOT_FSM_Dataflow	_FwFsmObjectType	180300

# DpValue
ElementName	TypeName	_original.._value	_original.._status	_original.._stime
fwOT_FSM_DimTask.panel	_FwFsmObjectType	"FSM_DimTask.pnl"	0x101	30.10.2007 13:43:06.960
fwOT_FSM_DimTask.components	_FwFsmObjectType	"string State
", "", "dyn_string m_lastCommand;
dyn_string m_lastState;
dyn_string m_targetState;
dyn_string m_tasks;
int getTaskIndex(string domain, string device)  {
  int index;
  if ( !(index=dynContains(m_tasks,domain+device)) )  {
    index = dynAppend(m_tasks,domain+device);
  }
  return index;
}

int makeErrorFSM_DimTask(string error)  {
  string err = error;
  if ( dynlen(getLastError()) > 0 )  {
    err = err + \" Error:\" + getLastError();
  }
  DebugN(err);
  return -1;
}

int ignoreErrorFSM_DimTask(string msg)  {
  DebugN(msg);
  return 0;
}

int actionFSM_DimTask(string name, string value)  {
  int result = dpSetWait(name,value);
  if ( result == 0 )  return 0;
  return makeErrorFSM_DimTask(\"Failed to set DP:\"+name+\" to \"+value);
}

int startFSM_DimTask(string domain, string device)  {
  string cmd, node, type, name;
  int prio, inuse;
  int res = dpGet(device+\".FMC_Start\",cmd, 
                  device+\".Name\", name,
                  device+\".Node\", node,
                  device+\".Type\", type,
                  device+\".InUse\", inuse,
                  device+\".Priority\", prio
                  );
  if ( res != 0      ) return makeErrorFSM_DimTask(\"Failed to start task:\"+node+\"::\"+name+\" Cmd:'\"+cmd+\"'\");
  if ( cmd == \"NONE\" ) return ignoreErrorFSM_DimTask(\"INVALID TASK: FSM tries to start:\"+device+\" on \"+node+\" : \"+cmd);
  dyn_string cmd_vals = strsplit(cmd,\"#\");
  string dev = cmd_vals[1]+\":\"+node+\"_StreamTaskCreator.Start\";
  DebugN(\"Starting task:\"+dev+\" on \"+node+\" : \"+cmd);
  return actionFSM_DimTask(dev,cmd_vals[2]);
  //return 0;
}

int killFSM_DimTask(string domain, string device)  {
  string node, name, cmd;
  int res = dpGet(device+\".FMC_Start\",cmd,device+\".Name\", name, device+\".Node\", node);
  if ( res != 0 )      return makeErrorFSM_DimTask(\"Failed to kill task:\"+node+\"::\"+name);
  if ( cmd == \"NONE\" ) return ignoreErrorFSM_DimTask(\"INVALID TASK: FSM tries to kill:\"+device+\" on \"+node+\" : \"+cmd);
  dyn_string cmd_vals = strsplit(cmd,\"#\");
  string dev = cmd_vals[1]+\":\"+node+\"_StreamTaskCreator.Stop\";
  DebugN(\"Stop task:\"+dev+\" on \"+node+\" : \"+cmd);
  return actionFSM_DimTask(dev,\"-s 9 -d 2 \"+name);
}

int stopFSM_DimTask(string domain, string device)  {
  string node, name, cmd;
  int res = dpGet(device+\".FMC_Start\",cmd,device+\".Name\",name,device+\".Node\",node);
  if ( res != 0 )      return makeErrorFSM_DimTask(\"Failed to stop task:\"+node+\"::\"+name);
  if ( cmd == \"NONE\" ) return ignoreErrorFSM_DimTask(\"INVALID TASK: FSM tries to stop:\"+device+\" on \"+node+\" : \"+cmd);
  dyn_string cmd_vals = strsplit(cmd,\"#\");
  string dev = cmd_vals[1]+\":\"+node+\"_StreamTaskCreator.Stop\";
  DebugN(\"Stop task:\"+dev+\" on \"+node+\" : \"+cmd);
  return actionFSM_DimTask(dev,\"-s 9 -d 2 \"+name);
}

FSM_DimTask_initialize(string domain, string device)
{
  int index = getTaskIndex(domain,device);
  m_lastCommand[index] = \"\";
  m_lastState[index] = \"\";
  m_targetState[index] = \"\";
}

", "FSM_DimTask_valueChanged( string domain, string device,
                          string State, string &fwState )
{
  int index = getTaskIndex(domain,device);
  m_lastState[index] = State;
  if (State == \"UNKNOWN\")  {
    fwState = \"UNKNOWN\";
  }
  else if (State == \"NOT_READY\")  {
    fwState = \"NOT_READY\";
  }
  else if (State == \"READY\")  {
    if ( m_targetState[index] == \"STOPPED\" )  
      fwState = \"STOPPED\";
    else 
      fwState = \"READY\";
  }
  else if (State == \"RUNNING\")  {
    fwState = \"RUNNING\";
  }
  else if (State == \"STOPPED\")  {
    fwState = \"STOPPED\";
  }
  else   {
    fwState = \"ERROR\";
  }
}


", "FSM_DimTask_doCommand(string domain, string device, string command)   { 
  string cmd = strtoupper(command);
  int index = getTaskIndex(domain,device);
  m_lastCommand[index] = cmd;
  DebugN(device+\"> Executing command:\"+cmd);
  if (cmd == \"LOAD\")  {
    m_lastState[index]   = \"UNKNOWN\";
    m_targetState[index] = \"NOT_READY\";
    startFSM_DimTask(domain,device);
    fwDU_startTimeout(25,domain,device,\"UNKNOWN\");
  }
  else if (cmd == \"STOP\")  {
    m_lastState[index]   = \"RUNNING\";
    m_targetState[index] = \"STOPPED\";
    fwDU_startTimeout(15,domain,device,\"ERROR\");
    dpSetWait(device+\".Command\",\"stop\"); 
  }
  else if (cmd == \"RESET\")  {
    m_lastState[index]   = \"STOPPED\";
    m_targetState[index] = \"NOT_READY\";
    fwDU_startTimeout(10,domain,device,\"ERROR\");
    dpSetWait(device+\".Command\",\"reset\");  
  }
  else if (cmd == \"START\")  {
    m_lastState[index]   = \"READY\";
    m_targetState[index] = \"RUNNING\";
    fwDU_startTimeout(20,domain,device,\"ERROR\");
    dpSetWait(device+\".Command\",\"start\");  
  }
  else if (cmd == \"CONFIGURE\")  {
    m_lastState[index]   = \"NOT_READY\";
    m_targetState[index] = \"READY\";
    fwDU_startTimeout(20,domain,device,\"NOT_READY\");
    dpSetWait(device+\".Command\",\"configure\");   
  }
  else if (cmd == \"UNLOAD\")  {
    int tmo = 10;
    bool isUnknown = m_targetState[index] == \"UNKNOWN\";
    m_lastState[index]   = \"NOT_READY\";
    m_targetState[index] = \"UNKNOWN\";
    if ( isUnknown ) tmo = 3;
    fwDU_startTimeout(tmo,domain,device,\"UNKNOWN\");
    dpSetWait(device+\".Command\",\"unload\");
  }
  else if (cmd == \"KILL\")  {
    m_targetState[index] = \"UNKNOWN\";
    stopFSM_DimTask(domain,device);   
    dpSetWait(device+\".Command\",\"unload\");
    fwDU_startTimeout(5,domain,device,\"UNKNOWN\");
  }
  else {
    DebugN(device+\"> Received unknown command:\"+cmd);
    dpSetWait(device+\".State\",\"ERROR\");
  }
} 
"	0x101	31.10.2007 14:14:10.027
fwOT_FSM_DimTask.states	_FwFsmObjectType	"UNKNOWN", "FwStateAttention2", "", "", "", "NOT_READY", "FwStateAttention1", "", "", "", "READY", "FwStateOKNotPhysics", "", "", "", "STOPPED", "FwStateAttention1", "", "", "", "RUNNING", "FwStateOKPhysics", "", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	31.10.2007 14:14:10.022
fwOT_FSM_DimTask.actions	_FwFsmObjectType	"UNKNOWN/Load", "", "1", "", "0", "UNKNOWN/Kill", "", "1", "", "0", "UNKNOWN/Unload", "", "1", "", "0", "NOT_READY/Configure", "", "1", "", "0", "NOT_READY/Unload", "", "1", "", "0", "NOT_READY/Kill", "", "1", "", "0", "READY/Start", "", "1", "", "0", "READY/Reset", "", "1", "", "0", "READY/Kill", "", "1", "", "0", "READY/Unload", "", "1", "", "0", "STOPPED/Reset", "", "1", "", "0", "STOPPED/Kill", "", "1", "", "0", "STOPPED/Start", "", "1", "", "0", "STOPPED/Unload", "", "1", "", "0", "RUNNING/Stop", "", "1", "", "0", "RUNNING/Kill", "", "1", "", "0", "ERROR/Unload", "", "1", "", "0", "ERROR/Kill", "", "1", "", "0", "ERROR/Reset", "", "1", "", "0", "ERROR/Start", "", "1", "", "0"	0x101	31.10.2007 14:14:10.021
fwOT_FSM_DimTask.parameters	_FwFsmObjectType		0x101	29.10.2007 18:26:06.569
fwOT_JobOptionsControl.panel	_FwFsmObjectType	"JobOptions/JobOptions.pnl"	0x101	29.10.2007 18:26:06.571
fwOT_JobOptionsControl.components	_FwFsmObjectType	"string State
", "", "// ============================================================================
// Initialization
// ============================================================================
JobOptionsControl_initialize(string domain, string device)  {
}

// ============================================================================
// Execute command
// ============================================================================
int JobOptionsControl_execute(string domain,
                              string device,
                              string action,
                              string target,
                              string err)
{
  int idx = strpos(device,\"Writer_\");
  if ( idx > 0 )  {
    int partID;
    string partName, rundp;
    string cmd, sys = substr(device,0,idx);
    string dp = sys + \".Command\";
    fwDU_getCommandParameter(domain, device, \"PART_ID\", partID);
    fwDU_getCommandParameter(domain, device, \"PART_NAME\", partName);
    fwDU_getCommandParameter(domain, device, \"RUN_INFO_DP\", rundp);
    fwDU_startTimeout(15,domain,device,\"ERROR\");
    cmd = action+\"/\"+sys+\"Writer/\"+partName+\"/\"+partID+\"/\"+rundp+\"/\"+device+\".State/\"+target+\"/\"+err;
    int res = dpSetWait(dp,cmd);
    if ( 0 == res )  {
      DebugN(\"Setting DP:\"+dp+\" to \"+cmd);
    }
    else  {
      DebugN(\"FAILED to set DP:\"+dp+\" to \"+cmd);
    }
    return res == 0 ? 1 : 0;
  }
  dpSet(device+\".State\",err);
  return 0;
}
", "JobOptionsControl_valueChanged( string domain, string device,
                                 string State, string &fwState )
{
 string s = strtoupper(State);
 DebugN(domain,device,s);
 if       (s == \"UNKNOWN\")        fwState = \"NOT_READY\";
  else if (s == \"NOT_READY\")      fwState = \"NOT_READY\";
  else if (s == \"CONFIGURED\")     fwState = \"CONFIGURED\";
  else if (s == \"CREATED\")        fwState = \"CREATED\";
  else if (s == \"READY\")          fwState = \"READY\";
  else if (s == \"RUNNING\")        fwState = \"RUNNING\";
  else if (s == \"STOPPED\")        fwState = \"STOPPED\";
  else if (s == \"FINALIZED\")      fwState = \"FINALIZED\";
  else                            fwState = \"ERROR\";
}
", "JobOptionsControl_doCommand(string domain, string device, string command)
{ 
  string action = strtoupper(command);
  DebugN(domain+\"::\"+device+\"> Executing action:\"+action);
  if (action == \"CONFIGURE\")  {
    JobOptionsControl_execute(domain,device,\"CONFIGURE\",\"CONFIGURED\",\"ERROR\");
    return;
  }
  else if (action == \"RECOVER\")    { dpSetWait(device+\".State\",\"NOT_READY\"); return; }
  else if (action == \"LOAD\")       { dpSetWait(device+\".State\",\"NOT_READY\"); return; }
  else if (action == \"CREATE\")     { dpSetWait(device+\".State\",\"CREATED\");   return; }
  else if (action == \"INITIALIZE\") { dpSetWait(device+\".State\",\"READY\");     return; }
  else if (action == \"START\")      { dpSetWait(device+\".State\",\"RUNNING\");   return; }
  else if (action == \"STOP\")       { dpSetWait(device+\".State\",\"STOPPED\");   return; }
  else if (action == \"FINALIZE\")   { dpSetWait(device+\".State\",\"FINALIZED\"); return; }
  else if (action == \"RESET\")      { dpSetWait(device+\".State\",\"NOT_READY\"); return; }
  else if (action == \"UNLOAD\")     { dpSetWait(device+\".State\",\"NOT_READY\"); return; }
  else if (action == \"KILL\")       { dpSetWait(device+\".State\",\"NOT_READY\"); return; }
  DebugN(device+\"> Received unknown action:\"+action);
} 
"	0x101	29.10.2007 18:26:06.575
fwOT_JobOptionsControl.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "", "", "", "READY", "FwStateOKNotPhysics", "", "", "", "STOPPED", "FwStateAttention1", "", "", "", "RUNNING", "FwStateOKPhysics", "", "", "", "ERROR", "FwStateAttention3", "", "", "", "CONFIGURED", "FwStateAttention1", "", "", "", "CREATED", "FwStateAttention1", "", "", "", "FINALIZED", "FwStateAttention1", "", "", ""	0x101	31.10.2007 14:14:15.479
fwOT_JobOptionsControl.actions	_FwFsmObjectType	"NOT_READY/Configure", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECSLHCb:LHCb_RunInfo\"
", "1", "", "0", "NOT_READY/Kill", "", "1", "", "0", "READY/Start", "", "1", "", "0", "READY/Reset", "", "1", "", "0", "READY/Kill", "", "1", "", "0", "STOPPED/Reset", "", "1", "", "0", "STOPPED/Start", "", "1", "", "0", "STOPPED/Finalize", "", "1", "", "0", "RUNNING/Stop", "", "1", "", "0", "ERROR/Reset", "", "1", "", "0", "ERROR/Start", "", "1", "", "0", "ERROR/Recover", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECSLHCb:LHCb_RunInfo\"
", "1", "", "0", "CONFIGURED/Reset", "", "1", "", "0", "CONFIGURED/Kill", "", "1", "", "0", "CONFIGURED/Create", "", "1", "", "0", "CREATED/Initialize", "", "1", "", "0", "CREATED/Kill", "", "1", "", "0", "CREATED/Reset", "", "1", "", "0", "FINALIZED/Reset", "", "1", "", "0", "FINALIZED/Unload", "", "1", "", "0", "FINALIZED/Kill", "", "1", "", "0"	0x101	31.10.2007 14:14:15.478
fwOT_JobOptionsControl.parameters	_FwFsmObjectType	"int currentPartitionID = 0", "string currentPartitionName = \"\"", "string currentSlice = \"\""	0x101	29.10.2007 18:26:06.584
fwOT_StreamControl.panel	_FwFsmObjectType	"StreamControl/StreamControl.pnl"	0x101	30.10.2007 10:08:09.530
fwOT_StreamControl.components	_FwFsmObjectType	"string State
", "", "StreamControl_initialize(string domain, string device)
{
}

", "StreamControl_valueChanged(string domain, string device, string State, string &fwState )  {
  // Receiving string of type:  \"READY/StorageSystem/LHCb/203\"
  DebugN(\"Acting on interrupt> Domain:\"+domain+\" Device:\"+device+\" State:\"+State);
  dyn_string items = strsplit(State,\"/\");
  if ( dynlen(items) >= 5 )  {
    string stateName = items[1];
    string systemName= items[2];
    string partName  = items[3];
    int    partID    = items[4];
    string slice     = \"NONE\";
    if ( dynlen(items)>4 ) slice = items[5]; 
    fwDU_setParameter(domain,device,\"CURRPARTNAME\",slice);
    fwDU_setParameter(domain,device,\"CURRPARTID\",partID);
    
    if (stateName == \"ALLOCATE\" || stateName == \"DEALLOCATE\" || stateName == \"REALLOCATE\")  {
      fwState = \"READY\";
      DebugN(\"Deallocating [\"+slice+\"] datapoints.\");
      fwDim_unSubscribeCommandsByDp(\"DimStorage\",\"*:\"+slice+\"_*\");
      fwDim_unSubscribeServicesByDp(\"DimStorage\",\"*:\"+slice+\"_*\");
      return;
    }
    else if (stateName == \"READY\")  {
      fwState = \"READY\";
      return;
    }
  }
  fwState = \"ERROR\";
}


", "StreamControl_doCommand(string domain, string device, string command)  {
  int partID;
  string cmd, partName, rundpName;
  DebugN(\"Acting on Storage instance:\"+device);
  fwDU_getCommandParameter(domain, device, \"PART_ID\", partID);
  fwDU_getCommandParameter(domain, device, \"PART_NAME\", partName);
  fwDU_getCommandParameter(domain, device, \"RUN_INFO_DP\", rundpName);
  // Set timeout in case the allocation task is dead ...
  fwDU_startTimeout(20,domain,device,\"ERROR\");
  cmd = strtoupper(command)+\"/\"+device+\"/\"+partName+\"/\"+partID+\"/\"+rundpName;
  DebugN(device,cmd);
  dpSet(device+\".Command\",cmd);
}
"	0x101	31.10.2007 14:14:11.346
fwOT_StreamControl.states	_FwFsmObjectType	"READY", "FwStateOKPhysics", "", "", "", "ERROR", "FwStateAttention3", "", "", ""	0x101	31.10.2007 14:14:11.342
fwOT_StreamControl.actions	_FwFsmObjectType	"READY/ALLOCATE", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "", "0", "READY/DEALLOCATE", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "", "0", "READY/REALLOCATE", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "", "0", "ERROR/RECOVER", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "", "0"	0x101	31.10.2007 14:14:11.341
fwOT_StreamControl.parameters	_FwFsmObjectType	"int CURRPARTID = 0", "string CURRPARTNAME = \"0\""	0x101	29.10.2007 18:26:06.598
fwOT_StreamConfigurator.panel	_FwFsmObjectType	"StreamControl/Allocate.pnl"	0x101	31.10.2007 14:13:55.341
fwOT_StreamConfigurator.components	_FwFsmObjectType	"string State
", "", "int m_restart = 0;
StreamConfigurator_initialize(string domain, string device)
{
  m_restart = 0;
}

int StreamConfigurator_gotoError(string device, string message, string err)  {
  DebugN(\"Error: \"+message);
  dpSet(device+\".State\",err);
  return 0;
}

string StreamConfigurator_sliceName(string device)  {
  dyn_string items = strsplit(device,\"_\");
  string slice = items[1]+\"_\"+items[2];
  return slice;
}

StreamConfigurator_Configured(string domain, string device, string State, string& fwState)  {
  if ( 0 == m_restart )  {
    string slice = StreamConfigurator_sliceName(device);
    dyn_int    dim_immed, dim_tmo, dim_flg;
    dyn_string val_tasks, dps_cmds, dim_cmds, dps_svcs, dim_svcs, dim_defaults;
    dyn_string names = dpNames(slice+\"_*\",\"FSM_DimTask\");
    dyn_string tasks = dpNames(slice+\"_*.Name\",\"FSM_DimTask\");
  
    int res = dpGet(tasks,val_tasks);
    DebugN(\"Allocating [\"+slice+\"]..... got \"+dynlen(names)+\" \"+dynlen(tasks)+\" datapoints. dpGet result:\"+res);
    for(int j=1, m=dynlen(val_tasks);j<=m; ++j)  {
      if (val_tasks[j] != \"NONE\")  {
        DebugN(\"Tsk:\"+tasks[j]+\" \"+val_tasks[j]);
        dynAppend(dim_cmds,val_tasks[j]);
        dynAppend(dps_cmds,names[j]+\".Command\");
       
        dynAppend(dim_svcs,val_tasks[j]+\"/status\");
        dynAppend(dps_svcs,names[j]+\".State\");
        dynAppend(dim_defaults,\"UNKNOWN\");
        dynAppend(dim_tmo,0);
        dynAppend(dim_flg,0);
        dynAppend(dim_immed,1);
        // dynAppend(dim_svcs,val_tasks[j]+\"/output\");
        // dynAppend(dps_svcs,names[j]+\".Messages.msg\");
        // dynAppend(dim_defaults,\"\");
        // dynAppend(dim_tmo,0);
        // dynAppend(dim_flg,0);
        // dynAppend(dim_immed,0);
      }
    }
    fwDim_unSubscribeCommandsByDp(\"DimStorage\",\"*:\"+slice+\"_*\");
    fwDim_unSubscribeServicesByDp(\"DimStorage\",\"*:\"+slice+\"_*\");
    fwDim_subscribeCommands(\"DimStorage\",dim_cmds,dps_cmds);
    fwDim_subscribeServices(\"DimStorage\",dim_svcs,dps_svcs,dim_defaults,dim_tmo,dim_flg,dim_immed);
    delay(10);  // Need to wait a bit to settle down SMI
  }
  fwState = \"CONFIGURED\";
  m_restart = 0;
}

int StreamConfigurator_NotReady(string domain, string device, string State, string& fwState)  {
  fwState = \"NOT_READY\";
  /*
  if ( 0 == m_restart )  {
    string slice = StreamConfigurator_sliceName(device);
    DebugN(\"Deallocating [\"+slice+\"] datapoints.\");
    fwDim_unSubscribeCommandsByDp(\"DimStorage\",\"*:\"+slice+\"_*\");
    fwDim_unSubscribeServicesByDp(\"DimStorage\",\"*:\"+slice+\"_*\");
  }
  else  {
    DebugN(device+\"> Restart flag is set. Resources stay allocated. Do not forget it!!!\");
  }
  */
  return 1;
}

int StreamConfigurator_restart(string domain, string device, string action, string target, string err) {
  m_restart = 1;
  DebugN(device+\"> Restart flag is set. Will not deallocate resources. Do not forget this!!!\");
  dpSetWait(device+\".State\",target);
  return 1;
}

int StreamConfigurator_execute(string domain, string device, string action, string target, string err) {
  dyn_string items = strsplit(device,\"_\");
  int restart = m_restart;
  if (restart==1 && action == \"CONFIGURE\")   {
    dpSetWait(device+\".State\",target);
    return 1;
  }
  else if ( dynlen(items)>=2 )  {
    int partID;
    string partName, rundp;
    string cmd, sys = items[1];
    string dp = sys + \"Alloc.Command\";
    if ( 0 == dpGet(sys+\"_\"+items[2]+\".RunInfo\",rundp) )  {
      if ( 0 == dpGet(rundp+\".general.partName\",partName,rundp+\".general.partId\",partID) )  {
        fwDU_startTimeout(25,domain,device,\"ERROR\");
        cmd = action+\"/\"+sys+\"Alloc/\"+partName+\"/\"+partID+\"/\"+rundp+\"/\"+device+\".State/\"+target+\"/\"+err;
        dpSetWait(dp,cmd);
        return 1;
      }
      return StreamConfigurator_gotoError(device,\"Failed to access run information from datapoint:\"+rundp,err);
    }
    return StreamConfigurator_gotoError(device,\"Failed to access run info location from datapoint:\"+device,err);
  }
  return StreamConfigurator_gotoError(device,\"Illegal device name:\"+device,err);
}
", "StreamConfigurator_valueChanged( string domain, string device,
                                 string State, string &fwState )
{
  string st = strtoupper(State);
  if      (st == \"UNKNOWN\")        StreamConfigurator_NotReady(domain,device,st,fwState);
  else if (st == \"NOT_READY\")      StreamConfigurator_NotReady(domain,device,st,fwState);
  else if (st == \"CONFIGURED\")     StreamConfigurator_Configured(domain,device,st,fwState);
  else if (st == \"CREATED\")        fwState = \"CREATED\";
  else if (st == \"READY\")          fwState = \"READY\";
  else if (st == \"RUNNING\")        fwState = \"RUNNING\";
  else if (st == \"STOPPED\")        fwState = \"STOPPED\";
  else if (st == \"FINALIZED\")      fwState = \"FINALIZED\";
  else                             fwState = \"ERROR\";
}
", "StreamConfigurator_doCommand(string domain, string device, string command)
{ 
  string action = strtoupper(command);
  DebugN(device+\"> Executing action:\"+action+\" Restart:\"+m_restart);
  if (action == \"CONFIGURE\")
    StreamConfigurator_execute(domain,device,\"CONFIGURE\",\"CONFIGURED\",\"ERROR\");
  else if (action == \"RESTART\")
    StreamConfigurator_restart(domain,device,\"RESTART\",\"NOT_READY\",\"ERROR\");
  else if (action == \"RECOVER\")
    StreamConfigurator_execute(domain,device,\"RECOVER_SLICE\",\"NOT_READY\",\"ERROR\");
  else if (action == \"UNLOAD\" || action == \"KILL\" || action == \"RESET\" )
    dpSetWait(device+\".State\",\"NOT_READY\");
  else if (action == \"LOAD\")       dpSetWait(device+\".State\",\"NOT_READY\");
  else if (action == \"CREATE\")     dpSetWait(device+\".State\",\"CREATED\");
  else if (action == \"INITIALIZE\") dpSetWait(device+\".State\",\"READY\");
  else if (action == \"START\")      dpSetWait(device+\".State\",\"RUNNING\");
  else if (action == \"STOP\")       dpSetWait(device+\".State\",\"STOPPED\");
  else if (action == \"FINALIZE\")   dpSetWait(device+\".State\",\"FINALIZED\");
  else   DebugN(device+\"> Received unknown action:\"+action);
} 
"	0x101	31.10.2007 14:14:11.099
fwOT_StreamConfigurator.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "", "", "", "READY", "FwStateOKNotPhysics", "", "", "", "STOPPED", "FwStateAttention1", "", "", "", "RUNNING", "FwStateOKPhysics", "", "", "", "ERROR", "FwStateAttention3", "", "", "", "CONFIGURED", "FwStateAttention1", "", "", "", "CREATED", "FwStateAttention1", "", "", "", "FINALIZED", "FwStateAttention1", "", "", ""	0x101	31.10.2007 14:14:11.088
fwOT_StreamConfigurator.actions	_FwFsmObjectType	"NOT_READY/Configure", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "", "0", "NOT_READY/Kill", "", "1", "", "0", "READY/Start", "", "1", "", "0", "READY/Reset", "", "1", "", "0", "READY/Kill", "", "1", "", "0", "READY/Unload", "", "1", "", "0", "READY/Restart", "", "1", "", "0", "STOPPED/Reset", "", "1", "", "0", "STOPPED/Start", "", "1", "", "0", "STOPPED/Finalize", "", "1", "", "0", "STOPPED/Restart", "", "1", "", "0", "RUNNING/Stop", "", "1", "", "0", "ERROR/Reset", "", "1", "", "0", "ERROR/Start", "", "1", "", "0", "ERROR/Recover", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "", "0", "ERROR/Restart", "", "1", "", "0", "CONFIGURED/Reset", "", "1", "", "0", "CONFIGURED/Kill", "", "1", "", "0", "CONFIGURED/Create", "", "1", "", "0", "CONFIGURED/Unload", "", "1", "", "0", "CONFIGURED/Restart", "", "1", "", "0", "CREATED/Initialize", "", "1", "", "0", "CREATED/Kill", "", "1", "", "0", "CREATED/Reset", "", "1", "", "0", "CREATED/Unload", "", "1", "", "0", "CREATED/Restart", "", "1", "", "0", "FINALIZED/Reset", "", "1", "", "0", "FINALIZED/Unload", "", "1", "", "0", "FINALIZED/Kill", "", "1", "", "0", "FINALIZED/Restart", "", "1", "", "0"	0x101	31.10.2007 14:14:11.086
fwOT_StreamConfigurator.parameters	_FwFsmObjectType		0x101	29.10.2007 18:37:45.602
fwOT_StreamCluster.panel	_FwFsmObjectType	"StreamControl/StreamControl.pnl"	0x101	30.10.2007 10:07:48.469
fwOT_StreamCluster.states	_FwFsmObjectType	"READY", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|", "", "", "ERROR", "FwStateAttention3", "when ( $ALL$FwCHILDREN not_in_state ERROR )  move_to READY
|", "", ""	0x101	31.10.2007 14:14:15.722
fwOT_StreamCluster.actions	_FwFsmObjectType	"READY/ALLOCATE", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "do ALLOCATE(PART_ID=PART_ID,PART_NAME=PART_NAME,RUN_INFO_DP=RUN_INFO_DP)  $ALL$StreamControl
if ( $ALL$StreamControl in_state {READY,ERROR} ) then
  set CURRPARTNAME = $StreamControl.CURRPARTNAME
  set CURRPARTID = $StreamControl.CURRPARTID
endif", "0", "READY/DEALLOCATE", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "do DEALLOCATE(PART_ID=PART_ID,PART_NAME=PART_NAME,RUN_INFO_DP=RUN_INFO_DP)  $ALL$StreamControl
if ( $ANY$StreamControl in_state {READY,ERROR} )  then 
  set CURRPARTNAME = $StreamControl.CURRPARTNAME
  set CURRPARTID = $StreamControl.CURRPARTID
endif", "0", "READY/REALLOCATE", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "do REALLOCATE(PART_ID=PART_ID,PART_NAME=PART_NAME,RUN_INFO_DP=RUN_INFO_DP)  $ALL$StreamControl
if ( $ALL$StreamControl in_state {READY,ERROR} ) then
  set CURRPARTNAME = $StreamControl.CURRPARTNAME
  set CURRPARTID = $StreamControl.CURRPARTID
endif", "0", "ERROR/RECOVER", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "do RECOVER(PART_ID=PART_ID,PART_NAME=PART_NAME,RUN_INFO_DP=RUN_INFO_DP) $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN not_in_state READY )  then
  move_to ERROR
endif
set CURRPARTNAME = $StreamControl.CURRPARTNAME
set CURRPARTID = $StreamControl.CURRPARTID
move_to READY", "0"	0x101	31.10.2007 14:14:15.721
fwOT_StreamCluster.parameters	_FwFsmObjectType	"int CURRPARTID = 0", "string CURRPARTNAME = \"\""	0x101	29.10.2007 18:26:06.622
fwOT_FSM_Slice.panel	_FwFsmObjectType	"StreamControl/Allocate.pnl"	0x101	29.10.2007 18:56:07.831
fwOT_FSM_Slice.components	_FwFsmObjectType		0x141	29.10.2007 18:26:06.626
fwOT_FSM_Slice.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state {CONFIGURED,CREATED,READY,RUNNING} )  move_to CONFIGURED
|", "", "", "ERROR", "FwStateAttention3", "when ( ( $ANY$FwCHILDREN in_state NOT_READY ) and
( $ALL$FwCHILDREN not_in_state ERROR ) )  move_to NOT_READY
|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING
|when ( $ALL$FwCHILDREN in_state READY )  move_to READY
|when ( $ALL$FwCHILDREN in_state CREATED )  move_to CREATED
|when ( $ALL$FwCHILDREN in_state CONFIGURED )  move_to CONFIGURED
|when ( $ALL$FwCHILDREN in_state STOPPED )  move_to STOPPED
|when ( $ALL$FwCHILDREN in_state FINALIZED )  move_to FINALIZED
|when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY
|", "", "", "CONFIGURED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ANY$FwCHILDREN in_state NOT_READY ) move_to NOT_READY
|when ( $ALL$FwCHILDREN in_state {CREATED,READY,RUNNING} )  move_to CREATED
|", "", "", "CREATED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ANY$FwCHILDREN in_state {NOT_READY,CONFIGURED} ) move_to CONFIGURED
|when ( $ALL$FwCHILDREN in_state {READY,RUNNING} )  move_to READY
|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state CONFIGURED )  move_to CONFIGURED
|when ( $ANY$FwCHILDREN in_state {NOT_READY,CONFIGURED,CREATED} )  move_to CREATED
|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING
|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state STOPPED )  move_to STOPPED
|when ( $ALL$FwCHILDREN in_state {NOT_READY,FINALIZED,STOPPED} )  move_to STOPPED
|when ( $ANY$FwCHILDREN in_state {NOT_READY,CONFIGURED,CREATED,READY} )  move_to ERROR
|", "", "", "STOPPED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state RUNNING ) move_to RUNNING
|when ( $ALL$FwCHILDREN in_state {READY,RUNNING} ) move_to READY
|when ( $ALL$FwCHILDREN in_state {NOT_READY,FINALIZED} )  move_to FINALIZED
|", "", "", "FINALIZED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state NOT_READY )  move_to NOT_READY
|when ( $ALL$FwCHILDREN in_state {STOPPED,READY} )  move_to STOPPED
|", "", ""	0x101	31.10.2007 14:14:12.769
fwOT_FSM_Slice.actions	_FwFsmObjectType	"NOT_READY/Configure", "", "1", "do Configure $ALL$FwCHILDREN
if ( $ALL$StreamConfigurator in_state CONFIGURED )  then
        move_to CONFIGURED
endif
", "0", "NOT_READY/Kill", "", "1", "do Kill $ALL$FwCHILDREN
", "0", "NOT_READY/Unload", "", "1", "do Unload $ALL$FwCHILDREN
", "0", "NOT_READY/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED} ) then
  do Reset $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "ERROR/Recover", "", "1", "do Recover $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY )  then
    move_to NOT_READY
endif
move_to NOT_READY
", "0", "ERROR/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "ERROR/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED} ) then
  do Reset $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state ERROR ) then 
  do Reset $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "ERROR/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED} ) then
  do Restart $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state ERROR ) then 
  do Restart $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "CONFIGURED/Create", "", "1", "do Create $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state CREATED )  then
        move_to CREATED
endif
", "0", "CONFIGURED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
", "0", "CONFIGURED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
", "0", "CONFIGURED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED} ) then
  do Reset $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "CONFIGURED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED} ) then
  do Restart $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "CREATED/Initialize", "", "1", "do Initialize $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state INITIALIZED ) then
        move_to INITIALIZED
endif
", "0", "CREATED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
", "0", "CREATED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
", "0", "CREATED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED} ) then
  do Reset $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "CREATED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED} ) then
  do Restart $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "READY/Start", "", "1", "do Start $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
  move_to RUNNING
endif
", "0", "READY/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED ) then
  do Finalize $ALL$FwCHILDREN
endif
if ( ($ANY$FwCHILDREN in_state {FINALIZED,CREATED,READY}) and
     ($ALL$FwCHILDREN not_in_state {NOT_READY,CONFIGURED} ) )  then
  do Reset $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "READY/Kill", "", "1", "do Kill $ALL$FwCHILDREN
", "0", "READY/Unload", "", "1", "do Unload $ALL$FwCHILDREN
", "0", "READY/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED ) then
  do Finalize $ALL$FwCHILDREN
endif
if ( ($ANY$FwCHILDREN in_state {FINALIZED,CREATED,READY}) and
     ($ALL$FwCHILDREN not_in_state {NOT_READY,CONFIGURED} ) )  then
  do Restart $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY
endif
", "0", "RUNNING/Stop", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state STOPPED )  then
   move_to STOPPED
endif
", "0", "RUNNING/Kill", "", "1", "do Kill $ALL$FwCHILDREN
", "0", "RUNNING/Unload", "", "1", "do Unload $ALL$FwCHILDREN
", "0", "STOPPED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CONFIGURED,CREATED} )  then
  do Reset $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "STOPPED/Start", "", "1", "if ( $ANY$FwCHILDREN in_state CREATED ) then
  do Initialize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} ) then
  do Start $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state RUNNING )  then
   move_to RUNNING  
endif
move_to RUNNING  
", "0", "STOPPED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
", "0", "STOPPED/Finalize", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
do Finalize $ALL$FwCHILDREN
", "0", "STOPPED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
", "0", "STOPPED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CONFIGURED,CREATED} )  then
  do Restart $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "FINALIZED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED} ) then
  do Reset $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
   move_to NOT_READY 
endif
", "0", "FINALIZED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
", "0", "FINALIZED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
", "0", "FINALIZED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING ) then
  do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state STOPPED )  then
  do Finalize $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {FINALIZED,CREATED,CONFIGURED} ) then
  do Restart $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state {NOT_READY,CONFIGURED} )  then
   move_to NOT_READY 
endif
", "0"	0x101	31.10.2007 14:14:12.767
fwOT_FSM_Slice.parameters	_FwFsmObjectType		0x101	29.10.2007 18:56:07.831
fwOT_FSM_Tasks.panel	_FwFsmObjectType	"StreamControl/FSM_Tasks.pnl"	0x101	29.10.2007 18:56:17.195
fwOT_FSM_Tasks.components	_FwFsmObjectType		0x141	29.10.2007 18:26:06.639
fwOT_FSM_Tasks.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state {NOT_READY,READY,RUNNING} )  move_to CONFIGURED
|when ( $ALL$FwCHILDREN in_state STOPPED )  move_to STOPPED
|", "", "", "CONFIGURED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state {NOT_READY,READY,RUNNING} ) move_to CREATED
|when ( $ALL$FwCHILDREN in_state STOPPED )  move_to STOPPED
|", "", "", "CREATED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to CONFIGURED
|when ( $ALL$FwCHILDREN in_state {READY,RUNNING} )  move_to READY
|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING
|when ( $ALL$FwCHILDREN in_state UNKNOWN )  move_to CONFIGURED
|when ( $ANY$FwCHILDREN in_state {UNKNOWN,NOT_READY} )  move_to CREATED
|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN not_in_state RUNNING )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state {UNKNOWN,NOT_READY,STOPPED} )  move_to STOPPED
|", "", "", "STOPPED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state CREATED )  move_to CREATED
|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING
|when ( $ALL$FwCHILDREN in_state {UNKNOWN,NOT_READY} )  move_to FINALIZED
|", "", "", "FINALIZED", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ALL$FwCHILDREN in_state UNKNOWN )  move_to NOT_READY
|when ( $ANY$FwCHILDREN in_state {RUNNING,READY,STOPPED} ) move_to STOPPED
|", "", "", "ERROR", "FwStateAttention3", "when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING
|when ( $ALL$FwCHILDREN in_state UNKNOWN )  move_to NOT_READY
|when ( $ALL$FwCHILDREN in_state READY )  move_to READY
|when ( $ALL$FwCHILDREN in_state FINALIZED )  move_to FINALIZED
|when ( $ALL$FwCHILDREN in_state STOPPED )  move_to STOPPED
|when ( $ALL$FwCHILDREN in_state {UNKNOWN,NOT_READY} )  move_to NOT_READY
|", "", ""	0x101	31.10.2007 14:14:13.576
fwOT_FSM_Tasks.actions	_FwFsmObjectType	"NOT_READY/Configure", "", "1", "move_to CONFIGURED
", "0", "NOT_READY/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "NOT_READY/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CONFIGURED/Create", "", "1", "do Load $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state NOT_READY )  then
  move_to CREATED
endif
", "0", "CONFIGURED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CONFIGURED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CONFIGURED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Restart $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state UNKNOWN )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CONFIGURED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Reset $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state UNKNOWN )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CREATED/Initialize", "", "1", "do Configure $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {READY,RUNNING} )  then
   move_to READY
endif
move_to CREATED
", "0", "CREATED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CREATED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CREATED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Reset $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state UNKNOWN )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "CREATED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Restart $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state UNKNOWN )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "READY/Start", "", "1", "do Start $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
   move_to RUNNING
endif
", "0", "READY/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state {READY,STOPPED,NOT_READY,UNKNOWN} )  then
   do Reset $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state UNKNOWN )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "READY/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "READY/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "READY/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state {READY,STOPPED,NOT_READY,UNKNOWN} )  then
   do Restart $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state UNKNOWN )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "RUNNING/Stop", "", "1", "do Stop $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state STOPPED )  then
   move_to STOPPED
endif           
", "0", "RUNNING/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "RUNNING/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "STOPPED/Finalize", "", "1", "do Reset $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {UNKNOWN,NOT_READY} )  then
   move_to FINALIZED
endif
", "0", "STOPPED/Start", "", "1", "do Start $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state RUNNING )  then
   move_to RUNNING
endif
", "0", "STOPPED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "STOPPED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "STOPPED/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
do Reset $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {UNKNOWN,NOT_READY} )  then
   do Unload $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "STOPPED/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
do Restart $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {UNKNOWN,NOT_READY} )  then
   do Unload $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "FINALIZED/Reset", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "FINALIZED/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "FINALIZED/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "FINALIZED/Restart", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "ERROR/Recover", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ANY$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
move_to NOT_READY
", "0", "ERROR/Reset", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Reset $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state UNKNOWN )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY 
endif
move_to NOT_READY
", "0", "ERROR/Finalize", "", "1", "do Reset $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {UNKNOWN,NOT_READY} )  then
   move_to FINALIZED
endif
move_to FINALIZED
", "0", "ERROR/Stop", "", "1", "do Stop $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state {UNKNOWN,NOT_READY,STOPPED,FINALIZED} )  then
   move_to STOPPED
endif
", "0", "ERROR/Kill", "", "1", "do Kill $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "ERROR/Unload", "", "1", "do Unload $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY
endif
", "0", "ERROR/Restart", "", "1", "if ( $ANY$FwCHILDREN in_state RUNNING )  then
   do Stop $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN in_state {READY,STOPPED} )  then
   do Restart $ALL$FwCHILDREN
endif
if ( $ANY$FwCHILDREN not_in_state UNKNOWN )  then
  do Unload $ALL$FwCHILDREN
endif
if ( $ALL$FwCHILDREN in_state UNKNOWN )  then
   move_to NOT_READY 
endif
move_to NOT_READY
", "0"	0x101	31.10.2007 14:14:13.574
fwOT_FSM_Tasks.parameters	_FwFsmObjectType		0x101	29.10.2007 18:56:17.195
fwOT_FSM_Holder.panel	_FwFsmObjectType	"StreamControl/FSM_Holder.pnl"	0x101	29.10.2007 18:26:06.650
fwOT_FSM_Holder.states	_FwFsmObjectType	"READY", "FwStateOKPhysics", "", "", ""	0x101	31.10.2007 14:14:11.997
fwOT_FSM_Holder.actions	_FwFsmObjectType	"READY/Reset", "", "1", "do Reset $ALL$FwCHILDREN", "0", "READY/Recover", "", "1", "do Recover $ALL$FwCHILDREN", "0", "READY/Stop", "", "1", "do Stop $ALL$FwCHILDREN", "0"	0x101	31.10.2007 14:14:11.996
fwOT_FSM_Dataflow.panel	_FwFsmObjectType	"FSM_Dataflow.pnl"	0x101	30.10.2007 14:23:54.253
fwOT_FSM_Dataflow.states	_FwFsmObjectType	"NOT_READY", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN
|when ( $ALL$FwCHILDREN in_state {CONFIGURING,READY} )  move_to CONFIGURING
|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING
|when ( $ANY$StreamCluster in_state NOT_READY )  move_to NOT_ALLOCATED
|", "", "", "UNKNOWN", "FwStateAttention2", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN not_in_state UNKNOWN )  move_to NOT_READY
|", "", "", "CONFIGURING", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN 
|when ( $ALL$FwCHILDREN in_state CONFIGURED )  do Create
|when ( $ALL$FwCHILDREN in_state CREATED )  do Initialize
|when ( $ALL$FwCHILDREN in_state READY )  move_to READY
|when ( $ANY$FwCHILDREN not_in_state {NOT_READY,CONFIGURED,CREATED,READY} )  move_to NOT_READY
|", "", "", "READY", "FwStateOKNotPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN
|when ( $ALL$FwCHILDREN in_state RUNNING )  move_to RUNNING
|when ( $ANY$FwCHILDREN not_in_state {READY,RUNNING} ) move_to NOT_READY
|", "", "", "RUNNING", "FwStateOKPhysics", "when ( $ANY$FwCHILDREN in_state ERROR ) move_to ERROR
|when ( $ANY$FwCHILDREN in_state UNKNOWN )  move_to UNKNOWN
|when ( $ALL$FwCHILDREN in_state READY )  move_to READY
|when ( $ANY$FwCHILDREN not_in_state RUNNING )  move_to NOT_READY
|", "", "", "STOPPING", "FwStateAttention1", "when ( $ANY$FwCHILDREN in_state ERROR )  move_to ERROR
|when ( $ALL$FwCHILDREN in_state STOPPED )  do Finalize
|when ( $ALL$FwCHILDREN in_state FINALIZED )  do Reset
|when ( $ANY$FwCHILDREN not_in_state {RUNNING,STOPPED,FINALIZED,NOT_READY} )  move_to NOT_READY
|", "", "", "ERROR", "FwStateAttention3", "when ( $ALL$FwCHILDREN not_in_state ERROR ) move_to NOT_READY
|", "", ""	0x101	31.10.2007 14:14:11.754
fwOT_FSM_Dataflow.actions	_FwFsmObjectType	"NOT_READY/Configure", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "set PART_ID = PART_ID
set PART_NAME = PART_NAME
set RUN_INFO_DP = RUN_INFO_DP
do Configure(PART_ID=PART_ID, PART_NAME=PART_NAME, RUN_INFO_DP=RUN_INFO_DP) $ALL$FwCHILDREN
move_to CONFIGURING
", "0", "NOT_READY/Allocate", "int PART_ID = 0
string PART_NAME = \"LHCb\"
string RUN_INFO_DP = \"ECS:LHCb_RunInfo\"
", "1", "set PART_ID = PART_ID
set PART_NAME = PART_NAME
set RUN_INFO_DP = RUN_INFO_DP
do ALLOCATE(PART_ID=PART_ID, PART_NAME=PART_NAME, RUN_INFO_DP=RUN_INFO_DP) $ALL$StreamCluster
if ( $ALL$StreamCluster in_state NOT_READY )  then
    move_to NOT_READY
endif
", "0", "NOT_READY/Deallocate", "", "1", "do DEALLOCATE $ALL$StreamCluster
if ( $ALL$StreamCluster in_state NOT_READY )  then
    move_to NOT_ALLOCATED
endif
move_to NOT_READY
", "0", "UNKNOWN/Deallocate", "", "1", "do DEALLOCATE $ALL$StreamCluster
if ( $ALL$StreamCluster not_in_state READY )  then
    move_to NOT_READY
endif
move_to NOT_ALLOCATED
", "0", "CONFIGURING/Create", "", "1", "do Create(PART_ID=PART_ID, PART_NAME=PART_NAME, RUN_INFO_DP=RUN_INFO_DP) $ALL$FwCHILDREN
move_to CONFIGURING
", "0", "CONFIGURING/Initialize", "", "1", "do Initialize(PART_ID=PART_ID, PART_NAME=PART_NAME, RUN_INFO_DP=RUN_INFO_DP) $ALL$FwCHILDREN
move_to CONFIGURING
", "0", "READY/Start", "int RUN_NUMBER = 0
", "1", "do Start $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state RUNNING ) then
    move_to READY
endif
move_to RUNNING
", "0", "READY/Reset", "", "1", "do Reset $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY ) then
    move_to READY
endif
move_to NOT_READY
", "0", "READY/Deallocate", "", "1", "do DEALLOCATE $ALL$StreamCluster
if ( $ALL$StreamCluster in_state NOT_READY )  then
    move_to NOT_ALLOCATED
endif
move_to NOT_READY
", "0", "RUNNING/Stop", "", "1", "do Stop(RUN_INFO_DP=RUN_INFO_DP) $ALL$FwCHILDREN
move_to STOPPING
", "0", "RUNNING/Reset", "", "1", "do Reset $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY ) then
    move_to READY
endif
move_to NOT_READY
", "0", "STOPPING/Finalize", "", "1", "do Finalize(RUN_INFO_DP=RUN_INFO_DP) $ALL$FwCHILDREN
move_to STOPPING
", "0", "STOPPING/Reset", "", "1", "do Reset(RUN_INFO_DP=RUN_INFO_DP) $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state NOT_READY ) then
    move_to STOPPING
endif
move_to NOT_READY
", "0", "ERROR/Recover", "", "1", "do Recover $ALL$FwCHILDREN
if ( $ALL$FwCHILDREN not_in_state ERROR ) then
    move_to NOT_READY
endif
move_to ERROR
", "0"	0x101	31.10.2007 14:14:11.753
fwOT_FSM_Dataflow.parameters	_FwFsmObjectType	"int PART_ID = 0", "string PART_NAME = \"LHCb\"", "string RUN_INFO_DP = \"ECS:LHCb_RunInfo\""	0x101	30.10.2007 14:23:54.253
