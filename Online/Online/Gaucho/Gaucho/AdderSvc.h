#ifndef AdderSvc_AdderSvc_H
#define AdderSvc_AdderSvc_H 1

// Include files
#include "CPP/Interactor.h"
#include "GaudiKernel/Service.h"
#include "GaudiKernel/IIncidentListener.h"

/** @class AdderSvc Gaucho/AdderSvc.h

    The AdderSvc sums histograms (MonH1D, MonH2D, MonProfile) and MonRates published by the MonitorSvc.
    The AdderSvc is started by the script Adder.sh in Online/OnlineTasks/job.
    It runs in the EFF (Event Filter Farm), or the Reconstruction Farm (part of the Monitoring Farm).
    It can also be run standalone.
    
    Event Filter Farm.
    Adders are run in a hierarchy of three levels:
    1. On a node inside a subfarm (e.g. HLTA0101). The Adder running here has UTGID HLTA0101_Adder_1. Its startup script is
    submitted by PVSS to the Bologna TaskManager (FMC). 
    2. On the controls PC of a subfarm (e.g. HLTA01). The Adder running here has UTGID HLTA01_Adder_1. Its startup script is
    submitted by PVSS as a system command.
    3. On the controls PC of the farm (HLT01). The Adder running here has UTGID PARTXX_Adder_1, where PARTXX is the partition
    that uses part of the EFF. Its startup script is submitted by PVSS as a system command.    
    
    It is important that the UTGIDs of the Adders adhere to this format.
    
    The UTGID and the joboptions control which job's histograms are added.
    
    The Adders are run with a DIM_CLIENT_DNS and a DIM_SERVER_DNS. The DIM_CLIENT_DNS is given in the job options. The Adder will
    contact the DIM_CLIENT_DNS to determine the jobs whose histograms it should add. On the node (level 1) this will be the node
    itself (e.g. HLTA0101). On the subfarm controls PC (level 2) this will be the subfarm controls PC (e.g. HLTA01). On the farm controls 
    PC (level 3) this will be the farm controls PC (HLT01).
    
    The DIM_CLIENT_DNS is defined via the job option AdderSvc.dimclientdns.
    
    The Adders are also run with a DIM_SERVER_DNS. The DIM_SERVER_DNS is defined in PVSS by the PVSSCtl manager. On level 1 it
    will be the subfarm controls PC (e.g. HLTA01). On level 2 it will be the farm controls PC (HLT01). On level 3, it will be the
    controls PC where the shift crew's Presenter will run (MONA08). The DIM_SERVER_DNS is used to control the Adder (send it start and
    stop commands) as well as the place one level up in the hierarchy where the results of Adder should be published to.
    
    For the level 3 Adder, the joboptions AdderSvc.subfarmname contains the list of subfarms inside the partition whose histograms should
    be added. This option is dynamically generated by PVSS and does not need to be set. In the same way, the AdderSvc.partitionname
    contains the name of the partition. It is picked up from the dynamic options generated by PVSS.
    
    The joboption AdderSvc.taskname is used to tell the adder the name of the task whose histograms should be added. This name is added to the
    service name published by the Adder containing the sum: MonH1D/HLTA0101_Adder_1/GauchoJob/Algorithm/Histogram.
    
    The joboption AdderSvc.publishRates=1 will extract the counters in the MonRate, calculate rates and publish them for further use by PVSS or
    the Presenter.
    
    @author Eric van Herwijnen
    @date 7/5/2009
*/    

class IIncidentSvc;

class ProcessManager;
class DimCmdServer;
namespace LHCb {

  class AdderSvc : virtual public IIncidentListener, public Service, public Interactor  {
  public:
    /// Constructor of this form must be provided
    AdderSvc(const std::string& name, ISvcLocator* pSvcLocator); 
    /// Default destructor
    virtual ~AdderSvc();
    /// Iservice overload: Initialize service
    StatusCode initialize();
    /// Iservice overload: Finalize service
    StatusCode finalize();
    /// Call to save the histograms
    StatusCode save();
    /// Incident handler callback
    virtual void handle(const Incident& inc);
    /// Interactor handler
    virtual void handle(const Event& ev);

    void startUp();
    void shutDown();

private:
  /// Reference to incident service
  IIncidentSvc* m_incidentSvc;
    
  ProcessMgr *m_processMgr;
  DimCmdServer* m_dimcmdsvr;
  std::string m_utgid;
  std::string m_nodeName;
  
  //std::vector<std::string> m_taskName;
  std::string m_taskName;
  std::vector<std::string> m_subfarmName;
  std::vector<std::string> m_algorithmName;
  std::vector<std::string> m_objectName;
  std::string m_partitionName;
  std::string m_farm;
  
  std::string m_dimClientDns;
  int m_refreshTime;
  bool m_enablePostEvents;
  int m_publishRates;  
  };
}  //end namespace LHCb  

#endif    // AdderSvc_AdderSvc_H
