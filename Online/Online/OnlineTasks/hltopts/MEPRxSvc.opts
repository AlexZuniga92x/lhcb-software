#pragma print off
// 
// MEPRxSvc.opts
// $Id: MEPRxSvc.opts,v 1.8 2010-11-02 15:47:18 niko Exp $
// Sample options for the eventbuilder service MEPRxSvc as of v4r57
// niko.neufeld@cern.ch
#include "$HLTOPTS/OnlineEnvironment.opts"
ApplicationMgr.HistogramPersistency  = "NONE";
ApplicationMgr.EvtSel                = "NONE";
ApplicationMgr.Dlls                  = { "MDF", "GaudiOnline", "Gaucho"};
ApplicationMgr.EventLoop             = "LHCb::OnlineRunable/EmptyEventLoop";
ApplicationMgr.Runable               = "LHCb::MEPRxSvc/Runable";
ApplicationMgr.SvcOptMapping         = { "LHCb::OnlineRunable/EmptyEventLoop" , "LHCb::MEPRxSvc/Runable" };
ApplicationMgr.ExtSvc                = { "IncidentSvc"  };
ApplicationMgr.ExtSvc		    += { "MonitorSvc" };
MEPManager.PartitionID               = @OnlineEnv.PartitionID;
MEPManager.Buffers                   = { "MEP" };
//MEPManager.MapUnusedBuffers          = false;
// Specific options for MEPRxSvc - options not listed here may not exist - please check the code(!) 
Runable.MEPBuffers        = 3;           // concurrently built events
Runable.InitialMEPReqs    = 3;           // how many MEPs to send initially 
Runable.maxMsForGetSpace  = 100;         // milliseconds to wait to get buffer memory from BM
Runable.partitionID       = @OnlineEnv.PartitionID;
Runable.MEPBufSize        = 1048576;     // how much memory to allocate for an event 1 MB (large!!)
Runable.sockBuf           = 30000000;    // this must be supported by the kernel! 
Runable.refCount          = 2;
Runable.maxEventAge       = 1000000;     // (us) - put at least 10000, 0 to switch off
Runable.MEPRecvTimeout    = 10;          // seconds to wait in select call for new packet
Runable.alwaysSendMEPReq  = true;        // always send a MEPReq for any incomplete packet
Runable.createDAQErrorMEP = false;       // do not create a summary bank about event-building errors
Runable.createODINMEP     = false;       // do not create a fake ODIN MEP (only for pixel testbeam)
Runable.resetCountersOnRunChange = true; // reset all counters and histograms when a run-change is seen
Runable.outputLevel      = 1;
#include "$HLTOPTS/EBSetup.opts"
HistogramPersistencySvc.OutputLevel  = 5;
MonitorSvc.CounterUpdateInterval = 5;
