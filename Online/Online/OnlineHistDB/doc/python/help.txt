============= example of python scripts to interface the Histogram DB
============= written and mantained by Nicola Chiapolini
============= created December 2008

** Installation
1. Put the .cpp and .h files into your source directory
2. compile
3. create a password file:
   - the file should only contain the password for the 
     HIST_WRITER user of the OnlineHistDB and is best
     placed in the same directory as the option files.
   - File name and location can be specified by the 
     PasswordFile option in the option file.
   - Default filename is 'password'

** Organisation:

*) Page definitions:
To define a page, the following files need to exist:
- page.py
  defines the pages in the folder tree that are set up
  according to this configuration as well as the page
  configuration itself (i.e. the histograms to be displayed)
- layout.py
  defines the layout used for the page 
  [gets included in page.py, needs to be in the same dir]
- genOpts.py
  adds the algorithm to the application manager, defines 
  task and algorithm names for the algorithm that creates 
  the histograms and sets other general options of the 
  application.
  [gets included in page.py, needs to be in the same dir]

*) Display options:
To set displayoptions, the following files need to exist:
- histDispOpts.py
  defines the histograms as well as the options that should be set.
- dispOptsList
  Contains a list of all Options, these get reset before the new 
  options are changed. (this ensures that only the options defined 
  in the file are set.)
  [gets included in histDispOpts.py, needs to be in the same dir]
  this will get obsolete with future versions of OnlineHistDB 
- dispGenOpts.py 
  adds the algorithm to the application manager, defines 
  task and algorithm names for the algorithm that creates 
  the histograms and sets other general options of the 
  application.
  [gets included in histDispOpts.py, needs to be in the same dir]


for more info see the comments in the example files 
(names as above with prefix "example_")

** running

a) individual page
$ export JOBOPTSEARCHPATH=/path/to/dir/with/page-definitions/
$ gaudirun.py page.py
Hints: *) using "gaudirun.py -vn ..." does just parse 
          the files without execution
       *) in the dir with the page-definitions you can run
          export JOBOPTSEARCHPATH=`pwd`

b) several pages
$ .runCreatePages.sh page1 page2 page3 ...

