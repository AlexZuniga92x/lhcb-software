#!/bin/bash

# Suggested acrontab entry:
#
# 00 20 * * * lxbuild173 /afs/cern.ch/lhcb/software/releases/LBSCRIPTS/prod/InstallArea/scripts/buildGeneralDoc
#
# The user running the script must be able to create AFS volumes in the $LHCBDOC
# directory.

# Temporary log file (we know where to put the log file only after the LbLogin)
tmplog=$(mktemp)
outlog=$tmplog

# check if we are in the Jenkins environment
if [ -n "${JOB_NAME}" ] ; then

# this is a Jenkins job

# ensure that we correctly report errors
set -o pipefail

function logmsg() {
    echo "====>" `date -Is` - "$@" 2>&1 | tee -a $outlog | grep --line-buffered -v '^\(DEBUG\|INFO\):'
}

function logcmd() {
    logmsg cmd: "$@"
    "$@" 2>&1 | tee -a $outlog | grep --line-buffered -v '^\(DEBUG\|INFO\):'
    xc=$?
    if [ $xc != 0 ] ; then
        logmsg FAILED: exit code = $xc
        return $xc
    fi
}

function logsrc() {
    logmsg cmd: . "$@"
    tmpsrclog=$(mktemp)
    . "$@" >>$tmpsrclog 2>&1
    cat $tmpsrclog | tee -a $outlog | grep --line-buffered -v '^\(DEBUG\|INFO\):'
    rm -f $tmpsrclog
}

export TMPDIR=$(pwd)

else

# this is not a Jenkins job

function logmsg() {
    echo "====>" `date -Is` - "$@" >>$outlog 2>&1
}

function logcmd() {
    logmsg cmd: "$@"
    "$@" >>$outlog 2>&1
    xc=$?
    if [ $xc != 0 ] ; then
        logmsg FAILED: exit code = $xc
        return $xc
    fi
}

function logsrc() {
    logcmd . "$@"
}

fi

logmsg Starting $0

# Get the location of the script
basedir=`dirname "$0"`

# Prepare the environment
logsrc $basedir/LbLogin.sh

# Location of the documentation directories
export DOCROOT=$LHCBDOC/doxygen

# Log file
[ ! -d $DOCROOT/logs ] && mkdir -p $DOCROOT/logs
outlog=$DOCROOT/logs/doxygen.`date -Im`.log
mv -f $tmplog $outlog

if [ -n "${JOB_NAME}" ] ; then
    echo "==================================="
    echo "Full log available in ${outlog}.bz2"
    echo "==================================="
fi

retcode=0

# Chack if we are asked not to run (always run in Jenkins)
if [ -n "${JOB_NAME}" -o ! -e $DOCROOT/stop_cron ] ; then
    # Fine tuning of the environment
    logsrc SetupProject.sh LbScripts --no-user --runtime LCGCMT graphviz
    # ensure that we get the correct version of the Python module
    export PYTHONPATH=${basedir}/../python:$PYTHONPATH
    # ensure that we get the correct version of the doxygen script (after the
    # call to SetupProject.sh LbScripts)
    export PATH=${basedir}:$PATH
    # Run the main script
    logcmd python -m LbRelease.LHCbDoc --debug --clean-archived --remove-unused --timeout 23
    retcode=$?
    if [ $retcode != 0 ] ; then
        echo Failure in $0
    fi
else
    logmsg "Doc generation disabled ($DOCROOT/stop_cron)"
fi

logmsg "Done"

# Compress the log file
bzip2 $outlog

if [ -n "${JOB_NAME}" ] ; then
    echo "==================================="
    echo "Full log available in ${outlog}.bz2"
    echo "==================================="
fi

exit $retcode
