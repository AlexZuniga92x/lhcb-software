#!/usr/bin/env python
"""
A script to create an AFS volume

"""
import logging
import os
import sys

from LbConfiguration.Project import getProject
from LbLegacy.vol_for_releases import create_volume
from LbUtils.Script import Script

class AfsCreateProjectVolume(Script):
    """ Main scripts class to check the applications used by DIRAC """

    def defineOpts(self):
        """ Script specific options """
        parser = self.parser
        parser.add_option("-d",
                          dest = "debug",
                          action = "store_true",
                          help = "Display debug output")

    def main(self):
        """   Parse the arguments and start the actual method """
        # parse the args
        self.log = logging.getLogger()
        opts = self.options
        args = self.args
        if opts.debug:
            self.log.setLevel(logging.DEBUG)
        else:
            self.log.setLevel(logging.WARNING)
        projectNameCmd   = args[0]
        version   = args[1]

        # Validate the project name
        project = getProject(projectNameCmd, True)
        if project == None:
            self.log.error("Could not find project: %s" % projectNameCmd)
            sys.exit(1)
        # Now for the actual method
        return self._createVolume(project, version)

    def _createVolume(self, project, version):
        """ Create the AFS Volume """
        pname = project.Name()

        # Creating the volume itself
        create_volume(pname, version)

        # Checking that the directory exists
        releasedir = os.path.join(project.ReleaseArea(), project.releasePrefix(version))
        if os.path.exists(releasedir):
            return 0
        else:
            return 1


if __name__=='__main__':
    sUsage = """%prog [-d] <project> <version>
     -d: Prints debug output.
      Creates the volume for the project version"""
    s = AfsCreateProjectVolume(usage=sUsage)
    sys.exit(s.run())


