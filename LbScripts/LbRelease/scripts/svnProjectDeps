#!/usr/bin/env python
"""
A script to list the dependencies of a project from SVN,
both in terms of packages or projects.
"""

import logging
import re
import subprocess
import sys
import json

from LbConfiguration.Project import getProject
from LbConfiguration.Repository import getRepositories
from LbUtils.Script import Script
from LbRelease import rcs
from LbRelease.SvnTools.Project import translateProject, getProjectCmt, containerFromProject
from LbRelease.SvnTools.Package import getRequirements
from LbUtils.CMT.Parse import parseReq

# Standard LHCb SVN repository
url = str(getRepositories(protocol='anonymous')["lbsvn"])
lbsvn = rcs.connect(url)

# GAUDI Svn repository
gaudiurl = str(getRepositories(protocol='anonymous')["gaudi"])
gaudisvn = rcs.connect(gaudiurl)

# LHCb Script main body
class SvnProjectDepsScript(Script):
    """ Script to list the dependencies of a project. """

    def defineOpts(self):
        """ Script specific options """
        parser = self.parser
        parser.add_option("-n",
                          dest = "non_recursive",
                          action = "store_true",
                          help = "Only checks the children projects, not their children")
        parser.add_option("-P",
                          dest = "projects",
                          action = "store_true",
                          help = "Display the projects, not the packages")
        parser.add_option("-f",
                          dest = "filter",
                          action = "store",
                          help = "Filter package by name")
        parser.add_option("-d",
                          dest = "debug",
                          action = "store_true",
                          help = "Display debug output")
        parser.add_option("-s",
                          dest = "buildslot",
                          action = "store_true",
                          help = "Produce a JSON file usable by the nightlies to build the project and its dependencies")

    def main(self):
        """ Main method for bootstrap and parsing the options.
        It invokes the appropriate method and  """
        self.log = logging.getLogger()
        opts = self.options
        args = self.args
        if opts.debug:
            self.log.setLevel(logging.DEBUG)
        if len(args) < 2:
            self.log.error("Not enough arguments")

            sys.exit(1)
        else :
            project   = args[0]
            version   = args[1]

            # Only show projects if preparing a build slot JSON file
            if self.options.buildslot:
                self.options.projects = True

            # No need to list the project in its dependencies...
            if self.options.projects and not self.options.buildslot:
                deps = []
            else:
                # But lists its packages if requested
                deps = [ (project.upper(), project.upper() + "_" + version)]

            if self.options.non_recursive:
                # In non recursive mode, we only print the list...
                deps += self.getDependencies(project, version)
                self.printResults(deps)
            else:
                # In recursive mode, we can use the dependency dictionnary as well
                (tmpdeps, tmpdepsdict) = self.traverseDependencies(project, version)
                deps += tmpdepsdict
                if self.options.buildslot:
                    self.produceSlotJSON(project, version, tmpdepsdict)
                else:
                    self.printResults(deps)


    def getCanonicalProjectName(self, project):
        """ Returns the LHCb Project name, with proper case
        or None if this is not a LHCb project """
        pname = None
        tmpp = getProject(project, True, False)
        if tmpp != None:
            pname = tmpp.Name()
        return pname

    # Now printing
    def produceSlotJSON(self, project, version, depsdict):
        """ Produce the Slot JSON file based on dependencies """

        # Normalizing the project name
        pname = self.getCanonicalProjectName(project)

        # Common headers in the JSON dict
        jsonout = {}
        jsonout['slot'] = '%s_%s_slot' % (project, version)
        jsonout['description'] = 'Nightly slot for %s %s' % (project, version)
        jsonout['USE_CMT'] = True

        # Iterating on projects to produce the list
        projects = []
        # Each project to be represented by the follwoing structure:
        # {"name": "LHCb",
        # "version": "HEAD",
        # "overrides": {"Tools/EventIndexer": "HEAD"},
        #  "dependencies": ["Gaudi"]},
        for (p, v) in depsdict.keys():
            # Normalizing the project name
            pn = self.getCanonicalProjectName(p)

            # If the project was not found, it's not a LHCb SVN project
            # We can safely ignore...
            if pn == None:
                self.log.info("Ignoring project as not LHCb: %s %s" % (p, v))
                continue

            simple_deps = list()
            deps = depsdict[(p, v)]
            proj = dict()
            proj["name"] = pn
            proj["version"] = v
            proj["overrides"] = dict()
            for (dp, dv) in deps:
                dpname = self.getCanonicalProjectName(dp)
                if dpname == None:
                    self.log.info("Ignoring project as dep as not LHCb: %s %s" % (dp, dv))
                    continue
                simple_deps.append(dpname)

            proj["dependencies"] = simple_deps
            projects.append(proj)

        # Now adding the projects
        jsonout['projects'] = projects
        jsonout['default_platforms'] = ["x86_64-slc6-gcc46-opt", "x86_64-slc6-gcc46-dbg",
                                        "x86_64-slc5-gcc46-opt", "x86_64-slc5-gcc46-dbg"]
        jsonout["warning_exceptions"] = [".*/boost/.*",
                                         "^--->> genreflex: WARNING:.*",
                                         " note:",
                                         "distcc\\[",
                                         "^ *Error *$"]
        jsonout["error_exceptions"] = ["distcc\\[", "::error::", "^ *Error *$"]

        print json.dumps(jsonout, indent=4, sort_keys=False)

    def printResults(self, deps):
        """ Display the result of the command """
        for (p, v) in deps:
            if self.options.projects:
                # In this case we print the list of projects
                print "%s\t%s" % (p, v)
            else:
                # Hack to separate the version number as the projects are versioned
                # PROJECT_version
                allpacks = self.getPackages(p,v)
                if allpacks == None:
                    continue
                for (pa, ve) in allpacks.items():
                    if self.options.filter:
                        if re.search(self.options.filter, pa):
                            print "%s\t%s\t%s\t%s" % (p, v, pa, ve)
                    else:
                        print "%s\t%s\t%s\t%s" % (p, v, pa, ve)

    def traverseDependencies(self, project, version, alreadyDone = []):
        """ Recursively traverse all dependencies.
        Dependencies are looked up from SVN using the getDependencyMethod.
        A complete list of tuples (project, version) is returned"""

        self.log.debug("TraverseDeps %s,%s" % (project, version))
        self.log.debug(alreadyDone)

        # Getting the dependencies for this project...
        mydeps = self.getDependencies(project, version)
        alreadyDone.append((project, version))

        # Adding it to the dict with direct dependencies
        depsdict = dict()
        depsdict[(project, version)] = mydeps

        # The flat list contains everything, and it is a copy of the list...
        ndeps = list(mydeps)

        for d in mydeps:
            # Make sure he are not looping...
            if not d in alreadyDone:

                # Actually traverse the dependencies...
                (tmpDeps, tmpdepsdict) = self.traverseDependencies(d[0], d[1], alreadyDone)

                # Copying the dictionaries
                for k in tmpdepsdict.keys():
                    depsdict[k] = tmpdepsdict[k]

                # Now gathering the result if necessary
                for td in tmpDeps:
                    if not td in alreadyDone:
                        alreadyDone.append(td)
                    if not td in ndeps:
                        ndeps.append(td)

        #print "%s %s" % (project, version), ndeps
        return (ndeps, depsdict)

    def getDependencies(self, p, v):
        """ Get the dependencies for a single project """
        # Cleanup the project name and version and get the SVN URL
        self.log.debug("Processing dependencies for %s %s" % (p, v))
        tagpath = self.getTagSvnPath(p, v)
        if (p != "LCGCMT" and not self.checkSvnPathExists(tagpath)):
            raise Exception("Project %s %s not found - SVN path: %s" %(p, v, tagpath))

        projcmt=getProjectCmt(tagpath).strip()
        deps = []
        for l in projcmt.splitlines():
            m = re.match("\s*use\s+(\w+)\s+(\w+)", l)
            if m != None:
                dp = m.group(1)
                dv = m.group(2)

                # CLeaning the version from the project name if there
                if "_" in dv:
                    tmp = dv.split("_")
                    if len(tmp) >1:
                        dv = tmp[1]

                deps.append((dp, dv))
        return deps


    def getTagSvnPath(self, project, version, isProject=True):
        """ returns the SVN path for the tag """
        if isProject:
            (proj,ver)=translateProject(project,version)
        else:
            (proj, ver) = project, version

        tagpath = ""
        if proj.upper().startswith("GAUDI"):
            tagpath = gaudisvn.url(proj,ver, isProject)
        else:
            tagpath=lbsvn.url(proj,ver, isProject)

        self.log.debug("Svn Path for the tag:" + tagpath)
        return tagpath

    def getPackages(self, p, v):
        """ List the packages used by the project """
        # First getting the project information

        # Exclude LCGCMT, as we don't have the LCGCMTSYS in our repo...
        if p.upper() == "LCGCMT":
            return None

        # Special case for Gaudi, we need to check in GaudiRelease...
        if p.upper() == "GAUDI":
            svnpath = self.getTagSvnPath("GaudiRelease", v, False)
            self.log.debug("Getting requirements from %s" % svnpath)
            return  parseReq(getRequirements(svnpath))
        else:
            # Lookup the container name and the package path
            container = containerFromProject(p, v)
            svnpath = self.getTagSvnPath(container, v, False)
            self.log.debug("Getting requirements from %s" % svnpath)
            return  parseReq(getRequirements(svnpath))

    def checkSvnPathExists(self, path):
        """ Check if a SVN path exists """
        pexists = False
        rc = subprocess.call(["svn", "ls", path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if rc == 0:
            pexists = True
        return pexists

if __name__=='__main__':
    sUsage = """%prog [-r] project version

     Lists the dependencies of a project, in terms of other projects
     or in term of packages.

     It can also generate a nightly build slots JSON, for a project and all its dependencies,
     with the -s option.
      """
    s = SvnProjectDepsScript(usage=sUsage)
    sys.exit(s.run())


