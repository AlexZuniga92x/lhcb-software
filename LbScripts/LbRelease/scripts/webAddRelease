#!/usr/bin/env python
# $Id: webAddRelease,v 1.2 2009-12-15 19:30:38 hmdegaud Exp $
""" This scripts adds the needed links for a new release in the $LHCBDOC directory """

from LbUtils.Script import Script
from LbConfiguration.Version import ParseSvnVersion

__version__ = ParseSvnVersion("$Id$", "$URL$")
__author__ = "hmd"

from LbConfiguration.Version import sortVersions, version_style
import logging
import os
import re
from stat import *

def addRelease(projectname, projectversion, branch=None, releases_dir=None, doc_dir=None):
    log = logging.getLogger()
    if not releases_dir :
        lhcbreleases = os.environ["LHCBRELEASES"]
    else :
        lhcbreleases = releases_dir

    if not doc_dir :
        lhcbdoc = os.environ["LHCBDOC"]
    else :
        lhcbdoc = doc_dir

    if not os.path.exists(lhcbdoc) :
        os.mkdir(lhcbdoc)
        log.info("Created %s directory" % lhcbdoc)


    lhcbsitelocation = os.path.join(lhcbdoc, projectname.lower())
    if not os.path.exists(lhcbsitelocation) :
        os.mkdir(lhcbsitelocation)
        log.info("Created %s directory" % lhcbsitelocation)

    log.info((" %s %s " % (projectname.lower(),projectversion.lower())).center(80, "-"))

    projectdir = lhcbreleases

    # obtain path to project location and checking for errors (existing of the project, version and SysPackage)

    syspkgdir = ""
    projectroot = ""
    relprojectdir = ""
    relsyspkgdir = ""
    error = "Project " + projectname.upper() + " does not exist!"
    for dir in os.listdir(projectdir):
        if dir.lower() == projectname.lower():
            projectdir = os.path.join(projectdir, dir)
            projectroot = projectdir
            error = "Project version " + projectversion + " does not exist!"
    for dir in os.listdir(projectdir):
        if dir.lower() == (projectname + "_" + projectversion).lower():
            projectdir = os.path.join(projectdir, dir)
            relprojectdir = dir + "/"
            relsyspkgdir = dir + "/"
            error = "System package missing!"
    for dir in os.listdir(projectdir):
        if dir.lower() == (projectname + "sys").lower():
            syspkgdir = os.path.join(projectdir, dir)
            relsyspkgdir = relsyspkgdir + dir + "/"
            if not os.path.exists(os.path.join(syspkgdir, "cmt")) :
                syspkgdir = os.path.join(projectdir, dir, projectversion)
                relsyspkgdir = relsyspkgdir + dir + "/" + projectversion + "/"
            error = ""
    if error != "":
        log.error(error)
        raise SystemExit

    # remove all files in releases/[version] except file description.html

    try:
        for filename in os.listdir(os.path.join(lhcbsitelocation, "releases", projectversion)):
            if filename != "description.html":
                os.remove(os.path.join(lhcbsitelocation, "releases", projectversion, filename))
    except os.error, err:
        err

    # recreate projectroot link

    try:
        os.remove(os.path.join(lhcbsitelocation, "projectroot") )
    except os.error, err:
        err
    try:
        os.symlink(projectroot, os.path.join(lhcbsitelocation, "projectroot"))
    except os.error, err:
        err

    # create links in releases/[version]

    log.info( "LINKS:")
    try:
        os.mkdir(os.path.join(lhcbsitelocation, "releases"))
        os.symlink("../scripts/releases.php", os.path.join(lhcbsitelocation, "releases", "index.php"))
    except os.error, err:
        err

    try:
        try:
            os.mkdir(os.path.join(lhcbsitelocation, "releases", projectversion))
        except os.error, err:
            err
        os.symlink("../../scripts/release.php", os.path.join(lhcbsitelocation, "releases", projectversion, "index.php"))
        log.info( "  index.php -> " + "../../scripts/release.php")
        os.symlink("../../scripts/release.notes_wrapper.php", os.path.join(lhcbsitelocation, "releases", projectversion, "release.notes.php"))
        log.info( "  release.notes.php -> " + "../../scripts/release.notes_wrapper.php")
        os.symlink("../../scripts/requirements_wrapper.php", os.path.join(lhcbsitelocation, "releases", projectversion, "requirements.php"))
        log.info( "  requirements.php -> " + "../../scripts/requirements_wrapper.php")
    except os.error, err:
        err

    try:
        os.symlink("../../projectroot/" + relsyspkgdir + "doc/html", os.path.join(lhcbsitelocation, "releases", projectversion, "doxygen"))
        log.info( "  doxygen -> " + "../../projectroot/" + relsyspkgdir + "doc/html" )
        os.symlink("../../projectroot/" + relsyspkgdir + "cmt/requirements", os.path.join(lhcbsitelocation, "releases", projectversion, "requirements"))
        log.info( "  requirements -> " + "../../projectroot/" + relsyspkgdir + "cmt/requirements")
        for filename in os.listdir(syspkgdir + "doc"):
            if filename.find("release") != -1 and filename.find("notes") != -1:
                os.symlink("../../projectroot/" + relsyspkgdir + "doc/" + filename, os.path.join(lhcbsitelocation, "releases", projectversion, "release.notes"))
                log.info( "  release.notes -> " + "../../projectroot/" + relsyspkgdir + "doc/" + filename)
                break
        if os.path.isfile(os.path.join(projectdir, "description.html")):
            os.symlink("../../projectroot/" + relprojectdir + "description.html", os.path.join(lhcbsitelocation, "releases", projectversion, "description.html"))
            log.info( "  description.html -> ../../projectroot/" + relprojectdir + "description.html")
    except os.error, err:
        err

    try:
        for filename in os.listdir(syspkgdir + "doc"):
            if filename.find("release") != -1 and filename.find( "notes") != -1:
                try:
                    os.symlink("../../projectroot/" + relsyspkgdir + "doc/" + filename, os.path.join(lhcbsitelocation, "releases", projectversion, filename))
                    log.info( "  " + filename + " -> " + "../../projectroot/" + relsyspkgdir + "doc/" + filename)
                except os.error, err:
                    err
    except os.error, err:
        err

    # create packages structure for current version of project

    log.info( "PACKAGES:")
    try:
        os.mkdir(os.path.join(lhcbsitelocation, "packages"))
        os.symlink("../scripts/packages.php", os.path.join(lhcbsitelocation, "packages", "index.php"))
        os.symlink("../scripts/package.php", os.path.join(lhcbsitelocation, "packages", "package.php"))
    except os.error, err:
        err
    for pkg1 in os.listdir(projectdir):
        if S_ISDIR(os.stat(os.path.join(projectdir, pkg1))[ST_MODE]):
            for pkg2 in os.listdir(os.path.join(projectdir,pkg1)):
                if (version_style.match(pkg2) != None or os.path.isfile(os.path.join(projectdir, pkg1, "cmt", "version.cmt"))) and pkg1.lower() != (projectname + "sys").lower():
                    try:
                        os.mkdir(os.path.join(lhcbsitelocation, "packages", pkg1));
                    except os.error, err:
                        err
                    log.info( "  " + pkg1 )
                else:
                    if S_ISDIR(os.stat(os.path.join(projectdir, pkg1, pkg2))[ST_MODE]):
                        pkg2listdir = os.listdir(os.path.join(projectdir, pkg1, pkg2))
                        if len(pkg2listdir) > 0:
                            if version_style.match(pkg2listdir[0]) != None or os.path.isfile( os.path.join(projectdir, pkg1, pkg2, "cmt", "version.cmt") ):
                                try:
                                    os.mkdir(os.path.join(lhcbsitelocation, "packages", pkg1))
                                except os.error, err:
                                    err
                                try:
                                    os.mkdir(os.path.join(lhcbsitelocation, "packages", pkg1, pkg2))
                                except os.error, err:
                                    err
                                log.info( "  " + pkg1 + "/" + pkg2)

    # create latest link in releases directory

    try:
        os.remove(os.path.join(lhcbsitelocation, "releases","latest"))
    except os.error, err:
        err

    versions = sortVersions(os.listdir(os.path.join(lhcbsitelocation, "releases")), safe=True)
    versions.reverse()

    try:
        os.remove(os.path.join(lhcbsitelocation, "releases", "latest"))
    except os.error, err:
        err
    os.symlink(versions[0], os.path.join(lhcbsitelocation, "releases", "latest"))

    # if branch is specified create latest link in releases/[branch] directory

    if branch :
        try:
            os.mkdir(os.path.join(lhcbsitelocation, "releases", branch))
            os.symlink("../../scripts/releases.php", os.path.join(lhcbsitelocation, "releases", branch, "index.php"))
        except os.error, err:
            err
        try:
            os.symlink("../" + projectversion, os.path.join(lhcbsitelocation, "releases", branch, projectversion))
        except os.error, err:
            err

        versions = []
        versions = sortVersions(os.listdir(os.path.join(lhcbsitelocation, "releases", branch)), safe=True)
        versions.reverse()
        try:
            os.remove(os.path.join(lhcbsitelocation, "releases", branch, "latest"))
        except os.error, err:
            err
        os.symlink(versions[0], os.path.join(lhcbsitelocation, "releases", branch, "latest"))

    log.info((" Release %s added. " % projectversion).center(80,"-"))


class WebAddReleaseScript(Script):
    _version = __version__
    _description = __doc__
    def defineOpts(self):
        parser = self.parser
        parser.set_defaults(release_dir=None)
        parser.add_option("-r", "--releases-dir",
                          dest="releases_dir",
                          help="set the LHCb releases directory",
                          fallback_env="LHCBRELEASES")
        parser.set_defaults(doc_dir=None)
        parser.add_option("-d", "--doc-dir",
                          dest="doc_dir",
                          help="set the web doc directory",
                          fallback_env="LHCBDOC")
    def main(self):
        opts = self.options
        args = self.args
        if len(args) < 2 :
            raise SystemExit
        else :
            projectname = args[0]
            projectversion = args[1]
        branch = None
        if len(args) > 2 :
            branch = args[2]

        addRelease(projectname, projectversion, branch, opts.releases_dir, opts.doc_dir)

        return 0


if __name__ == '__main__':
    s = WebAddReleaseScript(usage="%prog [options] projectname projectversion [branch]")
    s.run()
