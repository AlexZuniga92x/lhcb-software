#!/usr/bin/python
"""
Script to copy test resul ref.new files into local test directories to avoid re-running the tests locally

usage:
  getNightlyRefs.py slot [day(=today)] [application(=cwd)] [destination(=pwd)] [--help]

options:
  day is today if not specified
  application is taken from the current directory name if not specified
  destination, where to put the references, starts at the current working directory unless specified. If no destination is given, local references will be updated, but new directories will not be added.

  cmtconfig is always taken from the corresponding environment variable
  the ordering of options is fixed.

  Ideally you need to have called getpack on the packages you want to update before calling this script.

standard usage:
  check your local cmtconfig
  setup local project structure for the correct project
  getpack the packages you want to update
  go to the PROJECT_version top directory
  call this script
  go through and replace the references you want to update

"""
import time
import tempfile
import json
import os
import sys

def usage():
    print __doc__

ignore_missing_dirs=True

if "--help" in sys.argv or "-h" in sys.argv:
    usage()
    sys.exit(0)

if len(sys.argv)<2 or len(sys.argv)>5:
    usage()
    raise AttributeError("Incorrect number of options")

#usage()
slot=sys.argv[1]
if len(sys.argv)>2:
    day=sys.argv[2]
else:
    day=time.strftime("%A")[0:3]
    day=day.lower()
    day=day[0].upper()+day[1:]
if len(sys.argv)>3:
    app=sys.argv[3]
else:
    app=os.path.abspath(".").split("_")[0].split("/")[-1]
    app=app.lower()
    app=app[0].upper()+app[1:]
if len(sys.argv)>4:
    dest=sys.argv[4]
    ignore_missing_dirs=False
else:
    dest="."

for k,v in {"app": app, "slot": slot, "day": day, "dest": dest}.iteritems():
    if not len(v.strip()):
        usage()
        print k,v
        raise ValueError("Could not parse option")

print "looking for slot: %s, day: %s, app: %s" % (slot, day, app)

nightly="buildlhcb.cern.ch:/data/artifacts/"
slotdir=os.environ["LHCBNIGHTLIES"]+"/"+slot+"/"+day
if not os.path.exists(slotdir):
    print slotdir
    raise IOError("The day/slot combination you gave does not exist")
if not os.path.exists(slotdir+"/"+app.upper()):
    print slotdir
    raise IOError("The day/slot/application combination you gave does not exist")


def findbuildid(slotdir):
    f=open(slotdir+"/slot-config.json")
    conf=json.load(f)
    f.close()
    return conf["build_id"]

buildid=findbuildid(slotdir)

print "retrieving buildID", buildid

def getrefs(slot,day,app,dest):
    dir=nightly+slot+"/"+day+"/newrefs."+os.environ["CMTCONFIG"]+"/"+app+"/*"
    cmd="rsync -vr --max-delete=0  "+dir+" "+dest
    print cmd
    os.system(cmd)

if not ignore_missing_dirs:
    getrefs(slot,day,app,dest)
else:
    import glob
    exists=glob.glob(dest+"/*/*")+glob.glob(dest+"/*/*/*")
    exists=[e for e in exists if os.path.isdir(e) and e.endswith("tests")]
    print exists
    for e in exists:
        getrefs(slot,day,app+e.replace(dest,""),e)
