#!/usr/bin/env python
# $Id$
###############################################################################
# (c) Copyright 2014 CERN                                                     #
#                                                                             #
# This software is distributed under the terms of the GNU General Public      #
# Licence version 3 (GPL Version 3), copied verbatim in the file "COPYING".   #
#                                                                             #
# In applying this licence, CERN does not waive the privileges and immunities #
# granted to it by virtue of its status as an Intergovernmental Organization  #
# or submit itself to any jurisdiction.                                       #
###############################################################################
'''
Script to generate the LCG tarball based on the RPMs provided by PH-SFT

Created on Mar 25, 2014

@author: Ben Couturier
'''

from LbUtils.Script import Script
from LbConfiguration.Version import ParseSvnVersion
from LbRelease import LCGYumInstaller
#from LbRelease import LCGRpmExtractor
from LbRelease import CMTNativeTools
from LbLegacy.install_project import calculateMD5

import logging
import sys
import os

__version__ = ParseSvnVersion("$Id$", "$URL$")

class BuildLCGTarScript(Script):
    _version = __version__
    _description = __doc__
    def defineOpts(self):
        parser = self.parser
        parser.set_defaults(output_dir=None)
        parser.add_option("-o", "--output-dir",
                          help = "define the output directory for the created tarballs" \
                          "[default: the LHCBTAR directory for the project]")
        parser.set_defaults(exclude=[])
        parser.add_option("-e", "--exclude",
                          action = "append",
                          help = "add exclude glob pattern to the file/dir paths")
        parser.add_option("-s","--siteroot",
                          help = "temporary directory where the RPMs will be installed before repackaging" \
                          "[default: /tmp/siteroot",
                          default="/tmp/siteroot")
        parser.set_defaults(md5=True)
        parser.add_option("--md5",
                          action = "store_true",
                          help = "Create the md5 sum file for each tarball [default: %default]")
        parser.add_option("--no-md5",
                          dest = "md5",
                          action = "store_false",
                          help = "Prevent the creation of the md5 sum file")
        parser.add_option("--no-install",
                          dest = "noinstall",
                          action = "store_true",
                          default = False,
                          help = "For DEV: does packaging, do not redo install")
        parser.add_option("--force",
                          dest = "force",
                          action = "store_true",
                          default = False,
                          help = "Ignore installation errors and continue packaging")
        parser.add_option("--explicit-deps",
                          dest = "explicit_deps",
                          action = "store_true",
                          default = False,
                          help = "Package only to the packages explicitely mentioned in the project")
        parser.add_option("--limit-rpm-deps",
                          dest = "limit_rpm_deps",
                          action = "store_true",
                          default = False,
                          help = "Restrict to the RPMs explicitely mentioned, not their dependencies"
                          "Except in the case of LCG_XX RPMs that only contain links."
                          "In that case the package they depend on is installed as well.")
        parser.add_option("-y", "--siteroot-not-empty",
                          dest = "ackSiterootNotEmpty",
                          action = "store_true",
                          default = False,
                          help = "Acknowledge the fact that there are files in the installation dir already")
        parser.add_option("--cache-cmtresult",
                          dest = "cmtrescache",
                          default = None,
                          help = "Cache the CMT result result to a file, or reuse a previously exsiting cache")
        parser.add_option("--nonatives",
                          dest = "nonatives",
                          action = "store_true",
                          default = False,
                          help = "Just install the RPM for the named project and do not execute cmt show macros native")



    def main(self):
        log = logging.getLogger()
        self.log = log
        args = self.args
        opts = self.options
        version = None
        self.externalsDict = None
        self.baseOutputFilename = None
        if len(args) < 3 :
            log.error("Not enough arguments")
            sys.exit(1)
        else :
            self.project   = args[0]
            self.version   = args[1]
            self.cmtconfig = args[2]

        # Setting the CMTCONFIG to the requested one
        os.environ['CMTCONFIG'] = self.cmtconfig

        # preparing the actual RPM install area
        log.warning("Repackaging %s %s for CMTCONFIG %s" % (self.project, self.version, self.cmtconfig))
        installer = LCGYumInstaller.LCGYumInstaller(opts.siteroot)
        self._installer = installer
        #installer = LCGRpmExtractor.LCGRpmInstaller(opts.siteroot)

        # CHeck whether there is an install already
        if not installer.isAreaEmpty() and not opts.ackSiterootNotEmpty:
            log.error("The install area %s already contains files, please remove them of force installation with -y" % installer._siteroot)
            sys.exit(1)

        # performing the installation if requested
        if opts.noinstall == False:
            if opts.nonatives:
                self.installExplicitRPM(self.project, self.version, self.cmtconfig, installer, opts.limit_rpm_deps)
            else:
                self.install(self.project, self.version, self.cmtconfig, installer, opts.limit_rpm_deps)

        # Now preparing the tar file
        output_dir = None
        if opts.output_dir == None:
            output_dir = os.environ['LHCBTAR']
        else:
            output_dir = os.path.abspath(opts.output_dir)

        log.warning("Will use DIST directory: %s" % output_dir)
        htmldir = os.path.join(output_dir, "html")
        sourcedir = os.path.join(output_dir, "source")
        if not os.path.exists(htmldir):
            os.makedirs(htmldir)
        if not os.path.exists(sourcedir):
            os.makedirs(sourcedir)

        baseFilename = None
        if opts.nonatives:
            baseFilename = self.getOutputFilenameFromRPM()
        else:
            baseFilename = self.getOutputFilenameFromCMT()

        filename = "%s_%s" % (baseFilename, self.cmtconfig)
        log.warning("Output Base filename: %s" % filename)

        htmlFilename = os.path.join(output_dir, "html", filename + ".html")
        tarFilename = os.path.join(output_dir, "source", filename + ".tar.gz")

        # Preparing the tar file
        # See if we need to restrict the packages to install
        packageList = None
        if not opts.nonatives:
            (lcgVer, externalsDict) = self.getExternalsDict()
            if opts.explicit_deps:
                packageList = externalsDict.keys()
                # Now adding the files in LCG_XX
                for k in externalsDict.keys():
                    packageList.append(os.path.join("LCG_" + self.lcgVer,
                                                    k))

        installer.prepareLCGTar(tarFilename, packageList)
        self.createMD5File(tarFilename, "tar.gz")
        self.createHTMLFile(htmlFilename, baseFilename, self.cmtconfig)
        self.createMD5File(htmlFilename, "html")

    def createMD5File(self, tarfile, origExtension):
        '''
        Create the md5sum file of the install area
        '''
        md5file = tarfile.replace("." + origExtension, ".md5")
        md5sum = calculateMD5(tarfile)
        mdf = open(md5file,"w")
        mdf.write("%s  %s" % (md5sum,os.path.basename(tarfile)))
        mdf.close()

    def createHTMLFile(self, htmlfile, baseName, cmtconfig):
        '''
        Create the HTML file for the tar
        '''
        fileProj = baseName.split("_")[0]
        fileVer = baseName[baseName.find("_")+1]
        namecfg =  baseName + "_" + cmtconfig
        fd = open(htmlfile, "w")
        fd.write("<H3>Project %s version %s (%s binary files) </H3>\n" % (fileProj, fileVer, cmtconfig))
        fd.write("<A NAME=%s HREF=source/%s>%s</A>\n" % (namecfg, namecfg + ".tar.gz", namecfg))
        fd.close()

    def getExternalsDict(self):
        '''
        Gets the list of all externals needed
        '''
        self.log.warning("Loading list of externals")
        # Cache the externals dictionary for the version...
        if self.options.cmtrescache != None:
            if os.path.exists(self.options.cmtrescache):
                # If the cache exists just use it
                import pickle
                self.log.warning("Loading list of externals from file: %s" % self.options.cmtrescache)
                (self.lcgVer, self.externalsDict) = pickle.load(open(self.options.cmtrescache, "rb" ))
                return (self.lcgVer, self.externalsDict)

        if self.externalsDict == None:
            self.log.warning("Loading list of externals from CMT")
            (lcgVerTmp, externalsDict) = CMTNativeTools.get_native_versions(self.project.upper() + "_" + self.version,
                                                                            self.cmtconfig)
            self.lcgVer = lcgVerTmp.split("_", 1)[1]
            self.externalsDict = externalsDict
            if self.options.cmtrescache != None:
                # Save the results to the cache
                import pickle
                self.log.warning("Saving list of externals to cache: %s" %  self.options.cmtrescache)
                pickle.dump((self.lcgVer, self.externalsDict), open(self.options.cmtrescache, "wb" ) )
        return (self.lcgVer, self.externalsDict)


    def getOutputFilenameFromCMT(self):
        '''
        Derive the output filename from the project specified
        '''
        if self.baseOutputFilename == None:
            filename = CMTNativeTools.get_output_filename(self.project.upper() + "_" + self.version,
                                                          self.cmtconfig, self.getExternalsDict()[1])
            self.baseOutputFilename = filename
        return self.baseOutputFilename


    def getOutputFilenameFromRPM(self):
        '''
        temporary method to find out how to name the package
        '''
        proj = self.project.upper()
        ver = self.version
        cmtconf = self.cmtconfig.replace("-", "_")
        rpmname = "%s_%s_%s" % (proj, ver, cmtconf)


        # Only suporting LHCbDIrac for the moment !
        if proj != "LHCBDIRAC":
            raise Exception("Packaging for %s not supported" % proj)

        # Looking for the LHCBGRID dependency!
        rpm = self._installer.findRpm(rpmname)

        if proj == "LHCBDIRAC":
            base = "LCGGrid_"
            lhcbgridreq = [ r for r in rpm.requires if r.name.startswith("LHCBGRID") ]
            if len(lhcbgridreq) == 0:
                raise Exception("It looks like this version of LHCBDIRAC does not depend on LHCBGRID."
                                "Please check dependencies!")

            self.log.debug("Found dependency to: "+ str(lhcbgridreq[0]))
            gridver = lhcbgridreq[0].name.split("_")[1]
            self.baseOutputFilename = base + gridver

        return self.baseOutputFilename


    def _getExtRPMName(self, extName, extItems, lcgVer):
        '''
        Prepare the Ext line for a specific external
        '''
        # Extend list if incomplete (that unfortunately happens)
        extItems += [None] * (4 - len(extItems))
        extVer      = extItems[0]
        extVerNoLCG = extItems[1]
        cmtcfgopt   = extItems[2]
        extpath     = extItems[3]

        # Exceptions for various packages
        nameExceptions = { "Expat":"expat",
                           "lfc":"LFC",
                           "fts":"FTS",
                           "dpm":"DPM",
                           "fts3":"FTS3",
                           "lcgdmcommon":"lcg_dm_common",
                           "lcgutils":"dm_util" }

        extName = nameExceptions.get(extName, extName)

        # LCGCMT is outside of LCG anyway, we deal with it in a special way
        if extName == "LCGCMT":
            return  "%s_%s" % (extName, extVer.replace('-', '_'))

        rpmname = None
        # Now we need to deal with LCG and non LCG externals...
        if  "LCG_%s" % lcgVer in extpath:
            # We have a LCG external !
            rpmname = "LCG_%s_%s_%s_%s" % (lcgVer,
                                           extName,
                                           extVer.replace('-', '_'),
                                           cmtcfgopt.replace('-', '_'))
        else:
            # We have an old type external
            rpmname = "%s_%s_%s" % (extName,
                                    extVer.replace('-', '_'),
                                    cmtcfgopt.replace('-', '_'))
        return rpmname

    def installExplicitRPM(self, project, version, cmtconfig, installer, limit_rpm_deps):
        '''
        Perform the installation of the needed packages in the install area
        '''
        allrpms = [ "%s_%s_%s" % (project.upper(), version, cmtconfig.replace("-", "_")) ]

        self.log.warning("Now performing the actual install")
        self.log.warning("RPM list:" + " ".join(allrpms))
        packageErrors = []
        for rpm in allrpms:
            try:
                installer.install(rpm, nodeps=limit_rpm_deps)
            except:
                packageErrors.append(rpm)

        if len(packageErrors) > 0:
            self.log.error("Errors installing the following packages:")
            for p in packageErrors:
                self.log.error(p)
            if not self.options.force:
                self.log.error("Some packages are missing -stopping installation")
                self.log.error("Use --force option to continue nonetheless")
                sys.exit(1)
        else:
                self.log.warning("All packaged installed successfully")



    def install(self, project, version, cmtconfig, installer, limit_rpm_deps):
        '''
        Perform the installation of the needed packages in the install area
        '''
        # Retrieving the list of externals from the mentioned project
        (lcgVer, externalsDict) = self.getExternalsDict()

        # Now prepare the list of RPMs based on the externals found
        allrpms = []
        missing = []
        for k, v in externalsDict.items():
            # Ignore packages from the system for the moment
            v += [None] * (4 - len(v))
            if len(v) > 3 and v[3] != None and v[3].startswith("/usr"):
                self.log.warning("%s is from the system, IGNORING" % k)
                continue

            rpmName = self._getExtRPMName(k,v, lcgVer)
            # Now looking for the RPMs
            try:
                linkPackage = installer.findRpm(rpmName)
                if linkPackage != None:
                    self.log.warning("Adding package RPM: %s" % linkPackage.name)
                    allrpms.append(linkPackage.name)

                    if linkPackage.name.startswith("LCG_%s" % lcgVer):
                        req = [ r for r in  linkPackage.requires if k in r.name ]
                        if len(req) > 0:
                            self.log.warning("Link package - Looking for dependency: %s" % req[0].name)
                            mainPackage = installer.findRpm(req[0].name)
                            if mainPackage != None:
                                self.log.warning("Adding RPM: %s" % mainPackage.name)
                                allrpms.append(mainPackage.name)
                            else:
                                self.log.warning("Missing RPM: %s" % req[0].name)
                                missing.append((req[0].name, req[0].name, ""))
                else:
                    self.log.warning("Missing RPM: %s" % rpmName)
                    missing.append((k, rpmName, v[3]))

            except Exception, e:
                print e
                self.log.warning("Exception looking for RPMs %s " %k)

        # Now performing the install
        self.log.warning("Done looking for RPMs")
        for k in missing:
            self.log.warning("> Missing RPM for: " + str(k))

        if len(missing) > 0:
            sys.exit(1)

        self.log.warning("Now performing the actual install")
        self.log.warning("RPM list:" + " ".join(allrpms))
        packageErrors = []
        for rpm in allrpms:
            try:
                installer.install(rpm, nodeps=limit_rpm_deps)
            except:
                packageErrors.append(rpm)
            #(out, err, rcode) = installer.run(["install", rpm])
            #print out
            #if err != None:
            #    print err
            #if rcode != 0:
            #    packageErrors.append(rpm)

        if len(packageErrors) > 0:
            self.log.error("Errors installing the following packages:")
            for p in packageErrors:
                self.log.error(p)
            if not self.options.force:
                self.log.error("Some packages are missing -stopping installation")
                self.log.error("Use --force option to continue nonetheless")
                sys.exit(1)
        else:
                self.log.warning("All packaged installed successfully")

if __name__ == '__main__':
    s = BuildLCGTarScript(usage="%prog [options] project version cmtconfig")
    sys.exit(s.run())

