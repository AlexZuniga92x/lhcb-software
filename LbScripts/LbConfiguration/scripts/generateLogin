#!/usr/bin/env python

import sys
import os

# bootstraping the location of the file
_this_file = os.path.realpath(sys.argv[0])
_scripts_dir = os.path.dirname(_this_file)
_base_dir = os.path.dirname(_scripts_dir)
_py_dir = os.path.join(_base_dir, "python")
if os.path.basename(_base_dir) != "InstallArea" :
    _ia_dir = os.path.join(os.path.dirname(_base_dir), "InstallArea" )
    _iapy_dir = os.path.join(_ia_dir, "python")
    if os.path.isdir(_iapy_dir) :
        sys.path.insert(0, _iapy_dir)
if os.path.isdir(_py_dir) :
    sys.path.insert(0, _py_dir)

from LbConfiguration.LbLogin import getLoginCacheName, getLbLoginEnv
from LbConfiguration.SetupProject import SetupProject
from LbConfiguration.Project import binary_list, binary_opt_list, getBinaryOpt
from optparse import OptionParser

def fixNative(filename):
    tobereplaced = {}
    if os.environ.has_key("HOME") and not filename.endswith(".bat") :
        tobereplaced["HOME"] = os.environ["HOME"]        
    if os.environ.has_key("VO_LHCB_SW_DIR") :
        tobereplaced["VO_LHCB_SW_DIR"] = os.environ["VO_LHCB_SW_DIR"]
    if os.environ.has_key("CMTBIN") :
        tobereplaced["CMTBIN"] = os.environ["CMTBIN"]
    if os.environ.has_key("CMTCONFIG") :
        cmtconf =  os.environ["CMTCONFIG"]
        if cmtconf in binary_list :
            tobereplaced["CMTOPT"] = getBinaryOpt(cmtconf)
        else :
            tobereplaced["CMTOPT"] = cmtconf + "-opt"
    if os.environ.has_key("AFSROOT") and filename.endswith(".bat"):
        tobereplaced["AFSROOT"] = os.environ["AFSROOT"]
    else :
        if not filename.endswith(".bat") :
            tobereplaced["AFSROOT"] = "/afs"
        else :
            tobereplaced["AFSROOT"] = "\\afs"
            
                   
    inf = open(filename, "r")
    data = inf.read()
    inf.close()
    out = open(filename, "w")
    for k in tobereplaced.keys() :
        if not filename.endswith(".bat") :
            data = data.replace(tobereplaced[k], "${%s}" % k)
        else :
            data = data.replace("/","\\")
            data = data.replace(tobereplaced[k].replace("/","\\"), "%%%s%%" % k )
            data = data.replace(":",";")
    out.write(data)
    out.close()    
    
def removeCMTCONFIG(filename):
    inf = open(filename, "r")
    data = inf.readlines()
    inf.close()
    out = open(filename, "w")
    
    for l in data :
        words = l.split()
        if len(words) > 1 :
            if words[1] == "CMTCONFIG" or words[1].startswith("CMTCONFIG=") :
                continue
        out.write(" ".join(words) + "\n")
    out.close()    

def fixPathes(filename):
    inf = open(filename, "r")
    data = inf.readlines()
    inf.close()
    out = open(filename, "w")
    pathlist = ["PATH", "LD_LIBRARY_PATH", "PYTHONPATH", "HPATH"]
    for l in data :
        words = l.split()
        written = False
        if len(words) > 1 :
            for p in pathlist :
                sp = "SAVED_%s" % p
                if words[1] == p or words[1].startswith("%s=" % p) :
                    if filename.endswith(".csh") :
                        out.write("setenv %s ${%s}\n" % (sp, p))
                        out.write(" ".join(words) + "\n")
                        out.write("setenv %s ${%s}:${%s}\n" % (p, p, sp) )
                        written = True
                    elif filename.endswith(".sh") :
                        out.write("export %s=${%s}\n" % (sp, p))
                        out.write(" ".join(words) + "\n")
                        out.write("export %s=${%s}:${%s}\n" % (p, p, sp) )
                        written = True
                    elif filename.endswith(".bat") :
                        out.write("set %s=%%%s%%\n" % (sp,p))
                        out.write(" ".join(words) + "\n")
                        out.write("set %s=%%%s%%;%%%s%%\n" % (p, p, sp) )
                        written = True
        if not written :
            out.write(" ".join(words) + "\n")
    out.close()


def generateLoginCache(mysiteroot, shell="csh", version="", targetlocation=None, building=False):
    location = None
    if targetlocation :
        location = os.path.join(targetlocation, "scripts")
    cachefilename = getLoginCacheName(shell=shell, location=location)
    
    llsargs = []
    llsargs.append("--silent")
    llsargs.append("--shell=%s" % shell)
    if mysiteroot :
        llsargs.append("--mysiteroot=%s" % mysiteroot)
    if version :
        llsargs.append("--scripts-version=%s" % version)
    env = getLbLoginEnv(llsargs)
    for var in env.keys() :
        os.environ[var] = env[var]
    
    os.environ["CMTCONFIG"] = "slc4_ia32_gcc34"
    setupprojargs = []
    setupprojargs.append("--silent")
    if not building :
        setupprojargs.append("--no-user-area")
    setupprojargs.append("--disable-CASTOR")
    setupprojargs.append("--output=%s" % cachefilename)
    setupprojargs.append("--shell=%s" % shell)
    setupprojargs.append("LbScripts")
    if version and version != "v*" :
        setupprojargs.append(version)
    setupprojargs.append("--runtime-project")            
    setupprojargs.append("LCGCMT")
    setupprojargs.append("Python")
    SetupProject().main(setupprojargs)
    fixNative(cachefilename)
    removeCMTCONFIG(cachefilename)
    fixPathes(cachefilename)
        
def generateLogin(targetlocation, script, version="", mysiteroot=None, building=False):
    knownshells = ["sh", "csh", "tcsh", "zsh", "bat"]
    shell = os.path.splitext(script)[1][1:]
    if not shell in knownshells :
        sys.exit("Unknown %s shell" % shell)
    f = open(script, "w")
    if shell == "sh" or shell == "zsh" :
        if mysiteroot :
            content = """LbLogin_tmpfile=`%s/python/LbConfiguration/LbLogin.py --shell=sh --mktemp --mysiteroot=%s --scripts-version="%s" "$@"`
""" % (targetlocation, mysiteroot, version)
        else :
            content = """LbLogin_tmpfile=`%s/python/LbConfiguration/LbLogin.py --shell=sh --mktemp --scripts-version="%s" "$@"`
""" % (targetlocation, version)
        content += """LbLoginStatus="$?"
if [ "$LbLoginStatus" = 0 ]; then
    . $LbLogin_tmpfile
fi
rm -f $LbLogin_tmpfile
unset LbLogin_tmpfile

"""
    elif shell == "csh" or shell == "tcsh" :
        if mysiteroot :
            content = """set LbLogin_tmpfile = `%s/python/LbConfiguration/LbLogin.py --shell=csh --mktemp --mysiteroot=%s --scripts-version="%s" ${*:q}`
""" % (targetlocation, mysiteroot, version)
        else :
            content = """set LbLogin_tmpfile = `%s/python/LbConfiguration/LbLogin.py --shell=csh --mktemp --scripts-version="%s" ${*:q}`
""" % (targetlocation, version)
        content += """set LbLoginStatus = $?
if ( ! $LbLoginStatus ) then
    source $LbLogin_tmpfile
endif
rm -f $LbLogin_tmpfile
unset LbLogin_tmpfile

"""
    elif shell == "bat" :
        if mysiteroot :
            content = """ @echo off
        
set LbLogin_tmpfile="%%TEMP%%\LbLogin_tmpsetup.bat"

python %s\python\LbConfiguration\LbLogin.py --shell=bat --output=%%LbLogin_tmpfile%% --mysiteroot=%s --scripts-version="%s" %%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9
""" % (targetlocation, mysiteroot, version)
        else :
            content = """@echo off
        
set LbLogin_tmpfile="%%TEMP%%\LbLogin_tmpsetup.bat"

python %s\python\LbConfiguration\LbLogin.py --shell=bat --output=%%LbLogin_tmpfile%% --scripts-version="%s" %%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9
""" % (targetlocation, version)
        content += """set LbLoginStatus=%ERRORLEVEL%

if %LbLoginStatus% EQU 0 (
    call %LbLogin_tmpfile%
)

if exist %LbLogin_tmpfile% del %LbLogin_tmpfile%
set LbLogin_tmpfile=

"""
    
    f.write(content)
    f.close()

    fixNative(script)

    generateLoginCache(mysiteroot, shell, version, targetlocation, building)

def generateLogins(version, targetlocation=None, scripts=None, mysiteroot=None, building=False):
    if not targetlocation : 
        targetlocation = os.path.realpath(_base_dir)
    if not scripts :
        scripts = []
        scripts.append(os.path.join(_scripts_dir, "LbLogin.csh"))
        scripts.append(os.path.join(_scripts_dir, "LbLogin.sh"))
        scripts.append(os.path.join(_scripts_dir, "LbLogin.bat"))
    for s in scripts :
        generateLogin(targetlocation, s, version, mysiteroot, building)


if __name__ == '__main__':

    targetlocation = None
    scripts = None
    parser = OptionParser()
    parser.set_defaults(mysiteroot=None)
    parser.add_option("-m", "--mysiteroot", dest="mysiteroot",
                  help="defines the main site location")
    parser.set_defaults(building=False)
    parser.add_option("-b", "--building", dest="building", action="store_true",
                      help="do not ignore user_release_area for development")
    

    opts, args = parser.parse_args()
    
    if len(args) < 1 :
        sys.exit("Error must have at least 1 argument (the version)")
    if len(args) > 0 :
        version = args[0]
    if len(args) > 1 :
        targetlocation = os.path.realpath(args[1])
    if len(args) > 2 :
        scripts = args[2:]
        
    generateLogins(version, targetlocation, scripts, opts.mysiteroot, opts.building)


