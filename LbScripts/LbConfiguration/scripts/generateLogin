#!/usr/bin/env python

import sys
import os

# bootstraping the location of the file
_this_file = os.path.realpath(sys.argv[0])
_scripts_dir = os.path.dirname(_this_file)
_base_dir = os.path.dirname(_scripts_dir)
_py_dir = os.path.join(_base_dir, "python")
if os.path.basename(_base_dir) != "InstallArea" :
    _ia_dir = os.path.join(os.path.dirname(_base_dir), "InstallArea" )
    _iapy_dir = os.path.join(_ia_dir, "python")
    if os.path.isdir(_iapy_dir) :
        sys.path.insert(0, _iapy_dir)
if os.path.isdir(_py_dir) :
    sys.path.insert(0, _py_dir)

from LbConfiguration.LbLogin import getLoginCacheName, getLbLoginEnv
from LbConfiguration.SetupProject import SetupProject
from LbConfiguration.Platform import binary_list, binary_opt_list, getBinaryOpt
from optparse import OptionParser

def fixNative(filename):
    tobereplaced = {}
    if os.environ.has_key("HOME") and not filename.endswith(".bat") :
        tobereplaced["HOME"] = os.environ["HOME"]        
    if os.environ.has_key("VO_LHCB_SW_DIR") :
        tobereplaced["VO_LHCB_SW_DIR"] = os.environ["VO_LHCB_SW_DIR"]
    if os.environ.has_key("CMTBIN") :
        tobereplaced["CMTBIN"] = os.environ["CMTBIN"]
    if os.environ.has_key("CMTCONFIG") :
        cmtconf =  os.environ["CMTCONFIG"]
        if cmtconf in binary_list :
            tobereplaced["CMTOPT"] = getBinaryOpt(cmtconf)
        else :
            tobereplaced["CMTOPT"] = cmtconf + "-opt"
    if os.environ.has_key("AFSROOT") and filename.endswith(".bat"):
        tobereplaced["AFSROOT"] = os.environ["AFSROOT"]

                   
    inf = open(filename, "r")
    data = inf.read()
    inf.close()
    out = open(filename, "w")
    for k in tobereplaced.keys() :
        if not filename.endswith(".bat") :
            data = data.replace(tobereplaced[k], "${%s}" % k)
        else :
            data = data.replace("/","\\")
            data = data.replace(tobereplaced[k].replace("/","\\"), "%%%s%%" % k )
            if sys.platform != "win32" :
                data = data.replace(":",";")
    out.write(data)
    out.close()    
    
def removeVariables(filename, varlist):
    inf = open(filename, "r")
    data = inf.readlines()
    inf.close()
    out = open(filename, "w")
    
    for l in data :
        words = l.split()
        tobewritten = True
        if len(words) > 1 :
            for v in varlist :
                if words[1] == v or words[1].startswith("%s=" % v) :
                    tobewritten = False
        if tobewritten :
            out.write(" ".join(words) + "\n")
    out.close()    

def fixPathes(filename):
    inf = open(filename, "r")
    data = inf.readlines()
    inf.close()
    marker = "# Pathes already fixed"
    if filename.endswith(".bat") :
        marker = "REM Pathes already fixed"
    found = False
    for l in data :
        if l.find(marker) != -1 :
            found = True
            break
    if not found :
        out = open(filename, "w")
        data.insert(0, marker + "\n")
        pathlist = ["PATH", "LD_LIBRARY_PATH", "PYTHONPATH", "HPATH"]
        for l in data :
            words = l.split()
            written = False
            if len(words) > 1 :
                for p in pathlist :
                    sp = "SAVED_%s" % p
                    if words[1] == p or words[1].startswith("%s=" % p) :
                        if filename.endswith(".csh") :
                            out.write("if ( $?%s ) then\n" % p )
                            out.write("  setenv %s ${%s}\n" % (sp, p))
                            out.write("endif\n")
                            out.write(" ".join(words) + "\n")
                            out.write("if ( $?%s ) then\n" % sp )
                            out.write("  setenv %s ${%s}:${%s}\n" % (p, p, sp) )
                            out.write("endif\n")
                            written = True
                        elif filename.endswith(".sh") :
                            out.write("if test -n \"${%s}\"; then\n" % p )
                            out.write("  export %s=${%s}\n" % (sp, p))
                            out.write("fi\n")
                            out.write(" ".join(words) + "\n")
                            out.write("if test -n \"${%s}\"; then\n" % sp )
                            out.write("  export %s=${%s}:${%s}\n" % (p, p, sp) )
                            out.write("fi\n")
                            written = True
                        elif filename.endswith(".bat") :
                            out.write("IF DEFINED %s (\n" % p)                        
                            out.write("  set %s=%%%s%%\n" % (sp,p))
                            out.write(")\n")                        
                            out.write(" ".join(words) + "\n")
                            out.write("IF DEFINED %s (\n" % sp)                        
                            out.write("  set %s=%%%s%%;%%%s%%\n" % (p, p, sp) )
                            out.write(")\n")                        
                            written = True
            if not written :
                out.write(" ".join(words) + "\n")
        out.close()

def fixPython(filename):
    inf = open(filename, "r")
    data = inf.readlines()
    inf.close()
    out = open(filename, "w")
    pathlist = ["PATH"]
    for l in data :
        words = l.split()
        written = False
        if len(words) > 1 :
            for p in pathlist :
                tobefixed = None
                if words[1] == p:
                    if len(words) > 2 :
                        tobefixed = words[2]
                elif words[1].startswith("%s=" % p) :
                    tobefixed = words[1].split("=")[1]
                if tobefixed :
                    if filename.endswith(".csh") :
                        components = tobefixed.split(":") 
                        newcmp = []
                        for c in components :
                            if c.find("Python") != -1 and c.endswith("/bin") :
                                newcmp.append(c.replace("/bin", "${PYTHON_BINOFFSET}" ))
                            else :
                                newcmp.append(c)
                        words[2] = ":".join(newcmp) 
                        out.write(" ".join(words) + "\n")
                        written = True
                    elif filename.endswith(".sh") :
                        components = tobefixed.split(":")
                        newcmp = [] 
                        for c in components :
                            if c.find("Python") != -1 and c.endswith("/bin") :
                                newcmp.append(c.replace("/bin", "${PYTHON_BINOFFSET}" ))
                            else :
                                newcmp.append(c)
                        words[1] = "%s=%s" % (p, ":".join(newcmp)) 
                        out.write(" ".join(words) + "\n")
                        written = True
                    elif filename.endswith(".bat") :
                        components = tobefixed.split(";") 
                        newcmp = [] 
                        for c in components :
                            if c.find("Python") != -1 and c.endswith("\\bin") :
                                newcmp.append(c.replace("\\bin", "%PYTHON_BINOFFSET%" )) 
                            else :
                                newcmp.append(c) 
                        words[1] = "%s=%s" % (p, ";".join(newcmp)) 
                        out.write(" ".join(words) + "\n")
                        written = True
        if not written :
            out.write(" ".join(words) + "\n")
    out.close()

def generateLoginCache(mysiteroot, shell="csh", version="", targetlocation=None, building=False, withoutpython=False):
    location = None
    if targetlocation :
        location = os.path.join(targetlocation, "scripts")
    cachefilename = getLoginCacheName(shell=shell, location=location)
    if os.path.exists(cachefilename) :
        os.remove(cachefilename)
    
    os.environ["CMTCONFIG"] = "slc4_ia32_gcc34"
    llsargs = []
    llsargs.append("--silent")
    llsargs.append("--shell=%s" % shell)
    if mysiteroot :
        llsargs.append("--mysiteroot=%s" % mysiteroot)
    if version :
        llsargs.append("--scripts-version=%s" % version)
    env = getLbLoginEnv(llsargs)
    for var in env.keys() :
        os.environ[var] = env[var]
    
    os.environ["CMTCONFIG"] = "slc4_ia32_gcc34"
    setupprojargs = []
    setupprojargs.append("--silent")
    if not building :
        setupprojargs.append("--no-user-area")
    setupprojargs.append("--disable-CASTOR")
    setupprojargs.append("--output=%s" % cachefilename)
    setupprojargs.append("--shell=%s" % shell)
    setupprojargs.append("LbScripts")
    if version and version != "v*" :
        setupprojargs.append(version)
    if not withoutpython :
        setupprojargs.append("--runtime-project")            
        setupprojargs.append("LCGCMT")
        setupprojargs.append("Python")
    SetupProject().main(setupprojargs)
    if os.path.exists(cachefilename) :
        fixNative(cachefilename)
        vartoremove = ["CMTCONFIG", "ROOTSYS", "SITEROOT"]
        if shell == "bat" :
            vartoremove += "lib"
            vartoremove += "LIB"
            vartoremove += "INCLUDE"
            vartoremove += "include"
        removeVariables(cachefilename, vartoremove )
        fixPathes(cachefilename)
        fixPython(cachefilename)
        
def generateLogin(targetlocation, script, version="", mysiteroot=None, building=False, 
                  withoutpython=False, withoutcache=False):
    # @todo: use template system instead of hardcoding the files
    knownshells = ["sh", "csh", "tcsh", "zsh", "bat"]
    shell = os.path.splitext(script)[1][1:]
    if not shell in knownshells :
        sys.exit("Unknown %s shell" % shell)
    f = open(script, "w")
    if shell == "sh" or shell == "zsh" :
        if mysiteroot :
            if withoutcache :
                content = """LbLogin_tmpfile=`%s/python/LbConfiguration/LbLogin.py --shell=sh --mktemp --mysiteroot=%s --scripts-version="%s" --no-cache "$@"`
""" % (targetlocation, mysiteroot, version)
            else :
                content = """LbLogin_tmpfile=`%s/python/LbConfiguration/LbLogin.py --shell=sh --mktemp --mysiteroot=%s --scripts-version="%s" "$@"`
""" % (targetlocation, mysiteroot, version)
        else :
            if withoutcache :
                content = """LbLogin_tmpfile=`%s/python/LbConfiguration/LbLogin.py --shell=sh --mktemp --scripts-version="%s" --no-cache "$@"`
""" % (targetlocation, version)
            else :
                content = """LbLogin_tmpfile=`%s/python/LbConfiguration/LbLogin.py --shell=sh --mktemp --scripts-version="%s" "$@"`
""" % (targetlocation, version)
        content += """LbLoginStatus="$?"
if [ "$LbLoginStatus" = 0 ]; then
    . $LbLogin_tmpfile
fi
rm -f $LbLogin_tmpfile
unset LbLogin_tmpfile

"""
    elif shell == "csh" or shell == "tcsh" :
        if mysiteroot :
            if withoutcache :
                content = """set LbLogin_tmpfile = `%s/python/LbConfiguration/LbLogin.py --shell=csh --mktemp --mysiteroot=%s --scripts-version="%s" --no-cache ${*:q}`
""" % (targetlocation, mysiteroot, version)
            else :
                content = """set LbLogin_tmpfile = `%s/python/LbConfiguration/LbLogin.py --shell=csh --mktemp --mysiteroot=%s --scripts-version="%s" ${*:q}`
""" % (targetlocation, mysiteroot, version)
        else :
            if withoutcache :
                content = """set LbLogin_tmpfile = `%s/python/LbConfiguration/LbLogin.py --shell=csh --mktemp --scripts-version="%s" --no-cache ${*:q}`
""" % (targetlocation, version)
            else :
                content = """set LbLogin_tmpfile = `%s/python/LbConfiguration/LbLogin.py --shell=csh --mktemp --scripts-version="%s" ${*:q}`
""" % (targetlocation, version)

        content += """set LbLoginStatus = $?
if ( ! $LbLoginStatus ) then
    source $LbLogin_tmpfile
endif
rm -f $LbLogin_tmpfile
unset LbLogin_tmpfile

"""
    elif shell == "bat" :
        if mysiteroot :
            if withoutcache :
                content = """ @echo off
        
set LbLogin_tmpfile="%%TEMP%%\LbLogin_tmpsetup.bat"

python %s\python\LbConfiguration\LbLogin.py --shell=bat --output=%%LbLogin_tmpfile%% --mysiteroot=%s --scripts-version="%s" --no-cache %%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9
""" % (targetlocation, mysiteroot, version)
            else :
                content = """ @echo off
        
set LbLogin_tmpfile="%%TEMP%%\LbLogin_tmpsetup.bat"

python %s\python\LbConfiguration\LbLogin.py --shell=bat --output=%%LbLogin_tmpfile%% --mysiteroot=%s --scripts-version="%s" %%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9
""" % (targetlocation, mysiteroot, version)                
        else :
            if withoutcache :
                content = """@echo off
        
set LbLogin_tmpfile="%%TEMP%%\LbLogin_tmpsetup.bat"

python %s\python\LbConfiguration\LbLogin.py --shell=bat --output=%%LbLogin_tmpfile%% --scripts-version="%s" --no-cache %%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9
""" % (targetlocation, version)
            else :
                content = """@echo off
        
set LbLogin_tmpfile="%%TEMP%%\LbLogin_tmpsetup.bat"

python %s\python\LbConfiguration\LbLogin.py --shell=bat --output=%%LbLogin_tmpfile%% --scripts-version="%s" %%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9
""" % (targetlocation, version)                
        content += """set LbLoginStatus=%ERRORLEVEL%

if %LbLoginStatus% EQU 0 (
    call %LbLogin_tmpfile%
)

if exist %LbLogin_tmpfile% del %LbLogin_tmpfile%
set LbLogin_tmpfile=

"""
    
    f.write(content)
    f.close()

    fixNative(script)

    if not withoutcache :
        generateLoginCache(mysiteroot, shell, version, targetlocation, building, withoutpython)

def generateGroupLogin(targetlocation, shell, version="", mysiteroot=None, building=False):
    script = os.path.join(_scripts_dir, "group_login.%s" % shell)
    f = open(script, "w")
    content = ""
    if shell == "sh" :
        content += """
if [ ! -e ${HOME}/.oldLHCBLoginscript ]; then
  lbvers=prod
  if [ -e ${HOME}/.devLHCBLoginscript ]; then
    lbvers=dev
  fi
  if [ -n "$LB_BANNER" ]; then
    cat ${LB_BANNER}
    rm -f ${LB_BANNER}
    unset LB_BANNER
  else
    . %s/scripts/LbLogin.sh --quiet
  fi
  export LBLOGIN_DONE=yes
  unset lbvers
fi

""" % targetlocation
    elif shell == "csh" :
        content += """
if ( ! -e ${HOME}/.oldLHCBLoginscript ) then
  set lbvers=prod
  if ( -e ${HOME}/.devLHCBLoginscript ) then
    set lbvers=dev
  endif
  if ( $?LB_BANNER ) then
    cat ${LB_BANNER}
    rm -f ${LB_BANNER}
    unsetenv LB_BANNER
  else
    source %s/scripts/LbLogin.csh --quiet
  endif
  setenv LBLOGIN_DONE yes
  unset lbvers
endif 

""" % targetlocation
    elif shell == "bat" :
        content += "call %s\scripts\LbLogin.bat --quiet" % targetlocation
        
    f.write(content)
    f.close()
    
    
def generateGroupShell(targetlocation, shell, version="", mysiteroot=None, building=False):
    script = os.path.join(_scripts_dir,"group_shell.%s" % shell)
    f = open(script, "w")
    content = ""
    if shell == "sh" :
        content += """
if [ ! -e ${HOME}/.oldLHCBLoginscript ]; then
  lbvers=prod
  if [ -e ${HOME}/.devLHCBLoginscript ]; then
    lbvers=dev
  fi
  if [ -n "$LBLOGIN_DONE" ]; then
    . %s/InstallArea/scripts/LbLogin.sh --silent >& /dev/null
  else
    export LB_BANNER=`mktemp`
    . %s/scripts/LbLogin.sh --quiet >> ${LB_BANNER}
  fi
  unset lbvers
fi 
             
""" % (targetlocation, targetlocation)
    
    elif shell == "csh" :
        content += """
if ( ! -e ${HOME}/.oldLHCBLoginscript ) then
  set lbvers=prod
  if ( -e ${HOME}/.devLHCBLoginscript ) then
    set lbvers=dev
  endif
  if ( $?LBLOGIN_DONE ) then
    source %s/scripts/LbLogin.csh --silent >& /dev/null
  else
    setenv LB_BANNER `mktemp`
    source %s/scripts/LbLogin.csh --quiet >! ${LB_BANNER}
  endif
  unset lbvers
endif 

""" % (targetlocation, targetlocation )
    elif shell == "bat" :
        content += "call %s\scripts\LbLogin.bat --silent" % targetlocation
    f.write(content)
    f.close()

def generateGroupWrappers(targetlocation, shell, version="", mysiteroot=None, building=False):
    generateGroupLogin(targetlocation, shell, version, mysiteroot, building)
    generateGroupShell(targetlocation, shell, version, mysiteroot, building)

def generateMainWrapper(targetlocation, shell, version="", mysiteroot=None, building=False):
    script = os.path.join(_scripts_dir, "LHCb.%s" % shell)
    f = open(script, "w")
    content = ""
    if shell == "sh" :
        content += """
if [[ -e ${HOME}/.useLHCBLoginscript ]]; then
   . %s/scripts/group_shell.sh
   if [[ -o login || -n "$LB_BANNER" ]] ; then
      . %s/scripts/group_login.sh
   fi
fi

""" % (targetlocation, targetlocation)
    elif shell == "csh" :
        content += """
if (  -e ${HOME}/.useLHCBLoginscript ) then
   source %s/scripts/group_shell.csh
   if ($?loginsh  || $?LB_BANNER) then
      source %s/scripts/group_login.csh
   endif
endif     
        
""" % (targetlocation, targetlocation)
    elif shell == "bat" :
        content += "call %s\scripts\group_login.bat" % targetlocation
    f.write(content)
    f.close()


def generateLogins(version, targetlocation=None, scripts=None, 
                   mysiteroot=None, building=False, 
                   withoutpython=False, withoutcache=False, 
                   withoutgwrap=False, withoutmwrap=False):
    shells = ["csh", "sh", "bat"]
    if not targetlocation : 
        targetlocation = os.path.realpath(_base_dir)
    if not scripts :
        scripts = []
        for u in shells :
            scripts.append(os.path.join(_scripts_dir, "LbLogin.%s" % u ))
    for s in scripts :
        generateLogin(targetlocation, s, version, mysiteroot, building, withoutpython, withoutcache)
    if not withoutgwrap :
        for u in shells :
            generateGroupWrappers(targetlocation, u , version, mysiteroot, building)
    if not withoutmwrap :
        for u in shells :
            generateMainWrapper(targetlocation, u, version, mysiteroot, building)


if __name__ == '__main__':

    targetlocation = None
    scripts = None
    parser = OptionParser()
    parser.set_defaults(mysiteroot=None)
    parser.add_option("-m", "--mysiteroot", dest="mysiteroot",
                  help="defines the main site location")
    parser.set_defaults(building=False)
    parser.add_option("-b", "--building", dest="building", action="store_true",
                      help="do not ignore user_release_area for development")
    parser.set_defaults(withoutpython=False)
    parser.add_option("--without-python", dest="withoutpython", action="store_true",
                      help="prevents the setup of python from LCGCMT")
    
    parser.set_defaults(withoutcache=False)
    parser.add_option("--no-cache", dest="withoutcache", action="store_true",
                      help="prevents the generation of the cache")
    
    parser.set_defaults(withoutgroupwrapper=False)
    parser.add_option("--no-group-wrapper", dest="withoutgroupwrapper", action="store_true",
                      help="prevents the generation of the group wrapper scripts")


    parser.set_defaults(withoutmainwrapper=False)
    parser.add_option("--no-main-wrapper", dest="withoutmainwrapper", action="store_true",
                      help="prevents the generation of the main wrapper script")

    opts, args = parser.parse_args()

    if opts.mysiteroot is not None:
        cmtprojpathlist = []
        if os.environ.has_key("LHCBPROJECTPATH") :
            cmtprojpathlist = os.environ["LHCBPROJECTPATH"].split(os.pathsep)
        cmtprojpathlist.insert(0, os.path.join(opts.mysiteroot, "lcg", "external"))
        cmtprojpathlist.insert(0, os.path.join(opts.mysiteroot, "lhcb"))
        os.environ["LHCBPROJECTPATH"] = os.pathsep.join(cmtprojpathlist)
    
    if len(args) < 1 :
        sys.exit("Error must have at least 1 argument (the version)")
    if len(args) > 0 :
        version = args[0]
    if len(args) > 1 :
        targetlocation = os.path.realpath(args[1])
    if len(args) > 2 :
        scripts = args[2:]
        
    generateLogins(version, targetlocation, scripts, opts.mysiteroot, opts.building,
                   opts.withoutpython, opts.withoutcache,
                   opts.withoutgroupwrapper, opts.withoutmainwrapper)


