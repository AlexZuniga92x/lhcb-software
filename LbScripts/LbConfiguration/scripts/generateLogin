#!/usr/bin/env python

import sys
import os

# bootstraping the location of the file
_this_file = os.path.abspath(sys.argv[0])
_scripts_dir = os.path.dirname(_this_file)
_base_dir = os.path.dirname(_scripts_dir) # LbConfiguration or InstallArea
_py_dir = os.path.join(_base_dir, "python")
_prj_dir = os.path.dirname(_base_dir)
_ia_dir = os.path.join(_prj_dir, "InstallArea" )
_iapy_dir = os.path.join(_ia_dir, "python")
_lbconf_dir = os.path.join(_prj_dir, "LbConfiguration")

if os.path.basename(_base_dir) != "InstallArea" :
    if os.path.isdir(_iapy_dir) :
        sys.path.insert(0, _iapy_dir)

if os.path.isdir(_py_dir) :
    sys.path.insert(0, _py_dir)

from LbConfiguration.LbLogin import getLoginCacheName, getLbLoginEnv
from LbConfiguration.SetupProject import SetupProject
from LbConfiguration.Platform import binary_list, binary_opt_list, getBinaryOpt
from LbConfiguration.Tools import genProjectSetup
from LbUtils.Path import multiPathJoin, cleanPath
from optparse import OptionParser

import logging


def offSetString(data, offset=0):
    indent = 2
    if offset :
        data = data.replace("\n", "\n" + " "*offset*indent)
    return data

def fixNativeStringWithVar(data, varname, varcont=None, dotbat=False):
    if not varcont :
        varcont = os.environ[varname]
    if not dotbat :
        data = data.replace(varcont, "${%s}" % varname)
    else :
        data = data.replace("/","\\")
        data = data.replace(varcont.replace("/","\\"), "%%%s%%" % varname )
        if sys.platform != "win32" :
            data = data.replace(":",";")
    return data

def fixNativeString(data, dotbat=False):
    tobereplaced = {}
    if os.environ.has_key("HOME") and not dotbat :
        os.environ["HOME"] = cleanPath(os.environ["HOME"])
        tobereplaced["HOME"] = os.environ["HOME"]
    if os.environ.has_key("VO_LHCB_SW_DIR") :
        os.environ["VO_LHCB_SW_DIR"] = cleanPath(os.environ["VO_LHCB_SW_DIR"])
        tobereplaced["VO_LHCB_SW_DIR"] = os.environ["VO_LHCB_SW_DIR"]
    if os.environ.has_key("CMTBIN") :
        tobereplaced["CMTBIN"] = os.environ["CMTBIN"]
    if os.environ.has_key("CMTVERS") :
        tobereplaced["CMTVERS"] = os.environ["CMTVERS"]
    if os.environ.has_key("CMTCONFIG") :
        cmtconf =  os.environ["CMTCONFIG"]
        if cmtconf in binary_list :
            tobereplaced["CMTOPT"] = getBinaryOpt(cmtconf)
        else :
            tobereplaced["CMTOPT"] = cmtconf + "-opt"
    if os.environ.has_key("AFSROOT") and dotbat:
        os.environ["AFSROOT"] = cleanPath(os.environ["AFSROOT"])
        tobereplaced["AFSROOT"] = os.environ["AFSROOT"]

    for k in tobereplaced.keys() :
        data = fixNativeStringWithVar(data, k, tobereplaced[k], dotbat)
    return data


def getNativeString(data, varlist, dotbat=False):
    native_data = data
    for v in varlist :
        if os.environ.has_key(v) and native_data :
            native_data = fixNativeStringWithVar(native_data, v, varcont=None, dotbat=dotbat)

    return native_data

def getNativeWrap(data, shell, offset=0):
    content = data
    native_varlist = ["VO_LHCB_SW_DIR", "HOME", "AFSROOT"]
    dotbat = False
    if shell == "bat" :
        dotbat = True
    native_data = getNativeString(data, native_varlist, dotbat)
    if data != native_data :
        content = ""
        vartotest = ""
        for v in native_varlist :
            if native_data.find(v) != -1 :
                vartotest = v
                break
        if shell == "sh" :
            content += """
if [[ -n "$%s" ]]; then""" % vartotest
            content += offSetString(native_data, offset=1)
            content += """
else"""
            content += offSetString(data, offset=1)
            content += """
fi"""
        elif shell == "csh" :
            content += """
if ( $?%s ) then""" % vartotest
            content += offSetString(native_data, offset=1)
            content += """
else"""
            content += offSetString(data, offset=1)
            content += """
endif"""

        elif shell == "bat" :
            content += """
IF DEFINED %s (""" % vartotest
            content += offSetString(native_data, offset=1)
            content += """
) ELSE ("""
            content += offSetString(data, offset=1)
            content += """
)"""


    content = offSetString(content, offset)

    return content

def ShellFileNativeSnippet(base, shell, targetlocation, args = "", postargs="", prodlocation=None, offset=0):

    data = ShellFileSnippet(base, shell,
                            targetlocation, args, postargs,
                            prodlocation, offset=0)
    wrapped_data = getNativeWrap(data, shell, offset=offset)
    return wrapped_data


def ShellFileSnippet(base, shell, targetlocation, args = "", postargs="", prodlocation=None, offset=0):
    content = ""
    if shell == "sh" :
        if prodlocation :
            content += """
if [[ -e %s/scripts/%s.sh ]]; then
  . %s/scripts/%s.sh %s "$@" %s
else
  if [[ -e %s/scripts/%s.sh ]]; then
    . %s/scripts/%s.sh %s "$@" %s
  fi
fi""" % (prodlocation, base,
         prodlocation, base, args, postargs,
         targetlocation, base,
         targetlocation, base, args, postargs)
        else :
            content += """
if [[ -e %s/scripts/%s.sh ]]; then
  . %s/scripts/%s.sh %s "$@" %s
fi""" % (targetlocation, base,
         targetlocation, base, args, postargs)
    elif shell == "csh" :
        if prodlocation :
            content += """
if ( -e %s/scripts/%s.csh ) then
  source %s/scripts/%s.csh %s ${*:q} %s
else
  if ( -e %s/scripts/%s.csh ) then
    source %s/scripts/%s.csh %s ${*:q} %s
  endif
endif""" % (prodlocation, base,
            prodlocation, base, args, postargs,
            targetlocation, base,
            targetlocation, base, args, postargs)
        else :
            content += """
if ( -e %s/scripts/%s.csh ) then
  source %s/scripts/%s.csh %s ${*:q} %s
endif""" % (targetlocation, base,
            targetlocation, base, args, postargs)

    elif shell == "bat" :
        if prodlocation :
            content += """
IF EXIST %s\scripts\%s.bat (
  call %s\scripts\%s.bat %s %%* %s
) else (
  IF EXIST %s\scripts\%s.bat (
    call %s\scripts\%s.bat %s %%* %s
  )
) """ % (prodlocation, base,
         prodlocation, base, args, postargs,
         targetlocation, base,
         targetlocation, base, args, postargs)
        else :
            content += """
IF EXIST %s\scripts\%s.bat (
  call %s\scripts\%s.bat %s %%* %s
)""" % (targetlocation, base,
         targetlocation, base, args, postargs)


    content = offSetString(content, offset)

    return content

def fixNative(filename):

    inf = open(filename, "r")
    data = inf.read()
    inf.close()
    out = open(filename, "w")
    dotbat = False
    if filename.endswith(".bat") :
        dotbat = True
    out.write(fixNativeString(data, dotbat))
    out.close()

def removeVariables(filename, varlist):
    inf = open(filename, "r")
    data = inf.readlines()
    inf.close()
    out = open(filename, "w")

    for l in data :
        words = l.split()
        tobewritten = True
        if len(words) > 1 :
            for v in varlist :
                if words[1] == v or words[1].startswith("%s=" % v) :
                    tobewritten = False
        if tobewritten :
            out.write(" ".join(words) + "\n")
    out.close()

def fixPathes(filename):
    inf = open(filename, "r")
    data = inf.readlines()
    inf.close()
    marker = "# Pathes already fixed"
    if filename.endswith(".bat") :
        marker = "REM Pathes already fixed"
    found = False
    for l in data :
        if l.find(marker) != -1 :
            found = True
            break
    if not found :
        out = open(filename, "w")
        data.insert(0, marker + "\n")
        pathlist = ["PATH", "LD_LIBRARY_PATH", "PYTHONPATH", "HPATH", "MANPATH"]
        for l in data :
            words = l.split()
            written = False
            if len(words) > 1 :
                for p in pathlist :
                    sp = "SAVED_%s" % p
                    if words[1] == p or words[1].startswith("%s=" % p) :
                        if filename.endswith(".csh") :
                            out.write("if ( $?%s ) then\n" % p )
                            out.write("  setenv %s ${%s}\n" % (sp, p))
                            out.write("endif\n")
                            out.write(" ".join(words) + "\n")
                            out.write("if ( $?%s ) then\n" % sp )
                            out.write("  setenv %s ${%s}:${%s}\n" % (p, p, sp) )
                            out.write("endif\n")
                            written = True
                        elif filename.endswith(".sh") :
                            out.write("if test -n \"${%s}\"; then\n" % p )
                            out.write("  export %s=${%s}\n" % (sp, p))
                            out.write("fi\n")
                            out.write(" ".join(words) + "\n")
                            out.write("if test -n \"${%s}\"; then\n" % sp )
                            out.write("  export %s=${%s}:${%s}\n" % (p, p, sp) )
                            out.write("fi\n")
                            written = True
                        elif filename.endswith(".bat") :
                            out.write("IF DEFINED %s (\n" % p)
                            out.write("  set %s=%%%s%%\n" % (sp,p))
                            out.write(")\n")
                            out.write(" ".join(words) + "\n")
                            out.write("IF DEFINED %s (\n" % sp)
                            out.write("  set %s=%%%s%%;%%%s%%\n" % (p, p, sp) )
                            out.write(")\n")
                            written = True
            if not written :
                out.write(" ".join(words) + "\n")
        out.close()

def fixPython(filename):
    inf = open(filename, "r")
    data = inf.readlines()
    inf.close()
    out = open(filename, "w")
    pathlist = ["PATH"]
    for l in data :
        words = l.split()
        written = False
        if len(words) > 1 :
            for p in pathlist :
                tobefixed = None
                if words[1] == p:
                    if len(words) > 2 :
                        tobefixed = words[2]
                elif words[1].startswith("%s=" % p) :
                    tobefixed = words[1].split("=")[1]
                if tobefixed :
                    if filename.endswith(".csh") :
                        components = tobefixed.split(":")
                        newcmp = []
                        for c in components :
                            if c.find("Python") != -1 and c.endswith("/bin") :
                                newcmp.append(c.replace("/bin", "${PYTHON_BINOFFSET}" ))
                            else :
                                newcmp.append(c)
                        words[2] = ":".join(newcmp)
                        out.write(" ".join(words) + "\n")
                        written = True
                    elif filename.endswith(".sh") :
                        components = tobefixed.split(":")
                        newcmp = []
                        for c in components :
                            if c.find("Python") != -1 and c.endswith("/bin") :
                                newcmp.append(c.replace("/bin", "${PYTHON_BINOFFSET}" ))
                            else :
                                newcmp.append(c)
                        words[1] = "%s=%s" % (p, ":".join(newcmp))
                        out.write(" ".join(words) + "\n")
                        written = True
                    elif filename.endswith(".bat") :
                        components = tobefixed.split(";")
                        newcmp = []
                        for c in components :
                            if c.find("Python") != -1 and c.endswith("\\bin") :
                                newcmp.append(c.replace("\\bin", "%PYTHON_BINOFFSET%" ))
                            else :
                                newcmp.append(c)
                        words[1] = "%s=%s" % (p, ";".join(newcmp))
                        out.write(" ".join(words) + "\n")
                        written = True
        if not written :
            out.write(" ".join(words) + "\n")
    out.close()

def generateLoginCache(mysiteroot, shell="csh", version="", targetlocation=None, building=False, withoutpython=False):
    location = None
    if targetlocation :
        location = os.path.join(targetlocation, "scripts")
    cachefilename = getLoginCacheName(shell=shell, location=location)
    if os.path.exists(cachefilename) :
        os.remove(cachefilename)
    pardir = os.path.dirname(cachefilename)
    if not os.path.exists(pardir) :
        os.makedirs(pardir)

    if os.environ.has_key("CMTEXTRATAGS") :
        del os.environ["CMTEXTRATAGS"]

    os.environ["CMTCONFIG"] = "x86_64-slc5-gcc43-opt"
    llsargs = []
    llsargs.append("--silent")
    llsargs.append("--shell=%s" % shell)
    if mysiteroot :
        llsargs.append("--mysiteroot=%s" % mysiteroot)
    if version :
        llsargs.append("--scripts-version=%s" % version)
    env = getLbLoginEnv(llsargs)
    for var in env.keys() :
        os.environ[var] = env[var]

    setupprojargs = []
    setupprojargs.append("--silent")
    setupprojargs.append("--ignore-not-ready")
    if not building :
        setupprojargs.append("--no-user-area")
    setupprojargs.append("--disable-CASTOR")
    setupprojargs.append("--no-touch-logfile")
    if not withoutpython :
        setupprojargs.append("--runtime-project")
        setupprojargs.append("LCGCMT")
        setupprojargs.append("Python")
    genProjectSetup(cachefilename, "LbScripts", version, cmtconfig="slc4_ia32_gcc34",
                    shell=shell, setup_project_extra_args=setupprojargs,
                    strip_path=True)

    if os.path.exists(cachefilename) :
        fixNative(cachefilename)
        vartoremove = ["CMTCONFIG", "ROOTSYS", "SITEROOT"]
        if shell == "bat" :
            vartoremove += "lib"
            vartoremove += "LIB"
            vartoremove += "INCLUDE"
            vartoremove += "include"
        removeVariables(cachefilename, vartoremove )
        fixPathes(cachefilename)
        fixPython(cachefilename)

def generateLogin(targetlocation, script, version="", mysiteroot=None, building=False,
                  withoutpython=False, withoutcache=False):
    log = logging.getLogger()
    # @todo: use template system instead of hardcoding the files
    knownshells = ["sh", "csh", "tcsh", "zsh", "bat"]
    shell = os.path.splitext(script)[1][1:]
    if not shell in knownshells :
        sys.exit("Unknown %s shell" % shell)
    log.debug("Generating file %s" % script)
    f = open(script, "w")
    if shell == "sh" or shell == "zsh" :
        if mysiteroot :
            if withoutcache :
                content = """
LbLogin_tmpfile=`%s/python/LbConfiguration/LbLogin.py --shell=sh --mktemp --mysiteroot=%s --scripts-version="%s" --no-cache "$@"`""" % (targetlocation, mysiteroot, version)
            else :
                content = """
LbLogin_tmpfile=`%s/python/LbConfiguration/LbLogin.py --shell=sh --mktemp --mysiteroot=%s --scripts-version="%s" "$@"`""" % (targetlocation, mysiteroot, version)
        else :
            if withoutcache :
                content = """
LbLogin_tmpfile=`%s/python/LbConfiguration/LbLogin.py --shell=sh --mktemp --scripts-version="%s" --no-cache "$@"`""" % (targetlocation, version)
            else :
                content = """
LbLogin_tmpfile=`%s/python/LbConfiguration/LbLogin.py --shell=sh --mktemp --scripts-version="%s" "$@"`""" % (targetlocation, version)
        content = getNativeWrap(content, shell)
        content += """
LbLoginStatus="$?"
if [[ "$LbLoginStatus" = 0 && -n "$LbLogin_tmpfile" ]]; then
    . $LbLogin_tmpfile
fi
rm -f $LbLogin_tmpfile
unset LbLogin_tmpfile

"""
        content += getConfigurationFragment(shell, "login_postscript")

        content += """

$(exit $LbLoginStatus)

"""

    elif shell == "csh" or shell == "tcsh" :
        if mysiteroot :
            if withoutcache :
                content = """
set LbLogin_tmpfile = `%s/python/LbConfiguration/LbLogin.py --shell=csh --mktemp --mysiteroot=%s --scripts-version="%s" --no-cache ${*:q}`""" % (targetlocation, mysiteroot, version)
            else :
                content = """
set LbLogin_tmpfile = `%s/python/LbConfiguration/LbLogin.py --shell=csh --mktemp --mysiteroot=%s --scripts-version="%s" ${*:q}`""" % (targetlocation, mysiteroot, version)
        else :
            if withoutcache :
                content = """
set LbLogin_tmpfile = `%s/python/LbConfiguration/LbLogin.py --shell=csh --mktemp --scripts-version="%s" --no-cache ${*:q}`""" % (targetlocation, version)
            else :
                content = """
set LbLogin_tmpfile = `%s/python/LbConfiguration/LbLogin.py --shell=csh --mktemp --scripts-version="%s" ${*:q}`""" % (targetlocation, version)
        content = getNativeWrap(content, shell)
        content += """
set LbLoginStatus = $?
if ( ! $LbLoginStatus && "$LbLogin_tmpfile" != "" ) then
    source $LbLogin_tmpfile
endif
rm -f $LbLogin_tmpfile
unset LbLogin_tmpfile

"""
        content += getConfigurationFragment(shell, "login_postscript")

        content += """

exit $LbLoginStatus

"""

    elif shell == "bat" :
        prefix = """ @echo off

set LbLogin_tmpfile="%TEMP%\LbLogin_tmpsetup.bat"
"""
        if mysiteroot :
            if withoutcache :
                content = """
python %s\python\LbConfiguration\LbLogin.py --shell=bat --output=%%LbLogin_tmpfile%% --mysiteroot=%s --scripts-version="%s" --no-cache %%*""" % (targetlocation, mysiteroot, version)
            else :
                content = """
python %s\python\LbConfiguration\LbLogin.py --shell=bat --output=%%LbLogin_tmpfile%% --mysiteroot=%s --scripts-version="%s" %%*""" % (targetlocation, mysiteroot, version)
        else :
            if withoutcache :
                content = """
python %s\python\LbConfiguration\LbLogin.py --shell=bat --output=%%LbLogin_tmpfile%% --scripts-version="%s" --no-cache %%*""" % (targetlocation, version)
            else :
                content = """
python %s\python\LbConfiguration\LbLogin.py --shell=bat --output=%%LbLogin_tmpfile%% --scripts-version="%s" %%*""" % (targetlocation, version)
        content = getNativeWrap(content, shell)
        content = prefix + content
        content += """
set LbLoginStatus=%ERRORLEVEL%

if %LbLoginStatus% EQU 0 (
    call %LbLogin_tmpfile%
)

if exist %LbLogin_tmpfile% del %LbLogin_tmpfile%
set LbLogin_tmpfile=

"""

        content += getConfigurationFragment(shell, "login_postscript")


    f.write(content)
    f.close()

#    fixNative(script)

    if not withoutcache :
        generateLoginCache(mysiteroot, shell, version, targetlocation, building, withoutpython)

def getProdLink(targetlocation):
    prodlink = None
    parent = os.path.dirname(targetlocation)
    gparent = os.path.dirname(parent)
    proddir = os.path.join(gparent, "prod")
    if os.path.basename(gparent) == "LBSCRIPTS":
        prodlink = proddir
    return prodlink

def getConfigurationFragment(shell, type="configuration"):
    content = ""
    conf_dir = None
    if os.path.exists(_lbconf_dir) :
        conf_dir = _lbconf_dir
    elif "LBCONFIGURATIONROOT" in os.environ.keys() :
        conf_dir =  os.environ["LBCONFIGURATIONROOT"]

    if conf_dir :
        fragf = os.path.join(conf_dir, "data", "%s.%s" % (type, shell))
        if os.path.exists(fragf) :
            content = open(fragf).read()

    return content


def generateGroupLogin(targetlocation, shell, version="", mysiteroot=None, building=False):
    log = logging.getLogger()
    if version and mysiteroot :
        scrdir = os.path.join(mysiteroot.split(os.pathsep)[0],
                              "lhcb", "LBSCRIPTS", "LBSCRIPTS_%s" % version, "InstallArea", "scripts")
    else :
        scrdir = _scripts_dir
    script = os.path.join(scrdir, "group_login.%s" % shell)
    prodlink = getProdLink(targetlocation)
    prodlocation = None
    if prodlink :
        prodlocation = os.path.join(os.path.dirname(prodlink), "${lbvers2}", "InstallArea")
    log.debug("Generating file %s" % script)
    f = open(script, "w")
    if shell == "sh" :
        content = """#!/bin/sh
if [[ ! -e ${HOME}/.noLHCBLoginscript ]]; then
"""
        content += getConfigurationFragment(shell, "configuration")
        content += """
  lbvers2=prod
  if [[ -e ${HOME}/.devLHCBLoginscript ]]; then
    lbvers2=dev
  fi
  if [[ -n "$LB_BANNER" ]]; then
    cat ${LB_BANNER}
    rm -f ${LB_BANNER}
    unset LB_BANNER
  else"""
        content += ShellFileNativeSnippet("LbLogin", shell,
                                    targetlocation=targetlocation,
                                    args="--quiet",
                                    prodlocation=prodlocation, offset=2)
        content += """
  fi
  export LBLOGIN_DONE=yes
  unset lbvers2

"""
        content += getConfigurationFragment(shell, "postscript")
        content += """
fi

"""
    elif shell == "csh" :
        content = """#!/bin/csh
if ( ! -e ${HOME}/.noLHCBLoginscript ) then
"""
        content += getConfigurationFragment(shell, "configuration")
        content += """
  set lbvers2=prod
  if ( -e ${HOME}/.devLHCBLoginscript ) then
    set lbvers2=dev
  endif
  if ( $?LB_BANNER ) then
    cat ${LB_BANNER}
    rm -f ${LB_BANNER}
    unsetenv LB_BANNER
  else"""
        content += ShellFileNativeSnippet("LbLogin", shell,
                                    targetlocation=targetlocation,
                                    args="--quiet",
                                    prodlocation=prodlocation, offset=2)
        content += """
  endif
  setenv LBLOGIN_DONE yes
  unset lbvers2

"""
        content += getConfigurationFragment(shell, "postscript")
        content += """
endif

"""
    elif shell == "bat" :
        content = """
"""
        content += getConfigurationFragment(shell, "configuration")
        content += """
IF DEFINED HOME (
  IF NOT EXIST %HOME%\.noLHCBLoginscript (
    set lbvers2="prod"
    IF EXIST %HOME%\.devLHCBLoginscript (
      set lbvers2="dev"
    ) """
        content += ShellFileNativeSnippet("LbLogin", shell,
                                    targetlocation=targetlocation,
                                    args="--quiet",
                                    prodlocation=prodlocation, offset=2)
        content += """
    set lbvers2=
  )
) ELSE (
  set lbvers2="prod" """
        content += ShellFileNativeSnippet("LbLogin", shell,
                                    targetlocation=targetlocation,
                                    args="--quiet",
                                    prodlocation=prodlocation, offset=1)

        content += """
  set lbvers2=
)
"""

        content += getConfigurationFragment(shell, "postscript")
        content += """
"""
    f.write(content)
    f.close()
#    fixNative(script)

def generateGroupShell(targetlocation, shell, version="", mysiteroot=None, building=False):
    log = logging.getLogger()
    if version and mysiteroot :
        scrdir = os.path.join(mysiteroot.split(os.pathsep)[0],
                              "lhcb", "LBSCRIPTS", "LBSCRIPTS_%s" % version, "InstallArea", "scripts")
    else :
        scrdir = _scripts_dir
    script = os.path.join(scrdir,"group_shell.%s" % shell)
    prodlink = getProdLink(targetlocation)
    prodlocation = None
    if prodlink :
        prodlocation = os.path.join(os.path.dirname(prodlink), "${lbvers3}", "InstallArea")
    log.debug("Generating file %s" % script)
    f = open(script, "w")
    content = getConfigurationFragment(shell, "configuration")
    if shell == "sh" :
        content = """#!/bin/sh
if [[ ! -e ${HOME}/.noLHCBLoginscript ]]; then
"""
        content += getConfigurationFragment(shell, "configuration")
        content += """
  lbvers3=prod
  if [[ -e ${HOME}/.devLHCBLoginscript ]]; then
    lbvers3=dev
  fi
  if [[ -n "$LBLOGIN_DONE" ]]; then"""
        content += ShellFileNativeSnippet("LbLogin", shell,
                                    targetlocation=targetlocation,
                                    args="--silent",
                                    postargs = "2>&1 /dev/null",
                                    prodlocation=prodlocation,
                                    offset=2)
        content += """
  else
    export LB_BANNER=`mktemp`"""
        content += ShellFileNativeSnippet("LbLogin", shell,
                                    targetlocation=targetlocation,
                                    args="--quiet",
                                    postargs = ">> ${LB_BANNER}",
                                    prodlocation=prodlocation,
                                    offset=2)
        content += """
  fi
  unset lbvers3

"""
        content += getConfigurationFragment(shell, "postscript")
        content += """
fi

"""

    elif shell == "csh" :
        content = """#!/bin/csh
if ( ! -e ${HOME}/.noLHCBLoginscript ) then
"""
        content += getConfigurationFragment(shell, "configuration")
        content += """
  set lbvers3=prod
  if ( -e ${HOME}/.devLHCBLoginscript ) then
    set lbvers3=dev
  endif
  if ( $?LBLOGIN_DONE ) then"""
        content += ShellFileNativeSnippet("LbLogin", shell,
                                    targetlocation=targetlocation,
                                    args="--silent",
                                    postargs = ">& /dev/null",
                                    prodlocation=prodlocation,
                                    offset=2)
        content += """
  else
    setenv LB_BANNER `mktemp`"""
        content += ShellFileNativeSnippet("LbLogin", shell,
                                    targetlocation=targetlocation,
                                    args="--quiet",
                                    postargs = ">! ${LB_BANNER}",
                                    prodlocation=prodlocation,
                                    offset=2)
        content += """
  endif
  unset lbvers3

"""
        content += getConfigurationFragment(shell, "postscript")
        content += """
endif

"""
    elif shell == "bat" :
        content = ""
        content += getConfigurationFragment(shell, "configuration")
        content += """
IF DEFINED HOME (
  IF NOT EXIST %HOME%\.noLHCBLoginscript (
    set lbvers3="prod"
    IF EXIST %HOME%\.devLHCBLoginscript (
      set lbvers3="dev"
    ) """
        content += ShellFileNativeSnippet("LbLogin", shell,
                                    targetlocation=targetlocation,
                                    args="--silent",
                                    prodlocation=prodlocation,
                                    offset=2)
        content += """
    set lbvers3=
  )
) ELSE (
  set lbvers3="prod" """
        content += ShellFileNativeSnippet("LbLogin", shell,
                                    targetlocation=targetlocation,
                                    args="--silent",
                                    prodlocation=prodlocation,
                                    offset=1)
        content += """
  set lbvers3=
)
"""
        content += getConfigurationFragment(shell, "postscript")
        content += """
"""
    f.write(content)
    f.close()
#    fixNative(script)

def generateGroupWrappers(targetlocation, shell, version="", mysiteroot=None, building=False):
    generateGroupLogin(targetlocation, shell, version, mysiteroot, building)
    generateGroupShell(targetlocation, shell, version, mysiteroot, building)

def generateMainWrapper(targetlocation, shell, version="", mysiteroot=None, building=False):
    log = logging.getLogger()
    if version and mysiteroot :
        scrdir = os.path.join(mysiteroot.split(os.pathsep)[0],
                              "lhcb", "LBSCRIPTS", "LBSCRIPTS_%s" % version, "InstallArea", "scripts")
    else :
        scrdir = _scripts_dir
    script = os.path.join(scrdir, "LHCb.%s" % shell)
    prodlink = getProdLink(targetlocation)
    prodlocation = None
    set_volhcb = None
    if mysiteroot and os.path.basename(mysiteroot) == "lib" :
        set_volhcb = os.path.dirname(mysiteroot)
    if prodlink :
        if shell != "bat" :
            prodlocation = os.path.join(os.path.dirname(prodlink), "${lbvers}", "InstallArea")
        else :
            prodlocation = os.path.join(os.path.dirname(prodlink), "%lbvers%", "InstallArea")
    log.debug("Generating file %s" % script)
    f = open(script, "w")
    content = ""
    if shell == "sh" :
        if set_volhcb :
            content += """
if [[ ! -n "$VO_LHCB_SW_DIR" ]]; then
  export VO_LHCB_SW_DIR=%s
fi
""" % set_volhcb
        content += """
if [[ ! -e ${HOME}/.noLHCBLoginscript ]]; then
  lbvers=prod
  if [[ -e ${HOME}/.devLHCBLoginscript ]]; then
    lbvers=dev
  fi"""
        content += ShellFileNativeSnippet("group_shell", shell,
                                    targetlocation=targetlocation,
                                    args="",
                                    prodlocation=prodlocation,
                                    offset=1)
        content += """
  if (shopt -q login_shell || [[ -o login ]] || [[ -n "$LB_BANNER" ]]) 2> /dev/null ; then"""
        content += ShellFileNativeSnippet("group_login", shell,
                                    targetlocation=targetlocation,
                                    args="",
                                    prodlocation=prodlocation,
                                    offset=2)
        content += """
  fi
  unset lbvers
fi

"""
    elif shell == "csh" :
        if set_volhcb :
            content += """
if (! $?VO_LHCB_SW_DIR ) then
  setenv VO_LHCB_SW_DIR %s
endif
""" % set_volhcb
        content += """
if ( ! -e ${HOME}/.noLHCBLoginscript ) then
  set lbvers=prod
  if ( -e ${HOME}/.devLHCBLoginscript ) then
    set lbvers=dev
  endif"""
        content += ShellFileNativeSnippet("group_shell", shell,
                                    targetlocation=targetlocation,
                                    args="",
                                    prodlocation=prodlocation,
                                    offset=1)
        content += """
  if ($?loginsh  || $?LB_BANNER) then"""
        content += ShellFileNativeSnippet("group_login", shell,
                                    targetlocation=targetlocation,
                                    args="",
                                    prodlocation=prodlocation,
                                    offset=2)
        content += """
  endif
  unset lbvers
endif

"""
    elif shell == "bat" :
        if set_volhcb :
            content += """
IF NOT DEFINED VO_LHCB_SW_DIR (
  set VO_LHCB_SW_DIR=%s
)
""" % set_volhcb
        content += """
IF DEFINED HOME (
  IF NOT EXIST %HOME%\.noLHCBLoginscript (
    set lbvers="prod"
    IF EXIST %HOME%\.devLHCBLoginscript (
      set lbvers="dev"
    ) """
        content += ShellFileNativeSnippet("group_login", shell,
                                    targetlocation=targetlocation,
                                    args="",
                                    prodlocation=prodlocation,
                                    offset=2)
        content += """
    set lbvers=
  )
) ELSE (
  set lbvers="prod" """
        content += ShellFileNativeSnippet("group_login", shell,
                                    targetlocation=targetlocation,
                                    args="",
                                    prodlocation=prodlocation,
                                    offset=1)
        content += """
  set lbvers=
)
"""

    f.write(content)
    f.close()
#    fixNative(script)


def generateLogins(version, targetlocation=None, scripts=None,
                   mysiteroot=None, building=False,
                   withoutpython=False, withoutcache=False,
                   withoutgwrap=False, withoutmwrap=False):
    log = logging.getLogger()
    shells = ["csh", "sh", "bat"]
    if not targetlocation :
        targetlocation = os.path.abspath(_base_dir)
        log.debug("Target location is %s" % targetlocation)
    if not scripts :
        scripts = []
        for u in shells :
            if version and mysiteroot :
                scrdir = os.path.join(mysiteroot.split(os.pathsep)[0],
                                      "lhcb", "LBSCRIPTS", "LBSCRIPTS_%s" % version, "InstallArea", "scripts")
            else :
                scrdir = _scripts_dir
            tscr = os.path.join(scrdir, "LbLogin.%s" % u )
            scripts.append(tscr)
    for s in scripts :
        generateLogin(targetlocation, s, version, mysiteroot, building, withoutpython, withoutcache)
    if not withoutgwrap :
        for u in shells :
            generateGroupWrappers(targetlocation, u , version, mysiteroot, building)
    if not withoutmwrap :
        for u in shells :
            generateMainWrapper(targetlocation, u, version, mysiteroot, building)

def updateLHCbProjectPath(mysiteroot):
    cmtprojpathlist = multiPathJoin(mysiteroot, "lhcb").split(os.pathsep)
    cmtprojpathlist += multiPathJoin(mysiteroot, os.path.join("lcg","external")).split(os.pathsep)
    if os.environ.has_key("LHCBPROJECTPATH") :
        cmtprojpathlist += os.environ["LHCBPROJECTPATH"].split(os.pathsep)
    finalcmtlist = []
    for d in cmtprojpathlist :
        if d not in finalcmtlist :
            finalcmtlist.append(d)
    os.environ["LHCBPROJECTPATH"] = os.pathsep.join(finalcmtlist)


if __name__ == '__main__':

    targetlocation = None
    scripts = None
    parser = OptionParser()
    parser.set_defaults(login_version="v*")
    parser.add_option("--login-version", dest="login_version",
                      help="pass in the version of the login [default %default]")
    parser.set_defaults(mysiteroot=None)
    parser.add_option("-m", "--mysiteroot", dest="mysiteroot",
                  help="defines the main site location")
    parser.set_defaults(building=False)
    parser.add_option("-b", "--building", dest="building", action="store_true",
                      help="do not ignore user_release_area for development")
    parser.set_defaults(withoutpython=False)
    parser.add_option("--without-python", dest="withoutpython", action="store_true",
                      help="prevents the setup of python from LCGCMT")

    parser.set_defaults(withoutcache=False)
    parser.add_option("--no-cache", dest="withoutcache", action="store_true",
                      help="prevents the generation of the cache")

    parser.set_defaults(withoutgroupwrapper=False)
    parser.add_option("--no-group-wrapper", dest="withoutgroupwrapper", action="store_true",
                      help="prevents the generation of the group wrapper scripts")


    parser.set_defaults(withoutmainwrapper=False)
    parser.add_option("--no-main-wrapper", dest="withoutmainwrapper", action="store_true",
                      help="prevents the generation of the main wrapper script")
    parser.set_defaults(debug_flag=False)
    parser.add_option("--debug", dest="debug_flag", action="store_true",
                      help="Sets the debug flag")

    opts, args = parser.parse_args()

    thelog = logging.getLogger()
    thelog.setLevel(logging.DEBUG)
    console = logging.StreamHandler()
    if sys.version_info[:3] < (2, 5, 1) :
        console.setFormatter(logging.Formatter("%(levelname)-8s: %(message)s"))
    else :
        if opts.debug_flag == 1 :
            console.setFormatter(logging.Formatter("%(levelname)-8s: %(funcName)-25s - %(message)s"))
        else :
            console.setFormatter(logging.Formatter("%(levelname)-8s: %(message)s"))
    if opts.debug_flag == 1 :
        console.setLevel(logging.DEBUG)
    else :
        console.setLevel(logging.INFO)
    thelog.addHandler(console)

    thelog.info(" Beginning of generateLogin ".center(120, "+"))
    thelog.debug("Command line arguments: %s" % " ".join(sys.argv))

    if opts.mysiteroot is not None:
        opts.mysiteroot = cleanPath(opts.mysiteroot)
        updateLHCbProjectPath(opts.mysiteroot)

    version = opts.login_version
    if len(args) > 0 :
        targetlocation = os.path.abspath(args[0])
        thelog.debug("Using target location from the command line")
    if len(args) > 1 :
        scripts = args[1:]
        thelog.debug("Selecting target files from the command line")

    generateLogins(version, targetlocation, scripts, opts.mysiteroot, opts.building,
                   opts.withoutpython, opts.withoutcache,
                   opts.withoutgroupwrapper, opts.withoutmainwrapper)

    thelog.info(" End of generateLogin ".center(120,"+"))

