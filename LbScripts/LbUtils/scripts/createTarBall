#!/usr/bin/env python
# $Id: createTarBall,v 1.1 2009-08-19 17:41:30 hmdegaud Exp $
""" Simple script to create tarballs according to types """

from LbUtils.Tar import createTarBalls
from LbUtils.Script import Script
from LbUtils.CVS import CVS2Version

import os

__version__ = CVS2Version("$Name: not supported by cvs2svn $", "$Revision: 1.1 $")
__author__ = "hmd"

class CreateTarBallScript(Script):
    _version = __version__    
    _description = __doc__
    def defineOpts(self):
        parser = self.parser
        parser.set_defaults(output_dir=os.getcwd())
        parser.add_option("-o", "--output-dir",
                          dest = "output_dir",
                          help = "define the output directory for the created tarballs"
                          "[default: %default]")
        parser.set_defaults(tar_name="package")
        parser.add_option("-n", "--name",
                          dest = "tar_name",
                          help = "define the main name for the tarballs"
                          "[default: %default]")
        parser.set_defaults(prefix=None)
        parser.add_option("-p", "--prefix",
                          dest = "prefix",
                          help = "define the prefix to the content of the tarball"
                          "[default: %default]")
        parser.set_defaults(get_share=True)
        parser.add_option("-s", "--share",
                          dest = "get_share",
                          action = "store_true",
                          help = "produce the share tar ball, not belonging to any type"
                          "[default: %default]")
        parser.add_option("--no-share",
                          dest = "get_share",
                          action = "store_false",
                          help = "prevent the creation of the share tarball")
        parser.set_defaults(binary_list=[])
        parser.add_option("-b", "--binary",
                          dest = "binary_list",
                          action = "append",
                          help = "add binary type to be tarballed")
        parser.set_defaults(tar_type="gz")
        parser.add_option("-t", "--tar-type",
                          dest = "tar_type",
                          choices = ["plain", "gz", "bz2"],
                          help = "set the tarball type among plain, gz and bz2")
        parser.set_defaults(symlinks=True)
        parser.add_option("--symlinks",
                          dest = "symlinks",
                          action = "store_true",
                          help = "don't dereference the symlinks [default: %default]")
        parser.add_option("--no-symlinks",
                          dest = "symlinks",
                          action = "store_false",
                          help = "Dereference the symlinks")
        parser.set_defaults(exclude=[])
        parser.add_option("-e", "--exclude",
                          action = "append",
                          help = "add exclude glob pattern to the file/dir paths")
        parser.set_defaults(top_dir=False)
        parser.add_option("--top-dir",
                          action = "store_true",
                          help = "use the top level directories as binary list")
        parser.set_defaults(top_exclude=[])
        parser.add_option("--top-exclude",
                          action = "append",
                          help = "add exclude glob pattern to the top directories")

    
    def main(self):
        sourcedirs = [os.getcwd()]
        if len(self.args) > 0 :
            sourcedirs = self.args
        opts = self.options
        createTarBalls(sourcedirs, opts.output_dir, 
                       opts.tar_name, opts.get_share,
                       opts.binary_list, opts.tar_type,
                       opts.symlinks, opts.prefix,
                       opts.exclude,
                       opts.top_dir, opts.top_exclude)
        return 0

if __name__ == '__main__':
    s = CreateTarBallScript(usage="%prog [options] dir1 [dir2 ...]")
    s.run()
