#!/usr/bin/env python

""" Script to make a LCGCMT tar file
 - 060119 - first version
 - 060206 - add include directory in LCG applications (but RELAX)
 - 060317 - remove adding include directory
            remove doc, test, tests, examples directories from LCG packages
 - 060329 - try to find tar file on lhcbtar if not on lcg_tar_dir
 - 060404 - adapt the script to new spi tar files
 - 060612 - remove some softlinks from cernlib
 - 060719 - build the native.versions list for  Linux or win32
 - 060720 - skip CASTOR on win32 tar file
 - 060830 - use ROOT debug version on WIN32
 - 060918 - fix a bug in get_tar_name : the list of missing tar files was not correct
 - 061012 - add PLUGINS tar file
 - 061023 - fix clean_clhep
 - 070122 - get native versions from config_versions
 - 070123 - make sure that CMTPROJECTPATH is set when no <package>Env
 - 070301 - add the tag slc3 to get native_versions of grid stuff
 - 070613 - added option to exclude files according to a pattern
 - 070615 - moved to CMT v1r20p20070208
 - 070622 - added the conversion of slc4_amd64_gcc345 directories to slc4_amd64_gcc34
 - 071004 - added the creation of the md5 file
 - 081113 - Fixed problem with native project without version directories
 - 081212 - added the option for custom output file
 - 081212 - added the possibility to create the LCGGrid tarball from Dirac
 - 090107 - exclude file extension tgz, tar.gz, rpm for the tarball
 - 091123 - added support for LHCbDirac
"""
#------------------------------------------------------------------------------
from LbLegacy.Utils import getStatusOutput

from LbUtils.Temporary import TempDir
from LbUtils.Processes import callCommand
from LbUtils.CMT.Common import CMTCommand as CMT

tmpdir = TempDir(prefix="mkLCGCMTtar")


import sys, os, getopt, time, shutil
import re
from subprocess import Popen, PIPE
from LbLegacy.install_project import calculateMD5
version = '091123'


#---------------------------------------------------------------------------
def usage() :
    print 'Usage:'
    print '  python mkLCGCMTtar.py -n <version> '
    print 'Try "mkLCGCMTtar.py -h" for more information.'
    sys.exit()
#--------------------------------------------------------------------------
def help() :
    print """make a LCGCMT tar file for a given Gaudi version with the necessary libraries\n
    Usage:
      python mkLCGCMTtar.py -n  -b [-d or --debug] [--plugins]\n
      -d                                 - debug mode \n
      -b or --binary=  <binary>          - for this binary platform \n
      -e or --exclude=  <pattern>        - for file pattern exclusion\n
      -n or --native=  <Lb project_vers> - application version from where to get native.versions \n
      -o or --output=file                - output filename
      --plugins                          - if there build a PLUGINS tar file \n
    Examples:
      cd $LHCBTAR/source
      python mkLCGCMTtar.py --native=GAUDI_<version> --binary=slc3_ia32_gcc323 \n
      gets the libraries used by GAUDI_<version> from $LCG_release_area/LCGCMT/LCGCMT_version used by Gaudi>\n
      python mkLCGCMTtar.py --plugins \n
      """
    sys.exit()

#----------------------------------------------------------------------------
#  create libshift link ==============================================
#----------------------------------------------------------------------------
def fixDPMRFIO(searchdir=None, shiftvers="2.1"):
    if not searchdir :
        searchdir = os.getcwd()
    shiftname = "libshift.so.%s" % shiftvers
    for root, dirs, files in os.walk(searchdir) :
        for f in files :
            if f == "libdpm.so" :
                if debug_flag == 1:
                    print "found libdpm.so in %s" % root
                shiftname = os.path.join(root, shiftname)
                if os.path.exists(shiftname) :
                    os.remove(shiftname)
                os.symlink(f, shiftname)
                if debug_flag == 1 :
                    print "created symlink %s to libdpm.so" % shiftname
                break

#----------------------------------------------------------------------------
#  package filter ==============================================
#----------------------------------------------------------------------------
def pkgFilter(NAME, pak, vers, binary):
    keep = True
    if NAME == "GANGA" and binary.find("slc5") != -1 :
        if pak == "Qt" and vers.startswith("3.") :
            keep = False
        if pak == "pyqt" and vers.startswith("3.") :
            keep = False
    if (binary.startswith("win32") or binary.find("winxp") != -1 )and pak == "pyqt_compat" :
        keep = False
    if pak.lower() == "icc" :
        keep = False
    if not keep :
        print "Excluding %s %s for %s" % (pak, vers, binary)
    return keep



#----------------------------------------------------------------------------
#  get native versions ==============================================
#----------------------------------------------------------------------------
def get_base_project(native_version):
    NAME = native_version.split('_')[0]
    version = native_version.split('_')[1]
    Name = NAME.lower().capitalize()
    if NAME == "LHCBDIRAC" :
        Name = "LHCbDirac"
    if NAME == 'LCGCMT':
        Name = 'LCG'
    if NAME == 'LHCBGRID' :
        Name = 'LHCbGrid'
    if Name == 'Lhcbexternals' :
        Name = 'LHCbExternals'
    NameSys = Name+'Sys'
    if Name == 'Gaudi':
        NameSys = Name+'Release'
    if Name == 'LCG' :
        NameSys = Name+'_Release'
    release_area = Name+'_release_area'
    if os.path.isdir(os.path.join(os.environ[release_area],Name+'Env',version)):
        os.chdir(os.path.join(os.environ[release_area],Name+'Env',version,'cmt'))
        if Name == 'Gaudi': NameSys = Name
    else:
        if not os.environ.has_key('CMTPROJECTPATH'):
            print 'you should set CMTPROJECTPATH first - STOP '
            sys.exit('No CMTPROJECTPATH')
        print 'CMTPROJECTPATH = ',os.environ['CMTPROJECTPATH']
        os.chdir(os.path.join(os.environ[release_area],NAME,native_version,'cmt'))
    print "get_base_project %s %s %s %s %s" % (NAME, version, Name, NameSys, release_area)
    return NAME, version, Name, NameSys, release_area


def get_project_dir(native_version):
    here = os.getcwd()
    NAME, version, Name, NameSys, release_area = get_base_project(native_version)
    dir = os.path.join(os.environ[release_area],NAME,native_version)
    os.chdir(here)
    return dir


def get_projectcmt_file(native_version):
    dir = get_project_dir(native_version)
    return os.path.join(dir,'cmt','project.cmt')

def get_runtime_deps(filename):
    deps = dict()
    matchexpr = re.compile("#\s*runtime_use\s+\w+")
    for l in open(filename, "r") :
        if matchexpr.search(l[:-1]) :
            words = l[:-1].replace("#","").split()
            if len(words) < 3 :
                deps[words[1]] = ""
            else :
                deps[words[1]] = words[2]
    return deps

def get_runtime_cmtpath(native_version):
    file = get_projectcmt_file(native_version)
    deps = get_runtime_deps(file)
    cmtpath = []
    for d in deps.keys():
        dir = get_project_dir(deps[d])
        cmtpath.append(dir)
    return ':'.join(cmtpath)


def get_cmtpath(native_version):
    os.environ['CMTPATH'] = get_runtime_cmtpath(native_version)
    status,CMTPATH = getStatusOutput('cmt show set_value CMTPATH')
    if CMTPATH[0] == ':' :
        CMTPATH = CMTPATH[1:]
    os.environ['CMTPATH'] = CMTPATH
    print 'CMTPATH=%s' % CMTPATH
    return CMTPATH

def get_lcg_version(cmtpath):
    for p in cmtpath.split(':') :
        pos = p.find('LCGCMT_')
        if pos != -1 :
            return p[pos:]

def getPackPrefix(pak, packages_versions, with_version=True):
    lcg_ext_loc = os.environ["LCG_external_area"]
    bin_dir = packages_versions[pak][2]
    nat_version = packages_versions[pak][0]
    pack_path = ""
    if len(packages_versions[pak]) > 3 :
        full_pack_path = packages_versions[pak][3]
        if full_pack_path.startswith(lcg_ext_loc + os.sep) :
            pack_path = full_pack_path.replace(lcg_ext_loc + os.sep, "")
    else :
        # special case for LCGCMT
        pack_path = os.sep.join([pak, nat_version])

    if bin_dir in pack_path :
        pack_path = pack_path[:pack_path.find(bin_dir)]

    if (not with_version) and nat_version :
        pack_path = pack_path[:pack_path.find(nat_version)]

    if pack_path.endswith(os.sep) :
        pack_path = pack_path[:-1]

    return pack_path
#----------------------------------------------------------------------------
#  get native versions ==============================================
#----------------------------------------------------------------------------
def getCMTExtraTags(binary):
    cmtargs = "-tag=LHCb,LHCbGrid"
    if  binary.startswith("win32") or binary.startswith("i686-winxp") :
        cmtargs = "-tag=LHCb,WIN32"
    elif  binary.startswith("win64") or binary.startswith("x86_64-winxp") :
        cmtargs = "-tag=LHCb,WIN64"
    else :
        if binary.find("slc3") != -1 :
            cmtargs = "-tag=LHCb,LHCbGrid,slc3"
    return cmtargs

def getLCGBinary(workdir, extname, binary):
    ext_home = CMT(getCMTExtraTags(binary), "show", "macro_value", "%s_home" % extname, cwd = workdir)[0][:-1]
    nat_version = CMT(getCMTExtraTags(binary), "show", "macro_value", "%s_native_version" % extname, cwd = workdir)[0][:-1]
    cfg_version = CMT(getCMTExtraTags(binary), "show", "macro_value", "%s_config_version" % extname, cwd = workdir)[0][:-1]
    if nat_version :
       ext_bin = None
       ext_bin_list = ext_home[ext_home.find(nat_version):].split(os.sep)
       if len(ext_bin_list) > 1 :
           ext_bin = ext_bin_list[1]
    else :
       ext_bin = ext_home.split(os.sep)[0]
    return nat_version, cfg_version, ext_bin, ext_home

def get_native_versions(native_version, binary):
    if debug_flag == 1:
        print 'get_native_versions', native_version, binary
    here = os.getcwd()

    packages_versions = {}

    #build cmtcmd
    if plugins_flag == 1:
        print 'build PLUGINS tar file'
        if os.path.isfile(os.path.join(os.environ['LHCBRELEASES'], 'context', 'requirements')):
            os.environ['CMTUSERCONTEXT'] = os.path.join(os.environ['LHCBRELEASES'], 'context')
            cmtcmd = 'cmt show macros native > '
    else:
        NAME, version, Name, NameSys, release_area = get_base_project(native_version)
        CMTPATH = get_cmtpath(native_version)
        lcgv = get_lcg_version(CMTPATH)
        native_cmt = os.path.join(os.environ[release_area], NAME, native_version, NameSys, 'cmt')
        if not os.path.exists(native_cmt) :
            native_cmt = os.path.join(os.environ[release_area], NAME, native_version, NameSys, version, 'cmt')
        os.chdir(native_cmt)
        if debug_flag == 1:
            print 'get_native_version - %s %s %s %s '%(release_area, native_cmt, os.getenv('CMTPATH'), lcgv)
        if NAME != 'LHCBGRID':
            packages_versions['LCGCMT'] = [lcgv, lcgv, binary]
        cmtshow = "cmt %s show " % getCMTExtraTags(binary)
        cmtcmd = cmtshow +'macros native > '
    # run cmtcmd

    natives = os.path.join(tmpdir.getName(), native_version+'.vers')
    if debug_flag == 1:
        print 'get_native_version - %s '%(cmtcmd+natives)

    os.system (cmtcmd+natives)

    # get packages_versions
    fd = open(natives)
    fdlines = fd.readlines()
    for fdline in fdlines:
        native = fdline.split('=')[0]
        pack = fdline.split('_native')[0]
        ext_info = getLCGBinary(native_cmt, pack, binary)
        vers = ext_info[0]
        if pkgFilter(NAME, pack, vers, binary) :
            packages_versions[pack] = list(ext_info)

    os.remove(natives)

    for pak in packages_versions.keys() :
        if not packages_versions[pak][0] :
            print "%s has no version. Removing it from the list" % pak
            del packages_versions[pak]

    # Code added to cope with the relocation of some packages from
    # external to app/releases (2012/06/14)

    # We first lookup the releases and external paths to be able to compare
    # this is dirty but we have no netter solution for the moment
    LCG_external = get_macro_value(None, "LCG_external", getCMTExtraTags(binary))
    LCG_releases = get_macro_value(None, "LCG_releases", getCMTExtraTags(binary))

    # Iterate over package to check whether they should be kept in external
    # or app/releases. We execute a show macro_value on the package home
    for pak in packages_versions.keys() :
        if debug_flag == 1:
            print "get_native_version - Checking home for package: %s" %  pak
        macro = pak+ "_home"
        value = get_macro_value(None, macro, getCMTExtraTags(binary))
        if debug_flag == 1:
            print "get_native_version - %s = %s" % ( macro, value)

        pakType = None
        if value.startswith(LCG_external):
            pakType = "external"
        if value.startswith(LCG_releases):
            pakType = "app/releases"

        l = packages_versions[pak]
        l.append(pakType)
        
        if debug_flag == 1:
            print "get_native_version - %s = %s" % (pak, pakType)
            
        if pakType == None:
            print "Cannot find if %s is in external or app/releases, ABORTING"
            sys.exit(1)

    if binary.startswith("i686"):
        for pak in packages_versions.keys() :
            content = packages_versions[pak]
            if content[2].startswith("x86_64") :
                print "Replacing binary for %s" % pak
                newbin = content[2].replace("x86_64", "i686")
                newpath = content[3].replace("x86_64", "i686")
                packages_versions[pak] = [content[0], content[1], newbin, newpath]

    os.chdir(here)
    return packages_versions


#  Method added to facilitate the lookup of macro values
def get_macro_value(cmtdir, macro, extratags):
    """ Returns the value of a macro """
    here = os.getcwd()
    if cmtdir != None:
        os.chdir(cmtdir)
    cmd = ["cmt", extratags, "show", "macro_value", macro]
    if debug_flag == 1:
        print "get_macro_value - Running: ", " ".join(cmd)
    # Invoking popen to run the command, result is on stdout first line
    p = Popen(" ".join(cmd), stdout=PIPE, stderr=PIPE, shell=True)
    line = p.stdout.readline()[:-1]
    if debug_flag == 1:
        print "get_macro_value - %s = %s" % (macro, line)
    if cmtdir != None:
        os.chdir(here)
    return line

#
#  get LCGCMT tar file names ===============================================
#
def get_tar_name(root, gen, native, bin):
    if debug_flag == 1: print ' get_tar_name for %s %s %s %s '%(root,gen,native,bin)
    lcgbin = '__LCG_'+bin
    lcg_app_dir = os.getenv('LCG_release_area')
    dirlist = []

    if native.find(gen) != -1 or gen == 'ROOT':
        # packages on /sw/lcg/app/releases or ROOT
        if gen == 'LCGCMT':
            name = native+'.tar.gz'
        else:
            if bin == 'win32_vc71':
                lcgbin = lcgbin+'_dbg'
                dirlist.append(bin+'_dbg')
            elif bin == 'i686-winxp-vc9-opt' :
                lcgbin = lcgbin.replace("-opt", "-dbg")
                dirlist.append(bin.replace("-opt", "-dbg"))
            else:
                dirlist.append(bin)
            name = native+lcgbin+'.tar.gz'
            if gen == 'ROOT': name = gen+'_'+name
    else:
        # packages on /sw/lcg/external but ROOT
        name = gen+'_'+native+lcgbin+'.tar.gz'
        if gen == 'AIDA':
            name = name.replace(bin,'share')
        else:
            dirlist.append(bin)

    if debug_flag == 1: print 'get_tar_name ',name,dirlist

    if not os.path.exists(os.path.join(root,name)):
        if os.path.exists(os.path.join(root,name.replace(gen,gen.lower()))):
            name =  name.replace(gen,gen.lower())
        else:
            name = name.replace(lcgbin,'')
            if not os.path.exists(os.path.join(root,name)):
                if os.path.exists(os.path.join(root,name.replace(gen,gen.lower()))):
                    name = name.replace(gen,gen.lower())
                else:
                    name = None

    return name, dirlist


def get_output_filename(native_version, binary, packages_versions):
    here = os.getcwd()
    NAME, version, Name, NameSys, release_area = get_base_project(native_version)
    os.chdir(here)
    if plugins_flag == 0:
        if NAME == "LHCBGRID":
            filename = "LCGGrid_" + version
        elif ( NAME == "DIRAC" or NAME == "LHCBDIRAC" ):
            packver = version
            os.chdir(get_project_dir(native_version))
            for line in os.popen("cmt show projects") :
                line = line[:-1]
                if line.find("LHCBGRID_") != -1 :
                    words = line.split()
                    for w in words :
                        if w.startswith("LHCBGRID_") :
                            packver=w.split("_")[1]
            os.chdir(here)
            filename = "LCGGrid_" + packver
        elif NAME == "GANGA" :
            filename = "LCGGanga_" + version
        else:
            filename = packages_versions['LCGCMT'][0]
    else:
        filename = 'PLUGINS'
    return filename


#
#  get tar files from lcg  ==================================================
#
def get_tar_files(native_version, packages_versions,binary_dir, output_file):
    if debug_flag == 1:
        if plugins_flag == 0:
            print ' get_tar_files for %s %s '%(packages_versions['LCGCMT'][0],binary_dir)
        else:
            print ' get_tar_files for PLUGINS %s '%(binary_dir)

    lcg_tar_dir = os.path.join(lcg_ext_dir,'distribution')

    here = os.getcwd()

    os.chdir(tmpdir.getName())

    main_dir = get_output_filename(native_version, binary_dir, packages_versions)

    if output_file :
        tarfile = output_file
    else :
        tarfile = os.path.join(lhcbtar, main_dir+'_'+binary_dir+'.tar.gz')

    if tarfile.endswith(".tar.gz") :
        md5file = tarfile.replace(".tar.gz",".md5")
    else :
        md5file = None

    if not os.path.exists(main_dir):
        os.mkdir(main_dir)
    os.chdir(main_dir)
    if not os.path.exists(binary_dir):
        os.mkdir(binary_dir)
    os.chdir(binary_dir)

    if  os.path.exists('external'):
        os.system(rmcmd+' external')
    os.mkdir('external')
    # Not needed anymore we chdir on demand...
    #os.chdir('external')

    # Creating the app/releases subdirectory
    appreleases = "app/releases"
    if  os.path.exists(appreleases):
        os.system(rmcmd + appreleases)
    os.makedirs(appreleases)

    # Top tar directory
    toptardir = os.path.join(tmpdir.getName(), main_dir, binary_dir)
    appreleasesdir = os.path.join(toptardir, "app", "releases")
    externaldir = os.path.join(toptardir, "external")


# if PLUGINS copy $LHCBRELEASES/context/requirements on /tmp/external
    if plugins_flag == 1:
        str = 'cp -r '+os.path.join(os.environ['LHCBRELEASES'],'context')+' .'
        os.system(str)

# loop over external packages
    missing = []
    tarko   = []
    for pack in packages_versions.keys():

        print "======> %s data:" % pack,  packages_versions[pack]
        # last entry is the package type...
        packType = packages_versions[pack][-1]
        if debug_flag == 1: print 'get_tar_file Package %s is in %s' % (pack, packType)
        
        # Position to correct directory, and stop is the package type
        # is not known
        if packType == "external":
            os.chdir(externaldir)
        elif packType == "app/releases":
            os.chdir(appreleasesdir)
        else:
            print "Incorrect packType for %s : %s ABORTING" % (pack, packType)
            sys.exit(1)

            
        value = packages_versions[pack][0]
        ext_bin_dir = packages_versions[pack][2]
        tar_dir = lcg_tar_dir
        file, dirlist = get_tar_name(tar_dir,pack, value, ext_bin_dir)
        if file == None:
            tar_dir = lhcbtar
            file, dirlist = get_tar_name(tar_dir, pack, value, ext_bin_dir)
        if debug_flag == 1: print 'get_tar_files %s %s ' % (file, dirlist)
        if file != None:
            Ffile = os.path.join(tar_dir,file)
            if debug_flag == 1: print Ffile

            packpath = getPackPrefix(pack, packages_versions)
            if debug_flag == 1: print 'get_tar_file packpath= ',packpath

            # We need to extract in the correct location, either external
            # or apps releases, so we need to change directory before the extraction"
            
            str = 'tar --extract --ungzip --file '+Ffile
            rc = os.system(str)

            if rc != 0:
                print "Wrong %s %s %s tar file" % (pack, value, ext_bin_dir)
                tarko.append(os.path.join(pack,value, ext_bin_dir))
            elif len(dirlist) != 0:
                # if binary = slc4_ia32_gcc345 rename it to slc4_ia32_gcc34
                if not os.path.isdir(os.path.join(packpath,ext_bin_dir)):
                    if os.path.isdir(os.path.join(packpath,'slc4_ia32_gcc345')):
                        pn =  os.path.join(packpath,ext_bin_dir)
                        po =  os.path.join(packpath,'slc4_ia32_gcc345')
                        str = 'mv '+po+' '+pn
                        rc = os.system(str)
                        print ' move %s/%s to %s/%s' %(packpath,po,packpath,pn)
                    if os.path.isdir(os.path.join(packpath,'slc4_amd64_gcc345')):
                        pn =  os.path.join(packpath,ext_bin_dir)
                        po =  os.path.join(packpath,'slc4_amd64_gcc345')
                        str = 'mv '+po+' '+pn
                        rc = os.system(str)
                        print ' move %s/%s to %s/%s' %(packpath,po,packpath,pn)
                # if the external binary directory is not the same as the
                # one for the name of the tarball: create a link.
                if ext_bin_dir != binary_dir :
                    if not os.path.exists(os.path.join(packpath, binary_dir)):
                        os.symlink(ext_bin_dir, os.path.join(packpath, binary_dir))
                # remove doc, test and tests directories if any
                for dir in ['doc', 'test', 'tests', 'examples', 'tutorial']:
                    if os.path.isdir(os.path.join(packpath,dirlist[0],dir)):
                        shutil.rmtree(os.path.join(packpath,dirlist[0],dir))
                        if debug_flag == 1:
                            print 'remove %s '%(os.path.join(packpath,dirlist[0],dir))
                # remove softlinks which cannot be resolved (cernlib/2005)
                for lnk in ['src','lib/xsneut95.dat']:
                    if os.path.islink(os.path.join(packpath,dirlist[0],lnk)):
                        os.remove(os.path.join(packpath,dirlist[0],lnk))
                        print 'remove %s '%(os.path.join(packpath,dirlist[0],lnk))
        else:
            if not (pack == 'CASTOR' and ((ext_bin_dir.find('win32') != -1) or (ext_bin_dir.find("winxp") != -1) )):
                print "%s %s %s is missing" % (pack, value, ext_bin_dir)
                missing.append(os.path.join(pack,value,ext_bin_dir))

# clean CLHEP directory
    if os.path.isdir('clhep'):
        rc = clean_clhep_dir(packages_versions['LCGCMT'][0],packages_versions['CLHEP'][0],ext_bin_dir)

    fixDPMRFIO()

# make the final tar file from /tmp/main_dir/binary_dir
    if len(missing) == 0 and len(tarko) == 0:
        os.chdir(os.path.join(tmpdir.getName(), main_dir, binary_dir))
        os.system("symlinks -c -r external")
        str = 'tar zcf '
        str += tarfile
        str += ' --exclude "*/InstallArea*" '
        str += ' --exclude "*.tar.gz" '
        str += ' --exclude "*.tgz" '
        str += ' --exclude "*.rpm" '
        if exclusion_pattern :
            str += ' --exclude "%s" ' % exclusion_pattern
        str += ' external app'
        print str
        rc = os.system(str)
        if rc == 0:
            str = rmcmd+os.path.join(tmpdir.getName() ,main_dir, binary_dir)
            os.system(str)
            logfile.write('%s tar file has been built for %s and relevant /tmp directory removed'%(main_dir,binary_dir)+'\n')
            if md5file :
                md5sum = calculateMD5(tarfile)
                mdf = open(md5file,"w")
                mdf.write("%s  %s" % (md5sum,os.path.basename(tarfile)))
                logfile.write('%s md5 file has been built for %s'%(main_dir,binary_dir)+'\n')
    else:
        logfile.write('%s tar file has not been built for %s because some tar files are missing or wrong '%(main_dir,binary_dir)+'\n')

        logfile.write('missing tar files= %s'%(missing)+'\n')
        logfile.write('wrong tar files = %s'%(tarko)+'\n')
    os.chdir(here)

def genHTMLfile(native_version, packages_versions,binary_dir, output_file):

    main_dir = get_output_filename(native_version, binary_dir, packages_versions)

    name = main_dir.split("_")[0]
    version = main_dir.split("_")[1]
    core_name = main_dir+'_'+binary_dir

    htmlfile = None
    if output_file :
        tarfile = output_file
        if tarfile.endswith(".tar.gz") :
            htmlfile = tarfile.replace(".tar.gz", ".html")
    else :
        tarfile  = os.path.join(lhcbhtml, core_name + ".tar.gz")
        htmlfile = os.path.join(lhcbhtml, core_name + ".html")

    if htmlfile :
        fd = open(htmlfile, "w")
        fd.write("<H3>Project %s version %s (%s binary files) </H3>\n" % (name, version, binary_dir))
        fd.write("<A NAME=%s HREF=source/%s>%s</A>\n" % (core_name, core_name + ".tar.gz", core_name))
        fd.close()

#
# -------------------------------------------------------------------
#
def clean_clhep_dir(LCGCMT_vers,clhep_vers,binary_dir):

    here = os.getcwd()

    clhep_dir = os.path.join(os.environ['LCG_release_area'],'LCGCMT',LCGCMT_vers,'LCG_Interfaces','CLHEP','cmt')
    os.chdir(clhep_dir)

    # get the list of libraries from the CLHEP_linkopts macro
    str = 'cmt show macro_value CLHEP_linkopts -tag='+binary_dir
    status,output = getStatusOutput(str)
    lib_list = output.split()

    # in lib_list remove any character specific to Linux or Win32
    list = []
    for lib in lib_list[1:]:
        list.append(lib.replace('-lCLHEP','CLHEP').replace('.lib',''))

    # get the list of existing libraries
    os.chdir(os.path.join(here,'clhep',clhep_vers,binary_dir,'lib'))
    libraries = os.listdir(os.getcwd())

    # split the list of existing libraries between keep and delete
    keep = []
    delete  = []
    for lib  in libraries:
        for key in list:
            if lib.find(key) != -1:
                keep.append(lib)
                break
            else:
                continue
        else:
            delete.append(lib)

        # delete the libraries not required
    for lib in delete:
        os.remove(lib)

    os.chdir(here)

#---------------------------------------------------------------------
if __name__ == "__main__":

    here = os.getcwd()

    logname = os.path.join(here,'mkLCGCMTtar.log')
    if os.path.exists(logname): os.remove(logname)
    logfile = open(logname,'w')
    str = " =========== "+time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime())+"\n"
    logfile.write(str)

    if (sys.platform == 'win32') or (sys.platform == 'win64'):
        rmcmd = 'rmdir /s/q '
    else:
        rmcmd = '/bin/rm -fr '

    lcg_ext_dir = os.path.normpath(os.path.join(os.environ['LCG_release_area'], '..', '..', 'external'))
    lhcbtar  = os.path.join(os.environ['LHCBHOME'], 'distribution', 'source')
    lhcbhtml = os.path.join(os.environ['LHCBHOME'], 'distribution', 'html')
    binary = os.environ['CMTCONFIG']
    source = ' '
    package = ' '
    version = 0
    native_version = 0
    exclusion_pattern = ''
    output_file = None
    html_only = False

    arguments = sys.argv[1:]
    if len(sys.argv) == 1:
        help()
        sys.exit()
    try:
        keys, values = getopt.getopt(arguments,'hdb:n:e:o:',
                       ['help','debug','plugins','binary=','native=','exclude=', 'output=', "html-only"])

    except getopt.GetoptError:
        help()
        sys.exit()

    debug_flag = 0
    plugins_flag = 0
    for key,value in keys:
        if key in ('-d', '--debug'):
            debug_flag = 1
        if key in ('-h', '--help'):
            help()
        if key in ('-b', '--binary'):
            binary = value
            os.environ["CMTCONFIG"] = binary
        if key in ('-n', '--native'):
            native_version = value
        if key in ('-o', '--output'):
            output_file = value
        if key in ('-e', '--exclude'):
            exclusion_pattern = value
        if key in ('-p', '--plugins'):
            plugins_flag = 1
            native_version = 'PLUGINS'
        if key in ([ '--html-only']):
            html_only = True

    if plugins_flag == 1:
        logfile.write( 'debug_flag %s, binary %s from $LHCBRELEASES/context/requirements '%(debug_flag,binary)+'\n')
    else:
        logfile.write( 'debug_flag %s, binary %s from %s '%(debug_flag,binary,native_version)+'\n')


    packages_versions = get_native_versions(native_version,binary)
    
    if debug_flag == 1:
        print ' packages_versions = ', packages_versions

    if not html_only :
        rc = get_tar_files(native_version, packages_versions, binary, output_file)

    genHTMLfile(native_version, packages_versions, binary, output_file)
