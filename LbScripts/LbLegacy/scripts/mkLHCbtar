#!/usr/bin/env python

""" Script to make a LHCb tar file """

#-----------------------------------------------------------------------------

from LbLegacy.install_project import calculateMD5
from LbLegacy.Utils import getStatusOutput
from LbConfiguration.Platform import isBinaryDbg, getBinaryOpt

from LbUtils.CMT.Common import isCMTMessage
from LbUtils.Temporary import TempDir

import sys, os, getopt, time, fnmatch
import re

script_version = '091013'


from LbConfiguration.Package import package_names, getPackage

class MakeLHCbTarException(Exception): pass


LHCBTAR = os.getenv('LHCBTAR')
HTMLDIR = os.path.join(LHCBTAR, 'html')
TARSRC = 'source'
here = os.getcwd()

# set default  arguments
debug_flag = True

#---------------------------------------------------------------------------
def usage() :
    print 'Usage:'
    print '  python mkLHCbtar.py -p <pname> -v <version> [-b <binary>]'
    print 'Try "mkLHCbtar.py -h" for more information.'
    sys.exit()
#--------------------------------------------------------------------------
def help() :
    print """make a LHCb tar file (source, binary, binary_dbg) of a Gaudi or LHCb project
    Usage:
      python mkLHCbtar.py -p <project> -v <version> [--binary=<binary>] [-d] \n
      -d                                 - debug mode \n
      -p or --project= <project>         - project name \n
      -v or --version= <version>         - project version\n
      -b or --binary=  <binary>          - binary \n
      -x or --dbgext                     - Refer to LCGCMT in dbg config (now DEFAULT)\n
      --nodbgext                         - Do not Refer to LCGCMT in dbg config, but force opt\n
                                           (needed to build tar files for projects with LCGCMT
                                           that does not have debug builds).
    Examples:
      cd $LHCBRELEASES
      if the project uses InstallArea then
        setenv CMTPROJECTPATH $LHCBPROJECTPATH
      python mkLHCbtar.py -p Brunel -v v30r3 -b slc3_ia32_gcc323

      """
    sys.exit()


def _get_base_project(native_version):
    NAME = native_version.split('_')[0]
    version = native_version.split('_')[1]
    Name = NAME.lower().capitalize()
    if NAME == 'LCGCMT': Name = 'LCG'
    if NAME == 'LHCBGRID' : Name = 'LHCbGrid'
    NameSys = Name + 'Sys'
    if Name == 'Gaudi': NameSys = Name + 'Release'
    if Name == 'LCG' : NameSys = Name + '_Release'
    release_area = Name + '_release_area'
    return NAME, version, Name, NameSys, release_area


def _get_project_dir(native_version):
    NAME, version, Name, NameSys, release_area = _get_base_project(native_version)
    dir = os.path.join(os.environ[release_area], NAME, native_version)
    return dir


def _get_runtime_deps(filename):
    deps = dict()
    matchexpr = re.compile("#\s*runtime_use\s+\w+")
    for l in open(filename, "r") :
        if matchexpr.search(l[:-1]) :
            words = l[:-1].replace("#", "").split()
            if len(words) < 3 :
                deps[words[1]] = ""
            else :
                deps[words[1]] = words[2]
    return deps

def _get_runtime_cmtpath(projectfile):
    file = projectfile
    deps = _get_runtime_deps(file)
    cmtpath = []
    for d in deps.keys():
        dir = _get_project_dir(deps[d])
        cmtpath.append(dir)
    return ':'.join(cmtpath)


def _get_grid_version(path_list):
    grid_version = None
    for p in path_list :
        if p.find("LHCBGRID") != -1 :
            grid_version = os.path.basename(p).split("_")[1]
            break
    return grid_version
#-----------------------------------------------------------------------------------
def make_tar(pname, pversion, binary='', use_dbg_externals=False):

    global TARSRC

    if debug_flag :
        print 'make_tar %s %s %s ' % (pname, pversion, binary)

    # binary directory name starts with:
    compLinux = 'slc'
    compWIN32 = 'win32_vc71'
    altcompWIN32 = 'i686-winxp'
    compMac = 'osx10'
    compMiscLinuxAmd64 = 'x86_64-slc'
    compMiscLinuxIa32 = 'i686-slc'

    # exclude following files and directories from source tar file
    exclude_source = ['install.history', 'install.*.history', 'core.*', 'html', 'Visual', '*.pyc', '*.pyo', 'NOT_READY',
                      compLinux + '*',
                      compWIN32 + '*',
                      altcompWIN32 + '*',
                      compMac + '*',
                      compMiscLinuxAmd64 + '*',
                      compMiscLinuxIa32 + '*']
    # exclude following files from binary tar file
    exclude_binary = ['.glimpse_*', 'core.*', 'html', '*.o', 'lib*.a', '*.obj', 'NOT_READY']

    if binary == '':
    # source tar file
        tar_bin = ''
        title = ' (source files) '
        # external package binary (CMTCONFIG) distributed with source tar file
        tar_opt = '_' + os.environ['CMTCONFIG']
        platform = ''
    else:
    # binary tar file
        tar_bin = '_' + binary
        title = ' (' + binary + ' binary files) '
        # external package binary : only the optimized version is distributed
        tar_opt = tar_bin
        if not use_dbg_externals:
            if isBinaryDbg(binary) :
                tar_opt = "_" + getBinaryOpt(binary)
        # Special case of -do0 platform
        if tar_opt.endswith("-do0"):
            tar_opt = tar_opt.replace("-do0", "-dbg")
        platform = binary.split('_')[0]
        if platform.find('slc') != -1:
            platform = 'slc'


# ====================================================================
# data files ( XmlDDDB, DecFiles, ParamFiles,...)
# ===================================================================
#
    if pname in package_names :
        tar_status = data_files_tar(pname, pversion)
        return tar_status

#
# ===================================================================
# LHCb projects ( Gaudi, LHCb, Rec, DaVinci, ...)
# ===================================================================
#
    if os.environ.has_key('CMTPROJECTPATH'):
        CMTPROJECTPATH = os.environ['CMTPROJECTPATH']
    else:
        CMTPROJECTPATH = ''

# environment package
    if CMTPROJECTPATH == '':
        env = pname + 'Env'
        if not os.path.isdir(env):
            print '%s environment package does not exist - STOP ' % (env)
            sys.exit('No environment package')
    else:
        env = ''

    PACK = pname.upper()
    maindir = os.path.join(PACK, PACK + '_' + pversion)
    packver = PACK + '_' + PACK + '_' + pversion
    packSys = pname + 'Sys'
    if pname == 'Gaudi' :
        packSys = pname + 'Release'
        if env == 'GaudiEnv': packSys = 'Gaudi'

#
# === if binary tar file is requested make sure that the InstallArea has been built ========
#
    if CMTPROJECTPATH == '':
        if platform != '':
            ia_dir = os.path.join(maindir, 'InstallArea')
            if not os.path.isdir(os.path.join(ia_dir, binary)):
                os.mkdir(os.path.isdir(os.path.join(ia_dir, binary)))
                os.mkdir(os.path.isdir(os.path.join(ia_dir, binary, 'lib')))
                os.mkdir(os.path.isdir(os.path.join(ia_dir, binary, 'bin')))
            l = os.listdir(os.path.join(maindir, 'InstallArea', binary, 'lib'))
            b = os.listdir(os.path.join(maindir, 'InstallArea', binary, 'bin'))
            if len(l) == 0 and len(b) == 0 :
                sys.exit('no library for this binary %s ' % (binary))

# tar files location: tar files are stored in $LHCBTAR/<PROJECT> or in $LHCBTAR/source
    if os.path.exists(os.path.join(LHCBTAR, PACK)):
        TARSRC = PACK
    TARDIR = os.path.join(LHCBTAR, TARSRC)

#
# ==== get the CMTPATH ===========================================
#
    os.environ['CMTPATH'] = ''
    if CMTPROJECTPATH == '':
        os.chdir(os.path.join(env, pversion, 'cmt'))
    else:
        os.chdir(os.path.join(here, maindir, 'cmt'))

    os.environ['CMTPATH'] = _get_runtime_cmtpath(os.path.join(here, maindir, 'cmt', 'project.cmt'))

    status, value = getStatusOutput('cmt show set_value CMTPATH')
    if isCMTMessage(value) :
        CMTPATH = value.split('\n')[1]
    else:
        CMTPATH = value
    os.environ['CMTPATH'] = CMTPATH

    if CMTPATH == '':
        print ' CMTPATH is not set - STOP '
        sys.exit()
    else:
        if PACK == 'PANORAMIX':
            if os.path.exists(os.path.join(here, maindir, 'PanoramixSys', 'cmt')) :
                os.chdir(os.path.join(here, maindir, 'PanoramixSys', 'cmt'))
            else :
                os.chdir(os.path.join(here, maindir, 'PanoramixSys', pversion, 'cmt'))
            status, OSC_home = getStatusOutput('cmt show macro_value OSC_home')
            status, LCG_system = getStatusOutput('cmt show macro_value LCG_system')
            OSC_PATH = OSC_home.split(LCG_system)[0]
            while OSC_PATH.endswith(os.sep) :
                OSC_PATH = OSC_PATH[:-1]
            CMTPATH = os.pathsep.join([CMTPATH, OSC_PATH])

    os.putenv('CMTPATH', CMTPATH)
    os.environ['CMTPATH'] = CMTPATH

    print 'CMTPATH = %s ' % (os.getenv('CMTPATH'))
    os.chdir(here)

#
# ==== get the dependencies and write the dependency html file ======
#
# write the dependency list on dephtml
# dependencies are given by the CMTPATH: one path per project, in the reverse order of CMTPATH,
# in the installation order, PACK is not part of the dependencies.
# LHCb projects (PACK=GAUDI,LHCB,DAVINCI, ...) tar files are stored on $LHCBTAR/PACK
# LCG projects (LCGCMT, GENSER) and OpenSCientist tar files are stored on $LHCBTAR/source
# DBASE and PARAM package dependencies are found using 'cmt show uses'

    tmpdir = TempDir(prefix="mkLHCbtar")
    dephtml = os.path.join(tmpdir.getName(), PACK + '_' + pversion + '.html')
    dep = open(dephtml, 'w')

    dep.write('<MENU><LI>\n')

    path_list = CMTPATH.split(':')
    path_list.reverse()
    for p in path_list:
        if p.find(PACK) != -1: break
        dver = os.path.basename(p)
        if dver == 'DBASE' or dver == 'PARAM' or dver == 'TOOLS' : continue
        dnam = dver.split('_')[0]
        if dnam == 'LCGCMT' or p.find('OpenScientist') != -1 or p.find('osc_vis') != -1 :
            if dnam != 'LCGCMT' :
                if p.find('OpenScientist') != -1 :
                    dver = 'OpenScientist_' + dver
                elif p.find('osc_vis') != -1 :
                    dver = 'osc_vis' + '_' + dver
            if PACK == 'LHCBGRID':
                dver = 'LCGGrid' + '_' + pversion
            if (PACK == 'DIRAC' or PACK == 'LHCBDIRAC' or PACK == 'GANGA') and dnam == 'LCGCMT' :
                dver = 'LCGGrid' + '_' + _get_grid_version(path_list)
            dbin = tar_opt
            dtar = dver + dbin
            print 'dnam %s, dver %s, dbin %s, dtar %s' % (dnam, dver, dbin, dtar)
            dep.write('[<A HREF=source/' + dtar + '.tar.gz>' + dtar + '</A>]\n')
            if PACK == 'GANGA' and dnam == 'LCGCMT' :
                dver = 'LCGGanga' + '_' + pversion
                dtar = dver + dbin
                print 'dnam %s, dver %s, dbin %s, dtar %s' % (dnam, dver, dbin, dtar)
                dep.write('[<A HREF=source/' + dtar + '.tar.gz>' + dtar + '</A>]\n')
        else:
            dtar = dnam + '_' + dver + tar_bin
            dep.write('[<A HREF=' + dnam + '/' + dtar + '.tar.gz>' + dtar + '</A>]\n')


# add dependencies to DBASE and PARAM packages to dephtml
    if os.path.exists(os.path.join(maindir, packSys, 'cmt')) :
        os.chdir(os.path.join(maindir, packSys, 'cmt'))
    else :
        os.chdir(os.path.join(maindir, packSys, pversion, 'cmt'))
    for line in os.popen('cmt show uses').readlines():
        if line.find('DBASE') != -1 or line.find('PARAM') != -1 or line.find('TOOLS') != -1:
            dnam = 'DBASE'
            if line.find('PARAM') != -1 : dnam = 'PARAM'
            if line.find('TOOLS') != -1 : dnam = 'TOOLS'
            file = line.split('(')[0].split()
            print file
            name = file[1]
            ver = file[2]
            hat = ''
            if len(file) == 4: hat = file[3] + '_'
            dver = hat + name + '_' + ver
            dtar = dnam + '_' + dver
            dep.write('[<A HREF=' + dnam + '/' + dtar + '.tar.gz>' + dtar + '</A>]\n')
    os.chdir(here)

# if GAUSS: get GENSER dependency
    if PACK == 'GAUSS':
        if os.path.exists(os.path.join(maindir, packSys, 'cmt')) :
            os.chdir(os.path.join(maindir, packSys, 'cmt'))
        else :
            os.chdir(os.path.join(maindir, packSys, pversion, 'cmt'))
        if os.environ.has_key('CMTPROJECTPATH'):
            status, value = getStatusOutput('cmt show macro_value GENSERVERSION')
            if isCMTMessage(value) :
                GENSER_version = 'GENSER_' + value.split('\n')[1]
            else:
                GENSER_version = 'GENSER_' + value
        else:
            status, GENSER_version = getStatusOutput('cmt show macro_value GENSER_native_version')

        if status != 0:
            print 'GENSER is not used'
        else:
            dtar = GENSER_version + tar_opt
            dep.write('[<A HREF=source/' + dtar + '.tar.gz>' + dtar + '</A>]\n')
        os.chdir(here)

# if ONLINE: get DIM dependency
    if PACK == 'ONLINE':
        if os.path.exists(os.path.join(maindir, packSys, 'cmt')) :
            os.chdir(os.path.join(maindir, packSys, 'cmt'))
        else :
            os.chdir(os.path.join(maindir, packSys, pversion, 'cmt'))
        status, DIM_version = getStatusOutput('cmt show macro_value DIM_native_version')
        if status != 0:
            print 'DIM is not used'
        else:
            dtar = 'DIM_' + DIM_version + tar_opt
            dep.write('[<A HREF=source/' + dtar + '.tar.gz>' + dtar + '</A>]\n')
        os.chdir(here)

# close the dephtml file
    dep.write('</MENU>\n')
    dep.close()

#
# ==== build the project tar file ===================================
#
# tar the main directory
    tarfile = TARDIR + '/' + packver + tar_bin + '.tar.gz'
    if binary == '':
        exclude_list = ' --exclude=' + ' --exclude='.join(exclude_source)
        if env != '':
            str = 'tar ' + exclude_list + ' -zcvf ' + tarfile + ' ' + env + '/' + pversion + ' ' + maindir
        else:
            str = 'tar ' + exclude_list + ' -zcvf ' + tarfile + ' ' + maindir
        tar_status, output = getStatusOutput(str)
        if tar_status != 0 :
            raise MakeLHCbTarException("The status for the command '%s' is %d" % (str, tar_status) )
        print 'make_tar: %s tar status= %s' % (tarfile, tar_status)
    else:
        exclude_list = ' --exclude=' + ' --exclude='.join(exclude_binary)
        status, output = getStatusOutput('find ' + maindir + ' -type d -name ' + binary + ' -print')
        binlist = output.replace('\n', ' ')
        str = 'tar ' + exclude_list + ' -zcvf ' + tarfile + ' ' + binlist
        tar_status, output = getStatusOutput(str)
        if tar_status != 0 :
            raise MakeLHCbTarException("The status for the command '%s' is %d" % (str, tar_status) )
        print  ' make_tar: %s tar status= %s' % (tarfile, tar_status)

#
# ==== if tar file is OK :create the html of the project tar file ======================
#
    if tar_status != 0 :
        print ' error making %s - STOP ' % (tarfile)
    else:
        htmlfile = HTMLDIR + '/' + packver + tar_bin + '.html'
        if os.path.exists(htmlfile):
            os.remove(htmlfile)
        html = open(htmlfile, 'w')
        html.write('<H3>Project ' + pname + ' version ' + pversion + title + '</H3>\n')
        html.write('<A NAME=' + packver + tar_bin + ' HREF=' + TARSRC + '/' + packver + tar_bin + '.tar.gz>' + packver + tar_bin + '</A>\n')
        for line in open(dephtml).readlines():
            html.write(line)
        html.close()
        # remove temporary file
        os.remove(dephtml)

        htmlmd5file = HTMLDIR + '/' + packver + tar_bin + '.md5'
        if os.path.exists(htmlmd5file) :
            os.remove(htmlmd5file)
        md5sum = calculateMD5(htmlfile)
        mdf = open(htmlmd5file, "w")
        mdf.write("%s  %s" % (md5sum, os.path.basename(htmlfile)))
        mdf.close()

#
# ==== if tar file is OK :create the md5 of the project tar file ======================
#

    if tar_status == 0 :
        md5file = TARDIR + '/' + packver + tar_bin + '.md5'
        md5sum = calculateMD5(tarfile)
        mdf = open(md5file, "w")
        mdf.write("%s  %s" % (md5sum, os.path.basename(tarfile)))
#
# ==== end of make_tar ==================================================================
#
    return tar_status


# ========================================================================
# create data_files tar file (DBASE,PARAM)
# ========================================================================
def data_files_tar(pname, pversion):
    global TARSRC

    p = getPackage(pname)
    if p.hat() :
        prefix = "_".join([p.project().upper(), p.hat(), p.Name()])
    else :
        prefix = "_".join([p.project().upper(), p.Name()])
    maindir = os.path.join(prefix.replace("_", os.sep), pversion)
    packver = prefix + '_' + pversion

    if not os.path.exists(maindir):
        print ' %s does not exist - STOP ' % (maindir)
        sys.exit()

    TARSRC = prefix.split('_')[0]
    TARDIR = os.path.join(LHCBTAR, TARSRC)
    tarfile = os.path.join(TARDIR, packver + '.tar.gz')

# dereference GeantFiles
    deref = ''
    if pname == 'Geant4Files' : deref = ' -h '

# tar the main directory
    str = 'tar ' + deref + ' -zcvf ' + tarfile + ' ' + TARSRC + '/cmt ' + maindir
    print str
    tar_status, output = getStatusOutput(str)
    if tar_status != 0 :
        raise MakeLHCbTarException("The status for the command '%s' is %d" % (str, tar_status) )

    print 'data_files_tar: %s tar status= %s ' % (tarfile, tar_status)

    if tar_status == 0:
#   create the HTML file
        htmlfile = HTMLDIR + '/' + packver + '.html'
        if os.path.exists(htmlfile): os.remove(htmlfile)
        html = open(htmlfile, 'w')
        html.write('<H3>' + pname + ' version ' + pversion + '</H3>\n')
        html.write('<A NAME=' + maindir + ' HREF=' + TARSRC + '/' + packver + '.tar.gz>' + packver + '</A>\n')
        html.write('</MENU>\n')
        html.close()

    if tar_status == 0 :
        md5file = os.path.join(TARDIR, packver + '.md5')
        md5sum = calculateMD5(tarfile)
        mdf = open(md5file, "w")
        mdf.write("%s  %s" % (md5sum, os.path.basename(tarfile)))

    return tar_status


# ========================================================================
# create the web page concatenating all existing html files
# ========================================================================
def create_web():
    if debug_flag == 1:
        print 'create_web page'

    os.chdir(HTMLDIR)
    webfile = 'distribution.htm'
    if os.path.exists(webfile):
        os.remove(webfile)

    flist = fnmatch.filter(os.listdir(HTMLDIR), '*.html')
    flist.sort()

    web = open(webfile, 'w')

    for line in open('Header.txt').readlines():
        web.write(line + '\n')

    for f in flist:
        for line in open(f).readlines():
            web.write(line)

    d = time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime())
    web.write('<HR>Last Update : ' + d + '\n')

    for line in open('Footer.txt').readlines():
        web.write(line + '\n')

    web.close()

    webmd5file = 'distribution.md5'
    if os.path.exists(webmd5file):
        os.remove(webmd5file)

    md5sum = calculateMD5(webfile)
    mdf = open(webmd5file, "w")
    mdf.write("%s  %s" % (md5sum, os.path.basename(webfile)))
    mdf.close()

    os.chdir(here)


#---------------------------------------------------------------------
if __name__ == "__main__":


    arguments = sys.argv[1:]
    if len(sys.argv) == 1:
        help()
        sys.exit()
    try:
        keys, values = getopt.getopt(arguments, 'hdwb:p:v:x',
            ['help', 'debug', 'web', 'binary', 'project=', 'version='])

    except getopt.GetoptError:
        help()
        sys.exit()

    binary = ''
    use_dbg_externals = True
    for key, value in keys:
        if key in ('-d', '--debug'):
            debug_flag = 1
        if key in ('-h', '--help'):
            help()
        if key in ('-v', '--version'):
            pversion = value
        if key in ('-p', '--project'):
            pname = value
        if key in ('-b', '--binary'):
            binary = value
        if key in ('-x', '--dbgext'):
            # Special option added to allow refering to DBG version of LCGCMT
            use_dbg_externals = True
        if key in ('--nodbgext'):
            # Special option added to allow refering to DBG version of LCGCMT
            use_dbg_externals = False

        if key in ('-w', '--web'):
            rc = create_web()
            sys.exit()

# print action list
    print '+++++++++++++++++++++++ Start mkLHCbtar.py - version no %s ' % script_version
    print pname, pversion, binary
    print 'debug_flag= %s' % (debug_flag)

    tar_status = make_tar(pname, pversion, binary, use_dbg_externals)

    if tar_status == 0 : rc = create_web()

    print '+++++++++++++++++++++++ End mkLHCbtar.py -version no ', script_version

    sys.exit(tar_status)
