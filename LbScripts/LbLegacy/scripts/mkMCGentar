#!/usr/bin/env python

""" Script to make a GENSER tar file
 - 070206 - first version
 - 070427 - fix help and comments
 - 071004 - added md5 sum calculation
 - 080619 - check cteq6 function in the extra "share" tar ball
 - 081013 - Fixed non-versioned packages projects
"""
#------------------------------------------------------------------------------

from LbLegacy.Utils import getStatusOutput

from LbLegacy.install_project import calculateMD5

from LbUtils.CMT.Common import isCMTMessage
from LbUtils.Temporary import TempDir

tmpdir = TempDir(prefix="mkMCGentar")

import sys, os, getopt, time, shutil, re
version = '081013'
#---------------------------------------------------------------------------
def usage() :
    print 'Usage:'
    print '  python mkMCGentar.py -n GAUSS_<version> '
    print 'Try "mkMCGentar.py -h" for more information.'
    sys.exit()
#--------------------------------------------------------------------------
def help() :
    print """make a GENSER tar file for a given Gauss version with the necessary libraries\n
    Usage:
      python mkMCGentar.py [-d or --debug] \n
      -d                                 - debug mode \n
      -b or --binary=  <binary>          - for this binary platform \n
      -n or --native=  <Lb project_vers> - application version from where to get native.versions \n
      -t or --target=  <ouput directory> - destination directoy for the GENSER tar file produced \n
    Examples:
      cd $LHCBTAR/source
      python mkMCGentar.py --native=GAUSS_<version> \n
      gets the libraries used by GAUSS_<version> from $LCGEXTERNAL/MCGenerators used by Gauss>\n

      """
    sys.exit()

#----------------------------------------------------------------------------
#
#  get native versions ==============================================
#
def get_native_versions(native_version):
    if debug_flag == 1: print 'get_native_versions',native_version
    packages_versions = {}

    NAME = native_version.split('_')[0]
    version =  native_version.split('_')[1]
    name = NAME.lower().capitalize()
    release_area = os.getenv(name +'_release_area')
    if debug_flag == 1: print 'get_native_versions - release_area = ',release_area, ' ', name

    Sys_dir = os.path.join(release_area,NAME,native_version,name+'Sys','cmt')
    if not os.path.exists(Sys_dir) :
        Sys_dir = os.path.join(release_area,NAME,native_version,name+'Sys',version,'cmt')
    if debug_flag == 1: print 'get_native_versions -  SysDir=',Sys_dir
    os.chdir(Sys_dir)

    status,value = getStatusOutput('cmt sh macro_value GENSERVERSION')
    if isCMTMessage(value) :
        GENSERVERSION = value.split('\n')[1]
    else:
        GENSERVERSION = value
    packages_versions['GENSER'] = GENSERVERSION
    if debug_flag == 1: print 'get_native_versions -  GENSERVERSION=', GENSERVERSION

    for fdline in os.popen('cmt show macros native').readlines():
        if fdline.find('config_version') == -1:
            pack = fdline.split('_')[0]
            vers = fdline.split("'")[1]
            packages_versions[pack] = vers

    packages_homes = {}
    for p in packages_versions :
        packages_homes[p] = os.popen("cmt show macro_value %s_home" % p).read()[:-1]

    os.chdir(release_area)
    return packages_versions, packages_homes


#----------------------------------------------------------------------------
#
#  get HepMC version ==============================================
#
def get_hepmc_version(native_version):
    """ Utility method to lookup the HepMC version """
    if debug_flag == 1: print 'get_hepmc_version', native_version

    NAME = native_version.split('_')[0]
    version =  native_version.split('_')[1]
    name = NAME.lower().capitalize()
    release_area = os.getenv(name +'_release_area')
    if debug_flag == 1: print 'get_hepmc_version - release_area = ',release_area

    Sys_dir = os.path.join(release_area,NAME,native_version,name+'Sys','cmt')
    if not os.path.exists(Sys_dir) :
        Sys_dir = os.path.join(release_area,NAME,native_version,name+'Sys',version,'cmt')
    if debug_flag == 1: print 'get_hepmc_version -  ',Sys_dir
    os.chdir(Sys_dir)

    # Checking the HepMC version.
    # Using value of macro HepMC_config_version
    status,value = getStatusOutput('cmt sh macro_value HepMC_config_version')
    if isCMTMessage(value) :
        HepMC_version = value.split('\n')[1]
    else:
        HepMC_version  = value

    return HepMC_version

#----------------------------------------------------------------------------
#
#  get LCG version ==============================================
#
def get_lcgcmt_version(native_version):
    """ Utility method to lookup the LCGCMT version """
    if debug_flag == 1: print 'get_lcgcmt_version', native_version

    NAME = native_version.split('_')[0]
    version =  native_version.split('_')[1]
    name = NAME.lower().capitalize()
    release_area = os.getenv(name +'_release_area')
    if debug_flag == 1: print 'get_lcgcmt_version - release_area = ',release_area

    Sys_dir = os.path.join(release_area,NAME,native_version,name+'Sys','cmt')
    if not os.path.exists(Sys_dir) :
        Sys_dir = os.path.join(release_area,NAME,native_version,name+'Sys',version,'cmt')
    if debug_flag == 1: print 'get_lcgcmt_version -  ',Sys_dir
    os.chdir(Sys_dir)

    # Checking the HepMC version.
    # Using value of macro HepMC_config_version
    status,value = getStatusOutput('cmt sh macro_value LCG_config_version')
    if isCMTMessage(value) :
        LCG_version = value.split('\n')[1]
    else:
        LCG_version  = value

    return LCG_version


#----------------------------------------------------------------------------
#
#  CHeck if we take stuff from MCGenerators_hepmc of MCGenerators_lcgcmt ====
#
def check_MCGenerators_flavour(package_homes):

    lname = "check_MCGenerators_flavour"
    flavour = None
    consistent = True
    flavour_types = {"hepmc": "MCGenerators_hepmc", "lcgcmt":"MCGenerators_lcgcmt"}

    for package in package_homes.keys():
        home = package_homes[package]

        # Ignoring package like GENSER with no home, and soft to package...
        if home == None or len(home) == 0:
            continue

        # Now looking for the MCGenerator flavour
        m = re.search("(MCGenerators_\w+)", home)
        if (m==None):
            # We are trying to package a external which is NOT in the generators, this should
            # NOT happen, so we bail out...
            print >>sys.stderr, "%s - %s - Package %s is not in MCGenerators - Home= %s" % (lname, package, home)
            sys.exit(1);

        # We have a match, check if it's correct...
        tmpmatch = m.group(1)
        package_flavour = None

        # Iterate of LOV to check if tghe type is known...
        for key, value in flavour_types.items():
            if tmpmatch.startswith(value):
                package_flavour = key

        # Checking we got a match
        if package_flavour == None:
            print >>sys.stderr, "%s - Package %s did not match known MCGenerators flavours - Home= %s" % (lname, package, home)
            sys.exit(1);

        # Now checking consistency...
        if flavour == None:
            # First external, we set the flavour for all of them...
            flavour = package_flavour
        else:
            # Otherwise we check consistency
            if package_flavour != flavour:
                consistent = False
                print >>sys.stderr, "%s - Error: Package %s of incorrect flavour: %s - Home= %s" % (lname, package, package_flavour, home)
            else:
                print "%s - Package %s flavour: %s " % (lname, package, package_flavour)

    if not consistent:
        print >>sys.stderr, "%s - Inconsistency in MCGenerators flavour - Aborting" % (lname)
        sys.exit(1);

    return flavour



#
#  get MCGen tar file names ===============================================
#
def get_MCGen_tar_name(root,gen,native,bin):
    if debug_flag == 1: print ' get_MCGen_tar_name for %s %s %s %s '%(root,gen,native,bin)
    rootdef = os.path.join(root, gen)
    name = None
    fullfilename = None

    # Looking for the file...
    tmpname = gen+'-'+native+'-'+bin+'.tgz'
    tmpfullfilename = os.path.join(rootdef, tmpname)
    if os.path.exists(tmpfullfilename):
        print ' get_MCGen_tar_name Found %s'% tmpfullfilename
        name = tmpname
        fullfilename = tmpfullfilename
    else:
        # Looking for the pp version instead of ++
        gen = gen.replace("pp", "++")
        tmpname = gen+'-'+native+'-'+bin+'.tgz'
        tmpfullfilename = os.path.join(rootdef, tmpname)
        if os.path.exists(tmpfullfilename):
            print ' get_MCGen_tar_name Found %s'% tmpfullfilename
            name = tmpname
            fullfilename = tmpfullfilename

    return (name, fullfilename)


def get_MCGen_base(package_home, genname, genversion):
    return os.path.dirname(os.path.dirname(os.path.dirname(package_home)))

#
#  get tar files from lcg  ==================================================
#
def get_tar_files(packages_versions, packages_homes, binary_dir, HepMC_version, mcgen_flavour):

    if debug_flag == 1: print ' get_tar_files for GENSER %s %s '%(packages_versions['GENSER'],binary_dir)

    GENSER_vers = 'GENSER_'+packages_versions['GENSER']
    tarfile = os.path.join(outputdir,GENSER_vers+'_'+binary_dir+'.tar.gz')
    md5file = os.path.join(outputdir,GENSER_vers+'_'+binary_dir+'.md5')

    os.chdir(tmpdir.getName())

    missing_tars = []
    missing_pdfs = []

    for key in packages_versions.keys():

        if key == 'GENSER':
            print "Ignoring %s ================================================================================" % key
            continue

        print
        print "Processing %s ================================================================================" % key

        # Seting the global vriables to be able to locate the tarballs
        gen_base = get_MCGen_base(packages_homes[key], key, packages_versions[key])
        gen_root = os.path.basename(gen_base)
        MCGen_tar_dir = os.path.join(lcg_dir,'MCGenerators_%s%s' % (mcgen_flavour, HepMC_version),'distribution')
        if gen_root :
            if not os.path.exists(gen_root):
                os.mkdir(gen_root)
            os.chdir(gen_root)
        value = packages_versions[key]

        # Trick to deal with the packages ending in pp instead of ++
        orig_key = key
        if orig_key.endswith("pp"):
            key = orig_key.replace("pp", "++")

        (file, fullfilename) = get_MCGen_tar_name(MCGen_tar_dir,key,value,binary_dir)

        print "-----------------------------------"
        print " dist dir     : %s" % MCGen_tar_dir
        print " orig Package : %s" % orig_key
        print " fixed Package: %s" % key
        print " Version      : %s" % value
        print " Binary       : %s" % binary_dir
        print " Tar name     : %s" % file
        print " Tar file     : %s" % fullfilename
        print "-----------------------------------"

        print 'get_tar_files Processing %s '%(file)

        #
        # Check that the file file actually exists
        # FAIL otherwise, we need to know...
        #


        if file == None or  not os.path.exists(fullfilename):
            print "ERROR"
            print "ERROR *** Tar file for %s %s in %s does NOT exist" % (key, value, MCGen_tar_dir)
            print "ERROR"
            missing_tars.append(orig_key)
        else:

            if os.path.exists(fullfilename):

                # Copying the tar file locally - why ? XXX
                #if debug_flag == 1:
                #    print "Copying tar file to local directory %s" % str
                #shutil.copyfile(os.path.join(MCGen_tar_dir,file),file)


                # Untarring the binary tarball for the project
                fullfile = fullfilename
                key_value = os.path.join(key,value)
                str = 'tar --extract --ungzip --file '+fullfile +' '+ os.path.join(key_value,binary_dir)
                if debug_flag == 1:
                    print "Running: %s" % str
                rc = os.system(str)

                # Create link if the original key is different from the effective:
                # i.e. we had to replace "pp" by "++"
                if orig_key != key:
                    os.symlink(key, orig_key)

                # Extract a few PDFs from lhapdf main tar file
                if key == 'lhapdf':

                    #
                    # Extraction of PDFs cteq6ll/cteq6l
                    #

                    # First trying in key_value + "/share/PDFsets/"
                    print "Looking for PDFs in " + key_value + "/share/PDFsets"

                    str = 'tar --extract --ungzip --file '+fullfile+' '+key_value+'/share/PDFsets/cteq6l.LHpdf'+' '+key_value+'/share/PDFsets/cteq6ll.LHpdf'
                    if debug_flag == 1:
                        print "Running: %s" % str
                    rc = os.system(str)

                    # First trying in key_value + "/share/lhapdf/PDFsets/"
                    if rc != 0 :
                        print "Error getting PDFs - Looking in " + key_value + "/share/lhapdf/PDFsets"
                        str = 'tar --extract --ungzip --file '+fullfile+' '+key_value+'/share/lhapdf/PDFsets/cteq6l.LHpdf'+' '+key_value+'/share/lhapdf/PDFsets/cteq6ll.LHpdf'
                        if debug_flag == 1:
                            print "Running: %s" % str
                        rc = os.system(str)

                    if rc != 0 :
                        # Change file altogether...
                        if os.path.exists(file):
                            os.remove(file)
                        file = file.replace(binary_dir, "share")
                        fullfile = os.path.join(MCGen_tar_dir, key, file)
                        print "Error getting PDFs - Looking in share file %s" %  fullfile
                        #if os.path.exists(os.path.join(MCGen_tar_dir,file)):
                        #    shutil.copyfile(os.path.join(MCGen_tar_dir,file),file)
                        str = 'tar --extract --ungzip --file '+fullfile+' '+key_value+'/share/PDFsets/cteq6l.LHpdf'+' '+key_value+'/share/PDFsets/cteq6ll.LHpdf'
                        if debug_flag == 1:
                            print "Running: %s" % str
                        rc = os.system(str)
                    if rc == 0 :
                        print "%s/share/PDFsets/cteq6l.LHpdf found in %s" % (key_value, file)
                        print "%s/share/PDFsets/cteq6ll.LHpdf found in %s" % (key_value, file)
                    else:
                        missing_pdfs.append("cteq6l.LHpdf")
                        missing_pdfs.append("cteq6ll.LHpdf")


                    #
                    # Extra list of PDFs to be added to the Genser release
                    #

                    extra_pdfs = [ '/share/lhapdf/PDFsets/CT09MCS.LHgrid', '/share/lhapdf/PDFsets/CT10nlo.LHgrid',
                                  '/share/lhapdf/PDFsets/MSTW2008lo68cl.LHgrid', '/share/lhapdf/PDFsets/MSTW2008nlo68cl.LHgrid']
                    for p in extra_pdfs:
                        cmd = 'tar --extract --ungzip --file '+fullfile+' '+key_value + p
                        if debug_flag == 1:
                            print "Running: %s" % cmd
                        rc = os.system(cmd)
                        if rc == 0 :
                            print "*** Found %s in %s" % (p, file)
                        else:
                            print "*** Missing %s in %s" % (p, file)
                            missing_pdfs.append(p)

                # Removing the local copy if it was done
                if os.path.exists(file):
                    os.remove(file)



        os.chdir(tmpdir.getName())

    # Creating directory tar
    str = 'tar zcf '+tarfile+' '+' '.join(os.listdir(tmpdir.getName()))
    if debug_flag == 1:
        print str
    rc = os.system(str)

    # Creating MD5SUM file
    if rc == 0:
        md5sum = calculateMD5(tarfile)
        mdf = open(md5file,"w")
        mdf.write("%s  %s" % (md5sum,os.path.basename(tarfile)))


    # Summary
    print "Summary ================================================================================"
    print "tar file: %s" % tarfile
    print "md5sum  : %s" % md5sum

    if len(missing_tars) > 0:
        print
        print "There are missing tar file(s) for package(s):"
        for f in missing_tars:
            print "\t- %s" %f

    if len(missing_pdfs) > 0:
        print
        print "There are missing PDF file(s) for package(s):"
        for f in missing_pdfs:
            print "\t- %s" %f


#
# -------------------------------------------------------------------
#



#
#---------------------------------------------------------------------
if __name__ == "__main__":

    here = os.getcwd()

    logname = os.path.join(here,'mkMCGentar.log')
    if os.path.exists(logname): os.remove(logname)
    str = " =========== "+time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime())+"\n"

    #if sys.platform == 'win32':
    #    rmcmd = 'rmdir /s/q '
    #else:
    #    rmcmd = '/bin/rm -fr '

    lcg_dir = '/afs/cern.ch/sw/lcg/external'
    lhcbtar = os.path.join(os.environ['LHCBHOME'],'distribution','source')
    outputdir = lhcbtar
    binary = os.environ['CMTCONFIG']
    source = ' '
    package = ' '
    version = 0
    native_version = 0

    arguments = sys.argv[1:]
    if len(sys.argv) == 1:
        help()
        sys.exit()
    try:
        keys, values = getopt.getopt(arguments,'hdb:n:t:',
                       ['help','debug','binary=','native=','target='])

    except getopt.GetoptError:
        help()
        sys.exit()

    debug_flag = 0
    for key,value in keys:
        if key in ('-d', '--debug'):
            debug_flag = 1
        if key in ('-h', '--help'):
            help()
        if key in ('-b', '--binary'):
            binary = value
        if key in ('-n', '--native'):
            native_version = value
        if key in ('-t', '--target'):
            print "output directory for tarfiles: %s" % value
            outputdir = value


    packages_versions, packages_homes = get_native_versions(native_version)
    if debug_flag == 1:
        print ' packages_versions = ', packages_versions
        print ' packages_homes = ', packages_homes

    # Check whether we take the generators from MCGEnerators_hepmc of MCGenerators_lcgcmt
    # And also check consistency...
    MCGenerators_flavour = check_MCGenerators_flavour(packages_homes)

    mcgen_version = None
    if MCGenerators_flavour == "lcgcmt":
        mcgen_version = get_lcgcmt_version(native_version)
        if debug_flag == 1:
            print ' LCG_version = ', mcgen_version

    if MCGenerators_flavour == "hepmc":
        mcgen_version = get_hepmc_version(native_version)
        if debug_flag == 1:
            print ' HepMC_version = ', mcgen_version


    if packages_versions.has_key('GENSER') != 1:
        sys.exit()
    else:
        rc = get_tar_files(packages_versions, packages_homes, binary, mcgen_version, MCGenerators_flavour)
