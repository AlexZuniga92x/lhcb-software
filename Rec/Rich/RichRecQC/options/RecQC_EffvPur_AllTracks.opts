
// Job options to produce PID results with varying nsigma cuts

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllTightKaon0" };
RiPIDMonAllTightKaon0.MinPCut = 2;
RiPIDMonAllTightKaon0.MaxPCut = 150;
RiPIDMonAllTightKaon0.MCHistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK0/MC/";
RiPIDMonAllTightKaon0.HistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK0/";
RiPIDMonAllTightKaon0.FinalPrintout = true;
RiPIDMonAllTightKaon0.TightNSigmaCutKaon = 0;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllTightKaon1" };
RiPIDMonAllTightKaon1.MinPCut = 2;
RiPIDMonAllTightKaon1.MaxPCut = 150;
RiPIDMonAllTightKaon1.MCHistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK1/MC/";
RiPIDMonAllTightKaon1.HistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK1/";
RiPIDMonAllTightKaon1.FinalPrintout = true;
RiPIDMonAllTightKaon1.TightNSigmaCutKaon = 1;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllTightKaon2" };
RiPIDMonAllTightKaon2.MinPCut = 2;
RiPIDMonAllTightKaon2.MaxPCut = 150;
RiPIDMonAllTightKaon2.MCHistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK2/MC/";
RiPIDMonAllTightKaon2.HistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK2/";
RiPIDMonAllTightKaon2.FinalPrintout = true;
RiPIDMonAllTightKaon2.TightNSigmaCutKaon = 2;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllTightKaon3" };
RiPIDMonAllTightKaon3.MinPCut = 2;
RiPIDMonAllTightKaon3.MaxPCut = 150;
RiPIDMonAllTightKaon3.MCHistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK3/MC/";
RiPIDMonAllTightKaon3.HistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK3/";
RiPIDMonAllTightKaon3.FinalPrintout = true;
RiPIDMonAllTightKaon3.TightNSigmaCutKaon = 3;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllTightKaon4" };
RiPIDMonAllTightKaon4.MinPCut = 2;
RiPIDMonAllTightKaon4.MaxPCut = 150;
RiPIDMonAllTightKaon4.MCHistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK4/MC/";
RiPIDMonAllTightKaon4.HistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK4/";
RiPIDMonAllTightKaon4.FinalPrintout = true;
RiPIDMonAllTightKaon4.TightNSigmaCutKaon = 4;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllTightKaon5" };
RiPIDMonAllTightKaon5.MinPCut = 2;
RiPIDMonAllTightKaon5.MaxPCut = 150;
RiPIDMonAllTightKaon5.MCHistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK5/MC/";
RiPIDMonAllTightKaon5.HistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK5/";
RiPIDMonAllTightKaon5.FinalPrintout = true;
RiPIDMonAllTightKaon5.TightNSigmaCutKaon = 5;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllTightKaon6" };
RiPIDMonAllTightKaon6.MinPCut = 2;
RiPIDMonAllTightKaon6.MaxPCut = 150;
RiPIDMonAllTightKaon6.MCHistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK6/MC/";
RiPIDMonAllTightKaon6.HistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK6/";
RiPIDMonAllTightKaon6.FinalPrintout = true;
RiPIDMonAllTightKaon6.TightNSigmaCutKaon = 6;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllTightKaon7" };
RiPIDMonAllTightKaon7.MinPCut = 2;
RiPIDMonAllTightKaon7.MaxPCut = 150;
RiPIDMonAllTightKaon7.MCHistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK7/MC/";
RiPIDMonAllTightKaon7.HistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK7/";
RiPIDMonAllTightKaon7.FinalPrintout = true;
RiPIDMonAllTightKaon7.TightNSigmaCutKaon = 7;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllTightKaon8" };
RiPIDMonAllTightKaon8.MinPCut = 2;
RiPIDMonAllTightKaon8.MaxPCut = 150;
RiPIDMonAllTightKaon8.MCHistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK8/MC/";
RiPIDMonAllTightKaon8.HistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK8/";
RiPIDMonAllTightKaon8.FinalPrintout = true;
RiPIDMonAllTightKaon8.TightNSigmaCutKaon = 8;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllTightKaon9" };
RiPIDMonAllTightKaon9.MinPCut = 2;
RiPIDMonAllTightKaon9.MaxPCut = 150;
RiPIDMonAllTightKaon9.MCHistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK9/MC/";
RiPIDMonAllTightKaon9.HistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK9/";
RiPIDMonAllTightKaon9.FinalPrintout = true;
RiPIDMonAllTightKaon9.TightNSigmaCutKaon = 9;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllTightKaon10" };
RiPIDMonAllTightKaon10.MinPCut = 2;
RiPIDMonAllTightKaon10.MaxPCut = 150;
RiPIDMonAllTightKaon10.MCHistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK10/MC/";
RiPIDMonAllTightKaon10.HistoPath = "RICH/PIDQC/ALL/2TO150/TIGHTK10/";
RiPIDMonAllTightKaon10.FinalPrintout = true;
RiPIDMonAllTightKaon10.TightNSigmaCutKaon = 10;

// ========================================================================

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllLooseKaon0" };
RiPIDMonAllLooseKaon0.MinPCut = 2;
RiPIDMonAllLooseKaon0.MaxPCut = 150;
RiPIDMonAllLooseKaon0.MCHistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK0/MC/";
RiPIDMonAllLooseKaon0.HistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK0/";
RiPIDMonAllLooseKaon0.FinalPrintout = true;
RiPIDMonAllLooseKaon0.LooseNSigmaCutKaon = 0;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllLooseKaon1" };
RiPIDMonAllLooseKaon1.MinPCut = 2;
RiPIDMonAllLooseKaon1.MaxPCut = 150;
RiPIDMonAllLooseKaon1.MCHistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK1/MC/";
RiPIDMonAllLooseKaon1.HistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK1/";
RiPIDMonAllLooseKaon1.FinalPrintout = true;
RiPIDMonAllLooseKaon1.LooseNSigmaCutKaon = 1;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllLooseKaon2" };
RiPIDMonAllLooseKaon2.MinPCut = 2;
RiPIDMonAllLooseKaon2.MaxPCut = 150;
RiPIDMonAllLooseKaon2.MCHistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK2/MC/";
RiPIDMonAllLooseKaon2.HistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK2/";
RiPIDMonAllLooseKaon2.FinalPrintout = true;
RiPIDMonAllLooseKaon2.LooseNSigmaCutKaon = 2;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllLooseKaon3" };
RiPIDMonAllLooseKaon3.MinPCut = 2;
RiPIDMonAllLooseKaon3.MaxPCut = 150;
RiPIDMonAllLooseKaon3.MCHistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK3/MC/";
RiPIDMonAllLooseKaon3.HistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK3/";
RiPIDMonAllLooseKaon3.FinalPrintout = true;
RiPIDMonAllLooseKaon3.LooseNSigmaCutKaon = 3;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllLooseKaon4" };
RiPIDMonAllLooseKaon4.MinPCut = 2;
RiPIDMonAllLooseKaon4.MaxPCut = 150;
RiPIDMonAllLooseKaon4.MCHistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK4/MC/";
RiPIDMonAllLooseKaon4.HistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK4/";
RiPIDMonAllLooseKaon4.FinalPrintout = true;
RiPIDMonAllLooseKaon4.LooseNSigmaCutKaon = 4;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllLooseKaon5" };
RiPIDMonAllLooseKaon5.MinPCut = 2;
RiPIDMonAllLooseKaon5.MaxPCut = 150;
RiPIDMonAllLooseKaon5.MCHistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK5/MC/";
RiPIDMonAllLooseKaon5.HistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK5/";
RiPIDMonAllLooseKaon5.FinalPrintout = true;
RiPIDMonAllLooseKaon5.LooseNSigmaCutKaon = 5;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllLooseKaon6" };
RiPIDMonAllLooseKaon6.MinPCut = 2;
RiPIDMonAllLooseKaon6.MaxPCut = 150;
RiPIDMonAllLooseKaon6.MCHistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK6/MC/";
RiPIDMonAllLooseKaon6.HistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK6/";
RiPIDMonAllLooseKaon6.FinalPrintout = true;
RiPIDMonAllLooseKaon6.LooseNSigmaCutKaon = 6;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllLooseKaon7" };
RiPIDMonAllLooseKaon7.MinPCut = 2;
RiPIDMonAllLooseKaon7.MaxPCut = 150;
RiPIDMonAllLooseKaon7.MCHistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK7/MC/";
RiPIDMonAllLooseKaon7.HistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK7/";
RiPIDMonAllLooseKaon7.FinalPrintout = true;
RiPIDMonAllLooseKaon7.LooseNSigmaCutKaon = 7;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllLooseKaon8" };
RiPIDMonAllLooseKaon8.MinPCut = 2;
RiPIDMonAllLooseKaon8.MaxPCut = 150;
RiPIDMonAllLooseKaon8.MCHistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK8/MC/";
RiPIDMonAllLooseKaon8.HistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK8/";
RiPIDMonAllLooseKaon8.FinalPrintout = true;
RiPIDMonAllLooseKaon8.LooseNSigmaCutKaon = 8;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllLooseKaon9" };
RiPIDMonAllLooseKaon9.MinPCut = 2;
RiPIDMonAllLooseKaon9.MaxPCut = 150;
RiPIDMonAllLooseKaon9.MCHistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK9/MC/";
RiPIDMonAllLooseKaon9.HistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK9/";
RiPIDMonAllLooseKaon9.FinalPrintout = true;
RiPIDMonAllLooseKaon9.LooseNSigmaCutKaon = 9;

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonAllLooseKaon10" };
RiPIDMonAllLooseKaon10.MinPCut = 2;
RiPIDMonAllLooseKaon10.MaxPCut = 150;
RiPIDMonAllLooseKaon10.MCHistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK10/MC/";
RiPIDMonAllLooseKaon10.HistoPath = "RICH/PIDQC/ALL/2TO150/LOOSEK10/";
RiPIDMonAllLooseKaon10.FinalPrintout = true;
RiPIDMonAllLooseKaon10.LooseNSigmaCutKaon = 10;
