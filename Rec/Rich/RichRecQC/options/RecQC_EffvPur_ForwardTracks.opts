
// Job options to produce PID results with varying nsigma cuts

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdTightKaon0" };
RiPIDMonFrwdTightKaon0.MinPCut = 2;
RiPIDMonFrwdTightKaon0.MaxPCut = 150;
RiPIDMonFrwdTightKaon0.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK0/MC/";
RiPIDMonFrwdTightKaon0.HistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK0/";
RiPIDMonFrwdTightKaon0.FinalPrintout = true;
RiPIDMonFrwdTightKaon0.TightNSigmaCutKaon = 0;
RiPIDMonFrwdTightKaon0.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdTightKaon1" };
RiPIDMonFrwdTightKaon1.MinPCut = 2;
RiPIDMonFrwdTightKaon1.MaxPCut = 150;
RiPIDMonFrwdTightKaon1.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK1/MC/";
RiPIDMonFrwdTightKaon1.HistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK1/";
RiPIDMonFrwdTightKaon1.FinalPrintout = true;
RiPIDMonFrwdTightKaon1.TightNSigmaCutKaon = 1;
RiPIDMonFrwdTightKaon1.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdTightKaon2" };
RiPIDMonFrwdTightKaon2.MinPCut = 2;
RiPIDMonFrwdTightKaon2.MaxPCut = 150;
RiPIDMonFrwdTightKaon2.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK2/MC/";
RiPIDMonFrwdTightKaon2.HistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK2/";
RiPIDMonFrwdTightKaon2.FinalPrintout = true;
RiPIDMonFrwdTightKaon2.TightNSigmaCutKaon = 2;
RiPIDMonFrwdTightKaon2.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdTightKaon3" };
RiPIDMonFrwdTightKaon3.MinPCut = 2;
RiPIDMonFrwdTightKaon3.MaxPCut = 150;
RiPIDMonFrwdTightKaon3.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK3/MC/";
RiPIDMonFrwdTightKaon3.HistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK3/";
RiPIDMonFrwdTightKaon3.FinalPrintout = true;
RiPIDMonFrwdTightKaon3.TightNSigmaCutKaon = 3;
RiPIDMonFrwdTightKaon3.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdTightKaon4" };
RiPIDMonFrwdTightKaon4.MinPCut = 2;
RiPIDMonFrwdTightKaon4.MaxPCut = 150;
RiPIDMonFrwdTightKaon4.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK4/MC/";
RiPIDMonFrwdTightKaon4.HistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK4/";
RiPIDMonFrwdTightKaon4.FinalPrintout = true;
RiPIDMonFrwdTightKaon4.TightNSigmaCutKaon = 4;
RiPIDMonFrwdTightKaon4.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdTightKaon5" };
RiPIDMonFrwdTightKaon5.MinPCut = 2;
RiPIDMonFrwdTightKaon5.MaxPCut = 150;
RiPIDMonFrwdTightKaon5.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK5/MC/";
RiPIDMonFrwdTightKaon5.HistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK5/";
RiPIDMonFrwdTightKaon5.FinalPrintout = true;
RiPIDMonFrwdTightKaon5.TightNSigmaCutKaon = 5;
RiPIDMonFrwdTightKaon5.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdTightKaon6" };
RiPIDMonFrwdTightKaon6.MinPCut = 2;
RiPIDMonFrwdTightKaon6.MaxPCut = 150;
RiPIDMonFrwdTightKaon6.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK6/MC/";
RiPIDMonFrwdTightKaon6.HistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK6/";
RiPIDMonFrwdTightKaon6.FinalPrintout = true;
RiPIDMonFrwdTightKaon6.TightNSigmaCutKaon = 6;
RiPIDMonFrwdTightKaon6.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdTightKaon7" };
RiPIDMonFrwdTightKaon7.MinPCut = 2;
RiPIDMonFrwdTightKaon7.MaxPCut = 150;
RiPIDMonFrwdTightKaon7.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK7/MC/";
RiPIDMonFrwdTightKaon7.HistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK7/";
RiPIDMonFrwdTightKaon7.FinalPrintout = true;
RiPIDMonFrwdTightKaon7.TightNSigmaCutKaon = 7;
RiPIDMonFrwdTightKaon7.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdTightKaon8" };
RiPIDMonFrwdTightKaon8.MinPCut = 2;
RiPIDMonFrwdTightKaon8.MaxPCut = 150;
RiPIDMonFrwdTightKaon8.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK8/MC/";
RiPIDMonFrwdTightKaon8.HistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK8/";
RiPIDMonFrwdTightKaon8.FinalPrintout = true;
RiPIDMonFrwdTightKaon8.TightNSigmaCutKaon = 8;
RiPIDMonFrwdTightKaon8.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdTightKaon9" };
RiPIDMonFrwdTightKaon9.MinPCut = 2;
RiPIDMonFrwdTightKaon9.MaxPCut = 150;
RiPIDMonFrwdTightKaon9.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK9/MC/";
RiPIDMonFrwdTightKaon9.HistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK9/";
RiPIDMonFrwdTightKaon9.FinalPrintout = true;
RiPIDMonFrwdTightKaon9.TightNSigmaCutKaon = 9;
RiPIDMonFrwdTightKaon9.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdTightKaon10" };
RiPIDMonFrwdTightKaon10.MinPCut = 2;
RiPIDMonFrwdTightKaon10.MaxPCut = 150;
RiPIDMonFrwdTightKaon10.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK10/MC/";
RiPIDMonFrwdTightKaon10.HistoPath = "RICH/PIDQC/FRWD/2TO150/TIGHTK10/";
RiPIDMonFrwdTightKaon10.FinalPrintout = true;
RiPIDMonFrwdTightKaon10.TightNSigmaCutKaon = 10;
RiPIDMonFrwdTightKaon10.TrackSelection = { "unique", "forward" };

// ========================================================================

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdLooseKaon0" };
RiPIDMonFrwdLooseKaon0.MinPCut = 2;
RiPIDMonFrwdLooseKaon0.MaxPCut = 150;
RiPIDMonFrwdLooseKaon0.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK0/MC/";
RiPIDMonFrwdLooseKaon0.HistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK0/";
RiPIDMonFrwdLooseKaon0.FinalPrintout = true;
RiPIDMonFrwdLooseKaon0.LooseNSigmaCutKaon = 0;
RiPIDMonFrwdLooseKaon0.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdLooseKaon1" };
RiPIDMonFrwdLooseKaon1.MinPCut = 2;
RiPIDMonFrwdLooseKaon1.MaxPCut = 150;
RiPIDMonFrwdLooseKaon1.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK1/MC/";
RiPIDMonFrwdLooseKaon1.HistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK1/";
RiPIDMonFrwdLooseKaon1.FinalPrintout = true;
RiPIDMonFrwdLooseKaon1.LooseNSigmaCutKaon = 1;
RiPIDMonFrwdLooseKaon1.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdLooseKaon2" };
RiPIDMonFrwdLooseKaon2.MinPCut = 2;
RiPIDMonFrwdLooseKaon2.MaxPCut = 150;
RiPIDMonFrwdLooseKaon2.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK2/MC/";
RiPIDMonFrwdLooseKaon2.HistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK2/";
RiPIDMonFrwdLooseKaon2.FinalPrintout = true;
RiPIDMonFrwdLooseKaon2.LooseNSigmaCutKaon = 2;
RiPIDMonFrwdLooseKaon2.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdLooseKaon3" };
RiPIDMonFrwdLooseKaon3.MinPCut = 2;
RiPIDMonFrwdLooseKaon3.MaxPCut = 150;
RiPIDMonFrwdLooseKaon3.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK3/MC/";
RiPIDMonFrwdLooseKaon3.HistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK3/";
RiPIDMonFrwdLooseKaon3.FinalPrintout = true;
RiPIDMonFrwdLooseKaon3.LooseNSigmaCutKaon = 3;
RiPIDMonFrwdLooseKaon3.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdLooseKaon4" };
RiPIDMonFrwdLooseKaon4.MinPCut = 2;
RiPIDMonFrwdLooseKaon4.MaxPCut = 150;
RiPIDMonFrwdLooseKaon4.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK4/MC/";
RiPIDMonFrwdLooseKaon4.HistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK4/";
RiPIDMonFrwdLooseKaon4.FinalPrintout = true;
RiPIDMonFrwdLooseKaon4.LooseNSigmaCutKaon = 4;
RiPIDMonFrwdLooseKaon4.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdLooseKaon5" };
RiPIDMonFrwdLooseKaon5.MinPCut = 2;
RiPIDMonFrwdLooseKaon5.MaxPCut = 150;
RiPIDMonFrwdLooseKaon5.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK5/MC/";
RiPIDMonFrwdLooseKaon5.HistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK5/";
RiPIDMonFrwdLooseKaon5.FinalPrintout = true;
RiPIDMonFrwdLooseKaon5.LooseNSigmaCutKaon = 5;
RiPIDMonFrwdLooseKaon5.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdLooseKaon6" };
RiPIDMonFrwdLooseKaon6.MinPCut = 2;
RiPIDMonFrwdLooseKaon6.MaxPCut = 150;
RiPIDMonFrwdLooseKaon6.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK6/MC/";
RiPIDMonFrwdLooseKaon6.HistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK6/";
RiPIDMonFrwdLooseKaon6.FinalPrintout = true;
RiPIDMonFrwdLooseKaon6.LooseNSigmaCutKaon = 6;
RiPIDMonFrwdLooseKaon6.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdLooseKaon7" };
RiPIDMonFrwdLooseKaon7.MinPCut = 2;
RiPIDMonFrwdLooseKaon7.MaxPCut = 150;
RiPIDMonFrwdLooseKaon7.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK7/MC/";
RiPIDMonFrwdLooseKaon7.HistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK7/";
RiPIDMonFrwdLooseKaon7.FinalPrintout = true;
RiPIDMonFrwdLooseKaon7.LooseNSigmaCutKaon = 7;
RiPIDMonFrwdLooseKaon7.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdLooseKaon8" };
RiPIDMonFrwdLooseKaon8.MinPCut = 2;
RiPIDMonFrwdLooseKaon8.MaxPCut = 150;
RiPIDMonFrwdLooseKaon8.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK8/MC/";
RiPIDMonFrwdLooseKaon8.HistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK8/";
RiPIDMonFrwdLooseKaon8.FinalPrintout = true;
RiPIDMonFrwdLooseKaon8.LooseNSigmaCutKaon = 8;
RiPIDMonFrwdLooseKaon8.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdLooseKaon9" };
RiPIDMonFrwdLooseKaon9.MinPCut = 2;
RiPIDMonFrwdLooseKaon9.MaxPCut = 150;
RiPIDMonFrwdLooseKaon9.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK9/MC/";
RiPIDMonFrwdLooseKaon9.HistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK9/";
RiPIDMonFrwdLooseKaon9.FinalPrintout = true;
RiPIDMonFrwdLooseKaon9.LooseNSigmaCutKaon = 9;
RiPIDMonFrwdLooseKaon9.TrackSelection = { "unique", "forward" };

CheckRICHSeq.Members += { "RichPIDQC/RiPIDMonFrwdLooseKaon10" };
RiPIDMonFrwdLooseKaon10.MinPCut = 2;
RiPIDMonFrwdLooseKaon10.MaxPCut = 150;
RiPIDMonFrwdLooseKaon10.MCHistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK10/MC/";
RiPIDMonFrwdLooseKaon10.HistoPath = "RICH/PIDQC/FRWD/2TO150/LOOSEK10/";
RiPIDMonFrwdLooseKaon10.FinalPrintout = true;
RiPIDMonFrwdLooseKaon10.LooseNSigmaCutKaon = 10;
RiPIDMonFrwdLooseKaon10.TrackSelection = { "unique", "forward" };

