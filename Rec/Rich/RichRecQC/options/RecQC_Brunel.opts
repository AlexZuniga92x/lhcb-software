
// set in offline mode
CheckRICHSeq.Context = "Offline";

// MC tools
//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::MC::MCTruthTool/RichMCTruthTool" };
//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::MC::MCTruthTool/RichRecMCTruthTool" };

// PID Monitors for all tracks combined
#include "$RICHRECQCOPTS/pid/BrunelMoni_AllTracks.opts"
#include "$RICHRECQCOPTS/pid/AllTracks_Para.opts"

// Suppress errors from Linker
MessageSvc.setFatal += { "LinkedTo::MC/Particles2MCRichTracks",
                         "LinkedTo::MC/Rich/Hits2MCRichOpticalPhotons" };

// pixel monitor
CheckRICHSeq.Members += { "Rich::Rec::MC::PixelQC/RichRecPixelQC" };

// Reco QC
// All tracks
CheckRICHSeq.Members += { "Rich::Rec::MC::RecoQC/RiCKResAllHighP" };
RiCKResAllHighP.HistoPrint       = false;

// Long tracks tracks - all P
CheckRICHSeq.Members += { "Rich::Rec::MC::RecoQC/RiCKResLongAll" };
RiCKResLongAll.TrackSelector.TrackAlgs  = { "Forward", "Match" };
RiCKResLongAll.HistoPrint = false;
RiCKResLongAll.MinBeta = { 0, 0, 0 };

// forward tracks
CheckRICHSeq.Members += { "Rich::Rec::MC::RecoQC/RiCKResFrwdHighBeta" };
RiCKResFrwdHighBeta.TrackSelector.TrackAlgs  = { "Forward" };
RiCKResFrwdHighBeta.HistoPrint      = false;

// match tracks
CheckRICHSeq.Members += { "Rich::Rec::MC::RecoQC/RiCKResMatchHighBeta" };
RiCKResMatchHighBeta.TrackSelector.TrackAlgs = { "Match" };
RiCKResMatchHighBeta.HistoPrint     = false;

// KsTracks tracks
CheckRICHSeq.Members += { "Rich::Rec::MC::RecoQC/RiCKResKsTkHighBeta" };
RiCKResKsTkHighBeta.TrackSelector.TrackAlgs  = { "KsTrack" };
RiCKResKsTkHighBeta.HistoPrint      = false;

// VeloTT tracks
CheckRICHSeq.Members += { "Rich::Rec::MC::RecoQC/RiCKResVeloTTHighBeta" };
RiCKResVeloTTHighBeta.TrackSelector.TrackAlgs = { "VeloTT" };
RiCKResVeloTTHighBeta.HistoPrint    = false;

//RiCKResVeloTT.HistoProduce  = false;
// Seed tracks
CheckRICHSeq.Members += { "Rich::Rec::MC::RecoQC/RiCKResSeedHighBeta" };
RiCKResSeedHighBeta.TrackSelector.TrackAlgs  = { "Seed" };
RiCKResSeedHighBeta.HistoPrint      = false;

// MCRichTracks
//CheckRICHSeq.Members += { "Rich::Rec::MC::RecoQC/RiCKResMCRichTrack" };
//RiCKResMCRichTrack.TrackSelector.TrackAlgs  = { "MCRichTrack" };
//RiCKResMCRichTrack.HistoPrint      = true;

// Reco summary monitor
CheckRICHSeq.Members += { "Rich::Rec::MC::SummaryQC/RiSummaryQC" };

// Cross check CK res from summary objects
//CheckRICHSeq.Members += { "Rich::Rec::MC::SummaryCKResMoni/RiSummaryCKResLongAll" };
//RiSummaryCKResLongAll.TrackSelector.TrackAlgs  = { "Forward", "Match" };
//RiSummaryCKResLongAll.MinBeta = { 0, 0, 0 };
