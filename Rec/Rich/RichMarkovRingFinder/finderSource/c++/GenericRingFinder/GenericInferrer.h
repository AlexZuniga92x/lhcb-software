
#ifndef LESTER_GENERICINFERRER_H
#define LESTER_GENERICINFERRER_H

// fwd dec
#include "GenericRingFinder/GenericInferrer.fwd"

// includes
#include "GenericRingFinder/GenericInput.h" 
#include "GenericRingFinder/GenericResults.h" 

namespace GenRingF {
  
  // declaration
  struct GenericInferrer {
    // GenericInferrer() {};
    // GenericInferrer(const GenericInferrer & other) {};
    // GenericInferrer & operator=(const GenericInferrer & other) { return *this; };
    virtual ~GenericInferrer() {};
  public:
    
    /** Return probablility hit was made by the given circle.
     *  @param hIt The hit.  You must make sure that this input is an iterator which points to an element of the GenRingF::GenericInput::GenericHits object that the ring finder used as input.
     *  @param cIt The ring. You must make sure that this input is an iterator which points to an element of the GenRingF::GenericResults::GenericRings object generated by the ring finder.
     */
    virtual double probabilityHitWasMadeByGivenCircle(const GenRingF::GenericInput::GenericHits::const_iterator & hIt,
						      const GenRingF::GenericResults::GenericRings::const_iterator & cIt) const = 0;
    
    /** Probability hit was made by no known circles
     * The name of this function documents it completely.
     * @param hIt The hit.  You must make sure that this input is an iterator w
hich points to an element of the GenRingF::GenericInput::GenericHits object that
 the ring finder used as input.
     */	
    virtual double probabilityHitWasMadeBySomethingOtherThanACircle(const GenRingF::GenericInput::GenericHits::const_iterator & hIt) const = 0;
  };
  
}

#endif
  
