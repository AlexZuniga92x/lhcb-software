
#ifndef LESTER_CONDITIONSSTREAM_H
#define LESTER_CONDITIONSSTREAM_H

// fwd dec
#include "ConditionsStream.fwd" 

// includes
#include <iostream>
#include <sstream>
#include <string>

// declaration
class ConditionsStream {
// ConditionsStream() {};
// ConditionsStream(const ConditionsStream & other) {};
// ConditionsStream & operator=(const ConditionsStream & other) { return *this; };
// virtual ~ConditionsStream() {};
  bool pending;
  std::ostringstream m_ostr;
private:
  static const long wrapAtChars = 256;
  ConditionsStream() : pending(false) {
  };
public:
  static ConditionsStream & instance() {
    static ConditionsStream s;
    return s;
  };
  template<class T>
  ConditionsStream & operator<<(const T & other) {
    m_ostr << other;
    pending = true;
    return *this;
  };
  void flushTo(std::ostream & os) {
    if (pending) {
      pending = false;
      const std::string ssss = m_ostr.str();
      //std::cout << "SSSS was ["<<ssss<<"]"<<std::endl;
      std::istringstream iss(ssss);
      char buf[wrapAtChars];
      std::cout << "About to read" << std::endl;
      

      while(true) {
	bool stop=false;
	iss.getline(buf, wrapAtChars);
	
	if (iss.eof()) {
	  std::cout <<"I SAW EOF!"<< std::endl;
	  stop=true;
	};
	if (iss.fail()) {
	  std::cout <<"I SAW FAIL (=FAIL or BAD)!"<< std::endl;
	};
	if (iss.bad()) {
	  std::cout <<"I SAW BAD!"<< std::endl;
	};
	if (iss.good()) {
	  std::cout <<"I SAW GOOD!"<< std::endl;
	};
	{
	  std::cout <<"GCOUNT was "<<iss.gcount()<< std::endl;
	};

	iss.clear();

	if (stop) {
	  break;
	};
	//iss.get();
	//if (iss.fail()) {
	//  std::cout << "REad ok" << std::endl;
	//} else {
	//  std::cout << "REad failed somehow" << std::endl;
	//};
	os << "# CONDITIONS [" << buf << "]" << std::endl; 
      };
      std::cout << "Finished reading" << std::endl;
     // reset the ostringstream
      m_ostr.str("");
    };
  };
};

#endif

