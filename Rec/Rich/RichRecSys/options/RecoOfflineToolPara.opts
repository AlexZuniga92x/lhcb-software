//=============================================================================================
// Rich Reconstruction Tools
// Configuration to run the offline quality reconstruction on offline tracks
//=============================================================================================

// ================================== Track Creators ==========================================

// RichTrackCreator using full reconstructed information : Use full detailed information
#include "$RICHRECSYSOPTS/tools/RichTracksFromRecoTracks.opts"

// RichTrackCreator using full reconstructed information : Fast treatment
//#include "$RICHRECSYSOPTS/tools/RichTracksFromRecoTracks-Fast.opts"

// RichTrackCreator using TrStoredTracks but cheating the tracking information by
// using the associated MCRichTrack. In the include file below the cheating can be tuned
// at the level of the tracking algorithm.
//#include "$RICHRECSYSOPTS/tools/RichTracksFromCheatedRecoTracks.opts"

// RichTrackCreator using only MC information
//#include "$RICHRECSYSOPTS/tools/RichTracksFromMCRichTracks.opts"

//---------------------------------------------------------------------------------------------
// Track selector (Default)
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::TrackSelector/TrackSelector" };
// Same as above, but rejects tracks without MC associations (ghosts)
//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::MC::MCTrueTrackSelector/TrackSelector" };

// ================================== Pixel Creators ==========================================

// Pixel creator using full reconstructed information from RawBuffer (Default)
#include "$RICHRECSYSOPTS/tools/RichPixelsFromRawBuffer.opts"

// same as above tool, but simulates additional inefficiency by randomly 
// removing some percentage of hits
//#include "$RICHRECSYSOPTS/tools/RichPixelsFromRawBufferWithAdditionalInEff.opts"

// Pixel creator using all RichSmartIDs from RawBuffer but cheating the hit position 
// on the HPD window using MCRichOpticalPhotons
//#include "$RICHRECSYSOPTS/tools/RichPixelsFromCheatedRawBuffer.opts"

// Pixel creator using RawBuffer but selects only true Cherenkov Hits
//#include "$RICHRECSYSOPTS/tools/RichPixelsFromSignalRawBuffer.opts"

// Pixel creator also using full reconstructed information from RawBuffer
// but in addition can simulate the effect of dead HPDs
//#include "$RICHRECSYSOPTS/tools/RichPixelsFromRawBufferWithDeadHPDs.opts"

// Pixel creator using RichDigits but selects only true Cherenkov Hits
// and then cheats the hit position using MCRichOpticalPhotons
//#include "$RICHRECSYSOPTS/tools/RichPixelsFromSignalCheatedRichDigits.opts"

// Pixel creator that uses real events to form a cache of hits associated to single particles.
// This cache is then used to add a specified number of background particles to each event
//#include "$RICHRECSYSOPTS/tools/RichPixelsFromRichDigitsWithBg.opts"

// Common pixel options
//---------------------------------------------------------------------------------------------

// Pixel suppression
#include "$RICHRECSYSOPTS/tools/RichPixelSuppress.opts"

// clustering
#include "$RICHRECSYSOPTS/tools/RichPixelClustering.opts"

// ================================== Photon Creators ==========================================

// Photon reconstruction using full reconstructed information (Default)
#include "$RICHRECSYSOPTS/tools/RichPhotonsFromReco.opts"

// Photon reconstruction using reconstructed but estimates CK angles using
// track and hit positions on the local HPD plane - Fast approach
//#include "$RICHRECSYSOPTS/tools/RichPhotonsFromReco-Fast.opts"

// Photon reconstruction using full reconstructed information, but selecting only true cherenkov
// photons using MC information
//#include "$RICHRECSYSOPTS/tools/RichPhotonsFromCheatedReco.opts"

// Photon reconstruction using MC information for true cherenkov photons and reconstructed 
// information for fake associations
//#include "$RICHRECSYSOPTS/tools/RichPhotonsWithSignalMC.opts"

// Photon reconstruction that uses only true Cherenkov information from the MCRichOpticalPhotons
// I.e cheat the emission, detection and mirror reflection points, and the cherenkov angles
// and only reconstruct true photons
//#include "$RICHRECSYSOPTS/tools/RichPhotonsFromMCRichOpticalPhotons.opts"

// Photon reconstruction using full reconstructed information, but applying an additional
// gaussian smear to the reconstructed theta values
//#include "$RICHRECSYSOPTS/tools/RichPhotonsFromRecoWithSmearing.opts"

// Photon reconstruction using normal reconstruction tools, but cheated the track direction
// at the photon emission point. Remove contribution from tracking errors to CK resolution
//#include "$RICHRECSYSOPTS/tools/RichPhotonsFromRecoWithCheatedTrackDir.opts"

// =================================== Miscellaneous ===========================================

ToolSvc.Offline.RichToolRegistry.Context = "Offline";

// Segment creator
//                                                Aerogel  C4F10   CF4
ToolSvc.Offline.RichSegmentCreator.EnergyBins = { 5,       5,      5   }; // Best but slow treatment
//ToolSvc.Offline.RichSegmentCreator.EnergyBins = { 1,       1,      1   }; // Fast treatment

// raytracing
ToolSvc.Offline.RichRayTraceCKCone.BailoutTries = { 50,  50,  50  };

// CK ring creator
ToolSvc.Offline.RichMassHypoRings.MaxRingPoints = { 100,  100,  100  }; 
ToolSvc.Offline.RichMassHypoRings.MinRingPoints = { 100,  100,  100  }; 
ToolSvc.Offline.RichMassHypoRings.CheckBeamPipe = true;

// Geometrical efficiency from CK mass Ring
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::GeomEffCKMassRing/RichGeomEff" };

// Geometrical efficiency from full ray tracing
//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::GeomEffPhotonTracing/RichGeomEff" };
//ToolSvc.Offline.RichGeomEff.NPhotonsGeomEffCalc          = 100;
//ToolSvc.Offline.RichGeomEff.NPhotonsGeomEffBailout       = 50;
//ToolSvc.Offline.RichGeomEff.CheckBeamPipe                = true;

// Fixed value
//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::GeomEffFixedValue/RichGeomEff" };
//                                                                          Aerogel  C4F10   CF4
//ToolSvc.Offline.RichToolRegistry.RichGeomEff.FixedSignalEfficiency   =  { 0.55,    0.62,   0.55  };
//ToolSvc.Offline.RichToolRegistry.RichGeomEff.FixedScatterEfficiency  =  0.55;

// Photon signals
//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::PhotonSignalGaussProb/RichPhotonSignal" };
//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::PhotonSignalJeffreysErf/RichPhotonSignal" };

// Cherenkov resolution - fixed binned implementation as a function of cherenkov angle
#include "$RICHRECSYSOPTS/tools/BinnedCherenkovResVtheta.opts"

// Interpolated cherenkov resolution function of the cherenkov angle
//#include "$RICHRECSYSOPTS/tools/InterpCherenkovResVtheta.opts"

// analytical cherenkov resolution calculation
//#include "$RICHRECSYSOPTS/tools/FunctionalCherenkovRes.opts"

// Rayleigh scattering using XML tabulation
//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::TabulatedRayleighScatter/RichRayleighScatter" };
// Rayleigh scattering using analytic function
//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::FunctionalRayleighScatter/RichRayleighScatter" };

// Sellmeir function
//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::SellmeirFunc/RichSellmeirFunc" };
ToolSvc.Offline.RichSellmeirFunc.WaveIndpTrans = 1.0;
//ToolSvc.Offline.RichSellmeirFunc.WaveIndpTrans = 0.9368;

// Detector Parameters
//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::DetParameters/RichDetParameters" };
//                                                    Aerogel  C4F10   CF4
ToolSvc.Offline.RichDetParameters.MinPhotonEnergy = { 1.75,    1.75,   1.75 };
ToolSvc.Offline.RichDetParameters.MaxPhotonEnergy = { 4.00,    7.00,   7.00 };

// Detector ray-tracing
//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::RayTracing/RichRayTracing" };
ToolSvc.Offline.RichRayTracing.HistoProduce = false;

// default raw buffer decoding options
#include "$RICHDAQROOT/options/Brunel_DecodeRawEvent.opts"

// Background clustering tool
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::DAQ::HPDPixelClusteringTool/BackgroundClustering" };
