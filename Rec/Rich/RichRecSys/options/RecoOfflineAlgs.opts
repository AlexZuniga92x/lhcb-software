
// ============================================================================
// Define the algorithms to run and in which order
// Run the offline quality algorithms on offline tracks
// ============================================================================

// Set offline mode
RecoRICHSeq.Context = "Offline";

// Decode RICH data
// Technically not needed, since done "on-demand" but useful for timing studies
//RecoRICHSeq.Members += { "RichLoadRawEvent" };
RecoRICHSeq.Members += { "RawBufferToRichDigitsAlg/DecodeRawRich" };
DecodeRawRich.DecodeBufferOnly = true;

// Initialisation
RecoRICHSeq.Members += { "RichRecInit" };

// Run the Local PID algorithm first
RecoRICHSeq.Members += { "RichLocalPIDAlg/RichLocPID" };

// Initialise Global PID algorithm for each event
RecoRICHSeq.Members += { "RichGlobalPIDInitialize/RichGloPIDInit",
                         "RichGlobalPIDDigitSel/RichGloPIDDigSel",
                         "RichGlobalPIDTrTrackSel/RichGloPIDTrSel" };

// First iteration of background estimation then Global PID iteration
RecoRICHSeq.Members += { "RichRecBackgroundEsti/RichBckEst1" };
RecoRICHSeq.Members += { "RichGlobalPIDAlg/RichGloPIDIt1" };

// Second iteration of background estimation then Global PID iteration
RecoRICHSeq.Members += { "RichRecBackgroundEsti/RichBckEst2" };
RecoRICHSeq.Members += { "RichGlobalPIDAlg/RichGloPIDIt2" };

// Third iteration of background estimation then Global PID iteration
//RecoRICHSeq.Members += { "RichRecBackgroundEsti/RichBckEst3",
//                         "RichGlobalPIDAlg/RichGloPIDIt3" };

// Ring refit - uses working PIDs to identify good photons and refit angles
// Results as yet not used in formation of final PID
//RecoRICHSeq.Members += { "RichRingRefitAlg/RichRingRefit" };

// Finalise Global PID algorithm each event
RecoRICHSeq.Members += { "RichGlobalPIDFinalize/RichGloPIDFin" };

// Make final output PID results
// Current uses for each track Global PID if it exists, 
// otherwise local if that exists
RecoRICHSeq.Members += { "RichHierarchicalPIDMerge/MergeRichPIDs" };

// Reconstruction summary
RecoRICHSeq.Members += { "RichRecSummaryAlg" };

// Reconstruction algorithm parameters
// ========================================================================================

// Local Algorithm parameters
RichLocPID.TrackSelector.TrackAlgs = { "Seed","Match","Forward","KsTrack","VeloTT" };
RichLocPID.MinimumPtot                       = 0.0*GeV;
//RichLocPID.MaxUsedTracks                     = 400;
//RichLocPID.MaxInputTracks                    = 900;
RichLocPID.MaxUsedTracks                     = 200;
RichLocPID.MaxInputTracks                    = 700;
ToolSvc.RichLocPIDTool.MinProbThresholdHighP = { 0.03,  0.01, 0.02, 0.02 };
ToolSvc.RichLocPIDTool.MinProbThresholdLowP  = { 0.1,   0.1,  0.1,  0.09 };
ToolSvc.RichLocPIDTool.CherenkovThetaRes     = { 0.002, 0.0014, 0.0007   };
// Cherenkov angle space tool
ToolSvc.Offline.RichToolRegistry.Tools += { "RichLocalPIDToolAngleSpace/RichLocPIDTool" };

// Global PID digit selection
RichGloPIDDigSel.MaxUsedPixels            = 8000;

// Global PID track selection
RichGloPIDTrSel.TrackSelector.TrackAlgs = { "Seed","Match","Forward","KsTrack","VeloTT" };
//RichGloPIDTrSel.MaxUsedTracks             = 400;
//RichGloPIDTrSel.MaxInputTracks            = 900;
RichGloPIDTrSel.MaxUsedTracks             = 200;
RichGloPIDTrSel.MaxInputTracks            = 700;
RichGloPIDTrSel.MinimumPhysicsMomentum    = 0.0*GeV;
RichGloPIDTrSel.MinimumLikelihoodMomentum = 0.0*GeV;
RichGloPIDTrSel.ResetTracksToPion         = false;

// Global Algorithm parameters - phase 1
RichGloPIDIt1.TrackFreezeOutDLL           = 2;
RichGloPIDIt1.TrackForceChangeDLL         = -1;
RichGloPIDIt1.LikelihoodThreshold         = -1e-2;
RichGloPIDIt1.MaxTrackChangesPerIt        = 5;

// Global Algorithm parameters - phase 2
RichGloPIDIt2.TrackFreezeOutDLL           = 4;
RichGloPIDIt2.TrackForceChangeDLL         = -2;
RichGloPIDIt2.LikelihoodThreshold         = -1e-3;
RichGloPIDIt2.MaxTrackChangesPerIt        = 5;

// Global Algorithm parameters - phase 3
//RichGloPIDIt3.TrackFreezeOutDLL           = 5;
//RichGloPIDIt3.TrackForceChangeDLL         = -2;
//RichGloPIDIt3.LikelihoodThreshold         = -1e-3;

// Final iteration must have this option set
// Remember to update number in name if you change the number of iterations
RichGloPIDIt2.FinalDLLCheck = true;

// Ring Refit
/*
RichRingRefit.TrackSelector.TrackAlgs = { "Seed","Match","Forward","KsTrack" };
//                                             Aero   C4F10   CF4
RichRingRefit.MinSignalPhotonProb         = {  999,   1e-2,  1.50e-3  };
RichRingRefit.MinRefitPhotons             = {  999,    999,      7    };
RichRingRefit.MaxBackgroundProb           = {  999,    999,    999    };
RichRingRefit.MaxCandsPerPixel            = {    1,      1,      10   };
RichRingRefit.MinFitProbability           = {  0.5,    0.5,   0.0005  };
RichRingRefit.nDist          = 2.00;
RichRingRefit.nDistFrwrd     = 2.00;
RichRingRefit.nDistMatch     = 2.00;
RichRingRefit.nDistSeed      = 2.20;
RichRingRefit.nDistKshort    = 2.20;
RichRingRefit.NSigmaCut      = 3.00;
*/

// PID merging
//MergeRichPIDs.UseRingRefitPIDs = false; // disabled for the moment
MergeRichPIDs.UseLocalPIDs     = true;
MergeRichPIDs.UseGlobalPIDs    = true;
//MergeRichPIDs.OutputPIDLocation = "Rec/Rich/NewPIDs";

// summary maker parameters
RichRecSummaryAlg.PhotonNSigma = { 1.0, 1.5, 1.5 };

// Test stuff
// ---------------------------------------------------------------------------------
/*
ApplicationMgr.DLLs += { "RichMarkovRingFinder" };
RecoRICHSeq.Members += { "Rich2RightPanelMarkovRingFinderAlg/Rich2RingFindRight" };
RecoRICHSeq.Members += { "Rich2LeftPanelMarkovRingFinderAlg/Rich2RingFindLeft" };
*/
