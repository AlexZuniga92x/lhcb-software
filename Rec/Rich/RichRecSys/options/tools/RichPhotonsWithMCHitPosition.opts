
// Photon reconstruction using MC inforamtion for true cherenkov photons hit position

// Main photon creator - delegates work to MC or Reco creators
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::MC::PhotonCreatorWithMCHitPosition/RichPhotonCreator" };

// RichRecPhoton predictor (quick test if a given pixel/segment combination
// is likely to yield a good photon)
#include "$RICHRECSYSOPTS/tools/RichPhotonPredictor.opts"

// Reco creator
//=================================================================================================

// RichRecPhoton Creator
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::PhotonCreator/RichPhotonCreatorReco" };
//                                                                    Aero     C4F10    CF4
// absolute max and min allowed Cherenkov theta angles
ToolSvc.Offline.RichPhotonCreatorReco.MinAllowedCherenkovTheta   = {  0.075,   0.005,   0.005  };
ToolSvc.Offline.RichPhotonCreatorReco.MaxAllowedCherenkovTheta   = {  0.29,    0.075,   0.035  };
// minimum probability for a photon to be retained (for at least one hypothesis)
ToolSvc.Offline.RichPhotonCreatorReco.MinPhotonProbability       = {  1e-15,   1e-15,   1e-15  };
// N sigma on expected CK theta resolution
ToolSvc.Offline.RichPhotonCreatorReco.NSigma                     = {  3.8,     3.3,     3.3    };

// geometrical photon reconstruction
// use Quartic solving tool
ToolSvc.Offline.RichPhotonCreatorReco.PhotonRecoTool  = "PhotonParams";
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::PhotonRecoUsingQuarticSoln/PhotonParams" };
//                                                                                     Aero   C4F10  CF4
ToolSvc.Offline.RichPhotonCreatorReco.PhotonParams.FindUnambiguousPhotons          = { true,  true,  true  };
ToolSvc.Offline.RichPhotonCreatorReco.PhotonParams.UseMirrorSegmentAllignment      = { true,  true,  true  };
ToolSvc.Offline.RichPhotonCreatorReco.PhotonParams.RejectAmbiguousPhotons          = { false, false, false };
ToolSvc.Offline.RichPhotonCreatorReco.PhotonParams.CheckBeamPipe                   = { true,  true,  true  };
ToolSvc.Offline.RichPhotonCreatorReco.PhotonParams.CheckSideCrossing               = { false, true,  true  };
ToolSvc.Offline.RichPhotonCreatorReco.PhotonParams.MinActiveFraction               = { 0.2,   0.2,   0.2   };
ToolSvc.Offline.RichPhotonCreatorReco.PhotonParams.CheckPrimaryMirrorSegments      = { false, false, false };
ToolSvc.Offline.RichPhotonCreatorReco.PhotonParams.NQuarticIterationsForSecMirrors = { 3,     3,     3     };

