
// Options to create RichRecTracks from cheated TrStoredTrack reconstructed information
// The TrStoredTrack is used as a starting point, but the gemoetrical and momentum
// information is then extracted from the associated MCRichTrack

// Define the primary RichTrackCreator to be the delegator tool
// This tool sends the real work to other tools depending on the configuration
ToolSvc.RichToolRegistry.Tools += { "RichDelegatedTrackCreatorFromTrStoredTracks/RichTrackCreatorOffline" };

// Example configuration, use MC for all but forward tracks...
ToolSvc.RichTrackCreatorOffline.ToolsByTrackType = { "forward/RichTrackCreatorMC",
                                                     "match/RichTrackCreatorMC",
                                                     "veloTT/RichTrackCreatorMC",
                                                     "seed/RichTrackCreatorMC",
                                                     "KsTrack/RichTrackCreatorMC",
                                                     "velo/RichTrackCreatorMC" };

// The delegated RichTrackCreator that uses full reco information
ToolSvc.RichToolRegistry.Tools += { "RichTrackCreatorFromTrStoredTracks/RichTrackCreatorOfflineReco" };
ToolSvc.RichTrackCreatorOfflineReco.TrackSelection =
  {
    "unique","positive","negative","seed","match","forward","KsTrack","veloTT"
  };
ToolSvc.RichTrackCreatorOfflineReco.TrackSegmentTool = "RichDetTrSegMakerRecoOffline";
// Momentum cuts ( in the format tracktype/minP/maxP )
ToolSvc.RichTrackCreatorOfflineReco.TrackMomentumCuts = { "forward/0/9999999",
                                                          "match/0/9999999",
                                                          "seed/0/9999999",
                                                          "veloTT/1/9999999",
                                                          "KsTrack/0/9999999",
                                                          "velo/999999/9999999" };

// Configure the RichTrackSegment maker for reconstructed tracks
ToolSvc.RichToolRegistry.Tools += { "RichTrSegMakerFromTrStoredTracks/RichDetTrSegMakerRecoOffline" };
ToolSvc.RichDetTrSegMakerRecoOffline.PrimaryTrackExtrapolator = "TrHerabExtrapolator";
ToolSvc.RichDetTrSegMakerRecoOffline.BackupTrackExtrapolator  = "TrParabolicExtrapolator";
// which radiators to use                             Aerogel   C4F10    CF4
ToolSvc.RichDetTrSegMakerRecoOffline.UseRadiators = { true,     true,    true };

// The delegated RichTrackCreator that uses MC information
ToolSvc.RichToolRegistry.Tools += { "RichTrackCreatorFromTrStoredTracks/RichTrackCreatorMCOffline" };
ToolSvc.RichTrackCreatorMCOffline.TrackSelection = { "unique","positive","negative","seed","match","forward","KsTrack","veloTT" };
ToolSvc.RichTrackCreatorMCOffline.TrackSegmentTool = "RichDetTrSegMakerMCOffline";
// Momentum cuts ( in the format tracktype/minP/maxP )
ToolSvc.RichTrackCreatorMCOffline.TrackMomentumCuts = { "forward/0/9999999",
                                                        "match/0/9999999",
                                                        "follow/0/9999999",
                                                        "seed/0/9999999",
                                                        "veloTT/1/9999999",
                                                        "KsTrack/0/9999999",
                                                        "velo/999999/9999999" };

// Configure the RichTrackSegment maker for MC tracks
ToolSvc.RichToolRegistry.Tools += { "RichTrSegMakerFromMCRichTracks/RichDetTrSegMakerMOfflineC" };
// which radiators to use                             Aerogel   C4F10    CF4
ToolSvc.RichDetTrSegMakerMCOffline.UseRadiators   = { true,     true,    true };
