
// Perform the full reconstruction of photons

// RichRecPhoton predictor
// Uses MC information to check if a given pixel/segment combination is a true Cherenkov hit
ToolSvc.Offline.RichToolRegistry.Tools += { "RichPhotonPredictorUsingMCRichOpticalPhotons/RichPhotonPredictor" };

// RichRecPhoton Creator
ToolSvc.Offline.RichToolRegistry.Tools += { "RichPhotonCreator/RichPhotonCreator" };
ToolSvc.Offline.RichPhotonCreator.PhotonPredictor = "RichPhotonPredictor";
//                                                                Aero     C4F10    CF4
// absolute max and min allowed Cherenkov theta angles
ToolSvc.Offline.RichPhotonCreator.MinAllowedCherenkovTheta   = {  0.075,   0.005,   0.005  };
ToolSvc.Offline.RichPhotonCreator.MaxAllowedCherenkovTheta   = {  0.29,    0.075,   0.035  };
//ToolSvc.Offline.RichPhotonCreator.MinAllowedCherenkovTheta   = {  0.0,     0.0,     0.0    };
//ToolSvc.Offline.RichPhotonCreator.MaxAllowedCherenkovTheta   = {  0.5,     0.15,    0.07   };
// minimum probability for a photon to be retained (for at least one hypothesis)
ToolSvc.Offline.RichPhotonCreator.MinPhotonProbability       = {  1e-15,   1e-15,   1e-15  };
//ToolSvc.Offline.RichPhotonCreator.MinPhotonProbability       = {  1e-99,   1e-99,   1e-99  };
// Fixed range around expected Cherenkov theta
ToolSvc.Offline.RichPhotonCreator.CherenkovThetaTolerence    = {  0.025,     0.007,   0.003 };
//ToolSvc.Offline.RichPhotonCreator.CherenkovThetaTolerence    = {  999,    999,   999 };

// geometrical photon reconstruction
// use Quartic solving tool
ToolSvc.Offline.RichPhotonCreator.PhotonRecoTool  = "PhotonParams";
ToolSvc.Offline.RichToolRegistry.Tools += { "RichPhotonRecoUsingQuarticSoln/PhotonParams" };
ToolSvc.Offline.RichPhotonCreator.PhotonParams.FindUnambiguousPhotons     = false;
ToolSvc.Offline.RichPhotonCreator.PhotonParams.UseMirrorSegmentAllignment = true;
