
// Perform the full reconstruction of photons

// RichRecPhoton predictor (quick test if a given pixel/segment combination
// is likely to yield a good photon)
#include "$RICHRECSYSOPTS/tools/RichPhotonPredictor.opts"

// RichRecPhoton Creator
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::MC::PhotonCreatorCheatedTrackDir/RichPhotonCreator" };
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::PhotonCreator/RichDelPhotonCreator" };
//                                                                Aero     C4F10    CF4
// absolute max and min allowed Cherenkov theta angles
ToolSvc.Offline.RichDelPhotonCreator.MinAllowedCherenkovTheta   = {  0.075,   0.005,   0.005  };
ToolSvc.Offline.RichDelPhotonCreator.MaxAllowedCherenkovTheta   = {  0.29,    0.075,   0.035  };
// minimum probability for a photon to be retained (for at least one hypothesis)
ToolSvc.Offline.RichDelPhotonCreator.MinPhotonProbability       = {  1e-15,   1e-15,   1e-15  };
// Fixed range around expected Cherenkov theta
ToolSvc.Offline.RichDelPhotonCreator.CherenkovThetaTolerence    = {  0.025,   0.007,   0.003  };

// geometrical photon reconstruction
// use Quartic solving tool
ToolSvc.Offline.RichDelPhotonCreator.PhotonRecoTool  = "PhotonParams";
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::PhotonRecoUsingQuarticSoln/PhotonParams" };
ToolSvc.Offline.RichDelPhotonCreator.PhotonParams.NQuarticIterationsForSecMirrors = { 3,3,3 };
//ToolSvc.Offline.RichDelPhotonCreator.PhotonParams.AssumeFlatSecondaries      = true;
