
// Perform the full reconstruction of photons

// RichRecPhoton predictor (quick test if a given pixel/segment combination
// is likely to yield a good photon)

//ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::SimplePhotonPredictor/RichPhotonPredictor" };
//                                                                   Aero        C4F10      CF4
// select all
//ToolSvc.Offline.RichPhotonCreator.Predictor.MinTrackROI        = {   0.0,      0.0,      0.0  };
//ToolSvc.Offline.RichPhotonCreator.Predictor.MaxTrackROI        = {   9999999,  9999999,  9999999  };
// Course cut
//ToolSvc.Offline.RichPhotonCreator.Predictor.MinTrackROI        = { 110.0,      0.0,       0.0  };
//ToolSvc.Offline.RichPhotonCreator.Predictor.MaxTrackROI        = { 390.0,     86.0,     165.0  };


ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::SepVCKthetaPhotonPredictor/RichPhotonPredictor" };
//                                                                 Aero      C4F10     CF4
ToolSvc.Offline.RichPhotonCreator.Predictor.MinTrackROI       = {  110.0,    0.0,      0.0    };
ToolSvc.Offline.RichPhotonCreator.Predictor.MaxTrackROI       = {  390.0,   86.0,      165.0  };
ToolSvc.Offline.RichPhotonCreator.Predictor.CKthetaMax        = {  0.24,    0.0525,    0.030  };
ToolSvc.Offline.RichPhotonCreator.Predictor.Sep2GMax          = {  342.0,   75.0,      130.0  };
ToolSvc.Offline.RichPhotonCreator.Predictor.TolerenceFactor   = {  25,      15,        40     };


// RichRecPhoton Creator
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::PhotonCreator/RichPhotonCreator" };


// Default cuts
//                                                                Aero     C4F10    CF4
// absolute max and min allowed Cherenkov theta angles
ToolSvc.Offline.RichPhotonCreator.MinAllowedCherenkovTheta   = {  0.075,   0.005,   0.005  };
ToolSvc.Offline.RichPhotonCreator.MaxAllowedCherenkovTheta   = {  0.29,    0.075,   0.035  };
// minimum probability for a photon to be retained (for at least one hypothesis)
ToolSvc.Offline.RichPhotonCreator.MinPhotonProbability       = {  1e-15,   1e-15,   1e-15  };
// Fixed range around expected Cherenkov theta
//ToolSvc.Offline.RichPhotonCreator.CherenkovThetaTolerence    = {  0.025,   0.007,   0.003  };
ToolSvc.Offline.RichPhotonCreator.CherenkovThetaTolerence    = {  0.015,   0.007,   0.0035  };


/*
// Course cuts
//                                                                Aero     C4F10    CF4
// absolute max and min allowed Cherenkov theta angles
ToolSvc.Offline.RichPhotonCreator.MinAllowedCherenkovTheta   = {  0.0,   0.00,   0.00  };
ToolSvc.Offline.RichPhotonCreator.MaxAllowedCherenkovTheta   = {  0.35,  0.09,   0.04  };
// minimum probability for a photon to be retained (for at least one hypothesis)
ToolSvc.Offline.RichPhotonCreator.MinPhotonProbability       = {  1e-25,   1e-25,   1e-25  };
// Fixed range around expected Cherenkov theta
ToolSvc.Offline.RichPhotonCreator.CherenkovThetaTolerence    = {  0.05,   0.01,   0.006  };
*/

/*
// all possible photon candidates
//                                                                Aero     C4F10    CF4
// absolute max and min allowed Cherenkov theta angles
ToolSvc.Offline.RichPhotonCreator.MinAllowedCherenkovTheta   = {  0.00,   0.00,   0.00  };
ToolSvc.Offline.RichPhotonCreator.MaxAllowedCherenkovTheta   = {  99999,  99999,  99999   };
// minimum probability for a photon to be retained (for at least one hypothesis)
ToolSvc.Offline.RichPhotonCreator.MinPhotonProbability       = {  1e-75,   1e-75,   1e-75  };
// Fixed range around expected Cherenkov theta
ToolSvc.Offline.RichPhotonCreator.CherenkovThetaTolerence    = {  999999,   999999,   999999 };
*/

// geometrical photon reconstruction
// use Quartic solving tool
ToolSvc.Offline.RichPhotonCreator.PhotonRecoTool  = "PhotonParams";
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::PhotonRecoUsingQuarticSoln/PhotonParams" };
//                                                                                 Aero   C4F10  CF4
ToolSvc.Offline.RichPhotonCreator.PhotonParams.FindUnambiguousPhotons          = { true,  true,  true  };
ToolSvc.Offline.RichPhotonCreator.PhotonParams.UseMirrorSegmentAllignment      = { true,  true,  true  };
ToolSvc.Offline.RichPhotonCreator.PhotonParams.RejectAmbiguousPhotons          = { false, false, false };
ToolSvc.Offline.RichPhotonCreator.PhotonParams.CheckBeamPipe                   = { true,  true,  true  };
ToolSvc.Offline.RichPhotonCreator.PhotonParams.CheckSideCrossing               = { false, true,  true  };
ToolSvc.Offline.RichPhotonCreator.PhotonParams.MinActiveFraction               = { 0.2,   0.2,   0.2   };
ToolSvc.Offline.RichPhotonCreator.PhotonParams.CheckPrimaryMirrorSegments      = { false, false, false };
ToolSvc.Offline.RichPhotonCreator.PhotonParams.NQuarticIterationsForSecMirrors = { 3,     3,     3     };
