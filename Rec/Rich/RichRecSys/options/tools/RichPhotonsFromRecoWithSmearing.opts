
// RichRecPhoton predictor (quick test if a given pixel/segment combination
// is likely to yield a good photon)
ToolSvc.Offline.RichToolRegistry.Tools += { "RichSepVCKthetaPhotonPredictor/RichPhotonPredictor" };
//                                                         Aero     C4F10    CF4
ToolSvc.Offline.RichPhotonPredictor.MinTrackROI       = {  110.0,   0.0,    0.0  };
ToolSvc.Offline.RichPhotonPredictor.MaxTrackROI       = {  380.0,  85.0,  155.0  };
ToolSvc.Offline.RichPhotonPredictor.CKthetaMax        = {  0.25,   0.05,  0.030  };
ToolSvc.Offline.RichPhotonPredictor.Sep2GMax          = {  360.0,  72.0,  135.0  };
ToolSvc.Offline.RichPhotonPredictor.TolerenceFactor   = {  25,     10,    20     };

// RichRecPhoton Creator
ToolSvc.Offline.RichToolRegistry.Tools += { "RichPhotonCreatorWithGaussianCKSmear/RichPhotonCreator" };
ToolSvc.Offline.RichPhotonCreator.PhotonPredictor = "RichPhotonPredictor";
//                                                     Aero   C4F10   CF4
ToolSvc.Offline.RichPhotonCreator.RadiatorsToSmear = { true,  false,  false };
ToolSvc.Offline.RichPhotonCreator.SmearingWidths   = { 0.1,   0.01,   0.01  };
ToolSvc.Offline.RichPhotonCreator.ApplySmearingToAllPhotons = false;

ToolSvc.Offline.RichToolRegistry.Tools += { "RichPhotonCreator/RichDelegatedPhotonCreator" };
ToolSvc.Offline.RichDelegatedPhotonCreator.PhotonPredictor = "RichPhotonPredictor";
//                                                                         Aero     C4F10    CF4
// absolute max and min allowed Cherenkov theta angles
ToolSvc.Offline.RichDelegatedPhotonCreator.MinAllowedCherenkovTheta   = {  0.075,   0.005,   0.005  };
ToolSvc.Offline.RichDelegatedPhotonCreator.MaxAllowedCherenkovTheta   = {  0.29,    0.075,   0.035  };
// minimum probability for a photon to be retained (for at least one hypothesis)
ToolSvc.Offline.RichDelegatedPhotonCreator.MinPhotonProbability       = {  1e-15,   1e-15,   1e-15  };
// Fixed range around expected Cherenkov theta
ToolSvc.Offline.RichDelegatedPhotonCreator.CherenkovThetaTolerence    = {  0.025,   0.007,   0.003  };

// geometrical photon reconstruction
// use Quartic solving tool
ToolSvc.Offline.RichDelegatedPhotonCreator.PhotonRecoTool  = "PhotonParams";
ToolSvc.Offline.RichToolRegistry.Tools += { "RichPhotonRecoUsingQuarticSoln/PhotonParams" };
ToolSvc.Offline.RichDelegatedPhotonCreator.PhotonParams.FindUnambiguousPhotons     = false;
ToolSvc.Offline.RichDelegatedPhotonCreator.PhotonParams.UseMirrorSegmentAllignment = true;
