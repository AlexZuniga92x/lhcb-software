// $Id: RichRecPixelTool.cpp,v 1.2 2002-12-20 09:33:08 cattanem Exp $

// from Gaudi
#include "GaudiKernel/ToolFactory.h"
#include "GaudiKernel/MsgStream.h"
#include "GaudiKernel/SmartDataPtr.h"
#include "GaudiKernel/IDataProviderSvc.h"
#include "GaudiKernel/GaudiException.h"

// local
#include "RichRecTools/RichRecPixelTool.h"

//-----------------------------------------------------------------------------
// Implementation file for class : RichRecPixelTool
//
// 15/03/2002 : Chris Jones   Christopher.Rob.Jones@cern.ch
//-----------------------------------------------------------------------------

// Declaration of the Tool Factory
static const  ToolFactory<RichRecPixelTool>          s_factory ;
const        IToolFactory& RichRecPixelToolFactory = s_factory ;

// Standard constructor
RichRecPixelTool::RichRecPixelTool( const std::string& type,
                                    const std::string& name,
                                    const IInterface* parent )
  : AlgTool( type, name, parent ) {

  declareInterface<IRichRecPixelTool>(this);

  // Define job option parameters
  declareProperty( "RichRecPixelLocation",
                   m_richRecPixelLocation = RichRecPixelLocation::Default );
  declareProperty( "RecoDigitsLocation",
                   m_recoDigitsLocation = RichDigitLocation::Default );
  declareProperty( "ChronoTiming", m_timing = false );

}

StatusCode RichRecPixelTool::initialize() {

  MsgStream log( msgSvc(), name() );
  log << MSG::DEBUG << "Initialize" << endreq;

  StatusCode sc = StatusCode::SUCCESS;

  // Get pointer to EDS
  if ( !serviceLocator()->service( "EventDataSvc", m_evtDataSvc, true ) ) {
    log << MSG::ERROR << "EventDataSvc not found" << endreq;
    sc = StatusCode::FAILURE;
  }

  // Get Pointer to PixelFinder (temporary for SICB data)
  if ( !toolSvc()->retrieveTool( "PixelFinder", m_pixelFinder ) ) {
    log << MSG::ERROR << "PixelFinder not found" << endreq;
    sc = StatusCode::FAILURE;
  }

  // Setup incident services
  IIncidentSvc * incSvc;
  if ( !serviceLocator()->service( "IncidentSvc", incSvc, true ) ) {
    log << MSG::ERROR << "IncidentSvc not found" << endreq;
    sc = StatusCode::FAILURE;
  } else {
    incSvc->addListener( this, "BeginEvent" ); // Informed of a new event
    incSvc->addListener( this, "EndEvent"   ); // Informed at the end of event
  }

  // ChronoStat timing
  if ( m_timing ) {
    if ( !serviceLocator()->service( "ChronoStatSvc", m_chrono, true ) ) {
      log << MSG::ERROR << "ChronoStatSvc not found" << endreq;
      m_timing = false;
      sc = StatusCode::FAILURE;
    }
  }

  // Issue health warnings to remind me of various things
  log << MSG::WARNING << "Scaling RichDigit positions by 10 to convert to mm"
      << endreq;

  return sc;
}

StatusCode RichRecPixelTool::finalize() {

  //Release the tools
  if( m_pixelFinder ) toolSvc()->releaseTool( m_pixelFinder );
  
  return StatusCode::SUCCESS;
}


// Method that handles various Gaudi "software events"
void RichRecPixelTool::handle ( const Incident& incident ) {

  MsgStream log( msgSvc(), name() );
  log << MSG::VERBOSE << "Informed of incident '" << incident.type()
      << "' generated by '" << incident.source() << "'" << endreq;

  if ( "BeginEvent" == incident.type() ) {

    m_allDone = false;

    // Initialise navigation data
    m_pixelExists.clear();
    m_pixelDone.clear();

    SmartDataPtr<RichRecPixels> tdsPixels( m_evtDataSvc,
                                           m_richRecPixelLocation );
    if ( !tdsPixels ) {

      // Reinitialise the Pixel Container
      m_pixels = new RichRecPixels();

      // Register new RichRecPhoton container to Gaudi data store
      if ( !m_evtDataSvc->registerObject(m_richRecPixelLocation, m_pixels) ) {
        log << MSG::ERROR << "Failed to register RichRecPixels at "
            << m_richRecPixelLocation << endreq;
      }

    } else {

      log << MSG::DEBUG 
          << "Located " << tdsPixels->size() << " RichRecPixels at "
          << m_richRecPixelLocation << endreq;

      // Set smartref to TES pixel container
      m_pixels = tdsPixels;

      // Remake local pixel reference map
      for ( RichRecPixels::const_iterator iPixel = tdsPixels->begin();
            iPixel != tdsPixels->end();
            ++iPixel ) {
        m_pixelExists[(int)(*iPixel)->smartID()] = *iPixel;
        m_pixelDone[(int)(*iPixel)->smartID()] = true;
      }

    }

  } else if ( "EndEvent" == incident.type() ) {

    log << MSG::DEBUG << "Finalised with " << m_pixels->size()
        << " RichRecPixels at " << m_richRecPixelLocation << endreq;

  }

}

// Forms a new RichRecPixel object from a RichDigit
RichRecPixel * RichRecPixelTool::newPixel( RichDigit * digit ) {

  RichSmartID id = digit->key();

  // See if this RichRecTrack already exists
  if ( m_pixelDone[(int)id] ) {
    return m_pixelExists[(int)id];
  } else {

   // if (m_timing) m_chrono->chronoStart("RichRecPixelTool:newPixel");

    RichRecPixel * newPixel = NULL;

    if ( id ) {
      MsgStream log( msgSvc(), name() );

      // Make a new RichRecTrack
      newPixel = new RichRecPixel();
      newPixel->setSmartID( id );
      m_pixels->insert( newPixel );

      // For the moment use SICB geometry and not Xml
      // HepPoint3D xmlPosition;
      // m_richDetInterface->globalPosition( id, xmlPosition );
      // Scale by 10 to convert to mm - to be fixed in RichSmartID
      HepPoint3D gPosition = 10.0*m_pixelFinder->globalPosition(id);
      HepPoint3D lPosition = 10.0*m_pixelFinder->localPosition(id);
      newPixel->setGlobalPosition( gPosition );
      newPixel->setLocalPosition( lPosition );
 
      // Set parent information
      newPixel->setParentPixel( digit );
      newPixel->setParentType( Rich::RecPixel::Digit );
    }

    // Add to reference map
    m_pixelExists[(int)id] = newPixel;
    m_pixelDone[(int)id] = true;

    // if (m_timing) m_chrono->chronoStop("RichRecPixelTool:newPixel");

    return newPixel;
  }

}

StatusCode RichRecPixelTool::newPixels() {

  if ( m_allDone ) return StatusCode::SUCCESS;
  m_allDone = true;

  MsgStream log( msgSvc(), name() );

  // Obtain smart data pointer to RichDigits
  SmartDataPtr<RichDigits> digits( m_evtDataSvc, m_recoDigitsLocation );
  if ( !digits ) {
    log << MSG::ERROR << "Failed to locate digits at "
        << m_recoDigitsLocation << endreq;
    return StatusCode::FAILURE;
  } else {
    log << MSG::DEBUG << "Successfully located " << digits->size()
        << " digits at " << m_recoDigitsLocation << endreq;
  }
  
  for ( RichDigits::iterator digit = digits->begin();
        digit != digits->end();
        ++digit ) { newPixel( *digit ); }
  
  return StatusCode::SUCCESS;
}

RichRecPixels * RichRecPixelTool::richPixels()
{ 
  return m_pixels;
}

RichDigit * RichRecPixelTool::parentRichDigit ( const RichRecPixel * pixel )
{
  return dynamic_cast<RichDigit*>( (ContainedObject*)pixel->parentPixel() );
}
