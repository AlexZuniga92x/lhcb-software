// Rich Reconstruction monitors for common components

CheckRICHSeq.Context = "Offline";

// MC tools
ToolSvc.RichToolRegistry.Tools += { "RichMCTruthTool/RichMCTruthTool" };
ToolSvc.RichToolRegistry.Tools += { "RichRecMCTruthTool/RichRecMCTruthTool" };
ToolSvc.RichToolRegistry.Tools += { "RichMCTrackInfoTool/RichMCTrackInfoTool" };

// Pixel monitor
CheckRICHSeq.Members += { "RichPixelMonitor/RiRecPixelMoni" };

// Track geometry monitor
CheckRICHSeq.Members += { "RichTrackGeomMoni/RiRecTkGeomMoni" };
RiRecTkGeomMoni.TrackSelection = { "unique","seed","match","forward","follow","KsTrack","veloTT" };

// CK res moni
CheckRICHSeq.Members += { "RichCherenkovResMoni/RiRecAllTkCKResMoni" };
// forward tracks
CheckRICHSeq.Members += { "RichCherenkovResMoni/RiRecFrwdTkCKResMoni" };
RiRecFrwdTkCKResMoni.TrackSelection = { "unique","forward" };
// match tracks
CheckRICHSeq.Members += { "RichCherenkovResMoni/RiRecMatchTkCKResMoni" };
RiRecMatchTkCKResMoni.TrackSelection = { "unique","match" };
// seed tracks
CheckRICHSeq.Members += { "RichCherenkovResMoni/RiRecSeedTkCKResMoni" };
RiRecSeedTkCKResMoni.TrackSelection = { "unique","seed" };
// velott tracks
CheckRICHSeq.Members += { "RichCherenkovResMoni/RiRecVTTTkCKResMoni" };
RiRecVTTTkCKResMoni.TrackSelection = { "unique","veloTT" };
// KsTracks tracks
CheckRICHSeq.Members += { "RichCherenkovResMoni/RiRecKsTkCKResMoni" };
RiRecKsTkCKResMoni.TrackSelection = { "unique","KsTrack" };

// Track resolution monitors
// all tracks combined
//CheckRICHSeq.Members += { "RichTrackResolutionMoni/RiRecAllTkResMoni" };
// forward tracks - positive
CheckRICHSeq.Members += { "RichTrackResolutionMoni/RiRecFrwdTkPosResMoni" };
RiRecFrwdTkPosResMoni.TrackSelection = { "unique","positive","forward" };
// forward tracks - negative
CheckRICHSeq.Members += { "RichTrackResolutionMoni/RiRecFrwdTkNegResMoni" };
RiRecFrwdTkNegResMoni.TrackSelection = { "unique","negative","forward" };
// match tracks - positive
CheckRICHSeq.Members += { "RichTrackResolutionMoni/RiRecMatchTkPosResMoni" };
RiRecMatchTkPosResMoni.TrackSelection = { "unique","positive","match" };
// match tracks - negative
CheckRICHSeq.Members += { "RichTrackResolutionMoni/RiRecMatchTkNegResMoni" };
RiRecMatchTkNegResMoni.TrackSelection = { "unique","negative","match" };
// seed tracks
CheckRICHSeq.Members += { "RichTrackResolutionMoni/RiRecSeedTkResMoni" };
RiRecSeedTkResMoni.TrackSelection = { "unique","seed" };
// velott tracks
CheckRICHSeq.Members += { "RichTrackResolutionMoni/RiRecVTTTkResMoni" };
RiRecVTTTkResMoni.TrackSelection = { "unique","veloTT" };
// KsTracks tracks
CheckRICHSeq.Members += { "RichTrackResolutionMoni/RiRecKsTkResMoni" };
RiRecKsTkResMoni.TrackSelection = { "unique","KsTrack" };

/*
// Reconstruction monitor
CheckRICHSeq.Members += { "RichPhotonMonitor/RiRecPhotonMoni" };
RiRecPhotonMoni.MaxRichRecTracks  = 230;
//RiRecPhotonMoni.TrackMomentumCuts = { "forward/2/10",
//                                      "match/2/10",
//                                      "follow/2/10",
//                                      "seed/2/10",
//                                      "veloTT/1/10",
//                                      "KsTrack/2/10",
//                                      "velo/999999/9999999" };
ToolSvc.Offline.RichToolRegistry.Tools += { "RichPhotonCreator/ForcedRichPhotonCreator" };
RiRecPhotonMoni.ForcedRichPhotonCreator.MinAllowedCherenkovTheta = {  0.0,     0.0,     0.0    };
RiRecPhotonMoni.ForcedRichPhotonCreator.MaxAllowedCherenkovTheta = {  999,     999,     999    };
RiRecPhotonMoni.ForcedRichPhotonCreator.MinPhotonProbability     = {  1e-99,   1e-99,   1e-99  };
RiRecPhotonMoni.ForcedRichPhotonCreator.CherenkovThetaTolerence  = {  999,    999,      999    };
RiRecPhotonMoni.ForcedRichPhotonCreator.PhotonPredictor = "ForcedRichPhotonPredictor";
RiRecPhotonMoni.ForcedRichPhotonCreator.PhotonRecoTool  = "ForcedPhotonReco";
ToolSvc.Offline.RichToolRegistry.Tools += { "RichPhotonRecoUsingQuarticSolnAllSph/ForcedPhotonReco" };
ToolSvc.Offline.RichToolRegistry.Tools += { "RichSimplePhotonPredictor/ForcedRichPhotonPredictor" };
ToolSvc.Offline.ForcedRichPhotonPredictor.MinTrackROI        = {   0.0,   0.0,    0.0  };
ToolSvc.Offline.ForcedRichPhotonPredictor.MaxTrackROI        = {  9999,  9999,   9999  };
ToolSvc.Offline.RichToolRegistry.Tools += { "RichGeomEffPhotonTracing/RichGeomEffRay" };
ToolSvc.Offline.RichToolRegistry.Tools += { "RichGeomEffFixedValue/RichGeomEffFix" };
RiRecPhotonMoni.RichGeomEffRay.NPhotonsGeomEffCalc          = 100;
RiRecPhotonMoni.RichGeomEffRay.NPhotonsGeomEffBailout       = 25;
RiRecPhotonMoni.RichGeomEffFix.FixedSignalEfficiency   =  { 0.55,    0.62,   0.55  };
RiRecPhotonMoni.RichGeomEffFix.FixedScatterEfficiency  =  0.55;
*/

// Timing monitors
#include "$RICHRECMONITORSOPTS/RecoTiming_Brunel.opts"

// Low level object verifier
//CheckRICHSeq.Members += { "RichRecDataObjVerifier/RichRecObjPrint" };
//RichRecObjPrint.PrintPixels   = true;
//RichRecObjPrint.PrintTracks   = true;
//RichRecObjPrint.PrintSegments = true;
//RichRecObjPrint.PrintPhotons  = true;

// Test algorithm to histogram XML geometry
//CheckRICHSeq.Members += { "RichXMLTest" };
//RichXMLTest.HistoPath = "RICH/XMLTEST/";

