// Rich Reconstruction monitors for common components

CheckRICHSeq.Context = "Offline";

// Turn on HPD suppression warnings
//ToolSvc.Offline.RichPixelCreator.PixelSuppress.PrintHPDSuppressions = true;

// track monitor sequences
CheckRICHSeq.Members += {
   "GaudiSequencer/RichTkGeom" // general track geometry plots
  ,"GaudiSequencer/RichGhostTks"  // Ghost track monitors
  ,"GaudiSequencer/RichCKRes"  // CK angle resolutions plots
  ,"GaudiSequencer/RichTkRes" // track resolution plots
  ,"GaudiSequencer/RichPhotSig" // photon signal number plots
  ,"GaudiSequencer/RichPhotAng" // photon angle plots
  ,"GaudiSequencer/RichPhotGeom" // photon geometry plots
   //,"GaudiSequencer/RichPhotEff"  // photon reco efficiency plots
  ,"GaudiSequencer/RichPixelMoni" // pixel plots
  //,"GaudiSequencer/RichRayTraceTests" // ray tracing plots
  ,"GaudiSequencer/RichStereoFitterTests" // stereographic refitting plots
};
RichPhotEff.MeasureTime  = true;
RichPhotGeom.MeasureTime = true;
RichPhotAng.MeasureTime  = true;
RichPhotSig.MeasureTime  = true;
RichTkGeom.MeasureTime   = true;
RichCKRes.MeasureTime    = true;
RichTkRes.MeasureTime    = true;
RichRayTraceTests.MeasureTime = true;
RichStereoFitterTests.MeasureTime = true;

// Reco track monitors
#include "$RICHRECMONITORSOPTS/RecoMoni_Brunel_Tracks.opts"

// MCRichTracks
#include "$RICHRECMONITORSOPTS/RecoMoni_Brunel_MCRichTracks.opts"

// Options for photon reco eff monitors
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::PhotonCreator/ForcedRichPhotonCreator" };
ToolSvc.Offline.ForcedRichPhotonCreator.MinAllowedCherenkovTheta = {  0.0,     0.0,     0.0    };
ToolSvc.Offline.ForcedRichPhotonCreator.MaxAllowedCherenkovTheta = {  999,     999,     999    };
ToolSvc.Offline.ForcedRichPhotonCreator.MinPhotonProbability     = {  1e-99,   1e-99,   1e-99  };
ToolSvc.Offline.ForcedRichPhotonCreator.CherenkovThetaTolerence  = {  999,    999,      999    };
ToolSvc.Offline.ForcedRichPhotonCreator.PhotonPredictor = "ForcedRichPhotonPredictor";
ToolSvc.Offline.ForcedRichPhotonCreator.PhotonRecoTool  = "ForcedPhotonReco";
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::PhotonRecoUsingQuarticSoln/ForcedPhotonReco" };
ToolSvc.Offline.RichToolRegistry.Tools += { "Rich::Rec::SimplePhotonPredictor/ForcedRichPhotonPredictor" };
ToolSvc.Offline.ForcedRichPhotonPredictor.MinTrackROI        = {   0.0,   0.0,    0.0  };
ToolSvc.Offline.ForcedRichPhotonPredictor.MaxTrackROI        = {  9999,  9999,   9999  };

// Turn on histos in CK resolution tool
//ToolSvc.Offline.RichCherenkovResolution.HistoProduce = true;

// Timing monitors
//#include "$RICHRECMONITORSOPTS/RecoTiming_Brunel.opts"

// Low level object verifier
//CheckRICHSeq.Members += { "Rich::Rec::DataObjVerifier/RichRecObjPrint" };
//RichRecObjPrint.PrintPixels   = true;
//RichRecObjPrint.PrintTracks   = true;
//RichRecObjPrint.PrintSegments = true;
//RichRecObjPrint.PrintPhotons  = true;

// Test algorithm to histogram XML geometry
//CheckRICHSeq.Members += { "RichXMLTest" };
//RichXMLTest.HistoPath = "RICH/XMLTEST/";

// Pixel monitors
RichPixelMoni.Members += {
  "Rich::Rec::MC::PixelPositionMonitor/RiRecPixelPosMoni"
// ,"Rich::Rec::MC::PixelRecoEffMonitor/RiRecPixelRecoEffMoni"
};

// Ray tracing tests
//RichRayTraceTests.Members += { "Rich::Rec::TrackRayTraceTest/TrackRayTraceTest" };
RichRayTraceTests.Members += { 
  "Rich::Rec::MC::PhotonRecoRayTraceTest/PhotRayTraceTestSimple"
 ,"Rich::Rec::MC::PhotonRecoRayTraceTest/PhotRayTraceTestFull" 
  //,"Rich::Rec::MC::PhotonRecoRayTraceTest/PhotRayTraceTestSimpleNoAmbig" 
  //,"Rich::Rec::MC::PhotonRecoRayTraceTest/PhotRayTraceTestFullNoAmbig" 
};
PhotRayTraceTestSimple.FullHPDsInRayTracing = false;
PhotRayTraceTestFull.FullHPDsInRayTracing   = true;
//PhotRayTraceTestSimpleNoAmbig.FullHPDsInRayTracing = false;
//PhotRayTraceTestFullNoAmbig.FullHPDsInRayTracing   = true;

// stereofitter
RichStereoFitterTests.Members += { "Rich::Rec::MC::StereoPhotonFitTest/StereoFitTestLong" };
StereoFitTestLong.TrackSelector.TrackAlgs  = { "Forward", "Match" };
