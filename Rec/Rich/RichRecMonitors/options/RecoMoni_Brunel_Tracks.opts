
// Track geometry monitor

// all tracks
RichTkGeom.Members += { "Rich::Rec::MC::TrackGeomMoni/RiRecAllTkGeomMoni" };
// forward tracks
RichTkGeom.Members += { "Rich::Rec::MC::TrackGeomMoni/RiRecFrwdTkGeomMoni" };
RiRecFrwdTkGeomMoni.TrackSelector.TrackAlgs = { "Forward" };
// match tracks
RichTkGeom.Members += { "Rich::Rec::MC::TrackGeomMoni/RiRecMatchTkGeomMoni" };
RiRecMatchTkGeomMoni.TrackSelector.TrackAlgs = { "Match" };
// seed tracks
RichTkGeom.Members += { "Rich::Rec::MC::TrackGeomMoni/RiRecSeedTkGeomMoni" };
RiRecSeedTkGeomMoni.TrackSelector.TrackAlgs = { "Seed" };
// velott tracks
RichTkGeom.Members += { "Rich::Rec::MC::TrackGeomMoni/RiRecVTTTkGeomMoni" };
RiRecVTTTkGeomMoni.TrackSelector.TrackAlgs = { "VeloTT" };
// KsTracks tracks
RichTkGeom.Members += { "Rich::Rec::MC::TrackGeomMoni/RiRecKsTkGeomMoni" };
RiRecKsTkGeomMoni.TrackSelector.TrackAlgs = { "KsTrack" };

// Track resolution monitors
// forward tracks
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecFrwdTkResMoni" };
RiRecFrwdTkResMoni.TrackSelector.TrackAlgs = { "Forward" };
// forward tracks - positive
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecFrwdTkPosResMoni" };
RiRecFrwdTkPosResMoni.TrackSelector.TrackAlgs = { "Forward" };
RiRecFrwdTkPosResMoni.TrackSelector.Charge = 1;
// forward tracks - negative
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecFrwdTkNegResMoni" };
RiRecFrwdTkNegResMoni.TrackSelector.TrackAlgs = { "Forward" };
RiRecFrwdTkNegResMoni.TrackSelector.Charge = -1;
// match tracks
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecMatchTkResMoni" };
RiRecMatchTkResMoni.TrackSelector.TrackAlgs = { "Match" };
// match tracks - positive
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecMatchTkPosResMoni" };
RiRecMatchTkPosResMoni.TrackSelector.TrackAlgs = { "Match" };
RiRecMatchTkPosResMoni.TrackSelector.Charge = 1;
// match tracks - negative
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecMatchTkNegResMoni" };
RiRecMatchTkNegResMoni.TrackSelector.TrackAlgs = { "Match" };
RiRecMatchTkNegResMoni.TrackSelector.Charge = -1;
// seed tracks
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecSeedTkResMoni" };
RiRecSeedTkResMoni.TrackSelector.TrackAlgs = { "Seed" };
// seed tracks - positive
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecSeedTkPosResMoni" };
RiRecSeedTkPosResMoni.TrackSelector.TrackAlgs = { "Seed" };
RiRecSeedTkPosResMoni.TrackSelector.Charge = 1;
// seed tracks - negative
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecSeedTkNegResMoni" };
RiRecSeedTkNegResMoni.TrackSelector.TrackAlgs = { "Seed" };
RiRecSeedTkNegResMoni.TrackSelector.Charge = -1;
// velott tracks
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecVTTTkResMoni" };
RiRecVTTTkResMoni.TrackSelector.TrackAlgs = { "VeloTT" };
// velott tracks - positive
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecVTTTkPosResMoni" };
RiRecVTTTkPosResMoni.TrackSelector.TrackAlgs = { "VeloTT" };
RiRecVTTTkPosResMoni.TrackSelector.Charge = 1;
// velott tracks - negative
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecVTTTkNegResMoni" };
RiRecVTTTkNegResMoni.TrackSelector.TrackAlgs = { "VeloTT" };
RiRecVTTTkNegResMoni.TrackSelector.Charge = -1;
// KsTracks tracks
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecKsTkResMoni" };
RiRecKsTkResMoni.TrackSelector.TrackAlgs = { "KsTrack" };
// KsTracks tracks - positive
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecKsTkPosResMoni" };
RiRecKsTkPosResMoni.TrackSelector.TrackAlgs = { "KsTrack" };
RiRecKsTkPosResMoni.TrackSelector.Charge = 1;
// KsTracks tracks - negative
RichTkRes.Members += { "Rich::Rec::MC::TrackResolutionMoni/RiRecKsTkNegResMoni" };
RiRecKsTkNegResMoni.TrackSelector.TrackAlgs = { "KsTrack" };
RiRecKsTkNegResMoni.TrackSelector.Charge = -1;

// CK res moni
// all tracks
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecAllTkCKResMoni" };
// forward tracks - all
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecFrwdTkCKResMoni" };
RiRecFrwdTkCKResMoni.TrackSelector.TrackAlgs = { "Forward" };
// forward tracks - positive
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecFrwdTkPosCKResMoni" };
RiRecFrwdTkPosCKResMoni.TrackSelector.TrackAlgs = { "Forward" };
RiRecFrwdTkPosCKResMoni.TrackSelector.Charge = 1;
// forward tracks - negative
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecFrwdTkNegCKResMoni" };
RiRecFrwdTkNegCKResMoni.TrackSelector.TrackAlgs = { "Forward" };
RiRecFrwdTkNegCKResMoni.TrackSelector.Charge = -1;
// match tracks
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecMatchTkCKResMoni" };
RiRecMatchTkCKResMoni.TrackSelector.TrackAlgs = { "Match" };
// match tracks - positive
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecMatchTkPosCKResMoni" };
RiRecMatchTkPosCKResMoni.TrackSelector.TrackAlgs = { "Match" };
RiRecMatchTkPosCKResMoni.TrackSelector.Charge = 1;
// match tracks - negative
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecMatchTkNegCKResMoni" };
RiRecMatchTkNegCKResMoni.TrackSelector.TrackAlgs = { "Match" };
RiRecMatchTkNegCKResMoni.TrackSelector.Charge = -1;
// seed tracks
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecSeedTkCKResMoni" };
RiRecSeedTkCKResMoni.TrackSelector.TrackAlgs = { "Seed" };
// seed tracks - positive
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecSeedTkPosCKResMoni" };
RiRecSeedTkPosCKResMoni.TrackSelector.TrackAlgs = { "Seed" };
RiRecSeedTkPosCKResMoni.TrackSelector.Charge = 1;
// seed tracks - positive
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecSeedTkNegCKResMoni" };
RiRecSeedTkNegCKResMoni.TrackSelector.TrackAlgs = { "Seed" };
RiRecSeedTkNegCKResMoni.TrackSelector.Charge = -1;
// velott tracks
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecVTTTkCKResMoni" };
RiRecVTTTkCKResMoni.TrackSelector.TrackAlgs = { "VeloTT" };
// velott tracks - positive
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecVTTTkPosCKResMoni" };
RiRecVTTTkPosCKResMoni.TrackSelector.TrackAlgs = { "VeloTT" };
RiRecVTTTkPosCKResMoni.TrackSelector.Charge = 1;
// velott tracks - negative
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecVTTTkNegCKResMoni" };
RiRecVTTTkNegCKResMoni.TrackSelector.TrackAlgs = { "VeloTT" };
RiRecVTTTkNegCKResMoni.TrackSelector.Charge = -1;
// KsTracks tracks
RichCKRes.Members += { "Rich::Rec::MC::CherenkovResMoni/RiRecKsTkCKResMoni" };
RiRecKsTkCKResMoni.TrackSelector.TrackAlgs = { "KsTrack" };

// photon signal monitor
// forward tracks
RichPhotSig.Members += { "Rich::Rec::MC::PhotonSignalMonitor/RiRecPhotSigFrwdTkMoni" };
RiRecPhotSigFrwdTkMoni.TrackSelector.TrackAlgs = { "Forward" };
// match tracks
RichPhotSig.Members += { "Rich::Rec::MC::PhotonSignalMonitor/RiRecPhotSigMatchTkMoni" };
RiRecPhotSigMatchTkMoni.TrackSelector.TrackAlgs = { "Match" };
// seed tracks
RichPhotSig.Members += { "Rich::Rec::MC::PhotonSignalMonitor/RiRecPhotSigSeedTkMoni" };
RiRecPhotSigSeedTkMoni.TrackSelector.TrackAlgs = { "Seed" };
// velott tracks
RichPhotSig.Members += { "Rich::Rec::MC::PhotonSignalMonitor/RiRecPhotSigVTTTkMoni" };
RiRecPhotSigVTTTkMoni.TrackSelector.TrackAlgs = { "VeloTT" };
// Ks tracks
RichPhotSig.Members += { "Rich::Rec::MC::PhotonSignalMonitor/RiRecPhotSigKsTkMoni" };
RiRecPhotSigKsTkMoni.TrackSelector.TrackAlgs = { "KsTrack" };

// Cherenkov angle moni
// forward tracks
RichPhotAng.Members += { "Rich::Rec::MC::CherenkovAngleMonitor/RiRecPhotAngFrwdTkMoni" };
RiRecPhotAngFrwdTkMoni.TrackSelector.TrackAlgs = { "Forward" };
// match tracks
RichPhotAng.Members += { "Rich::Rec::MC::CherenkovAngleMonitor/RiRecPhotAngMatchTkMoni" };
RiRecPhotAngMatchTkMoni.TrackSelector.TrackAlgs = { "Match" };
// long tracks
RichPhotAng.Members += { "Rich::Rec::MC::CherenkovAngleMonitor/RiRecPhotAngLongTkMoni" };
RiRecPhotAngLongTkMoni.TrackSelector.TrackAlgs = { "Forward", "Match" };
// seed tracks
RichPhotAng.Members += { "Rich::Rec::MC::CherenkovAngleMonitor/RiRecPhotAngSeedTkMoni" };
RiRecPhotAngSeedTkMoni.TrackSelector.TrackAlgs = { "Seed" };
// velott tracks
RichPhotAng.Members += { "Rich::Rec::MC::CherenkovAngleMonitor/RiRecPhotAngVTTTkMoni" };
RiRecPhotAngVTTTkMoni.TrackSelector.TrackAlgs = { "VeloTT" };
// Ks tracks
RichPhotAng.Members += { "Rich::Rec::MC::CherenkovAngleMonitor/RiRecPhotAngKsTkMoni" };
RiRecPhotAngKsTkMoni.TrackSelector.TrackAlgs = { "KsTrack" };

// Cherenkov geometry moni
// forward tracks
RichPhotGeom.Members += { "Rich::Rec::MC::PhotonGeomMonitor/RiRecPhotGeomFrwdTkMoni" };
RiRecPhotGeomFrwdTkMoni.TrackSelector.TrackAlgs = { "Forward" };
// match tracks
RichPhotGeom.Members += { "Rich::Rec::MC::PhotonGeomMonitor/RiRecPhotGeomMatchTkMoni" };
RiRecPhotGeomMatchTkMoni.TrackSelector.TrackAlgs = { "Match" };
// seed tracks
RichPhotGeom.Members += { "Rich::Rec::MC::PhotonGeomMonitor/RiRecPhotGeomSeedTkMoni" };
RiRecPhotGeomSeedTkMoni.TrackSelector.TrackAlgs = { "Seed" };
// velott tracks
RichPhotGeom.Members += { "Rich::Rec::MC::PhotonGeomMonitor/RiRecPhotGeomVTTTkMoni" };
RiRecPhotGeomVTTTkMoni.TrackSelector.TrackAlgs = { "VeloTT" };
// Ks tracks
RichPhotGeom.Members += { "Rich::Rec::MC::PhotonGeomMonitor/RiRecPhotGeomKsTkMoni" };
RiRecPhotGeomKsTkMoni.TrackSelector.TrackAlgs = { "KsTrack" };

// photon reco eff monitors
// forward tracks
RichPhotEff.Members += { "Rich::Rec::MC::PhotonRecoEffMonitor/RiRecPhotEffFrwdTkMoni" };
RiRecPhotEffFrwdTkMoni.TrackSelector.TrackAlgs = { "Forward" };
// match tracks
RichPhotEff.Members += { "Rich::Rec::MC::PhotonRecoEffMonitor/RiRecPhotEffMatchTkMoni" };
RiRecPhotEffMatchTkMoni.TrackSelector.TrackAlgs = { "Match" };
// seed tracks
RichPhotEff.Members += { "Rich::Rec::MC::PhotonRecoEffMonitor/RiRecPhotEffSeedTkMoni" };
RiRecPhotEffSeedTkMoni.TrackSelector.TrackAlgs = { "Seed" };
// velott tracks
RichPhotEff.Members += { "Rich::Rec::MC::PhotonRecoEffMonitor/RiRecPhotEffVTTTkMoni" };
RiRecPhotEffVTTTkMoni.TrackSelector.TrackAlgs = { "VeloTT" };
// Ks tracks
RichPhotEff.Members += { "Rich::Rec::MC::PhotonRecoEffMonitor/RiRecPhotEffKsTkMoni" };
RiRecPhotEffKsTkMoni.TrackSelector.TrackAlgs = { "KsTrack" };

// ghost tracks
RichGhostTks.Members += { "Rich::Rec::MC::GhostTrackMoni/RichGhostTracks" };
