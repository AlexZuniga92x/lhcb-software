
//-----------------------------------------------------------------------------
/** @file RichGlobalPIDCommonBase.icpp
 *
 *  Implementation file for RICH base class : Rich::Rec::GlobalPID::CommonBase
 *
 *  CVS Log :-
 *  $Id: RichGlobalPIDCommonBase.icpp,v 1.2 2009-07-30 11:06:48 jonrob Exp $
 *
 *  @author Chris Jones    Christopher.Rob.Jones@cern.ch
 *  @date   2005-08-27
 */
//-----------------------------------------------------------------------------

// local
#include "RichGlobalPIDCommonBase.h"

//=============================================================================
// Destructor
//=============================================================================
template <class PBASE>
Rich::Rec::GlobalPID::CommonBase<PBASE>::~CommonBase() {}

//=============================================================================
// Constructor Initialisation
//=============================================================================
template <class PBASE>
void Rich::Rec::GlobalPID::CommonBase<PBASE>::initConstructor()
{
  m_GPIDtracks   = NULL;
  m_GPIDs        = NULL;
  m_richPartProp = NULL;
  this->declareProperty( "RichGlobalPIDTrackLocation", 
                         m_richGPIDTrackLocation = 
                         this->contextSpecificTES(LHCb::RichGlobalPIDTrackLocation::Default) );
  this->declareProperty( "RichGlobalPIDLocation", 
                         m_richGPIDLocation = 
                         this->contextSpecificTES(LHCb::RichGlobalPIDLocation::Default) );
  this->declareProperty( "GlobalName", m_richGPIDName = "RichGloPID"+this->context() );
  // turn off histo printing by default
  this->setProperty ( "HistoPrint", false );
}

//=============================================================================
// Initialisation
//=============================================================================
template <class PBASE>
StatusCode Rich::Rec::GlobalPID::CommonBase<PBASE>::initialize()
{
  // Execute the base class initialize
  const StatusCode sc = PBASE::initialize();
  if ( sc.isFailure() )
  { return this -> Error( "Failed to initialise Gaudi Base class", sc ); }

  // get tools
  this -> acquireTool( "RichParticleProperties",  m_richPartProp );

  // PID types
  m_pidTypes = m_richPartProp->particleTypes();
  if( this->msgLevel(MSG::DEBUG) )
    this->debug() << "Particle types considered                 = " << m_pidTypes << endmsg;

  return sc;
}
//=============================================================================

//=============================================================================
// Finalisation
//=============================================================================
template <class PBASE>
StatusCode Rich::Rec::GlobalPID::CommonBase<PBASE>::finalize()
{
  // Finalise base class and return
  return PBASE::finalize();
}
//=============================================================================

// Clean up GPID TES objects
template <class PBASE>
void Rich::Rec::GlobalPID::CommonBase<PBASE>::deleteGPIDEvent()
{
  //this->richStatus()->setEventOK( false );
  // Tidy up incase of event abort
  /*
  if ( m_GPIDtracks && !m_GPIDtracks->empty() )
  {
    m_GPIDtracks->clear();
  }
  if ( m_GPIDs      && !m_GPIDs->empty()      )
  {
    m_GPIDs->clear();
  }
  */
  m_GPIDtracks  = NULL;
  m_GPIDs       = NULL;
}
