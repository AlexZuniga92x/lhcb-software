// Options file to set up all the Track associators
ApplicationMgr.DLLs += { "TrackAssociators" };

//== Velo only tracks
ToolSvc.VeloTrackToMCP.Location      = "Rec/Relations/VeloTr2MCP" ;
DataOnDemandSvc.Algorithms +={ "DATA='/Event/Rec/Relations/VeloTr2MCP' 
                                TYPE='TrackAssociator/VeloTr2MCP'"};
VeloTr2MCP.InputTracks = "Rec/Track/Velo" ;  // TrackLocation::Velo
VeloTr2MCP.OutputTable = "Rec/Relations/VeloTr2MCP" ;
ToolSvc.VeloTrackToMCP.OutputLevel = 5;

//== Match tracks
ToolSvc.MatchTrackToMCP.Location      = "Rec/Relations/MatchTrack2MCP" ;
DataOnDemandSvc.Algorithms +={ "DATA='/Event/Rec/Relations/MatchTrack2MCP'
                                TYPE='TrackAssociator/Match2MCP'"};
Match2MCP.InputTracks  = "Rec/Track/Match" ; // TrackLocation::Match
Match2MCP.OutputTable  = "Rec/Relations/MatchTrack2MCP" ;
ToolSvc.MatchTrackToMCP.OutputLevel = 5;

//== Forward tracks
ToolSvc.ForwardTrackToMCP.Location      = "Rec/Relations/FwTrack2MCP" ;
DataOnDemandSvc.Algorithms +={ "DATA='/Event/Rec/Relations/FwTrack2MCP'
                                TYPE='TrackAssociator/Fwd2MCP'"};
Fwd2MCP.InputTracks = "Rec/Track/Forward" ;  // TrackLocation::Forward
Fwd2MCP.OutputTable = "Rec/Relations/FwTrack2MCP" ;
ToolSvc.ForwardTrackToMCP.OutputLevel = 5;

//== Seed tracks
ToolSvc.SeedTrackToMCP.Location      = "Rec/Relations/SeedTrack2MCP" ;
DataOnDemandSvc.Algorithms +={ "DATA='/Event/Rec/Relations/SeedTrack2MCP'
                                TYPE='TrackAssociator/Seed2MCP'"};
Seed2MCP.InputTracks = "Rec/Track/Seed" ;   // TrackLocation::Seed
Seed2MCP.OutputTable = "Rec/Relations/SeedTrack2MCP" ;
ToolSvc.SeedTrackToMCP.OutputLevel = 5;

//== Follow tracks
ToolSvc.FollowTrackToMCP.Location      = "Rec/Relations/FollowTrack2MCP" ;
DataOnDemandSvc.Algorithms +={ "DATA='/Event/Rec/Relations/FollowTrack2MCP'
                                TYPE='TrackAssociator/Follow2MCP'"};
Follow2MCP.InputTracks = "Rec/Track/Follow";   //TrackLocation::Follow
Follow2MCP.OutputTable = "Rec/Relations/FollowTrack2MCP" ;
ToolSvc.FollowTrackToMCP.OutputLevel = 5;

//== VeloTT tracks
ToolSvc.VeloTTTrackToMCP.Location      = "Rec/Relations/VeloTTTrack2MCP" ;
DataOnDemandSvc.Algorithms +={ "DATA='/Event/Rec/Relations/VeloTTTrack2MCP'
                                TYPE='TrackAssociator/VeloTT2MCP'"};
VeloTT2MCP.InputTracks = "Rec/Track/VeloTT";   //TrackLocation::VeloTT
VeloTT2MCP.OutputTable = "Rec/Relations/VeloTTTrack2MCP" ;
ToolSvc.VeloTTTrackToMCP.OutputLevel = 5;

//== KsTrack tracks
ToolSvc.KsTrackToMCP.Location      = "Rec/Relations/KsTrack2MCP" ;
DataOnDemandSvc.Algorithms +={ "DATA='/Event/Rec/Relations/KsTrack2MCP'
                                TYPE='TrackAssociator/KsTrack2MCP'"};
KsTrack2MCP.InputTracks = "Rec/Track/KsTrack";   //Location::KsTrack
KsTrack2MCP.OutputTable = "Rec/Relations/KsTrack2MCP" ;
ToolSvc.KsTrackToMCP.OutputLevel = 5;

//== Best tracks
ToolSvc.FitTrackToMCP.Location      = "Rec/Relations/BestTrack2MCP" ;
DataOnDemandSvc.Algorithms +={ "DATA='/Event/Rec/Relations/BestTrack2MCP'
                                TYPE='TrackAssociator/Best2MCP'"};
Best2MCP.InputTracks = "Rec/Track/Best" ;   // TrackLocation::Default
Best2MCP.OutputTable = "Rec/Relations/BestTrack2MCP" ;
ToolSvc.FitTrackToMCP.OutputLevel = 5;

//== Ideal tracks
ToolSvc.FitTrackToMCP.Location      = "Rec/Relations/IdealTr2MCP" ;
DataOnDemandSvc.Algorithms +={ "DATA='/Event/Rec/Relations/IdealTrack2MCP'
                                TYPE='TrackAssociator/IdealTr2MCP'"};
Ideal2MCP.InputTracks = "Rec/Track/FitIdeal" ;   // TrackLocation::Default
Ideal2MCP.OutputTable = "Rec/Relations/IdealTrack2MCP" ;
ToolSvc.FitTrackToMCP.OutputLevel = 5;
