// Include files 
#include "Event/Track.h"
//#include "Kernel/HitPattern.h"


// from Gaudi
#include "GaudiKernel/ToolFactory.h"
#include "GaudiKernel/IIncidentSvc.h" 

#include "Event/OTTime.h"
#include "Event/STCluster.h"
#include "Event/VeloCluster.h"

#include "Event/KalmanFitResult.h"

#include "TMVA/TMVAClassification_MLP_fittedVelo.C"
#include "TMVA/TMVAClassification_MLP_fittedUpstream.C"
#include "TMVA/TMVAClassification_MLP_fittedDownstream.C"
#include "TMVA/TMVAClassification_MLP_fittedTtrack.C"
#include "TMVA/TMVAClassification_MLP_fittedLong.C"

// local
#include "TrackNNGhostId.h"


#include "Kernel/HitPattern.h"

#include "TrackInterfaces/IHitExpectation.h"
#include "TrackInterfaces/IVeloExpectation.h"

//boost
#include <boost/assign/list_of.hpp>

//#include "Event/RecSummary.h"

//-----------------------------------------------------------------------------
// Implementation file for class : TrackNNGhostId
//
// 2009-10-06 : Johannes Albrecht
// 2012-08-16 : JA: implement new tuning on MC2012
// 2012-09-21 : Johann Brehmer: implement new tuning for all track types, remove old tuning
//
//  Tool to calculate a track quality variable using a trained (TMVA) netork
//
//-----------------------------------------------------------------------------

// Declaration of the Tool Factory
DECLARE_TOOL_FACTORY( TrackNNGhostId )


//=============================================================================
// Standard constructor, initializes variables
//=============================================================================
  TrackNNGhostId::TrackNNGhostId( const std::string& type,
                                  const std::string& name,
                                  const IInterface* parent )
    : GaudiTool ( type, name , parent ),
      m_otdecoder(0),
      m_readerVelo(0),
      m_readerUpstream(0),
      m_readerDownstream(0),
      m_readerTtrack(0),
      m_readerLong(0),
      m_ttExpectation(0),
      m_itExpectation(0),
      m_otExpectation(0),
      m_veloExpectation(0),
      m_FlattenLookupTableLongtrack(0),
      m_FlattenLookupTableVelo(0),
      m_FlattenLookupTableUpstream(0),
      m_FlattenLookupTableDownstream(0),
      m_FlattenLookupTableTtrack(0),
      m_nOTCont(0)
{
  declareInterface<ITrackManipulator>(this);
  declareProperty("IsMC2012Tuning",m_tuningMC12=false);
}

//=============================================================================
// Destructor
//=============================================================================
TrackNNGhostId::~TrackNNGhostId() {}

//=============================================================================
void TrackNNGhostId::handle ( const Incident& incident ) {
  if ( IncidentType::BeginEvent == incident.type() ) {
    m_configured = false;
    initEvent();
  }
} 

void TrackNNGhostId::initEvent() {

	if (false) { /// FIXME: this doesn't work at BeginEvent
			debug() << "initEvent starting" << endmsg;
		//m_nVeloCont = 0;
		//m_nTTCont = 0;
		//m_nITCont = 0;

		LHCb::VeloClusters* veloCont = getIfExists<LHCb::VeloClusters>(LHCb::VeloClusterLocation::Default);
		if (NULL==veloCont) {
			error() << "no velo container found" << endmsg;
			// do we want to do something here?
		} else {
		//	m_nVeloCont = veloCont->size();
		}

		LHCb::STClusters *ttCont = getIfExists<LHCb::STClusters>(LHCb::STClusterLocation::TTClusters);
		if (NULL==ttCont) {
			error() << "no TT container found" << endmsg;
			// do we want to do something here?
		} else {
		//	m_nTTCont = ttCont->size();
		}

		LHCb::STClusters *itCont = getIfExists<LHCb::STClusters>(LHCb::STClusterLocation::ITClusters);
		if (NULL==itCont) {
			error() << "no IT container found" << endmsg;
			// do we want to do something here?
		} else {
		//	m_nITCont = itCont->size();
		}
	}

	m_nOTCont = m_otdecoder->totalNumberOfHits();

	if ( UNLIKELY( msgLevel(MSG::DEBUG) ) ) {
		debug() << "OT   size = " << m_nOTCont << endmsg;
		debug() << "initEvent done" << endmsg;
	}

	m_configured = true;



	return;
}

StatusCode TrackNNGhostId::initialize()
{

  StatusCode sc = GaudiTool::initialize();
  if (sc.isFailure())
  {
    return Error("Failed to initialize", sc,1);
  }
  incSvc()->addListener(this, IncidentType::BeginEvent); 
  if (m_tuningMC12) {
    Error("deprecated property, will use latest tuning. Please fix.", StatusCode::SUCCESS,1).ignore();
  }

  /**
   *   initialize input variable names as used for training
   *   and class readers for all track types
   *
   */
  //velo tracks
  std::vector<std::string> names;
  variableNames_Velo(m_inNames);
  m_readerVelo = new ReadMLP_fittedVelo( m_inNames );

  //upstream tracks
  variableNames_Upstream(m_inNames);
  m_readerUpstream = new ReadMLP_fittedUpstream( m_inNames );

  //downstream tracks
  variableNames_Downstream(m_inNames);
  m_readerDownstream = new ReadMLP_fittedDownstream( m_inNames );

  //Ttracks
  variableNames_Ttrack(m_inNames);
  m_readerTtrack = new ReadMLP_fittedTtrack( m_inNames );


  //long tracks
  variableNames_Longtrack(m_inNames);
  m_readerLong = new ReadMLP_fittedLong( m_inNames );

  m_inputVec = new std::vector<double>;

  m_otdecoder = tool<IOTRawBankDecoder>("OTRawBankDecoder");

  m_veloExpectation = tool<IVeloExpectation>("VeloExpectation");
  m_ttExpectation = tool<IHitExpectation>("TTHitExpectation");
  m_itExpectation = tool<IHitExpectation>("ITHitExpectation");
  m_otExpectation = tool<IHitExpectation>("OTHitExpectation");

  // Look up table for flattening: long tracks
  // FIXME: move these somewhere else!
  const double input[1000] = {-0.2, -0.1986, -0.1972, -0.1958, -0.1944, -0.193, -0.1916, -0.1902, -0.1888, -0.1874, -0.186, -0.1846, -0.1832, -0.1818, -0.1804, -0.179, -0.1776, -0.1762, -0.1748, -0.1734, -0.172, -0.1706, -0.1692, -0.1678, -0.1664, -0.165, -0.1636, -0.1622, -0.1608, -0.1594, -0.158, -0.1566, -0.1552, -0.1538, -0.1524, -0.151, -0.1496, -0.1482, -0.1468, -0.1454, -0.144, -0.1426, -0.1412, -0.1398, -0.1384, -0.137, -0.1356, -0.1342, -0.1328, -0.1314, -0.13, -0.1286, -0.1272, -0.1258, -0.1244, -0.123, -0.1216, -0.1202, -0.1188, -0.1174, -0.116, -0.1146, -0.1132, -0.1118, -0.1104, -0.109, -0.1076, -0.1062, -0.1048, -0.1034, -0.102, -0.1006, -0.0992, -0.0978, -0.0964, -0.095, -0.0936, -0.0922, -0.0908, -0.0894, -0.088, -0.0866, -0.0852, -0.0838, -0.0824, -0.081, -0.0796, -0.0782, -0.0768, -0.0754, -0.074, -0.0726, -0.0712, -0.0698, -0.0684, -0.067, -0.0656, -0.0642, -0.0628, -0.0614, -0.06, -0.0586, -0.0572, -0.0558, -0.0544, -0.053, -0.0516, -0.0502, -0.0488, -0.0474, -0.046, -0.0446, -0.0432, -0.0418, -0.0404, -0.039, -0.0376, -0.0362, -0.0348, -0.0334, -0.032, -0.0306, -0.0292, -0.0278, -0.0264, -0.025, -0.0236, -0.0222, -0.0208, -0.0194, -0.018, -0.0166, -0.0152, -0.0138, -0.0124, -0.011, -0.0096, -0.0082, -0.0068, -0.0054, -0.004, -0.0026, -0.0012, 0.0002, 0.0016, 0.003, 0.0044, 0.0058, 0.0072, 0.0086, 0.01, 0.0114, 0.0128, 0.0142, 0.0156, 0.017, 0.0184, 0.0198, 0.0212, 0.0226, 0.024, 0.0254, 0.0268, 0.0282, 0.0296, 0.031, 0.0324, 0.0338, 0.0352, 0.0366, 0.038, 0.0394, 0.0408, 0.0422, 0.0436, 0.045, 0.0464, 0.0478, 0.0492, 0.0506, 0.052, 0.0534, 0.0548, 0.0562, 0.0576, 0.059, 0.0604, 0.0618, 0.0632, 0.0646, 0.066, 0.0674, 0.0688, 0.0702, 0.0716, 0.073, 0.0744, 0.0758, 0.0772, 0.0786, 0.08, 0.0814, 0.0828, 0.0842, 0.0856, 0.087, 0.0884, 0.0898, 0.0912, 0.0926, 0.094, 0.0954, 0.0968, 0.0982, 0.0996, 0.101, 0.1024, 0.1038, 0.1052, 0.1066, 0.108, 0.1094, 0.1108, 0.1122, 0.1136, 0.115, 0.1164, 0.1178, 0.1192, 0.1206, 0.122, 0.1234, 0.1248, 0.1262, 0.1276, 0.129, 0.1304, 0.1318, 0.1332, 0.1346, 0.136, 0.1374, 0.1388, 0.1402, 0.1416, 0.143, 0.1444, 0.1458, 0.1472, 0.1486, 0.15, 0.1514, 0.1528, 0.1542, 0.1556, 0.157, 0.1584, 0.1598, 0.1612, 0.1626, 0.164, 0.1654, 0.1668, 0.1682, 0.1696, 0.171, 0.1724, 0.1738, 0.1752, 0.1766, 0.178, 0.1794, 0.1808, 0.1822, 0.1836, 0.185, 0.1864, 0.1878, 0.1892, 0.1906, 0.192, 0.1934, 0.1948, 0.1962, 0.1976, 0.199, 0.2004, 0.2018, 0.2032, 0.2046, 0.206, 0.2074, 0.2088, 0.2102, 0.2116, 0.213, 0.2144, 0.2158, 0.2172, 0.2186, 0.22, 0.2214, 0.2228, 0.2242, 0.2256, 0.227, 0.2284, 0.2298, 0.2312, 0.2326, 0.234, 0.2354, 0.2368, 0.2382, 0.2396, 0.241, 0.2424, 0.2438, 0.2452, 0.2466, 0.248, 0.2494, 0.2508, 0.2522, 0.2536, 0.255, 0.2564, 0.2578, 0.2592, 0.2606, 0.262, 0.2634, 0.2648, 0.2662, 0.2676, 0.269, 0.2704, 0.2718, 0.2732, 0.2746, 0.276, 0.2774, 0.2788, 0.2802, 0.2816, 0.283, 0.2844, 0.2858, 0.2872, 0.2886, 0.29, 0.2914, 0.2928, 0.2942, 0.2956, 0.297, 0.2984, 0.2998, 0.3012, 0.3026, 0.304, 0.3054, 0.3068, 0.3082, 0.3096, 0.311, 0.3124, 0.3138, 0.3152, 0.3166, 0.318, 0.3194, 0.3208, 0.3222, 0.3236, 0.325, 0.3264, 0.3278, 0.3292, 0.3306, 0.332, 0.3334, 0.3348, 0.3362, 0.3376, 0.339, 0.3404, 0.3418, 0.3432, 0.3446, 0.346, 0.3474, 0.3488, 0.3502, 0.3516, 0.353, 0.3544, 0.3558, 0.3572, 0.3586, 0.36, 0.3614, 0.3628, 0.3642, 0.3656, 0.367, 0.3684, 0.3698, 0.3712, 0.3726, 0.374, 0.3754, 0.3768, 0.3782, 0.3796, 0.381, 0.3824, 0.3838, 0.3852, 0.3866, 0.388, 0.3894, 0.3908, 0.3922, 0.3936, 0.395, 0.3964, 0.3978, 0.3992, 0.4006, 0.402, 0.4034, 0.4048, 0.4062, 0.4076, 0.409, 0.4104, 0.4118, 0.4132, 0.4146, 0.416, 0.4174, 0.4188, 0.4202, 0.4216, 0.423, 0.4244, 0.4258, 0.4272, 0.4286, 0.43, 0.4314, 0.4328, 0.4342, 0.4356, 0.437, 0.4384, 0.4398, 0.4412, 0.4426, 0.444, 0.4454, 0.4468, 0.4482, 0.4496, 0.451, 0.4524, 0.4538, 0.4552, 0.4566, 0.458, 0.4594, 0.4608, 0.4622, 0.4636, 0.465, 0.4664, 0.4678, 0.4692, 0.4706, 0.472, 0.4734, 0.4748, 0.4762, 0.4776, 0.479, 0.4804, 0.4818, 0.4832, 0.4846, 0.486, 0.4874, 0.4888, 0.4902, 0.4916, 0.493, 0.4944, 0.4958, 0.4972, 0.4986, 0.5, 0.5014, 0.5028, 0.5042, 0.5056, 0.507, 0.5084, 0.5098, 0.5112, 0.5126, 0.514, 0.5154, 0.5168, 0.5182, 0.5196, 0.521, 0.5224, 0.5238, 0.5252, 0.5266, 0.528, 0.5294, 0.5308, 0.5322, 0.5336, 0.535, 0.5364, 0.5378, 0.5392, 0.5406, 0.542, 0.5434, 0.5448, 0.5462, 0.5476, 0.549, 0.5504, 0.5518, 0.5532, 0.5546, 0.556, 0.5574, 0.5588, 0.5602, 0.5616, 0.563, 0.5644, 0.5658, 0.5672, 0.5686, 0.57, 0.5714, 0.5728, 0.5742, 0.5756, 0.577, 0.5784, 0.5798, 0.5812, 0.5826, 0.584, 0.5854, 0.5868, 0.5882, 0.5896, 0.591, 0.5924, 0.5938, 0.5952, 0.5966, 0.598, 0.5994, 0.6008, 0.6022, 0.6036, 0.605, 0.6064, 0.6078, 0.6092, 0.6106, 0.612, 0.6134, 0.6148, 0.6162, 0.6176, 0.619, 0.6204, 0.6218, 0.6232, 0.6246, 0.626, 0.6274, 0.6288, 0.6302, 0.6316, 0.633, 0.6344, 0.6358, 0.6372, 0.6386, 0.64, 0.6414, 0.6428, 0.6442, 0.6456, 0.647, 0.6484, 0.6498, 0.6512, 0.6526, 0.654, 0.6554, 0.6568, 0.6582, 0.6596, 0.661, 0.6624, 0.6638, 0.6652, 0.6666, 0.668, 0.6694, 0.6708, 0.6722, 0.6736, 0.675, 0.6764, 0.6778, 0.6792, 0.6806, 0.682, 0.6834, 0.6848, 0.6862, 0.6876, 0.689, 0.6904, 0.6918, 0.6932, 0.6946, 0.696, 0.6974, 0.6988, 0.7002, 0.7016, 0.703, 0.7044, 0.7058, 0.7072, 0.7086, 0.71, 0.7114, 0.7128, 0.7142, 0.7156, 0.717, 0.7184, 0.7198, 0.7212, 0.7226, 0.724, 0.7254, 0.7268, 0.7282, 0.7296, 0.731, 0.7324, 0.7338, 0.7352, 0.7366, 0.738, 0.7394, 0.7408, 0.7422, 0.7436, 0.745, 0.7464, 0.7478, 0.7492, 0.7506, 0.752, 0.7534, 0.7548, 0.7562, 0.7576, 0.759, 0.7604, 0.7618, 0.7632, 0.7646, 0.766, 0.7674, 0.7688, 0.7702, 0.7716, 0.773, 0.7744, 0.7758, 0.7772, 0.7786, 0.78, 0.7814, 0.7828, 0.7842, 0.7856, 0.787, 0.7884, 0.7898, 0.7912, 0.7926, 0.794, 0.7954, 0.7968, 0.7982, 0.7996, 0.801, 0.8024, 0.8038, 0.8052, 0.8066, 0.808, 0.8094, 0.8108, 0.8122, 0.8136, 0.815, 0.8164, 0.8178, 0.8192, 0.8206, 0.822, 0.8234, 0.8248, 0.8262, 0.8276, 0.829, 0.8304, 0.8318, 0.8332, 0.8346, 0.836, 0.8374, 0.8388, 0.8402, 0.8416, 0.843, 0.8444, 0.8458, 0.8472, 0.8486, 0.85, 0.8514, 0.8528, 0.8542, 0.8556, 0.857, 0.8584, 0.8598, 0.8612, 0.8626, 0.864, 0.8654, 0.8668, 0.8682, 0.8696, 0.871, 0.8724, 0.8738, 0.8752, 0.8766, 0.878, 0.8794, 0.8808, 0.8822, 0.8836, 0.885, 0.8864, 0.8878, 0.8892, 0.8906, 0.892, 0.8934, 0.8948, 0.8962, 0.8976, 0.899, 0.9004, 0.9018, 0.9032, 0.9046, 0.906, 0.9074, 0.9088, 0.9102, 0.9116, 0.913, 0.9144, 0.9158, 0.9172, 0.9186, 0.92, 0.9214, 0.9228, 0.9242, 0.9256, 0.927, 0.9284, 0.9298, 0.9312, 0.9326, 0.934, 0.9354, 0.9368, 0.9382, 0.9396, 0.941, 0.9424, 0.9438, 0.9452, 0.9466, 0.948, 0.9494, 0.9508, 0.9522, 0.9536, 0.955, 0.9564, 0.9578, 0.9592, 0.9606, 0.962, 0.9634, 0.9648, 0.9662, 0.9676, 0.969, 0.9704, 0.9718, 0.9732, 0.9746, 0.976, 0.9774, 0.9788, 0.9802, 0.9816, 0.983, 0.9844, 0.9858, 0.9872, 0.9886, 0.99, 0.9914, 0.9928, 0.9942, 0.9956, 0.997, 0.9984, 0.9998, 1.0012, 1.0026, 1.004, 1.0054, 1.0068, 1.0082, 1.0096, 1.011, 1.0124, 1.0138, 1.0152, 1.0166, 1.018, 1.0194, 1.0208, 1.0222, 1.0236, 1.025, 1.0264, 1.0278, 1.0292, 1.0306, 1.032, 1.0334, 1.0348, 1.0362, 1.0376, 1.039, 1.0404, 1.0418, 1.0432, 1.0446, 1.046, 1.0474, 1.0488, 1.0502, 1.0516, 1.053, 1.0544, 1.0558, 1.0572, 1.0586, 1.06, 1.0614, 1.0628, 1.0642, 1.0656, 1.067, 1.0684, 1.0698, 1.0712, 1.0726, 1.074, 1.0754, 1.0768, 1.0782, 1.0796, 1.081, 1.0824, 1.0838, 1.0852, 1.0866, 1.088, 1.0894, 1.0908, 1.0922, 1.0936, 1.095, 1.0964, 1.0978, 1.0992, 1.1006, 1.102, 1.1034, 1.1048, 1.1062, 1.1076, 1.109, 1.1104, 1.1118, 1.1132, 1.1146, 1.116, 1.1174, 1.1188, 1.1202, 1.1216, 1.123, 1.1244, 1.1258, 1.1272, 1.1286, 1.13, 1.1314, 1.1328, 1.1342, 1.1356, 1.137, 1.1384, 1.1398, 1.1412, 1.1426, 1.144, 1.1454, 1.1468, 1.1482, 1.1496, 1.151, 1.1524, 1.1538, 1.1552, 1.1566, 1.158, 1.1594, 1.1608, 1.1622, 1.1636, 1.165, 1.1664, 1.1678, 1.1692, 1.1706, 1.172, 1.1734, 1.1748, 1.1762, 1.1776, 1.179, 1.1804, 1.1818, 1.1832, 1.1846, 1.186, 1.1874, 1.1888, 1.1902, 1.1916, 1.193, 1.1944, 1.1958, 1.1972, 1.1986};
  const double output[1000] = {0.999566, 0.999537, 0.999532, 0.999519, 0.999501, 0.999491, 0.999468, 0.999455, 0.999424, 0.999406, 0.999375, 0.999346, 0.999313, 0.999284, 0.999251, 0.999209, 0.999183, 0.999139, 0.999088, 0.999046, 0.999013, 0.99899, 0.998927, 0.998886, 0.998858, 0.998796, 0.998736, 0.998679, 0.99861, 0.99855, 0.998486, 0.998424, 0.998351, 0.998284, 0.998201, 0.998126, 0.998038, 0.997938, 0.997847, 0.997775, 0.997659, 0.997563, 0.99748, 0.997379, 0.997273, 0.997149, 0.996997, 0.996868, 0.996746, 0.99662, 0.996485, 0.996302, 0.996131, 0.995989, 0.995821, 0.99563, 0.995436, 0.995278, 0.995082, 0.994893, 0.994663, 0.994446, 0.994188, 0.99394, 0.993702, 0.993467, 0.993231, 0.992999, 0.992759, 0.992469, 0.992174, 0.991867, 0.991583, 0.991262, 0.990939, 0.990585, 0.990246, 0.989846, 0.989471, 0.989089, 0.988644, 0.988249, 0.987771, 0.987409, 0.986905, 0.986481, 0.986, 0.985483, 0.984941, 0.98431, 0.983716, 0.983111, 0.98247, 0.981803, 0.981002, 0.980294, 0.979573, 0.978738, 0.977927, 0.977053, 0.976048, 0.975012, 0.973957, 0.972851, 0.971631, 0.970447, 0.969093, 0.967783, 0.966256, 0.964633, 0.962824, 0.960968, 0.959035, 0.95696, 0.954471, 0.952008, 0.949292, 0.946327, 0.943001, 0.939458, 0.935693, 0.931413, 0.926916, 0.921845, 0.916377, 0.910546, 0.904116, 0.897053, 0.889153, 0.880735, 0.871186, 0.860805, 0.849821, 0.837597, 0.824714, 0.81075, 0.796332, 0.78111, 0.76536, 0.74905, 0.732862, 0.715998, 0.699063, 0.68244, 0.665463, 0.648796, 0.632582, 0.617494, 0.602975, 0.588988, 0.575188, 0.562186, 0.550005, 0.53837, 0.526984, 0.516476, 0.506363, 0.49686, 0.488114, 0.479782, 0.4719, 0.464413, 0.457451, 0.45076, 0.444539, 0.438592, 0.433087, 0.428004, 0.42305, 0.418178, 0.41388, 0.409675, 0.405863, 0.402147, 0.398625, 0.395118, 0.391996, 0.388866, 0.385904, 0.383139, 0.380459, 0.377872, 0.375393, 0.373055, 0.370669, 0.368434, 0.366377, 0.364356, 0.362236, 0.360347, 0.358409, 0.356507, 0.354649, 0.352943, 0.351134, 0.349467, 0.347834, 0.346169, 0.344588, 0.343078, 0.341478, 0.339907, 0.338444, 0.336966, 0.335532, 0.334064, 0.332661, 0.331257, 0.329833, 0.328438, 0.327029, 0.325636, 0.324463, 0.323165, 0.321816, 0.320597, 0.319302, 0.317981, 0.316756, 0.315578, 0.314399, 0.31313, 0.311856, 0.310618, 0.309466, 0.308303, 0.307171, 0.306036, 0.30486, 0.303803, 0.30264, 0.301552, 0.3005, 0.299386, 0.298283, 0.297187, 0.296133, 0.295078, 0.294112, 0.293194, 0.292101, 0.291013, 0.289881, 0.288775, 0.287759, 0.286671, 0.285674, 0.284681, 0.283733, 0.282735, 0.281709, 0.280779, 0.279823, 0.27889, 0.277843, 0.276926, 0.27599, 0.275166, 0.274245, 0.273367, 0.272488, 0.271584, 0.270798, 0.27002, 0.269118, 0.268221, 0.26733, 0.266492, 0.265598, 0.264748, 0.263908, 0.263006, 0.26206, 0.261199, 0.260388, 0.259533, 0.25868, 0.257871, 0.256979, 0.256111, 0.25524, 0.254439, 0.253676, 0.252847, 0.251991, 0.251051, 0.250205, 0.249394, 0.248673, 0.247851, 0.247158, 0.246339, 0.24551, 0.244773, 0.24406, 0.243272, 0.242494, 0.241744, 0.240969, 0.240219, 0.239478, 0.238775, 0.238079, 0.237358, 0.236635, 0.235909, 0.235138, 0.23434, 0.233673, 0.232973, 0.232303, 0.231611, 0.230843, 0.230145, 0.229471, 0.228763, 0.228062, 0.227393, 0.226664, 0.225935, 0.225292, 0.224623, 0.223979, 0.223297, 0.222599, 0.222023, 0.221338, 0.220671, 0.22009, 0.219441, 0.218802, 0.218115, 0.217528, 0.216921, 0.216368, 0.215755, 0.215125, 0.214505, 0.213882, 0.213316, 0.212685, 0.212055, 0.211471, 0.210871, 0.210318, 0.20976, 0.209059, 0.208434, 0.207837, 0.207255, 0.206726, 0.206111, 0.205498, 0.204914, 0.204369, 0.20381, 0.203195, 0.20264, 0.202125, 0.20157, 0.201063, 0.200531, 0.199965, 0.199363, 0.198802, 0.198215, 0.197693, 0.197135, 0.196587, 0.196016, 0.195476, 0.194879, 0.194326, 0.19377, 0.193279, 0.192736, 0.192196, 0.19162, 0.19109, 0.190664, 0.190206, 0.189679, 0.189147, 0.188656, 0.188092, 0.187609, 0.187064, 0.186593, 0.186063, 0.185547, 0.185053, 0.18458, 0.184017, 0.183554, 0.183089, 0.182541, 0.182011, 0.181489, 0.180959, 0.180463, 0.179962, 0.179486, 0.178998, 0.178602, 0.178176, 0.177662, 0.177212, 0.176736, 0.176281, 0.175832, 0.175398, 0.174927, 0.174459, 0.173997, 0.17356, 0.173048, 0.172606, 0.172165, 0.171728, 0.171291, 0.17088, 0.170433, 0.169973, 0.16957, 0.169092, 0.168619, 0.168229, 0.167794, 0.167365, 0.16691, 0.166502, 0.166143, 0.165784, 0.165396, 0.164923, 0.164481, 0.164096, 0.163659, 0.163238, 0.162858, 0.16246, 0.162054, 0.161703, 0.161276, 0.160858, 0.160447, 0.160031, 0.159674, 0.159199, 0.15878, 0.158392, 0.157943, 0.157534, 0.157175, 0.156759, 0.156345, 0.155898, 0.155529, 0.155133, 0.154671, 0.154291, 0.153934, 0.153565, 0.153172, 0.1528, 0.152384, 0.15198, 0.151619, 0.151246, 0.150885, 0.150531, 0.150117, 0.149706, 0.149321, 0.148964, 0.148616, 0.148241, 0.14784, 0.147525, 0.147181, 0.146819, 0.146509, 0.146153, 0.145755, 0.145357, 0.144977, 0.144594, 0.144165, 0.143765, 0.143442, 0.143031, 0.142687, 0.142346, 0.142023, 0.141664, 0.141315, 0.14095, 0.14056, 0.140139, 0.139805, 0.139472, 0.139082, 0.138761, 0.138446, 0.138113, 0.13774, 0.137438, 0.137066, 0.136743, 0.136368, 0.135999, 0.135606, 0.135293, 0.134944, 0.134626, 0.134321, 0.13398, 0.133567, 0.133213, 0.132866, 0.132535, 0.132184, 0.131882, 0.131522, 0.131179, 0.130869, 0.130486, 0.130135, 0.129796, 0.129473, 0.129137, 0.128804, 0.128504, 0.128132, 0.12777, 0.127408, 0.127054, 0.126754, 0.126418, 0.126118, 0.125733, 0.125387, 0.125033, 0.124663, 0.124335, 0.123989, 0.123627, 0.12333, 0.123027, 0.122684, 0.122348, 0.121986, 0.121689, 0.121368, 0.121053, 0.120686, 0.120342, 0.12003, 0.119691, 0.119345, 0.119006, 0.118657, 0.118355, 0.118102, 0.117791, 0.117419, 0.117104, 0.116719, 0.116391, 0.116008, 0.115683, 0.115372, 0.115044, 0.114675, 0.114303, 0.113943, 0.113636, 0.113248, 0.112904, 0.112514, 0.112191, 0.111876, 0.111501, 0.111155, 0.110808, 0.110485, 0.110155, 0.109816, 0.109516, 0.109216, 0.108891, 0.108547, 0.108219, 0.107886, 0.107583, 0.10725, 0.106911, 0.106588, 0.106247, 0.105808, 0.105472, 0.105074, 0.104743, 0.104386, 0.104066, 0.103787, 0.103479, 0.1032, 0.102931, 0.102624, 0.102321, 0.102016, 0.101686, 0.101375, 0.101034, 0.100742, 0.100427, 0.100117, 0.0998119, 0.0994707, 0.0991399, 0.098835, 0.0985145, 0.098163, 0.0977779, 0.0973877, 0.0970879, 0.0967649, 0.0963798, 0.0960257, 0.0957337, 0.0953925, 0.0950178, 0.0946301, 0.0943226, 0.0940047, 0.0936843, 0.0933638, 0.0930459, 0.0927332, 0.0923688, 0.0920561, 0.0917098, 0.0913997, 0.0910378, 0.0906683, 0.0903504, 0.0900403, 0.0897017, 0.0893425, 0.0890065, 0.0886266, 0.0883036, 0.0879883, 0.0876755, 0.0874145, 0.0870579, 0.0867426, 0.0863989, 0.0861146, 0.0857864, 0.0854504, 0.0850886, 0.0847345, 0.0844476, 0.0841608, 0.0838041, 0.0835095, 0.0831503, 0.0828608, 0.0825507, 0.082194, 0.0818891, 0.0815609, 0.0812223, 0.0808967, 0.0805478, 0.0802222, 0.0798655, 0.0795554, 0.0792246, 0.0789145, 0.0785966, 0.0782348, 0.0778807, 0.0775163, 0.0771519, 0.0768702, 0.0765135, 0.0761724, 0.0758416, 0.0755289, 0.0752679, 0.0749733, 0.0746424, 0.0743272, 0.0739808, 0.0736655, 0.0733167, 0.0729445, 0.0726163, 0.0723113, 0.0719598, 0.0716446, 0.0712827, 0.0709442, 0.0705927, 0.0703007, 0.069944, 0.0695796, 0.0691997, 0.0688327, 0.0684502, 0.068122, 0.0677214, 0.0673234, 0.0669306, 0.0666127, 0.0662509, 0.065915, 0.065535, 0.0651758, 0.0648218, 0.064447, 0.0641188, 0.0637441, 0.0633822, 0.0630618, 0.062669, 0.062333, 0.0619738, 0.0616197, 0.0612811, 0.060834, 0.0604541, 0.0600587, 0.0596969, 0.0593506, 0.0589888, 0.0585701, 0.0582393, 0.0579085, 0.0575596, 0.0571978, 0.0567972, 0.0564225, 0.0561098, 0.0557402, 0.0553215, 0.0549623, 0.0546005, 0.0542232, 0.0538148, 0.0534453, 0.0530731, 0.0527242, 0.0523366, 0.0519928, 0.0515742, 0.0512098, 0.0508376, 0.0504112, 0.0500158, 0.0496514, 0.0492379, 0.0488631, 0.0485091, 0.0481498, 0.0477389, 0.0473099, 0.0469042, 0.0465553, 0.0461573, 0.0458161, 0.0454104, 0.0449891, 0.0445937, 0.0441931, 0.0438287, 0.0434643, 0.0431387, 0.0426968, 0.0422393, 0.0418904, 0.0415364, 0.0410815, 0.0406654, 0.0402778, 0.0398462, 0.0394146, 0.0390218, 0.0386238, 0.0382542, 0.0378691, 0.0374737, 0.0370576, 0.0365485, 0.0360833, 0.0356026, 0.0351633, 0.0347032, 0.0342949, 0.0338297, 0.0334007, 0.0329588, 0.0325659, 0.0321576, 0.0316743, 0.0311833, 0.0306974, 0.0303201, 0.0298161, 0.0293458, 0.0289349, 0.0284412, 0.0280148, 0.027454, 0.0269423, 0.0264694, 0.02603, 0.0255597, 0.0250066, 0.0245, 0.0239987, 0.0234818, 0.0229649, 0.022417, 0.0218252, 0.0212954, 0.0207113, 0.0201789, 0.0195328, 0.01891, 0.0182639, 0.0176566, 0.0170699, 0.0165169, 0.0158914, 0.0152634, 0.0146638, 0.0140255, 0.0133406, 0.0126971, 0.0121001, 0.0113946, 0.0107588, 0.0101076, 0.00939427, 0.00871716, 0.00797027, 0.0072208, 0.00654885, 0.0058614, 0.00524373, 0.00465449, 0.00412986, 0.00366467, 0.00320982, 0.00279114, 0.0024681, 0.00213988, 0.00184267, 0.00159457, 0.00140333, 0.00126377, 0.00116298, 0.00106735, 0.000974316, 0.000901953, 0.000821837, 0.000767565, 0.000695202, 0.000656436, 0.000609917, 0.000573735, 0.000537554, 0.00051171, 0.000475528, 0.000444516, 0.000410919, 0.000390243, 0.000364399, 0.000338556, 0.000310127, 0.000294621, 0.000286868, 0.000255855, 0.000245517, 0.000237764, 0.000219673, 0.000204167, 0.000183492, 0.000167986, 0.000157648, 0.000144726, 0.000136973, 0.000131804, 0.000124051, 0.000113713, 9.82069e-05, 9.56226e-05, 8.78694e-05, 8.01162e-05, 7.75318e-05, 6.97786e-05, 6.71942e-05, 6.20254e-05, 5.68567e-05, 5.42723e-05, 5.42723e-05, 5.42723e-05, 5.42723e-05, 5.16879e-05, 4.91035e-05, 4.91035e-05, 4.65191e-05, 4.39347e-05, 3.87659e-05, 3.35971e-05, 3.35971e-05, 2.84283e-05, 2.84283e-05, 2.84283e-05, 2.32595e-05, 2.32595e-05, 1.80908e-05, 1.80908e-05, 1.80908e-05, 1.80908e-05, 1.80908e-05, 1.55064e-05, 1.55064e-05, 1.55064e-05, 1.55064e-05, 1.55064e-05, 1.2922e-05, 1.2922e-05, 1.2922e-05, 1.2922e-05, 1.2922e-05, 1.2922e-05, 1.2922e-05, 1.2922e-05, 1.03376e-05, 1.03376e-05, 7.75318e-06, 7.75318e-06, 7.75318e-06, 7.75318e-06, 5.16879e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 2.58439e-06, 0, 0, 0, 0};
  m_FlattenLookupTableLongtrack = new Rich::TabulatedFunction1D( input, output, 1000, gsl_interp_linear );
  if ( !m_FlattenLookupTableLongtrack->valid() ) return Error("could not initialize flattening table for longtracks",StatusCode::FAILURE,1);
  
  // Look up table for flattening: velo tracks
  const double outputVelo[1000] = {0.998798, 0.998798, 0.998753, 0.998722, 0.998715, 0.998685, 0.998662, 0.998632, 0.998624, 0.998579, 0.998541, 0.998503, 0.998465, 0.998412, 0.998375, 0.998359, 0.998291, 0.998223, 0.998201, 0.998155, 0.998095, 0.998065, 0.998049, 0.997989, 0.997936, 0.997906, 0.997845, 0.997762, 0.997724, 0.997664, 0.997611, 0.99755, 0.997498, 0.997467, 0.997399, 0.997316, 0.99724, 0.997165, 0.997067, 0.996946, 0.996893, 0.996825, 0.996719, 0.996643, 0.996522, 0.996371, 0.996235, 0.996122, 0.996054, 0.99594, 0.995812, 0.995759, 0.995653, 0.995509, 0.995381, 0.995275, 0.995177, 0.995116, 0.994942, 0.994821, 0.994685, 0.994443, 0.994277, 0.994111, 0.993914, 0.993748, 0.993627, 0.99343, 0.993188, 0.992954, 0.992667, 0.992409, 0.992168, 0.991941, 0.991638, 0.991381, 0.991086, 0.990716, 0.990527, 0.990315, 0.989922, 0.989589, 0.989249, 0.988924, 0.988629, 0.988266, 0.987851, 0.98745, 0.986981, 0.98655, 0.986006, 0.985469, 0.984872, 0.984328, 0.983836, 0.983322, 0.982793, 0.982105, 0.981409, 0.980729, 0.980018, 0.979353, 0.978551, 0.977841, 0.97707, 0.97623, 0.975497, 0.974658, 0.973667, 0.972806, 0.971808, 0.970984, 0.970069, 0.968814, 0.967544, 0.966568, 0.965457, 0.964353, 0.963166, 0.96201, 0.960906, 0.959855, 0.958653, 0.957436, 0.956218, 0.955107, 0.953746, 0.952461, 0.951191, 0.949974, 0.948696, 0.947448, 0.946156, 0.944893, 0.943661, 0.942247, 0.940916, 0.939707, 0.938225, 0.936735, 0.935397, 0.93412, 0.932706, 0.93136, 0.929931, 0.928616, 0.927383, 0.925947, 0.924495, 0.923308, 0.921766, 0.920504, 0.919218, 0.917782, 0.916277, 0.914864, 0.913367, 0.911839, 0.910479, 0.908997, 0.907674, 0.906547, 0.905126, 0.903637, 0.902215, 0.900847, 0.899267, 0.897928, 0.896628, 0.895207, 0.893952, 0.892697, 0.891071, 0.889718, 0.888395, 0.886936, 0.885658, 0.884335, 0.88308, 0.881606, 0.880305, 0.878937, 0.877516, 0.876246, 0.875157, 0.873819, 0.872533, 0.871316, 0.870008, 0.86861, 0.867309, 0.866062, 0.864837, 0.863612, 0.862259, 0.860928, 0.859734, 0.858388, 0.857133, 0.855803, 0.854789, 0.853474, 0.852166, 0.850956, 0.849716, 0.848439, 0.847267, 0.84614, 0.845022, 0.843835, 0.842753, 0.841529, 0.84044, 0.839132, 0.838006, 0.83697, 0.835715, 0.834573, 0.833318, 0.832328, 0.831224, 0.830105, 0.82888, 0.827595, 0.826673, 0.825524, 0.824374, 0.82318, 0.822152, 0.821071, 0.819997, 0.818984, 0.817812, 0.816633, 0.815529, 0.814584, 0.813601, 0.812452, 0.81125, 0.81004, 0.809004, 0.807787, 0.806532, 0.805496, 0.804408, 0.803342, 0.802306, 0.801225, 0.800204, 0.799131, 0.798125, 0.796915, 0.795585, 0.794511, 0.793438, 0.79219, 0.791102, 0.790005, 0.788924, 0.7881, 0.787042, 0.785923, 0.784637, 0.783496, 0.78249, 0.78147, 0.780305, 0.779209, 0.77809, 0.776979, 0.776049, 0.774862, 0.773902, 0.772836, 0.771838, 0.770674, 0.769577, 0.768428, 0.767219, 0.766198, 0.765003, 0.763968, 0.762962, 0.76179, 0.760785, 0.759643, 0.758441, 0.757299, 0.756256, 0.755228, 0.754215, 0.753179, 0.752196, 0.751236, 0.750178, 0.749112, 0.748106, 0.747123, 0.746148, 0.745014, 0.744001, 0.742867, 0.741914, 0.740712, 0.739639, 0.738444, 0.737446, 0.736305, 0.734966, 0.733915, 0.732774, 0.731844, 0.730612, 0.729485, 0.728268, 0.727217, 0.726091, 0.725214, 0.724178, 0.723082, 0.721857, 0.720806, 0.719732, 0.718719, 0.717517, 0.716436, 0.715257, 0.714266, 0.713336, 0.712308, 0.711136, 0.709987, 0.708846, 0.707734, 0.70657, 0.705466, 0.704445, 0.703304, 0.702389, 0.701338, 0.700295, 0.699115, 0.69808, 0.697067, 0.695993, 0.694927, 0.693717, 0.692704, 0.691638, 0.690557, 0.689431, 0.688297, 0.68711, 0.685968, 0.684993, 0.68376, 0.682528, 0.681213, 0.680094, 0.678967, 0.677622, 0.676503, 0.675558, 0.674393, 0.67332, 0.67214, 0.671014, 0.669978, 0.668678, 0.667566, 0.666394, 0.665253, 0.66424, 0.663257, 0.662183, 0.660981, 0.659825, 0.6586, 0.657594, 0.656475, 0.655485, 0.654396, 0.653202, 0.651917, 0.650782, 0.649648, 0.648582, 0.647501, 0.646284, 0.645158, 0.644205, 0.643033, 0.641725, 0.640493, 0.639321, 0.638263, 0.637182, 0.63601, 0.634747, 0.633553, 0.632449, 0.631421, 0.630181, 0.628956, 0.627807, 0.626718, 0.625448, 0.624011, 0.622825, 0.621539, 0.620413, 0.619226, 0.61813, 0.616882, 0.615809, 0.614682, 0.613397, 0.612376, 0.611272, 0.610206, 0.608967, 0.607575, 0.606343, 0.605171, 0.604015, 0.602805, 0.601656, 0.600197, 0.598987, 0.597808, 0.596757, 0.595592, 0.594368, 0.593203, 0.591827, 0.590587, 0.589423, 0.588334, 0.58711, 0.585923, 0.584592, 0.58339, 0.58215, 0.580986, 0.579806, 0.578536, 0.577228, 0.575981, 0.574756, 0.573524, 0.572307, 0.571127, 0.569797, 0.568542, 0.5674, 0.566024, 0.564807, 0.563567, 0.562304, 0.561012, 0.559832, 0.558486, 0.557292, 0.555999, 0.554752, 0.553353, 0.552204, 0.550934, 0.549792, 0.548658, 0.54729, 0.546004, 0.544689, 0.543646, 0.542474, 0.541272, 0.540054, 0.538626, 0.537219, 0.535904, 0.534694, 0.533182, 0.532003, 0.53077, 0.529538, 0.52823, 0.526907, 0.525569, 0.524374, 0.523112, 0.521925, 0.520624, 0.519506, 0.518266, 0.517139, 0.515695, 0.514395, 0.513019, 0.51162, 0.510441, 0.509299, 0.508263, 0.507054, 0.505685, 0.504317, 0.502979, 0.501814, 0.500484, 0.499214, 0.497815, 0.496568, 0.495245, 0.493808, 0.492568, 0.4912, 0.489809, 0.488584, 0.487268, 0.485961, 0.484637, 0.483314, 0.482052, 0.480842, 0.479398, 0.478015, 0.476586, 0.475376, 0.474061, 0.472692, 0.471392, 0.470008, 0.468784, 0.467529, 0.46613, 0.464693, 0.46337, 0.461941, 0.460618, 0.459212, 0.457965, 0.456695, 0.4555, 0.454147, 0.452809, 0.451433, 0.450117, 0.448666, 0.447176, 0.445838, 0.444402, 0.442942, 0.441468, 0.440266, 0.438988, 0.437605, 0.436206, 0.434959, 0.43353, 0.431972, 0.430695, 0.42919, 0.427716, 0.426393, 0.425115, 0.423649, 0.42231, 0.420851, 0.419377, 0.417903, 0.416413, 0.415007, 0.413646, 0.412157, 0.410773, 0.409329, 0.408082, 0.406577, 0.40533, 0.403841, 0.402563, 0.401126, 0.39972, 0.398117, 0.396794, 0.39532, 0.393884, 0.392289, 0.390897, 0.389529, 0.388244, 0.386853, 0.385333, 0.383934, 0.382445, 0.381107, 0.379496, 0.378166, 0.376714, 0.375285, 0.373841, 0.372322, 0.370779, 0.369388, 0.368028, 0.366561, 0.36517, 0.36359, 0.362214, 0.360603, 0.358978, 0.357677, 0.356233, 0.354774, 0.353232, 0.351856, 0.350246, 0.34865, 0.347161, 0.345468, 0.343827, 0.342398, 0.340848, 0.339563, 0.338066, 0.336546, 0.335042, 0.333606, 0.332192, 0.330544, 0.329122, 0.327595, 0.326302, 0.32482, 0.323384, 0.321849, 0.320277, 0.318855, 0.3172, 0.31593, 0.31438, 0.312822, 0.311295, 0.309685, 0.308135, 0.306683, 0.305224, 0.303531, 0.302056, 0.300272, 0.298874, 0.297361, 0.295713, 0.294292, 0.292651, 0.291102, 0.289816, 0.288342, 0.286754, 0.285205, 0.283647, 0.282271, 0.280865, 0.279428, 0.277969, 0.27623, 0.274673, 0.273176, 0.271596, 0.269948, 0.268428, 0.267052, 0.265593, 0.263998, 0.26241, 0.260891, 0.259174, 0.257625, 0.256082, 0.2546, 0.252998, 0.251561, 0.2502, 0.248892, 0.247403, 0.245876, 0.244205, 0.242625, 0.241083, 0.239608, 0.238323, 0.236826, 0.235201, 0.233462, 0.231995, 0.230392, 0.228888, 0.227391, 0.226015, 0.224488, 0.222817, 0.221305, 0.219611, 0.218016, 0.216648, 0.21506, 0.213624, 0.212293, 0.210736, 0.20914, 0.207704, 0.206169, 0.204476, 0.203001, 0.201323, 0.199728, 0.198246, 0.196643, 0.195116, 0.193528, 0.191903, 0.190225, 0.188523, 0.186996, 0.185363, 0.183995, 0.182369, 0.180744, 0.179247, 0.177705, 0.17623, 0.174514, 0.172859, 0.171248, 0.169638, 0.168186, 0.166576, 0.165011, 0.16331, 0.161722, 0.159968, 0.158282, 0.156559, 0.154933, 0.153066, 0.151501, 0.149883, 0.148295, 0.146556, 0.145074, 0.143676, 0.142013, 0.140425, 0.139049, 0.137325, 0.135798, 0.134089, 0.132524, 0.130997, 0.129304, 0.127829, 0.126378, 0.124964, 0.123203, 0.121622, 0.120239, 0.118795, 0.117426, 0.115937, 0.114349, 0.112875, 0.11134, 0.109844, 0.108127, 0.106366, 0.105096, 0.103848, 0.102381, 0.100885, 0.0994027, 0.0979285, 0.0964467, 0.0950026, 0.0934603, 0.092039, 0.0904816, 0.0890905, 0.0875331, 0.0861117, 0.0846828, 0.0830725, 0.0816663, 0.0803054, 0.0788614, 0.077561, 0.076238, 0.0748015, 0.0735163, 0.0721176, 0.0704771, 0.0690104, 0.0674756, 0.0663113, 0.0648522, 0.0635669, 0.0621532, 0.0607092, 0.0594315, 0.0581387, 0.056808, 0.0553262, 0.0540863, 0.0526348, 0.0512361, 0.0498601, 0.0485068, 0.0472594, 0.0457851, 0.0444923, 0.0433356, 0.0420277, 0.0407727, 0.0396235, 0.038429, 0.0371664, 0.0358358, 0.0345808, 0.0334845, 0.0323581, 0.0310804, 0.0298329, 0.0286233, 0.0273909, 0.0262342, 0.0251229, 0.02414, 0.0230135, 0.0217661, 0.0207832, 0.0197928, 0.0188327, 0.0177969, 0.0168217, 0.0159673, 0.0150223, 0.0138958, 0.0130188, 0.0120284, 0.0111741, 0.0101686, 0.00951841, 0.00876994, 0.00805171, 0.00739397, 0.00672866, 0.00619944, 0.00574582, 0.00531489, 0.00494443, 0.00456642, 0.00426401, 0.00396159, 0.00365918, 0.00343993, 0.00318288, 0.00302412, 0.00287291, 0.00263854, 0.00244954, 0.00229077, 0.00218492, 0.00208664, 0.00198836, 0.00191275, 0.00177667, 0.00175399, 0.00167839, 0.0015801, 0.00148938, 0.00143646, 0.00136085, 0.00128525, 0.00125501, 0.00125501, 0.00122477, 0.00117941, 0.0011416, 0.00112648, 0.00111892, 0.00107356, 0.00105844, 0.00103576, 0.00101308, 0.000990398, 0.000967718, 0.000929916, 0.000914795, 0.000892115, 0.000876994, 0.000846753, 0.000786271, 0.00077115, 0.000748469, 0.000733348, 0.000725788, 0.000718228, 0.000718228, 0.000703107, 0.000680426, 0.000680426, 0.000672866, 0.000642625, 0.000619944, 0.000574582, 0.000551901, 0.000529221, 0.00052166, 0.0005141, 0.0005141, 0.000498979, 0.000483859, 0.000461178, 0.000438497, 0.000400696, 0.000400696, 0.000385575, 0.000385575, 0.000385575, 0.000385575, 0.000378015, 0.000362894, 0.000347773, 0.000340213, 0.000340213, 0.000332653, 0.000325093, 0.000317532, 0.000317532, 0.000317532, 0.000317532, 0.000309972, 0.000302412, 0.000302412, 0.000302412, 0.000287291, 0.000279731, 0.000272171, 0.000272171, 0.00026461, 0.00026461, 0.00026461, 0.000241929, 0.000234369, 0.000226809, 0.000226809, 0.000219249, 0.000211688, 0.000189007, 0.000189007, 0.000189007, 0.000173887, 0.000173887, 0.000173887, 0.000173887, 0.000173887, 0.000166326, 0.000151206, 0.000151206, 0.000143646, 0.000143646, 0.000136085, 0.000136085, 0.000136085, 0.000128525, 0.000128525, 0.000113404, 0.000113404, 0.000105844, 0.000105844, 0.000105844, 0.000105844, 0.000105844, 0.000105844, 9.82838e-05, 9.07235e-05, 9.07235e-05, 9.07235e-05, 9.07235e-05, 9.07235e-05, 9.07235e-05, 8.31632e-05, 8.31632e-05, 8.31632e-05, 8.31632e-05, 8.31632e-05, 8.31632e-05, 8.31632e-05, 7.56029e-05, 6.80426e-05, 6.80426e-05, 6.04823e-05};
  m_FlattenLookupTableVelo = new Rich::TabulatedFunction1D( input, outputVelo, 1000, gsl_interp_linear );
  if ( !m_FlattenLookupTableVelo->valid() ) return Error("could not initialize flattening table for velo tracks",StatusCode::FAILURE,1);
  
  // Look up table for flattening: upstream tracks
  const double outputUpstream[1000] = {0.998993, 0.998993, 0.998993, 0.998815, 0.998815, 0.998755, 0.998578, 0.998578, 0.9984, 0.998341, 0.998341, 0.998341, 0.998281, 0.998281, 0.998281, 0.998222, 0.998163, 0.998044, 0.998044, 0.997867, 0.997867, 0.997807, 0.997748, 0.997748, 0.99757, 0.99757, 0.99757, 0.997511, 0.997452, 0.997392, 0.997274, 0.997155, 0.997096, 0.996978, 0.996859, 0.996681, 0.996563, 0.996444, 0.996385, 0.996266, 0.996089, 0.995911, 0.995674, 0.995496, 0.995259, 0.99514, 0.994963, 0.994844, 0.994785, 0.994666, 0.994607, 0.99437, 0.99437, 0.994192, 0.994074, 0.994014, 0.994014, 0.993896, 0.99354, 0.993422, 0.993244, 0.993185, 0.993007, 0.992888, 0.992711, 0.992355, 0.992177, 0.991881, 0.991822, 0.991407, 0.990992, 0.990874, 0.990636, 0.990399, 0.990162, 0.989807, 0.989451, 0.989155, 0.988799, 0.988384, 0.988029, 0.987673, 0.987436, 0.986784, 0.986429, 0.986014, 0.985658, 0.985184, 0.984651, 0.984236, 0.983406, 0.982992, 0.982517, 0.982103, 0.98151, 0.981214, 0.980325, 0.979436, 0.978962, 0.978547, 0.978073, 0.977421, 0.976828, 0.976413, 0.97588, 0.975347, 0.974991, 0.974458, 0.973747, 0.972976, 0.972561, 0.972087, 0.971613, 0.970902, 0.970428, 0.969835, 0.969183, 0.968531, 0.967761, 0.966931, 0.966161, 0.965568, 0.964857, 0.964087, 0.963613, 0.96302, 0.96225, 0.961361, 0.960887, 0.960353, 0.959642, 0.958753, 0.958042, 0.957212, 0.956501, 0.95579, 0.95496, 0.95419, 0.953005, 0.952293, 0.951642, 0.950575, 0.949686, 0.948915, 0.947967, 0.947612, 0.946782, 0.945775, 0.944826, 0.943997, 0.943108, 0.942337, 0.941804, 0.941034, 0.940204, 0.939374, 0.938663, 0.937537, 0.936589, 0.935226, 0.934574, 0.933803, 0.932618, 0.932026, 0.931077, 0.929951, 0.928944, 0.927699, 0.926336, 0.92521, 0.924084, 0.922781, 0.921595, 0.919936, 0.91881, 0.917447, 0.916677, 0.915906, 0.915195, 0.914306, 0.913536, 0.912469, 0.911461, 0.910098, 0.908617, 0.906839, 0.905831, 0.905061, 0.903461, 0.902157, 0.900972, 0.899787, 0.898661, 0.897179, 0.895994, 0.894631, 0.893446, 0.892438, 0.891134, 0.890068, 0.888586, 0.887282, 0.885978, 0.884201, 0.882778, 0.881771, 0.880171, 0.878985, 0.877682, 0.876733, 0.875607, 0.874422, 0.872407, 0.871222, 0.8698, 0.868259, 0.866955, 0.865236, 0.863281, 0.862155, 0.860377, 0.858777, 0.857117, 0.855932, 0.85451, 0.852969, 0.852139, 0.850954, 0.84965, 0.848228, 0.846746, 0.84562, 0.844554, 0.843368, 0.842124, 0.840879, 0.839279, 0.838094, 0.836672, 0.83519, 0.834301, 0.833116, 0.831634, 0.830212, 0.829501, 0.827901, 0.826538, 0.824997, 0.823397, 0.821797, 0.820908, 0.820019, 0.818419, 0.817589, 0.815989, 0.814448, 0.812967, 0.812078, 0.81113, 0.809767, 0.80787, 0.806685, 0.805381, 0.804314, 0.802951, 0.801944, 0.800107, 0.798388, 0.797084, 0.795958, 0.794358, 0.792521, 0.791395, 0.789617, 0.788136, 0.786654, 0.785884, 0.784817, 0.783335, 0.781972, 0.780906, 0.779128, 0.77735, 0.776105, 0.774387, 0.773024, 0.772016, 0.77089, 0.769646, 0.767927, 0.766564, 0.765201, 0.763304, 0.76206, 0.760756, 0.758741, 0.757852, 0.756371, 0.755185, 0.753882, 0.75323, 0.75163, 0.750504, 0.748904, 0.747363, 0.745881, 0.744637, 0.743392, 0.74197, 0.740192, 0.738888, 0.737051, 0.735688, 0.734147, 0.732903, 0.731303, 0.72994, 0.728695, 0.727806, 0.726206, 0.724902, 0.723598, 0.722472, 0.721287, 0.719865, 0.718265, 0.71702, 0.715242, 0.713939, 0.712457, 0.711153, 0.70979, 0.708427, 0.707301, 0.705997, 0.704753, 0.703508, 0.701849, 0.700664, 0.699123, 0.697345, 0.695804, 0.6945, 0.693374, 0.691715, 0.690708, 0.6897, 0.688693, 0.687567, 0.686204, 0.6849, 0.683418, 0.681937, 0.680337, 0.678796, 0.676899, 0.67524, 0.673758, 0.671803, 0.670321, 0.668543, 0.66724, 0.666232, 0.664988, 0.663684, 0.66161, 0.660069, 0.658409, 0.657106, 0.655328, 0.653728, 0.652483, 0.651476, 0.649757, 0.648098, 0.646142, 0.644779, 0.64306, 0.642053, 0.640749, 0.639327, 0.637786, 0.635771, 0.634408, 0.632571, 0.631445, 0.629845, 0.628185, 0.627, 0.625696, 0.624452, 0.622852, 0.621548, 0.620007, 0.618822, 0.617103, 0.614614, 0.613429, 0.611829, 0.610525, 0.609458, 0.608273, 0.606554, 0.604895, 0.603176, 0.601932, 0.599858, 0.598258, 0.596895, 0.595354, 0.594524, 0.593102, 0.591383, 0.589783, 0.588598, 0.586879, 0.585635, 0.584272, 0.582909, 0.58119, 0.579649, 0.577812, 0.576568, 0.574849, 0.573071, 0.571471, 0.569989, 0.568093, 0.566493, 0.565071, 0.56353, 0.561455, 0.559441, 0.558018, 0.556122, 0.554403, 0.552862, 0.550729, 0.548714, 0.546758, 0.545217, 0.544151, 0.542788, 0.541069, 0.539469, 0.53781, 0.536684, 0.534965, 0.533009, 0.531291, 0.52975, 0.528209, 0.526965, 0.525424, 0.523942, 0.522638, 0.521098, 0.519735, 0.518016, 0.517068, 0.515882, 0.514816, 0.513571, 0.511734, 0.510193, 0.508534, 0.507289, 0.505808, 0.504563, 0.503497, 0.501719, 0.500178, 0.498281, 0.496563, 0.494192, 0.49277, 0.490874, 0.489451, 0.488147, 0.486488, 0.484829, 0.48311, 0.481629, 0.480621, 0.478962, 0.478132, 0.476828, 0.475406, 0.473747, 0.472621, 0.470961, 0.468887, 0.466872, 0.465094, 0.46379, 0.462309, 0.460946, 0.459405, 0.457746, 0.456086, 0.45496, 0.453301, 0.452056, 0.450397, 0.448738, 0.447138, 0.445123, 0.443463, 0.442278, 0.440974, 0.439137, 0.437656, 0.435522, 0.434337, 0.432796, 0.431374, 0.43007, 0.428588, 0.427403, 0.425803, 0.424499, 0.423195, 0.421358, 0.419758, 0.418336, 0.416617, 0.415373, 0.413891, 0.413121, 0.411698, 0.40998, 0.408024, 0.406246, 0.405357, 0.404231, 0.402394, 0.401327, 0.400142, 0.398661, 0.397475, 0.395816, 0.394512, 0.393149, 0.391845, 0.390245, 0.389238, 0.387993, 0.386749, 0.385089, 0.384201, 0.382897, 0.381356, 0.380526, 0.379282, 0.377563, 0.376437, 0.375133, 0.374126, 0.372467, 0.370985, 0.369563, 0.368496, 0.367488, 0.365948, 0.364525, 0.363044, 0.362036, 0.360081, 0.358362, 0.356703, 0.355162, 0.353799, 0.352613, 0.351132, 0.349473, 0.347932, 0.345739, 0.344317, 0.342598, 0.340998, 0.339753, 0.338331, 0.336731, 0.335427, 0.334242, 0.332701, 0.330805, 0.329382, 0.328316, 0.327249, 0.326005, 0.324404, 0.323397, 0.322745, 0.321678, 0.319663, 0.31836, 0.317352, 0.3167, 0.315219, 0.314211, 0.312433, 0.311544, 0.309885, 0.308641, 0.307633, 0.306744, 0.305263, 0.303603, 0.301825, 0.300759, 0.299099, 0.29827, 0.296551, 0.294951, 0.293647, 0.292521, 0.291039, 0.289973, 0.288669, 0.287543, 0.286476, 0.285113, 0.28298, 0.28138, 0.280372, 0.279365, 0.277883, 0.276579, 0.274683, 0.273083, 0.27172, 0.270179, 0.269053, 0.267808, 0.266505, 0.264905, 0.263601, 0.261645, 0.260045, 0.258623, 0.256904, 0.255778, 0.254948, 0.253645, 0.251867, 0.250978, 0.249793, 0.248667, 0.246889, 0.244933, 0.243037, 0.241911, 0.240725, 0.23877, 0.237288, 0.23634, 0.235214, 0.233377, 0.232192, 0.231421, 0.230295, 0.229169, 0.228162, 0.227273, 0.226147, 0.225139, 0.223184, 0.22188, 0.22022, 0.219213, 0.217257, 0.215776, 0.214294, 0.212931, 0.211627, 0.210798, 0.20979, 0.208546, 0.206768, 0.205701, 0.204397, 0.203212, 0.201671, 0.200604, 0.199064, 0.197701, 0.196634, 0.19533, 0.194441, 0.193493, 0.192545, 0.191715, 0.190411, 0.189285, 0.188278, 0.18733, 0.186263, 0.185374, 0.184307, 0.182944, 0.1817, 0.180574, 0.179863, 0.178618, 0.177492, 0.17607, 0.175062, 0.174114, 0.172929, 0.172336, 0.171329, 0.170025, 0.169314, 0.167002, 0.165936, 0.164336, 0.163032, 0.162321, 0.161373, 0.160009, 0.158469, 0.157165, 0.155861, 0.154617, 0.153431, 0.153016, 0.151831, 0.150942, 0.149638, 0.147742, 0.147327, 0.146023, 0.145135, 0.144305, 0.143357, 0.141994, 0.141164, 0.139742, 0.138379, 0.137193, 0.13589, 0.134823, 0.133815, 0.13263, 0.131504, 0.130437, 0.129371, 0.127771, 0.126407, 0.124867, 0.123978, 0.122911, 0.121726, 0.120896, 0.120007, 0.119177, 0.117874, 0.116629, 0.115385, 0.114199, 0.112896, 0.112066, 0.11094, 0.110347, 0.109458, 0.108332, 0.107266, 0.106021, 0.104954, 0.103769, 0.10288, 0.101813, 0.100984, 0.0997985, 0.0986725, 0.0978428, 0.0967168, 0.0958872, 0.0946426, 0.0934574, 0.0925092, 0.0914425, 0.0903165, 0.0891905, 0.0881237, 0.0872348, 0.0867014, 0.085694, 0.0846865, 0.0838568, 0.0830271, 0.0817234, 0.0807752, 0.0795899, 0.0784639, 0.0778713, 0.076449, 0.0751452, 0.0736636, 0.0723006, 0.0710561, 0.0704634, 0.0693374, 0.0680929, 0.0668484, 0.0657224, 0.0644186, 0.0631741, 0.0621074, 0.0605073, 0.059322, 0.0583146, 0.0574849, 0.0561811, 0.0549959, 0.053455, 0.0524476, 0.0516771, 0.0503734, 0.048951, 0.047588, 0.0463435, 0.0449212, 0.043973, 0.0427285, 0.0412469, 0.0403579, 0.039232, 0.0380467, 0.0370985, 0.036091, 0.0353799, 0.0342539, 0.0330686, 0.0317648, 0.0305796, 0.0295129, 0.0283869, 0.0270831, 0.0255423, 0.0240607, 0.023231, 0.0222828, 0.0212161, 0.0204457, 0.0192011, 0.0183715, 0.0176603, 0.0165936, 0.0155861, 0.0146379, 0.0134526, 0.0128008, 0.0120303, 0.0111414, 0.00983762, 0.00948204, 0.00853384, 0.00805974, 0.00740785, 0.00687448, 0.00645964, 0.0060448, 0.00562996, 0.00515586, 0.00480028, 0.00444471, 0.00420766, 0.00379282, 0.00343724, 0.00337798, 0.00325945, 0.00325945, 0.00278535, 0.00260756, 0.0025483, 0.00231125, 0.00213346, 0.0020742, 0.00195567, 0.00195567, 0.00183715, 0.00183715, 0.00171862, 0.00160009, 0.00154083, 0.00154083, 0.00148157, 0.00142231, 0.00130378, 0.00130378, 0.00118526, 0.00106673, 0.00100747, 0.000948204, 0.000888942, 0.000888942, 0.000829679, 0.000711153, 0.000592628, 0.000533365, 0.000533365, 0.000533365, 0.000533365, 0.000474102, 0.000474102, 0.000414839, 0.000414839, 0.000355577, 0.000355577, 0.000296314, 0.000296314, 0.000296314, 0.000296314, 0.000296314, 0.000177788, 0.000177788, 0.000177788, 0.000177788, 0.000177788, 0.000177788, 0.000177788, 0.000177788, 0.000177788, 0.000118526, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 5.92628e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  m_FlattenLookupTableUpstream = new Rich::TabulatedFunction1D( input, outputUpstream, 1000, gsl_interp_linear );
  if ( !m_FlattenLookupTableUpstream->valid() ) return Error("could not initialize flattening table for upstream tracks",StatusCode::FAILURE,1);
  
  // Look up table for flattening: downstream tracks
  const double outputDownstream[1000] = {0.999029, 0.999001, 0.998955, 0.99895, 0.998927, 0.998881, 0.998852, 0.998795, 0.998767, 0.998744, 0.998693, 0.998664, 0.998653, 0.998596, 0.998544, 0.998499, 0.998453, 0.99839, 0.998333, 0.998264, 0.998253, 0.998207, 0.998179, 0.99811, 0.998036, 0.997968, 0.997911, 0.997848, 0.997751, 0.997705, 0.997625, 0.997557, 0.997499, 0.997437, 0.997391, 0.997277, 0.997185, 0.997111, 0.997048, 0.996969, 0.996883, 0.99682, 0.996752, 0.996632, 0.996506, 0.996386, 0.996272, 0.996169, 0.996015, 0.995861, 0.995735, 0.995644, 0.995473, 0.995302, 0.995165, 0.99497, 0.994793, 0.994582, 0.994411, 0.994217, 0.99396, 0.99372, 0.99352, 0.993321, 0.993046, 0.992778, 0.992521, 0.992259, 0.991933, 0.991682, 0.991357, 0.991037, 0.990723, 0.990477, 0.990101, 0.989758, 0.989364, 0.988999, 0.988605, 0.988182, 0.987697, 0.987206, 0.986715, 0.986093, 0.985528, 0.984883, 0.984215, 0.983501, 0.98281, 0.982108, 0.981217, 0.980538, 0.97979, 0.97898, 0.978135, 0.977227, 0.976108, 0.97508, 0.973864, 0.972705, 0.971524, 0.970273, 0.968943, 0.967584, 0.966214, 0.964776, 0.963177, 0.961596, 0.959934, 0.958364, 0.956435, 0.954579, 0.952439, 0.950286, 0.948163, 0.945731, 0.943167, 0.940695, 0.937904, 0.93514, 0.932246, 0.929272, 0.92632, 0.923363, 0.920012, 0.916455, 0.91311, 0.909182, 0.90534, 0.901709, 0.89733, 0.89306, 0.888749, 0.88457, 0.8799, 0.875082, 0.870144, 0.864829, 0.859599, 0.854227, 0.848695, 0.84306, 0.837386, 0.83142, 0.825448, 0.818974, 0.812763, 0.806146, 0.799826, 0.793016, 0.786496, 0.780016, 0.773074, 0.765944, 0.759276, 0.751962, 0.744975, 0.738004, 0.730851, 0.723652, 0.71663, 0.70975, 0.70266, 0.69517, 0.687577, 0.680669, 0.673162, 0.666328, 0.658861, 0.651793, 0.644737, 0.637834, 0.630847, 0.624047, 0.617202, 0.610283, 0.603535, 0.596844, 0.590262, 0.583662, 0.577239, 0.57048, 0.564263, 0.558074, 0.551829, 0.545378, 0.539195, 0.533012, 0.526664, 0.521097, 0.515234, 0.509377, 0.503794, 0.498244, 0.493055, 0.487386, 0.481997, 0.477127, 0.472172, 0.467016, 0.461947, 0.45714, 0.452276, 0.447606, 0.442953, 0.438243, 0.433864, 0.429668, 0.424976, 0.420842, 0.416846, 0.41289, 0.408591, 0.40472, 0.400621, 0.396916, 0.393062, 0.389357, 0.385584, 0.381822, 0.378253, 0.374811, 0.3715, 0.368063, 0.364643, 0.361343, 0.358146, 0.355109, 0.352106, 0.348841, 0.345861, 0.342875, 0.34002, 0.337269, 0.334351, 0.33168, 0.329116, 0.326353, 0.323687, 0.32089, 0.318389, 0.315746, 0.313137, 0.310568, 0.308336, 0.305864, 0.30358, 0.301148, 0.29859, 0.296501, 0.294195, 0.291877, 0.289645, 0.287566, 0.285311, 0.283091, 0.280984, 0.278797, 0.276794, 0.274716, 0.272672, 0.270525, 0.268721, 0.266923, 0.26497, 0.263064, 0.261368, 0.259735, 0.257771, 0.255984, 0.254226, 0.252519, 0.250915, 0.249259, 0.247832, 0.246211, 0.244549, 0.242934, 0.241175, 0.239628, 0.23815, 0.236614, 0.235038, 0.233657, 0.232361, 0.230882, 0.229495, 0.228119, 0.226715, 0.22539, 0.223957, 0.222713, 0.221439, 0.220223, 0.21883, 0.217592, 0.216364, 0.215045, 0.213904, 0.212659, 0.21118, 0.210039, 0.208794, 0.207727, 0.206619, 0.205255, 0.204221, 0.203131, 0.201932, 0.20079, 0.199568, 0.198512, 0.197365, 0.196172, 0.195104, 0.194116, 0.192963, 0.191901, 0.190988, 0.190057, 0.188933, 0.187871, 0.186894, 0.185964, 0.185022, 0.183994, 0.183104, 0.18207, 0.18118, 0.180301, 0.179364, 0.178411, 0.177526, 0.176533, 0.175676, 0.174694, 0.173741, 0.172902, 0.172057, 0.171132, 0.170167, 0.169225, 0.168329, 0.167467, 0.166662, 0.165885, 0.165115, 0.164287, 0.163345, 0.162534, 0.161684, 0.160839, 0.160068, 0.15916, 0.158355, 0.15759, 0.156717, 0.155918, 0.155073, 0.154205, 0.153406, 0.152612, 0.151836, 0.151036, 0.150231, 0.149329, 0.14841, 0.147623, 0.146892, 0.145984, 0.145276, 0.144523, 0.143797, 0.143101, 0.142439, 0.141617, 0.140817, 0.140167, 0.139487, 0.138888, 0.138237, 0.137341, 0.136479, 0.135759, 0.135074, 0.13444, 0.133681, 0.133116, 0.13242, 0.131694, 0.130998, 0.130381, 0.129685, 0.128903, 0.128258, 0.127595, 0.126956, 0.126277, 0.125563, 0.124838, 0.124176, 0.123633, 0.12284, 0.122218, 0.121504, 0.120807, 0.120248, 0.119517, 0.118838, 0.118273, 0.117645, 0.116977, 0.116269, 0.115846, 0.115338, 0.114922, 0.114362, 0.113854, 0.113346, 0.112895, 0.112301, 0.11185, 0.111256, 0.110731, 0.110212, 0.109646, 0.10907, 0.108539, 0.107957, 0.107357, 0.106838, 0.106398, 0.105941, 0.105456, 0.104988, 0.104491, 0.103875, 0.103361, 0.102807, 0.102305, 0.101854, 0.101323, 0.100866, 0.100449, 0.100027, 0.0994331, 0.0988565, 0.0984626, 0.0980801, 0.0974921, 0.0969668, 0.0964816, 0.0959221, 0.0954825, 0.0950886, 0.094649, 0.0941808, 0.0936556, 0.0932275, 0.0927764, 0.0923711, 0.0919429, 0.0915433, 0.0910466, 0.0906356, 0.0901789, 0.0896479, 0.0892883, 0.0889058, 0.0885061, 0.0881008, 0.0876955, 0.0872901, 0.0868562, 0.0864909, 0.0861141, 0.0857601, 0.0853605, 0.0850122, 0.0846126, 0.0842358, 0.083859, 0.083488, 0.0830769, 0.082643, 0.0823062, 0.0819408, 0.081604, 0.08125, 0.080936, 0.0805535, 0.080211, 0.0798057, 0.0794917, 0.0791434, 0.0787381, 0.0783499, 0.0779331, 0.0776305, 0.0772081, 0.0768655, 0.0765458, 0.0761919, 0.0758322, 0.0755468, 0.0752385, 0.0749873, 0.0746904, 0.0743308, 0.0740111, 0.0736685, 0.0733545, 0.0730234, 0.0727208, 0.0725039, 0.0721899, 0.0719159, 0.0715448, 0.0713221, 0.0710253, 0.0707056, 0.0704372, 0.0701975, 0.0698949, 0.0696665, 0.0693583, 0.0690157, 0.0687931, 0.0684619, 0.0682678, 0.0680224, 0.0677883, 0.0674686, 0.0671946, 0.0668577, 0.0665266, 0.0662982, 0.0660014, 0.0657102, 0.0654076, 0.0651393, 0.0648425, 0.0645228, 0.064243, 0.0640603, 0.0638263, 0.0635408, 0.0633182, 0.0630384, 0.0627929, 0.0625475, 0.0622906, 0.0620051, 0.0617482, 0.0615313, 0.0612515, 0.0610117, 0.0607263, 0.0604808, 0.0602125, 0.0599784, 0.0597444, 0.0594874, 0.0591963, 0.0589679, 0.0587453, 0.0585455, 0.0582886, 0.0580202, 0.0577519, 0.0575807, 0.057318, 0.0570554, 0.0568214, 0.0565473, 0.0562961, 0.0559993, 0.0557481, 0.055554, 0.0553256, 0.0550516, 0.0548403, 0.0545892, 0.0543208, 0.0540468, 0.0537956, 0.0535787, 0.0532875, 0.0531048, 0.0528822, 0.0526938, 0.0524312, 0.0521743, 0.0519802, 0.0517233, 0.0514778, 0.0512665, 0.0510153, 0.0508041, 0.0505415, 0.0503645, 0.0501476, 0.0498621, 0.0497023, 0.049491, 0.0492741, 0.0490686, 0.0488459, 0.0486632, 0.048452, 0.0481894, 0.0479668, 0.0477213, 0.0474758, 0.0471732, 0.0469734, 0.0467279, 0.0465338, 0.0462712, 0.0460942, 0.045883, 0.0457517, 0.0455062, 0.0452607, 0.0450495, 0.0448154, 0.0445756, 0.0443358, 0.0440276, 0.0437878, 0.0435594, 0.0433482, 0.0431883, 0.0429429, 0.042743, 0.0425147, 0.0422578, 0.0420865, 0.0418524, 0.0416298, 0.0414014, 0.0412359, 0.0409961, 0.0407335, 0.0405337, 0.0403738, 0.0402254, 0.039997, 0.0398486, 0.0396659, 0.0394261, 0.039232, 0.0389808, 0.0388324, 0.0386098, 0.0384385, 0.0382501, 0.0380674, 0.0378562, 0.0377134, 0.0374908, 0.0372967, 0.0371368, 0.036977, 0.0367372, 0.0365602, 0.0362919, 0.0360693, 0.0358409, 0.0356125, 0.0354869, 0.0352415, 0.0350188, 0.0348247, 0.0346877, 0.0344993, 0.0342538, 0.0340711, 0.0338941, 0.0336315, 0.0334146, 0.0332262, 0.0329864, 0.0327638, 0.032524, 0.0322956, 0.0320844, 0.031896, 0.0316734, 0.0314793, 0.031268, 0.0310568, 0.030817, 0.0306001, 0.0303945, 0.0301776, 0.0300063, 0.0298065, 0.0296353, 0.0294754, 0.029287, 0.029013, 0.0287732, 0.0285791, 0.0284421, 0.0282366, 0.0280482, 0.0278826, 0.0276942, 0.0275458, 0.0273688, 0.0272375, 0.0271119, 0.0269749, 0.0268264, 0.0266095, 0.0264154, 0.0262384, 0.0260101, 0.0258559, 0.025639, 0.0254106, 0.025188, 0.0249596, 0.0247255, 0.0245543, 0.0243773, 0.0242232, 0.0239834, 0.023795, 0.0235952, 0.0234182, 0.0232583, 0.0230756, 0.022893, 0.0226931, 0.0224876, 0.0223563, 0.0221851, 0.0220195, 0.0217797, 0.0215856, 0.0214372, 0.0212145, 0.0209976, 0.0208149, 0.0205808, 0.0203753, 0.020204, 0.0200271, 0.0198387, 0.0196103, 0.0193762, 0.0192221, 0.0190223, 0.0188396, 0.0186455, 0.0184171, 0.0182287, 0.0180175, 0.0178006, 0.017635, 0.0174752, 0.0173381, 0.0171155, 0.0169214, 0.0167044, 0.0165046, 0.0162877, 0.0161164, 0.0159451, 0.0157453, 0.0155969, 0.0154256, 0.0151973, 0.0149518, 0.0147976, 0.0146035, 0.0143638, 0.0141525, 0.0139813, 0.0137415, 0.0135931, 0.0133989, 0.0132106, 0.0130164, 0.0128452, 0.0126853, 0.0125369, 0.0123999, 0.0121829, 0.0120345, 0.0118461, 0.0117091, 0.0115036, 0.0113551, 0.0111896, 0.0110526, 0.0108527, 0.0105844, 0.0104074, 0.0101905, 0.0100021, 0.00977946, 0.00959678, 0.00937983, 0.00924282, 0.00908868, 0.0089117, 0.00870618, 0.00855774, 0.00835222, 0.00818666, 0.00804394, 0.00788409, 0.00764431, 0.00743308, 0.00724468, 0.00707912, 0.00692498, 0.00675371, 0.00653106, 0.00641117, 0.00618281, 0.00599442, 0.00581744, 0.00569755, 0.00552057, 0.00536072, 0.00520087, 0.00504673, 0.0048355, 0.00466423, 0.00444729, 0.00425318, 0.00408191, 0.00393919, 0.00379646, 0.00365945, 0.00350531, 0.003374, 0.00321415, 0.00309997, 0.00296866, 0.00277456, 0.0026718, 0.00255191, 0.00240918, 0.00231784, 0.00220937, 0.00210661, 0.00202668, 0.00191821, 0.00187254, 0.00177549, 0.00170698, 0.00164989, 0.00156997, 0.00151859, 0.00140441, 0.00129594, 0.00126168, 0.00117605, 0.00113038, 0.00105045, 0.00099336, 0.000947689, 0.000879181, 0.000839218, 0.000770711, 0.000730748, 0.000702203, 0.000650822, 0.00061086, 0.000570897, 0.000536643, 0.000513807, 0.000473844, 0.000433882, 0.000422464, 0.000416755, 0.000399628, 0.000371083, 0.00033112, 0.000308284, 0.000291157, 0.00027403, 0.000262613, 0.000256904, 0.000239777, 0.00022265, 0.000205523, 0.000188396, 0.000182687, 0.00016556, 0.000159851, 0.000148433, 0.000131306, 0.000114179, 0.00010847, 9.70525e-05, 9.70525e-05, 8.56345e-05, 6.85076e-05, 6.85076e-05, 6.85076e-05, 6.85076e-05, 6.85076e-05, 6.27987e-05, 6.27987e-05, 3.99628e-05, 3.99628e-05, 3.42538e-05, 2.85448e-05, 2.85448e-05, 2.85448e-05, 2.85448e-05, 2.85448e-05, 2.85448e-05, 2.28359e-05, 2.28359e-05, 1.71269e-05, 5.70897e-06, 5.70897e-06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  m_FlattenLookupTableDownstream = new Rich::TabulatedFunction1D( input, outputDownstream, 1000, gsl_interp_linear );
  if ( !m_FlattenLookupTableDownstream->valid() ) return Error("could not initialize flattening table for downstream tracks",StatusCode::FAILURE,1);
  
  // Look up table for flattening: ttracks
  const double outputTtrack[1000] = {0.995899, 0.995884, 0.995863, 0.995798, 0.995754, 0.995726, 0.995661, 0.995559, 0.995509, 0.99548, 0.995372, 0.995321, 0.995249, 0.995162, 0.995061, 0.994996, 0.994924, 0.994881, 0.994845, 0.994794, 0.994686, 0.994635, 0.994534, 0.994476, 0.994404, 0.994289, 0.994231, 0.99413, 0.99405, 0.994, 0.993928, 0.993805, 0.993747, 0.993653, 0.993596, 0.993516, 0.993393, 0.993256, 0.993162, 0.993083, 0.992975, 0.992852, 0.992679, 0.99257, 0.99239, 0.992281, 0.992173, 0.992058, 0.99192, 0.991769, 0.991682, 0.991531, 0.991393, 0.991249, 0.991141, 0.991003, 0.99083, 0.990657, 0.990476, 0.990317, 0.990151, 0.989935, 0.989783, 0.989624, 0.989444, 0.989227, 0.989054, 0.988873, 0.988671, 0.988375, 0.988144, 0.987884, 0.987646, 0.987429, 0.987141, 0.986837, 0.986613, 0.986274, 0.985956, 0.985646, 0.985321, 0.984946, 0.984534, 0.984137, 0.983689, 0.983285, 0.982989, 0.982592, 0.98218, 0.981732, 0.981328, 0.980909, 0.980505, 0.980007, 0.979407, 0.978859, 0.978361, 0.977754, 0.97714, 0.976476, 0.975855, 0.975169, 0.974519, 0.973696, 0.972808, 0.971978, 0.97127, 0.970396, 0.969407, 0.968476, 0.967566, 0.966562, 0.965602, 0.964627, 0.96366, 0.962613, 0.961616, 0.960425, 0.959306, 0.958151, 0.956909, 0.955782, 0.954541, 0.953371, 0.951992, 0.95067, 0.949284, 0.948057, 0.946793, 0.945414, 0.943977, 0.942699, 0.941233, 0.939753, 0.938121, 0.936345, 0.934641, 0.933038, 0.931479, 0.929998, 0.92815, 0.926684, 0.925016, 0.92337, 0.921637, 0.920056, 0.918395, 0.916655, 0.914763, 0.913031, 0.911355, 0.909457, 0.90737, 0.905529, 0.903666, 0.901853, 0.899875, 0.898048, 0.896157, 0.894106, 0.892128, 0.8902, 0.888077, 0.886113, 0.884055, 0.88186, 0.879983, 0.877997, 0.875932, 0.874098, 0.872264, 0.870062, 0.867853, 0.865824, 0.86378, 0.861759, 0.859448, 0.85726, 0.855102, 0.853, 0.850647, 0.848278, 0.846083, 0.843968, 0.841737, 0.839448, 0.837412, 0.835173, 0.833051, 0.830495, 0.828191, 0.825931, 0.823614, 0.821534, 0.819433, 0.817267, 0.814906, 0.812696, 0.810523, 0.808407, 0.806198, 0.803924, 0.80183, 0.799613, 0.79731, 0.795115, 0.792949, 0.790515, 0.788147, 0.786075, 0.783887, 0.78149, 0.779244, 0.776862, 0.774789, 0.772493, 0.77037, 0.768399, 0.766139, 0.764067, 0.761901, 0.759735, 0.757619, 0.755634, 0.753446, 0.751468, 0.749215, 0.746911, 0.744594, 0.742457, 0.74037, 0.738341, 0.736391, 0.734189, 0.732103, 0.729799, 0.727539, 0.725402, 0.723662, 0.721799, 0.719821, 0.717734, 0.715676, 0.713741, 0.711669, 0.709604, 0.707727, 0.705589, 0.703647, 0.701813, 0.699827, 0.697957, 0.695856, 0.693928, 0.691914, 0.690094, 0.688325, 0.686571, 0.684773, 0.682939, 0.681054, 0.679177, 0.677365, 0.675618, 0.673733, 0.672051, 0.670527, 0.668801, 0.666845, 0.665119, 0.6633, 0.661502, 0.659632, 0.658014, 0.656346, 0.654772, 0.652931, 0.651285, 0.649689, 0.648, 0.64631, 0.64449, 0.642642, 0.641025, 0.639378, 0.637711, 0.636021, 0.63449, 0.632707, 0.631162, 0.629588, 0.62805, 0.626418, 0.624685, 0.623082, 0.621537, 0.620107, 0.61875, 0.617147, 0.615515, 0.613883, 0.612353, 0.61075, 0.609111, 0.607537, 0.606013, 0.604504, 0.602952, 0.601508, 0.599955, 0.598331, 0.596829, 0.595031, 0.593515, 0.592172, 0.590713, 0.589016, 0.587659, 0.586265, 0.584735, 0.583319, 0.581731, 0.580309, 0.578698, 0.577276, 0.575854, 0.574467, 0.573067, 0.571868, 0.570496, 0.569009, 0.567579, 0.566236, 0.56498, 0.563593, 0.562243, 0.560886, 0.559413, 0.558092, 0.556727, 0.555312, 0.553933, 0.552532, 0.55116, 0.549918, 0.548517, 0.547124, 0.545817, 0.544387, 0.543167, 0.541853, 0.540474, 0.539152, 0.537824, 0.536539, 0.535152, 0.533903, 0.532683, 0.531333, 0.529896, 0.528416, 0.527203, 0.526011, 0.524741, 0.523246, 0.521889, 0.520509, 0.519159, 0.517686, 0.5163, 0.515202, 0.513903, 0.512719, 0.511636, 0.510249, 0.508993, 0.507722, 0.506473, 0.505015, 0.503708, 0.502329, 0.500791, 0.499671, 0.498466, 0.497325, 0.496112, 0.494949, 0.493715, 0.492516, 0.491274, 0.490198, 0.489115, 0.487917, 0.48661, 0.485498, 0.484357, 0.483108, 0.48183, 0.480617, 0.479368, 0.478155, 0.476819, 0.475642, 0.474443, 0.473252, 0.47209, 0.470768, 0.469526, 0.468364, 0.46705, 0.465988, 0.464812, 0.463534, 0.462371, 0.461136, 0.459981, 0.458638, 0.457418, 0.456234, 0.455086, 0.45393, 0.452912, 0.451728, 0.45066, 0.449468, 0.448241, 0.446963, 0.445858, 0.444602, 0.443483, 0.442233, 0.44102, 0.439786, 0.438623, 0.437338, 0.43645, 0.435244, 0.434161, 0.432991, 0.431937, 0.430825, 0.429749, 0.428486, 0.427489, 0.42624, 0.425222, 0.424132, 0.423056, 0.422052, 0.420969, 0.419764, 0.418572, 0.417518, 0.416298, 0.415041, 0.413922, 0.412796, 0.411691, 0.41055, 0.40946, 0.408153, 0.407041, 0.405915, 0.404803, 0.403799, 0.402709, 0.401799, 0.400601, 0.399525, 0.398326, 0.397315, 0.396059, 0.394853, 0.393806, 0.392615, 0.391416, 0.390261, 0.389164, 0.388037, 0.386961, 0.385965, 0.384983, 0.383972, 0.382904, 0.381842, 0.380745, 0.379597, 0.37847, 0.377438, 0.376246, 0.375149, 0.374066, 0.372983, 0.371856, 0.37086, 0.369633, 0.368744, 0.367712, 0.366571, 0.3653, 0.36408, 0.362954, 0.362001, 0.361026, 0.360022, 0.358889, 0.357661, 0.356556, 0.355553, 0.35439, 0.353394, 0.352318, 0.351314, 0.350203, 0.349141, 0.347979, 0.346823, 0.345892, 0.344888, 0.343697, 0.342513, 0.341502, 0.340404, 0.339358, 0.338441, 0.3373, 0.336318, 0.335213, 0.334036, 0.333069, 0.331906, 0.330888, 0.329913, 0.328845, 0.327689, 0.326404, 0.325429, 0.324354, 0.323372, 0.322151, 0.321054, 0.319956, 0.318866, 0.317971, 0.316816, 0.31574, 0.314686, 0.313696, 0.312433, 0.31135, 0.310151, 0.309003, 0.307913, 0.306772, 0.305826, 0.304678, 0.303653, 0.302433, 0.301414, 0.300411, 0.299248, 0.298115, 0.297024, 0.295876, 0.294959, 0.294006, 0.29306, 0.292021, 0.290981, 0.289847, 0.288757, 0.287689, 0.286685, 0.285587, 0.284584, 0.283457, 0.282512, 0.281407, 0.280129, 0.279183, 0.278071, 0.276916, 0.27576, 0.274576, 0.273479, 0.272482, 0.271435, 0.270194, 0.269017, 0.267897, 0.266742, 0.265594, 0.264468, 0.263291, 0.262352, 0.261356, 0.260266, 0.259154, 0.258215, 0.257327, 0.256222, 0.255204, 0.254193, 0.253168, 0.252164, 0.251161, 0.250121, 0.249023, 0.247991, 0.246937, 0.245883, 0.244828, 0.243767, 0.242734, 0.241543, 0.240453, 0.239348, 0.238373, 0.23737, 0.236366, 0.235406, 0.234424, 0.233608, 0.232597, 0.231601, 0.230705, 0.229716, 0.228778, 0.227788, 0.226676, 0.225666, 0.224619, 0.223615, 0.222684, 0.221485, 0.220452, 0.219384, 0.218387, 0.217384, 0.216431, 0.215434, 0.214611, 0.213615, 0.212618, 0.211636, 0.210626, 0.209709, 0.208625, 0.207564, 0.206676, 0.205694, 0.20477, 0.203968, 0.202986, 0.201896, 0.200878, 0.200019, 0.199232, 0.198243, 0.197239, 0.196192, 0.195174, 0.194257, 0.193246, 0.192084, 0.191087, 0.190084, 0.189037, 0.187982, 0.186935, 0.185903, 0.184957, 0.183982, 0.183044, 0.18199, 0.180979, 0.180011, 0.179036, 0.177903, 0.176921, 0.175867, 0.174906, 0.173816, 0.172769, 0.171809, 0.170986, 0.16991, 0.169014, 0.16804, 0.167065, 0.166054, 0.165166, 0.164307, 0.163433, 0.162531, 0.161585, 0.160661, 0.159686, 0.158603, 0.157469, 0.156408, 0.155541, 0.15461, 0.153671, 0.152574, 0.151635, 0.150675, 0.149729, 0.14879, 0.147852, 0.146855, 0.145967, 0.144942, 0.143916, 0.142942, 0.141859, 0.140855, 0.139844, 0.139021, 0.137931, 0.13692, 0.136017, 0.135064, 0.134097, 0.133108, 0.13227, 0.131476, 0.130321, 0.129533, 0.12853, 0.127577, 0.126631, 0.125519, 0.12471, 0.123757, 0.122898, 0.122068, 0.12105, 0.120111, 0.119107, 0.118183, 0.117223, 0.116306, 0.11541, 0.114465, 0.113497, 0.112566, 0.111742, 0.110955, 0.11001, 0.108941, 0.108161, 0.107223, 0.106204, 0.105251, 0.104298, 0.103454, 0.102666, 0.101793, 0.100912, 0.100031, 0.0991502, 0.0982909, 0.0974173, 0.0965797, 0.0956266, 0.0945508, 0.0937349, 0.0928973, 0.0919515, 0.0909911, 0.090103, 0.0891788, 0.0884207, 0.0876192, 0.0867095, 0.0858286, 0.0848827, 0.0838935, 0.0830632, 0.0821967, 0.0811498, 0.0802472, 0.0792075, 0.0781822, 0.0772219, 0.0763121, 0.0753229, 0.0744059, 0.0734168, 0.0723987, 0.0714095, 0.0704636, 0.0695755, 0.0687596, 0.0677632, 0.066644, 0.0658426, 0.0649184, 0.0639003, 0.0629833, 0.0621169, 0.0613082, 0.0604562, 0.0595897, 0.0586439, 0.0577124, 0.0567955, 0.0559507, 0.0550914, 0.0540589, 0.0531853, 0.0523044, 0.0513657, 0.0505282, 0.0495751, 0.0486437, 0.0476256, 0.0466147, 0.0456833, 0.0446652, 0.0437771, 0.042759, 0.0418709, 0.0409612, 0.040203, 0.0392066, 0.0382174, 0.0371777, 0.036138, 0.0350332, 0.0339285, 0.0328671, 0.0317552, 0.0306216, 0.0295746, 0.0284483, 0.0273724, 0.0263038, 0.0252424, 0.0241088, 0.0230041, 0.0218272, 0.0208741, 0.0198921, 0.0188813, 0.0177693, 0.0166718, 0.0155527, 0.0145418, 0.0134299, 0.0123252, 0.0114804, 0.0105417, 0.00953811, 0.00883052, 0.00801461, 0.0072637, 0.00657054, 0.0058846, 0.00532141, 0.00484487, 0.00436111, 0.00395676, 0.00359575, 0.00322751, 0.00297479, 0.00267154, 0.00236106, 0.00218777, 0.0019856, 0.00176177, 0.0015957, 0.00145852, 0.00135021, 0.00121302, 0.0010975, 0.000989191, 0.000916987, 0.000859224, 0.000801461, 0.000750919, 0.000722037, 0.000664274, 0.000606511, 0.000527087, 0.000498206, 0.000469324, 0.000440443, 0.000433222, 0.000411561, 0.000368239, 0.000339358, 0.000332137, 0.000317696, 0.000281595, 0.000267154, 0.000252713, 0.000252713, 0.000223832, 0.000223832, 0.000223832, 0.000216611, 0.00019495, 0.00018773, 0.000173289, 0.000158848, 0.000158848, 0.000151628, 0.000144407, 0.000137187, 0.000129967, 0.000122746, 0.000122746, 0.000115526, 0.000115526, 0.000115526, 0.000115526, 0.000115526, 0.000115526, 0.000115526, 0.000108306, 0.000101085, 8.66445e-05, 8.66445e-05, 8.66445e-05, 8.66445e-05, 7.94241e-05, 7.22037e-05, 7.22037e-05, 7.22037e-05, 7.22037e-05, 6.49834e-05, 6.49834e-05, 5.7763e-05, 5.7763e-05, 5.7763e-05, 5.7763e-05, 5.05426e-05, 5.05426e-05, 5.05426e-05, 4.33222e-05, 4.33222e-05, 4.33222e-05, 4.33222e-05, 3.61019e-05, 3.61019e-05, 3.61019e-05, 3.61019e-05, 2.88815e-05, 2.88815e-05, 2.88815e-05, 2.88815e-05, 2.88815e-05, 2.88815e-05, 2.88815e-05, 2.88815e-05, 2.88815e-05, 2.88815e-05, 2.88815e-05, 2.88815e-05, 2.88815e-05, 2.88815e-05, 2.16611e-05, 2.16611e-05, 2.16611e-05, 2.16611e-05, 2.16611e-05, 2.16611e-05, 2.16611e-05, 2.16611e-05, 2.16611e-05, 2.16611e-05, 2.16611e-05, 2.16611e-05, 1.44407e-05, 1.44407e-05, 1.44407e-05, 1.44407e-05, 1.44407e-05, 1.44407e-05, 1.44407e-05, 1.44407e-05, 1.44407e-05, 1.44407e-05, 1.44407e-05, 1.44407e-05, 7.22037e-06, 7.22037e-06, 7.22037e-06, 7.22037e-06, 7.22037e-06, 7.22037e-06, 7.22037e-06, 7.22037e-06, 7.22037e-06, 7.22037e-06, 7.22037e-06, 0, 0};
  m_FlattenLookupTableTtrack = new Rich::TabulatedFunction1D( input, outputTtrack, 1000, gsl_interp_linear );
  if ( !m_FlattenLookupTableTtrack->valid() ) return Error("could not initialize flattening table for Ttracks",StatusCode::FAILURE,1);

  return StatusCode::SUCCESS;
}


StatusCode TrackNNGhostId::execute(LHCb::Track& aTrack) const
{
  enum { NumVelo = LHCb::HitPattern::NumVelo } ;
  typedef std::bitset<NumVelo> VeloPattern ;

  const bool isDebug   = msgLevel(MSG::DEBUG);
  double retval = 0;
  m_inputVec->clear();
  if (!m_configured) return Error("event initialisation failed",StatusCode::SUCCESS,10);
  if ( UNLIKELY( isDebug ) ) debug() << "==> Execute" << endmsg;

  int veloHits=0,ttHits=0,itHits=0,otHits=0;
  const std::vector<LHCb::LHCbID> ids = aTrack.lhcbIDs();
  for(unsigned int i = 0; i < ids.size(); ++i){
    if(ids[i].isVelo()) ++veloHits;
    if(ids[i].isTT()) ++ttHits;
    if(ids[i].isIT()) ++itHits;
    if(ids[i].isOT()) ++otHits;
  }

  int nVeloCont=0;
  int nTTCont=0;
  int nITCont=0;

  LHCb::VeloClusters* veloCont = getIfExists<LHCb::VeloClusters>(LHCb::VeloClusterLocation::Default);
  if (NULL==veloCont) {
    // do we want to do something here?
  } else {
    nVeloCont = veloCont->size();
  }
  
  LHCb::STClusters *ttCont = getIfExists<LHCb::STClusters>(LHCb::STClusterLocation::TTClusters);
  if (NULL==ttCont) {
    // do we want to do something here?
  } else {
    nTTCont = ttCont->size();
  }

  LHCb::STClusters *itCont = getIfExists<LHCb::STClusters>(LHCb::STClusterLocation::ITClusters);
  if (NULL==itCont) {
    // do we want to do something here?
  } else {
    nITCont = itCont->size();
  }






  /**
   *   now evaluate the MVA value for different track types
   *
   */
   
  // Velo
  if( aTrack.checkType(LHCb::Track::Velo) ) {
    aTrack.setGhostProbability(-888.);

    if (!aTrack.hasInfo(LHCb::Track::FitVeloChi2)) {
      aTrack.setGhostProbability(-999.);
      if ( UNLIKELY( isDebug ) ) debug()<<"Track::FitVeloChi2.quit"<<endmsg;
      return Warning("Input variable Track::FitVeloChi2 missing",StatusCode::SUCCESS, 1);
    }
    if (!aTrack.hasInfo(LHCb::Track::FitVeloNDoF)) {
      aTrack.setGhostProbability(-999.);
      if ( UNLIKELY( isDebug ) ) debug()<<"Track::FitVeloNDoF.quit"<<endmsg;
      return Warning("Input variable Track::FitVeloNDoF missing",StatusCode::SUCCESS, 1);
    }

    LHCb::HitPattern observedpattern(aTrack.lhcbIDs());
    LHCb::HitPattern expectedpattern;
    std::vector<LHCb::LHCbID> ids;
    {
      std::vector<LHCb::LHCbID> ids;
      ids.reserve(2 * aTrack.nLHCbIDs());

      VeloPattern velo[4];
      m_veloExpectation->expectedInfo(aTrack, velo);
      m_ttExpectation->collect(aTrack, ids);
      m_itExpectation->collect(aTrack, ids);
      m_otExpectation->collect(aTrack, ids);

      expectedpattern = LHCb::HitPattern(ids);
      expectedpattern.setVeloRA(velo[0]);
      expectedpattern.setVeloRC(velo[1]);
      expectedpattern.setVeloPhiA(velo[2]);
      expectedpattern.setVeloPhiC(velo[3]);

    }
    float expectedV;
    {
      VeloPattern ar = expectedpattern.veloRA()  .to_ulong();
      VeloPattern cr = expectedpattern.veloRC()  .to_ulong();
      VeloPattern ap = expectedpattern.veloPhiA().to_ulong();
      VeloPattern cp = expectedpattern.veloPhiC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < NumVelo ; ++i) {
        if (ar[i]) ret+=1.;
        if (ap[i]) ret+=1.;
        if (cr[i]) ret+=1.;
        if (cp[i]) ret+=1.;
      }
      expectedV = ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedV = " << ret << endmsg;
    }
    float observedV;
    {
      VeloPattern ar = observedpattern.veloRA()  .to_ulong();
      VeloPattern cr = observedpattern.veloRC()  .to_ulong();
      VeloPattern ap = observedpattern.veloPhiA().to_ulong();
      VeloPattern cp = observedpattern.veloPhiC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < NumVelo ; ++i) {
        if (ar[i]) ret+=1.;
        if (ap[i]) ret+=1.;
        if (cr[i]) ret+=1.;
        if (cp[i]) ret+=1.;
      }
      observedV = ret;
      if ( UNLIKELY( isDebug ) ) debug() << "observedV = " << ret << endmsg;
    }


    float observedTT;
    {
      std::bitset< 4 > obs = observedpattern.tt().to_ulong();
      observedTT =  (obs[0]
                     +obs[1]
                     +obs[2]
                     +obs[3]);
      if ( UNLIKELY( isDebug ) ) debug() << "observedTT = " << observedTT << endmsg;
    }

    float expectedTT;
    {
      std::bitset< 4 > exp = expectedpattern.tt().to_ulong();
      expectedTT =  (exp[0]
                     +exp[1]
                     +exp[2]
                     +exp[3]);
      if ( UNLIKELY( isDebug ) ) debug() << "expectedTT = " << expectedTT << endmsg;
    }

    float expectedIT;
    {
      std::bitset<12> dump = expectedpattern.itAC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = expectedpattern.itTopBottom().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      expectedIT=  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedIT = " << ret << endmsg;
    }

    float expectedOT;
    {
      std::bitset<12> dump = expectedpattern.ot1stMonoLayer().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = expectedpattern.ot2ndMonoLayer().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      expectedOT =  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedOT = " << ret << endmsg;
    }


    /*
     *    now fill the input vector to evaluate the NN
     */
    m_inputVec->reserve(15);
    m_inputVec->push_back( aTrack.chi2() );
    m_inputVec->push_back( aTrack.nDoF() );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitVeloChi2,-1.) );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitVeloNDoF,-1.) );
    m_inputVec->push_back( observedV );
    m_inputVec->push_back( (observedV-expectedV));
    m_inputVec->push_back( (0-expectedIT));
    m_inputVec->push_back( (observedTT-expectedTT));
    m_inputVec->push_back( (0-expectedOT));
    m_inputVec->push_back( m_nOTCont );
    m_inputVec->push_back( nITCont );
    m_inputVec->push_back( nTTCont );
    m_inputVec->push_back( nVeloCont );
    m_inputVec->push_back( aTrack.pseudoRapidity() );
    m_inputVec->push_back( aTrack.pt() );


    retval = m_readerVelo->GetMvaValue( *m_inputVec );

    if ( UNLIKELY( isDebug ) )
    {
      debug_NN_input(aTrack.type());
      debug()<<" NN output:  "<<retval<<endmsg;
      debug()<<"now tranform"<<endmsg;
    }
    
    //restrict range to that known by flattening function
    // function defined between -0.2 and +1.1986
    if (!cutoff(retval))
    {
      retval = m_FlattenLookupTableVelo->value(retval);
    }
    
    if ( UNLIKELY( isDebug ) ) debug()<<"transformed value (in loop) : "<<retval<<endmsg;
  }//end evaluate velo track

  // Upstream
  if( aTrack.checkType(LHCb::Track::Upstream) ){
    aTrack.setGhostProbability(-888.);
    if (!aTrack.hasInfo(LHCb::Track::FitVeloChi2)) {
      aTrack.setGhostProbability(-999.);
      if ( UNLIKELY( isDebug ) ) debug()<<"Track::FitVeloChi2.quit"<<endmsg;
      return Warning("Input variable Track::FitVeloChi2 missing",StatusCode::SUCCESS, 1);
    }
    if (!aTrack.hasInfo(LHCb::Track::FitVeloNDoF)) {
      aTrack.setGhostProbability(-999.);
      if ( UNLIKELY( isDebug ) ) debug()<<"Track::FitVeloNDoF.quit"<<endmsg;
      return Warning("Input variable Track::FitVeloNDoF missing",StatusCode::SUCCESS, 1);
    }

    LHCb::HitPattern observedpattern(aTrack.lhcbIDs());
    LHCb::HitPattern expectedpattern;
    std::vector<LHCb::LHCbID> ids;
    {
      std::vector<LHCb::LHCbID> ids;
      ids.reserve(2 * aTrack.nLHCbIDs());

      VeloPattern velo[4];

      m_veloExpectation->expectedInfo(aTrack, velo);
      m_ttExpectation->collect(aTrack, ids);
      m_itExpectation->collect(aTrack, ids);
      m_otExpectation->collect(aTrack, ids);

      expectedpattern = LHCb::HitPattern(ids);
      expectedpattern.setVeloRA(velo[0]);
      expectedpattern.setVeloRC(velo[1]);
      expectedpattern.setVeloPhiA(velo[2]);
      expectedpattern.setVeloPhiC(velo[3]);

    }
    float expectedV;
    {
      VeloPattern ar = expectedpattern.veloRA()  .to_ulong();
      VeloPattern cr = expectedpattern.veloRC()  .to_ulong();
      VeloPattern ap = expectedpattern.veloPhiA().to_ulong();
      VeloPattern cp = expectedpattern.veloPhiC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < NumVelo ; ++i) {
        if (ar[i]) ret+=1.;
        if (ap[i]) ret+=1.;
        if (cr[i]) ret+=1.;
        if (cp[i]) ret+=1.;
      }
      expectedV = ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedV = " << ret << endmsg;
    }
    float observedV;
    {
      VeloPattern ar = observedpattern.veloRA()  .to_ulong();
      VeloPattern cr = observedpattern.veloRC()  .to_ulong();
      VeloPattern ap = observedpattern.veloPhiA().to_ulong();
      VeloPattern cp = observedpattern.veloPhiC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < NumVelo ; ++i) {
        if (ar[i]) ret+=1.;
        if (ap[i]) ret+=1.;
        if (cr[i]) ret+=1.;
        if (cp[i]) ret+=1.;
      }
      observedV = ret;
      if ( UNLIKELY( isDebug ) ) debug() << "observedV = " << ret << endmsg;
    }


    float observedTT;
    {
      std::bitset< 4 > obs = observedpattern.tt().to_ulong();
      observedTT =  (obs[0]
                     +obs[1]
                     +obs[2]
                     +obs[3]);
      if ( UNLIKELY( isDebug ) ) debug() << "observedTT = " << observedTT << endmsg;
    }

    float expectedTT;
    {
      std::bitset< 4 > exp = expectedpattern.tt().to_ulong();
      expectedTT =  (exp[0]
                     +exp[1]
                     +exp[2]
                     +exp[3]);
      if ( UNLIKELY( isDebug ) ) debug() << "expectedTT = " << expectedTT << endmsg;
    }


    float expectedIT;
    {
      std::bitset<12> dump = expectedpattern.itAC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = expectedpattern.itTopBottom().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      expectedIT=  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedIT = " << ret << endmsg;
    }


    float expectedOT;
    {
      std::bitset<12> dump = expectedpattern.ot1stMonoLayer().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = expectedpattern.ot2ndMonoLayer().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      expectedOT =  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedOT = " << ret << endmsg;
    }

    /*
     *    now fill the input vector to evaluate the NN
     */
    m_inputVec->reserve(16);
    m_inputVec->push_back( aTrack.chi2() );
    m_inputVec->push_back( aTrack.nDoF() );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitVeloChi2,-1.) );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitVeloNDoF,-1.) );
    m_inputVec->push_back( observedV );
    m_inputVec->push_back( observedTT );
    m_inputVec->push_back( (observedV-expectedV));
    m_inputVec->push_back( (0-expectedIT));
    m_inputVec->push_back( (observedTT-expectedTT));
    m_inputVec->push_back( (0-expectedOT));
    m_inputVec->push_back( m_nOTCont );
    m_inputVec->push_back( nITCont );
    m_inputVec->push_back( nTTCont );
    m_inputVec->push_back( nVeloCont );
    m_inputVec->push_back( aTrack.pseudoRapidity() );
    m_inputVec->push_back( aTrack.pt() );


    retval = m_readerUpstream->GetMvaValue( *m_inputVec );

    if ( UNLIKELY( isDebug ) )
    {
      debug_NN_input(aTrack.type());
      debug()<<" NN output:  "<<retval<<endmsg;
      debug()<<"now tranform"<<endmsg;
    }
    
    //restrict range to that known by flattening function
    // function defined between -0.2 and +1.1986
    if (!cutoff(retval))
    {
      retval = m_FlattenLookupTableUpstream->value(retval);
    }
    
    if ( UNLIKELY( isDebug ) ) debug()<<"transformed value (in loop) : "<<retval<<endmsg;
  }//end evaluate upstream track

  // Downstream
  if( aTrack.checkType(LHCb::Track::Downstream) ){
    aTrack.setGhostProbability(-888.);

    LHCb::HitPattern observedpattern(aTrack.lhcbIDs());
    LHCb::HitPattern expectedpattern;
    std::vector<LHCb::LHCbID> ids;
    {
      std::vector<LHCb::LHCbID> ids;
      ids.reserve(2 * aTrack.nLHCbIDs());

      VeloPattern velo[4];

      m_veloExpectation->expectedInfo(aTrack, velo);
      m_ttExpectation->collect(aTrack, ids);
      m_itExpectation->collect(aTrack, ids);
      m_otExpectation->collect(aTrack, ids);

      expectedpattern = LHCb::HitPattern(ids);
      expectedpattern.setVeloRA(velo[0]);
      expectedpattern.setVeloRC(velo[1]);
      expectedpattern.setVeloPhiA(velo[2]);
      expectedpattern.setVeloPhiC(velo[3]);

    }
    
    float observedTT;
    {
      std::bitset< 4 > obs = observedpattern.tt().to_ulong();
      observedTT =  (obs[0]
                     +obs[1]
                     +obs[2]
                     +obs[3]);
      if ( UNLIKELY( isDebug ) ) debug() << "observedTT = " << observedTT << endmsg;
    }

    float expectedTT;
    {
      std::bitset< 4 > exp = expectedpattern.tt().to_ulong();
      expectedTT =  (exp[0]
                     +exp[1]
                     +exp[2]
                     +exp[3]);
      if ( UNLIKELY( isDebug ) ) debug() << "expectedTT = " << expectedTT << endmsg;
    }


    float observedIT;
    {
      std::bitset<12> dump = observedpattern.itAC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = observedpattern.itTopBottom().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      observedIT = ret;
      if ( UNLIKELY( isDebug ) ) debug() << "observedIT = " << ret << endmsg;
    }

    float expectedIT;
    {
      std::bitset<12> dump = expectedpattern.itAC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = expectedpattern.itTopBottom().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      expectedIT=  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedIT = " << ret << endmsg;
    }

    float observedOT;
    {
      std::bitset<12> dump = observedpattern.ot1stMonoLayer().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = observedpattern.ot2ndMonoLayer().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      observedOT =  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "observedOT = " << ret << endmsg;
    }

    float expectedOT;
    {
      std::bitset<12> dump = expectedpattern.ot1stMonoLayer().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = expectedpattern.ot2ndMonoLayer().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      expectedOT =  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedOT = " << ret << endmsg;
    }

    const LHCb::KalmanFitResult* kalfit =static_cast<const LHCb::KalmanFitResult*>(aTrack.fitResult()) ;
    if( !kalfit ) {
      aTrack.setGhostProbability(-999.);
      if ( UNLIKELY( isDebug ) ) debug()<<"fit result not available... quit"<<endmsg;
      return Warning("kalman fit result not available ... end loop and set ghostProb = -999.",StatusCode::SUCCESS, 1);
    }

    float nMeas = kalfit->nMeasurements( LHCb::Measurement::OT );
    float nOTBad = nMeas-nMeas*aTrack.info(25 , 0 );// info 25 : FitFracUsedOTTimes

    if ( UNLIKELY( isDebug ) ) {
      debug()<<"nOTMeas: "<< nMeas<<endmsg;
      debug()<<"nOTBad: "<<nOTBad<<endmsg;
    }

    /*
     *    now fill the input vector to evaluate the NN
     */
    m_inputVec->reserve(17);
    m_inputVec->push_back( aTrack.chi2() );
    m_inputVec->push_back( aTrack.nDoF() );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitTChi2,-1.) );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitTNDoF,-1.) );
    m_inputVec->push_back( observedIT );
    m_inputVec->push_back( observedTT );
    m_inputVec->push_back( observedOT );
    m_inputVec->push_back( (observedIT-expectedIT));
    m_inputVec->push_back( (observedTT-expectedTT));
    m_inputVec->push_back( (observedOT-expectedOT));
    m_inputVec->push_back( m_nOTCont );
    m_inputVec->push_back( nITCont );
    m_inputVec->push_back( nTTCont );
    m_inputVec->push_back( nVeloCont );
    m_inputVec->push_back( nOTBad );
    m_inputVec->push_back( aTrack.pseudoRapidity() );
    m_inputVec->push_back( aTrack.pt() );


    retval = m_readerDownstream->GetMvaValue( *m_inputVec );

    if ( UNLIKELY( isDebug ) )
    {
      debug_NN_input(aTrack.type()) ;
      debug()<<" NN output:  "<<retval<<endmsg;
      debug()<<"now tranform"<<endmsg;
    }
    
    //restrict range to that known by flattening function
    // function defined between -0.2 and +1.1986
    if (!cutoff(retval))
    {
      retval = m_FlattenLookupTableDownstream->value(retval);
    }
    
    if ( UNLIKELY( isDebug ) ) debug()<<"transformed value (in loop) : "<<retval<<endmsg;
  }//end evaluate downstream track

  // Ttrack
  if( aTrack.checkType(LHCb::Track::Ttrack) ){
    aTrack.setGhostProbability(-888.);

    LHCb::HitPattern observedpattern(aTrack.lhcbIDs());
    LHCb::HitPattern expectedpattern;
    std::vector<LHCb::LHCbID> ids;
    {
      std::vector<LHCb::LHCbID> ids;
      ids.reserve(2 * aTrack.nLHCbIDs());

      VeloPattern velo[4];

      m_veloExpectation->expectedInfo(aTrack, velo);
      m_ttExpectation->collect(aTrack, ids);
      m_itExpectation->collect(aTrack, ids);
      m_otExpectation->collect(aTrack, ids);

      expectedpattern = LHCb::HitPattern(ids);
      expectedpattern.setVeloRA(velo[0]);
      expectedpattern.setVeloRC(velo[1]);
      expectedpattern.setVeloPhiA(velo[2]);
      expectedpattern.setVeloPhiC(velo[3]);

    }
    float observedIT;
    {
      std::bitset<12> dump = observedpattern.itAC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = observedpattern.itTopBottom().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      observedIT = ret;
      if ( UNLIKELY( isDebug ) ) debug() << "observedIT = " << ret << endmsg;
    }

    float expectedIT;
    {
      std::bitset<12> dump = expectedpattern.itAC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = expectedpattern.itTopBottom().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      expectedIT=  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedIT = " << ret << endmsg;
    }

    float observedOT;
    {
      std::bitset<12> dump = observedpattern.ot1stMonoLayer().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = observedpattern.ot2ndMonoLayer().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      observedOT =  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "observedOT = " << ret << endmsg;
    }

    float expectedOT;
    {
      std::bitset<12> dump = expectedpattern.ot1stMonoLayer().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = expectedpattern.ot2ndMonoLayer().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      expectedOT =  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedOT = " << ret << endmsg;
    }

    const LHCb::KalmanFitResult* kalfit =static_cast<const LHCb::KalmanFitResult*>(aTrack.fitResult()) ;
    if( !kalfit ) {
      aTrack.setGhostProbability(-999.);
      if ( UNLIKELY( isDebug ) ) debug()<<"fit result not available... quit"<<endmsg;
      return Warning("kalman fit result not available ... end loop and set ghostProb = -999.",StatusCode::SUCCESS, 1);
    }

    float nMeas = kalfit->nMeasurements( LHCb::Measurement::OT );
    float nOTBad = nMeas-nMeas*aTrack.info(25 , 0 );// info 25 : FitFracUsedOTTimes

    if ( UNLIKELY( isDebug ) ) {
      debug()<<"nOTMeas: "<< nMeas<<endmsg;
      debug()<<"nOTBad: "<<nOTBad<<endmsg;
    }

    /*
     *    now fill the input vector to evaluate the NN
     */
    m_inputVec->reserve(15);
    m_inputVec->push_back( aTrack.chi2() );
    m_inputVec->push_back( aTrack.nDoF() );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitTChi2,-1.) );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitTNDoF,-1.) );
    m_inputVec->push_back( observedIT );
    m_inputVec->push_back( observedOT );
    m_inputVec->push_back( (observedIT-expectedIT));
    m_inputVec->push_back( (observedOT-expectedOT));
    m_inputVec->push_back( m_nOTCont );
    m_inputVec->push_back( nITCont );
    m_inputVec->push_back( nTTCont );
    m_inputVec->push_back( nVeloCont );
    m_inputVec->push_back( nOTBad );
    m_inputVec->push_back( aTrack.pseudoRapidity() );
    m_inputVec->push_back( aTrack.pt() );


    retval = m_readerTtrack->GetMvaValue( *m_inputVec );

    if ( UNLIKELY( isDebug ) )
    {
      debug_NN_input(aTrack.type()) ;
      debug()<<" NN output:  "<<retval<<endmsg;
      debug()<<"now tranform"<<endmsg;
    }
    
    //restrict range to that known by flattening function
    // function defined between -0.2 and +1.1986
    if (!cutoff(retval))
    {
      retval = m_FlattenLookupTableTtrack->value(retval);
    }
    
    if ( UNLIKELY( isDebug ) ) debug()<<"transformed value (in loop) : "<<retval<<endmsg;
  }//end evaluate Ttrack track

  if( aTrack.checkType(LHCb::Track::Long) ){

    aTrack.setGhostProbability(-888.);
    if (!aTrack.hasInfo(LHCb::Track::FitMatchChi2)) {
      aTrack.setGhostProbability(-999.);
      if ( UNLIKELY( isDebug ) ) debug()<<"Track::FitMatchChi2.quit"<<endmsg;
      return Warning("Input variable Track::FitMatchChi2 missing",StatusCode::SUCCESS, 1);
    }

    if (!aTrack.hasInfo(LHCb::Track::FitVeloChi2)) {
      aTrack.setGhostProbability(-999.);
      if ( UNLIKELY( isDebug ) ) debug()<<"Track::FitVeloChi2.quit"<<endmsg;
      return Warning("Input variable Track::FitVeloChi2 missing",StatusCode::SUCCESS, 1);
    }
    if (!aTrack.hasInfo(LHCb::Track::FitVeloNDoF)) {
      aTrack.setGhostProbability(-999.);
      if ( UNLIKELY( isDebug ) ) debug()<<"Track::FitVeloNDoF.quit"<<endmsg;
      return Warning("Input variable Track::FitVeloNDoF missing",StatusCode::SUCCESS, 1);
    }

    LHCb::HitPattern observedpattern(aTrack.lhcbIDs());
    LHCb::HitPattern expectedpattern;
    std::vector<LHCb::LHCbID> ids;
    {
      std::vector<LHCb::LHCbID> ids;
      ids.reserve(2 * aTrack.nLHCbIDs());

      VeloPattern velo[4];

      m_veloExpectation->expectedInfo(aTrack, velo);
      m_ttExpectation->collect(aTrack, ids);
      m_itExpectation->collect(aTrack, ids);
      m_otExpectation->collect(aTrack, ids);

      expectedpattern = LHCb::HitPattern(ids);
      expectedpattern.setVeloRA(velo[0]);
      expectedpattern.setVeloRC(velo[1]);
      expectedpattern.setVeloPhiA(velo[2]);
      expectedpattern.setVeloPhiC(velo[3]);

    }
    float expectedV;
    {
      VeloPattern ar = expectedpattern.veloRA()  .to_ulong();
      VeloPattern cr = expectedpattern.veloRC()  .to_ulong();
      VeloPattern ap = expectedpattern.veloPhiA().to_ulong();
      VeloPattern cp = expectedpattern.veloPhiC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < NumVelo ; ++i) {
        if (ar[i]) ret+=1.;
        if (ap[i]) ret+=1.;
        if (cr[i]) ret+=1.;
        if (cp[i]) ret+=1.;
      }
      expectedV = ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedV = " << ret << endmsg;
    }
    float observedV;
    {
      VeloPattern ar = observedpattern.veloRA()  .to_ulong();
      VeloPattern cr = observedpattern.veloRC()  .to_ulong();
      VeloPattern ap = observedpattern.veloPhiA().to_ulong();
      VeloPattern cp = observedpattern.veloPhiC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < NumVelo ; ++i) {
        if (ar[i]) ret+=1.;
        if (ap[i]) ret+=1.;
        if (cr[i]) ret+=1.;
        if (cp[i]) ret+=1.;
      }
      observedV = ret;
      if ( UNLIKELY( isDebug ) ) debug() << "observedV = " << ret << endmsg;
    }


    float observedTT;
    {
      std::bitset< 4 > obs = observedpattern.tt().to_ulong();
      observedTT =  (obs[0]
                     +obs[1]
                     +obs[2]
                     +obs[3]);
      if ( UNLIKELY( isDebug ) ) debug() << "observedTT = " << observedTT << endmsg;
    }

    float expectedTT;
    {
      std::bitset< 4 > exp = expectedpattern.tt().to_ulong();
      expectedTT =  (exp[0]
                     +exp[1]
                     +exp[2]
                     +exp[3]);
      if ( UNLIKELY( isDebug ) ) debug() << "expectedTT = " << expectedTT << endmsg;
    }


    float observedIT;
    {
      std::bitset<12> dump = observedpattern.itAC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = observedpattern.itTopBottom().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      observedIT = ret;
      if ( UNLIKELY( isDebug ) ) debug() << "observedIT = " << ret << endmsg;
    }

    float expectedIT;
    {
      std::bitset<12> dump = expectedpattern.itAC().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = expectedpattern.itTopBottom().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      expectedIT=  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedIT = " << ret << endmsg;
    }

    float observedOT;
    {
      std::bitset<12> dump = observedpattern.ot1stMonoLayer().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = observedpattern.ot2ndMonoLayer().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      observedOT =  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "observedOT = " << ret << endmsg;
    }

    float expectedOT;
    {
      std::bitset<12> dump = expectedpattern.ot1stMonoLayer().to_ulong();
      float ret = 0.;
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      dump = expectedpattern.ot2ndMonoLayer().to_ulong();
      for (int i = 0 ; i < 12 ; ++i)
        if (dump[i]) ret+=1.;
      expectedOT =  ret;
      if ( UNLIKELY( isDebug ) ) debug() << "expectedOT = " << ret << endmsg;
    }

    const LHCb::KalmanFitResult* kalfit =static_cast<const LHCb::KalmanFitResult*>(aTrack.fitResult()) ;
    if( !kalfit ) {
      aTrack.setGhostProbability(-999.);
      if ( UNLIKELY( isDebug ) ) debug()<<"fit result not available... quit"<<endmsg;
      return Warning("kalman fit result not available ... end loop and set ghostProb = -999.",StatusCode::SUCCESS, 1);
    }

    float nMeas = kalfit->nMeasurements( LHCb::Measurement::OT );
    float nOTBad = nMeas-nMeas*aTrack.info(25 , 0 );// info 25 : FitFracUsedOTTimes

    if ( UNLIKELY( isDebug ) ) {
      debug()<<"nOTMeas: "<< nMeas<<endmsg;
      debug()<<"nOTBad: "<<nOTBad<<endmsg;
    }

    /*
     *    now fill the input vector to evaluate the NN
     */
    m_inputVec->reserve(22);
    m_inputVec->push_back( aTrack.chi2() );
    m_inputVec->push_back( aTrack.nDoF() );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitMatchChi2,-1.) );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitVeloChi2,-1.) );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitVeloNDoF,-1.) );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitTChi2,-1.) );
    m_inputVec->push_back( aTrack.info(LHCb::Track::FitTNDoF,-1.) );
    m_inputVec->push_back( observedV );
    m_inputVec->push_back( observedIT );
    m_inputVec->push_back( observedTT );
    m_inputVec->push_back( observedOT );
    m_inputVec->push_back( (observedV-expectedV));
    m_inputVec->push_back( (observedIT-expectedIT));
    m_inputVec->push_back( (observedTT-expectedTT));
    m_inputVec->push_back( (observedOT-expectedOT));
    m_inputVec->push_back( m_nOTCont );
    m_inputVec->push_back( nITCont );
    m_inputVec->push_back( nTTCont );
    m_inputVec->push_back( nVeloCont );
    m_inputVec->push_back( nOTBad );
    m_inputVec->push_back( aTrack.pseudoRapidity() );
    m_inputVec->push_back( aTrack.pt() );


    retval = m_readerLong->GetMvaValue( *m_inputVec );

    if ( UNLIKELY( isDebug ) )
    {
      debug_NN_input(aTrack.type());
      debug()<<" NN output:  "<<retval<<endmsg;
      debug()<<"now tranform"<<endmsg;
    }
    
    //restrict range to that known by flattening function
    // function defined between -0.2 and +1.1986
    if (!cutoff(retval))
    {
      retval = m_FlattenLookupTableLongtrack->value(retval);
    }
    
    if ( UNLIKELY( isDebug ) ) debug()<<"transformed value (in loop) : "<<retval<<endmsg;

  }//end evaluate long track

  // double check the result
  if( UNLIKELY ( retval < 0. ) ) { 
    Warning("Ghost prob < 0. - this should not be possible",StatusCode::SUCCESS, 1).ignore();
    retval = 0.;
  }
  else if( UNLIKELY ( retval > 1. ) ) {
    Warning("Ghost prob > 1. - this should not be possible",StatusCode::SUCCESS, 1).ignore();   
    retval = 1.;
  }
  
  if ( UNLIKELY( isDebug ) ) debug()<<"transformed value (before fill) : "<<retval<<endmsg;


  aTrack.setGhostProbability(retval);

  return StatusCode::SUCCESS;
}

//=============================================================================
// Finalize
//=============================================================================
StatusCode TrackNNGhostId::finalize()
{
  delete m_readerVelo;
  delete m_readerUpstream;
  delete m_readerDownstream;
  delete m_readerTtrack;
  delete m_readerLong;
  delete m_inputVec;
  delete m_FlattenLookupTableVelo;
  delete m_FlattenLookupTableUpstream;
  delete m_FlattenLookupTableDownstream;
  delete m_FlattenLookupTableTtrack;
  delete m_FlattenLookupTableLongtrack;
  return GaudiTool::finalize();  // must be called after all other actions
}


/**
* @brief check if network output was outside the specified range (-0.2, 1.1986)
*
* @param unregularized will be set to 1. or 0. if cutoff was neccessary, otherwise unchanged
*
* @return true if cutoff was neccessary
*/
inline bool TrackNNGhostId::cutoff(double& unregularized) const {
  if      ( unregularized < -0.2  ) { unregularized = 1.; return true; }
  else if ( unregularized > 1.195 ) { unregularized = 0.; return true; }
  return false;
}

void TrackNNGhostId::debug_NN_input(const LHCb::Track::Types type) const {
  // This method shouldn't be called in the first place if not in debug mode.
  std::vector<std::string> names;
  if (LHCb::Track::Long==type)
    variableNames_Longtrack(names);
  else if (LHCb::Track::Velo==type)
    variableNames_Velo(names);
  else if (LHCb::Track::Upstream==type)
    variableNames_Upstream(names);
  else if (LHCb::Track::Downstream==type)
    variableNames_Downstream(names);
  else if (LHCb::Track::Ttrack==type)
    variableNames_Ttrack(names);

  debug() << "**** print all ****" << endmsg;
  for (unsigned ii = 0 ; ii < names.size() ; ++ii) {
    debug() << names[ii] << "\t\t" << (*m_inputVec)[ii] << endmsg;
  }
  debug() << "*******************" << endmsg;
  return;
}

void TrackNNGhostId::variableNames_Upstream(std::vector<std::string>& inNames) const {
  inNames.clear();
  inNames.push_back("track_Chi2");
  inNames.push_back("track_Dof");
  inNames.push_back("Vchi*Vdof");
  inNames.push_back("Vdof");
  inNames.push_back("observedV");
  inNames.push_back("observedTT");
  inNames.push_back("(observedV-expectedV)");
  inNames.push_back("(observedIT-expectedIT)");
  inNames.push_back("(observedTT-expectedTT)");
  inNames.push_back("(observedOT-expectedOT)");
  inNames.push_back("OThits");
  inNames.push_back("IThits");
  inNames.push_back("TThits");
  inNames.push_back("VELOhits");
  inNames.push_back("eta");
  inNames.push_back("pt");
  return ;
}

void TrackNNGhostId::variableNames_Downstream(std::vector<std::string>& inNames) const {
  inNames.clear();
  inNames.push_back("track_Chi2");
  inNames.push_back("track_Dof");
  inNames.push_back("Tchi*Tdof");
  inNames.push_back("Tdof");
  inNames.push_back("observedIT");
  inNames.push_back("observedTT");
  inNames.push_back("observedOT");
  inNames.push_back("(observedIT-expectedIT)");
  inNames.push_back("(observedTT-expectedTT)");
  inNames.push_back("(observedOT-expectedOT)");
  inNames.push_back("OThits");
  inNames.push_back("IThits");
  inNames.push_back("TThits");
  inNames.push_back("VELOhits");
  inNames.push_back("(OTbaddrifttime+OToutliers)");
  inNames.push_back("eta");
  inNames.push_back("pt");
  return ;
}

void TrackNNGhostId::variableNames_Ttrack(std::vector<std::string>& inNames) const {
  inNames.clear();
  inNames.push_back("track_Chi2");
  inNames.push_back("track_Dof");
  inNames.push_back("Tchi*Tdof");
  inNames.push_back("Tdof");
  inNames.push_back("observedIT");
  inNames.push_back("observedOT");
  inNames.push_back("(observedIT-expectedIT)");
  inNames.push_back("(observedOT-expectedOT)");
  inNames.push_back("OThits");
  inNames.push_back("IThits");
  inNames.push_back("TThits");
  inNames.push_back("VELOhits");
  inNames.push_back("(OTbaddrifttime+OToutliers)");
  inNames.push_back("eta");
  inNames.push_back("pt");
  return ;
}

void TrackNNGhostId::variableNames_Velo(std::vector<std::string>& inNames) const {
  inNames.clear();
  inNames.push_back("track_Chi2");
  inNames.push_back("track_Dof");
  inNames.push_back("Vchi*Vdof");
  inNames.push_back("Vdof");
  inNames.push_back("observedV");
  inNames.push_back("(observedV-expectedV)");
  inNames.push_back("(observedIT-expectedIT)");
  inNames.push_back("(observedTT-expectedTT)");
  inNames.push_back("(observedOT-expectedOT)");
  inNames.push_back("OThits");
  inNames.push_back("IThits");
  inNames.push_back("TThits");
  inNames.push_back("VELOhits");
  inNames.push_back("eta");
  inNames.push_back("pt");
  return ;
}

void TrackNNGhostId::variableNames_Longtrack(std::vector<std::string>& inNames) const {
  inNames.clear();
  inNames.push_back("track_Chi2");
  inNames.push_back("track_Dof");
  inNames.push_back("track_MatchChi2");
  inNames.push_back("Vchi*Vdof");
  inNames.push_back("Vdof");
  inNames.push_back("Tchi*Tdof");
  inNames.push_back("Tdof");
  inNames.push_back("observedV");
  inNames.push_back("observedIT");
  inNames.push_back("observedTT");
  inNames.push_back("observedOT");
  inNames.push_back("(observedV-expectedV)");
  inNames.push_back("(observedIT-expectedIT)");
  inNames.push_back("(observedTT-expectedTT)");
  inNames.push_back("(observedOT-expectedOT)");
  inNames.push_back("OThits");
  inNames.push_back("IThits");
  inNames.push_back("TThits");
  inNames.push_back("VELOhits");
  inNames.push_back("(OTbaddrifttime+OToutliers)");
  inNames.push_back("eta");
  inNames.push_back("pt");
  return;
}
