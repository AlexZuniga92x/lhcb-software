
// ====================================================================
//  Tracking reconstruction phase
// ====================================================================
Reco.DetectorList += { "Tr" };

// --------------------------------------------------------------------
// Load all necessary libraries
// --------------------------------------------------------------------
#include "$PATSYSROOT/options/PatLoad.opts"
#include "$TRACKSYSROOT/options/TrackLoad.opts"

// --------------------------------------------------------------------
// Pattern Recognition and Fitting
// --------------------------------------------------------------------

// Velo tracking
ApplicationMgr.DLLs += { "PatTools", "PatUtils", "PatVelo" };
RecoTrSeq.Members += { "PatInitEvent"
                       ,"DecodeVeloRawBuffer"
                       ,"PatVeloLoadClusters"
                       ,"PatVeloRTracking"
                       ,"PatVeloSpaceTracking"
};
RecoTrSeq.context = "HLT";

// Decode also VeloClusters, needed for track fit
RecoVeloSeq.Members += { "DecodeVeloRawBuffer/DecodeVeloClusters" };
DecodeVeloClusters.DecodeToVeloLiteClusters = false;
DecodeVeloClusters.DecodeToVeloClusters = true;

// Forward tracking
ApplicationMgr.DLLs += { "PatForward" };
RecoTrSeq.Members += { "PatTCoordFromRaw"
                       ,"PatForward"
};
#include "$PATFORWARDROOT/options/PatFwdTool.opts"
// Next option to be removed when PatVeloTT is migrated and can run before
ToolSvc.PatForwardTool.ValidateInTT = false;

RecoTrSeq.Members += { "TrackEventFitter/FitForward" };
FitForward.TracksInContainer  = "Rec/Track/Forward";

// Seeding
// -------
//ApplicationMgr.DLLs += { "PatSeeding" };
//RecoTrSeq.Members   += { "PatSeedEvent",
//                         "TrackEventFitter/FitSeed" };
//FitSeed.TracksInContainer  = "Rec/Track/Seed";
//FitSeed.Fitter.ZPositions      = { 9450.0, 11900.0 };
//FitSeed.Fitter.StateAtBeamLine = false;

// Velo-Seed Matching
// ------------------
//RecoTrSeq.Members += { "TrackMatchVeloSeed",
//                       "TrackEventFitter/FitMatch"
//                     };
//FitMatch.TracksInContainer  = "Rec/Track/Match";

// KShort finding
// --------------
//RecoTrSeq.Members += { "PatKShort",
//                       "TrackEventFitter/FitKShort"
//                     };
//#include "$PATKSHORTROOT/options/PatKShort.opts"
//FitKShort.TracksInContainer  = "Rec/Track/KsTrack";
//FitForward.Fitter.StateAtBeamLine = false;

// Velo-TT tracking
// ----------------
RecoTrSeq.Members += { "PatVeloTT" };

// Clone tracks killer: output is "best" container
// -----------------------------------------------
//RecoTrSeq.Members += { "TrackEventCloneKiller" };
//TrackEventCloneKiller.TracksInContainers  = { "Rec/Track/Velo"
//                                            , "Rec/Track/Forward"
//                                            , "Rec/Track/VeloTT"
// };
