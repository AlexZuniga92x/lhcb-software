
// ====================================================================
//  Tracking reconstruction phase
// ====================================================================

// Start TransportSvc, needed by track fit
ApplicationMgr.ExtSvc += { "TransportSvc" };

// --------------------------------------------------------------------
// Pattern Recognition and Fitting
// --------------------------------------------------------------------

// Velo tracking
RecoVELOSeq.Members += { "PatInitEvent"
                         ,"DecodeVeloRawBuffer"
                         ,"PatVeloLoadClusters"
                         ,"PatVeloRTracking"
                         ,"PatVeloSpaceTracking"
};

// Decode also VeloClusters, needed for track fit
RecoVELOSeq.Members += { "DecodeVeloRawBuffer/DecodeVeloClusters" };
DecodeVeloClusters.DecodeToVeloLiteClusters = false;
DecodeVeloClusters.DecodeToVeloClusters     = true;

// TT clusters for pattern recognition and track fit
RecoTTSeq.Members += { "RawBankToSTClusterAlg/createTTClusters"
                       ,"RawBankToSTLiteClusterAlg/createTTLiteClusters"
                       ,"PatTTCoordFromRaw"
};

// IT clusters for pattern recognition and track fit
RecoITSeq.Members += { "RawBankToSTClusterAlg/createITClusters"
                       ,"RawBankToSTLiteClusterAlg/createITLiteClusters"
};
createITClusters.detType     = "IT";
createITLiteClusters.detType = "IT";
#include "$STTOOLSROOT/options/Brunel.opts"

// OTTimes for pattern recognition and track fit
RecoOTSeq.Members += { "OTTimeCreator" };

// Tracking sequence
RecoTrSeq.Members  += { "ProcessPhase/Track" };
Track.DetectorList  = { "ForwardPat", "ForwardPreFit", "ForwardFit"
                      , "SeedPat",    "SeedPreFit",    "SeedFit"
                      , "MatchPat",   "MatchPreFit",   "MatchFit", "PostFit"
                      , "KShortPat",  "KShortPreFit",  "KShortFit"
                      , "VeloTTPat",  "VeloTTPreFit",  "VeloTTFit"
//                      , "PostFit",    "VeloPreFit",    "VeloFit"
                      };

// Forward pattern
TrackForwardPatSeq.Members += { "PatTCoordFromRaw", "PatForward" };
#include "$PATFORWARDROOT/options/PatFwdTool.opts"

// Forward fit
TrackForwardFitSeq.Members += { "TrackEventFitter/FitForward", "TrackAddLikelihood/ForwardLikelihood" };
FitForward.TracksInContainer  = "Rec/Track/Forward"; 
FitForward.Fitter.NumberFitIterations = 3;

// Seed pattern and fit
// NOTE:
// 1. run one or the other
// 2. do not forget to make the necessary change in the TrackMatching options
// 3. do not forget to make the necessary change in the clone killer options
// Seeding algorithm from Roger Forty
#include "$TRACKSYSROOT/options/TsaSeeding.opts"
// Seeding algorithm from Henk Jan Bulten
//#include "$TRACKSYSROOT/options/TrackSeeding.opts"

// Match pattern
TrackMatchPatSeq.Members +={"TrackMatchVeloSeed/TrackMatch"};
// use this when running the seeding algorithm from Henk Jan Bulten
// (the default "InputSeedTracks" as defined in the cpp file
//  uses the output o Roger Forty's seeding)
//TrackMatch.InputSeedTracks = "Rec/Track/Seed";

// Match fit
TrackMatchFitSeq.Members += { "TrackEventFitter/FitMatch",  "TrackAddLikelihood/MatchLikelihood" };
FitMatch.TracksInContainer  = "Rec/Track/Match"; 
FitMatch.Fitter.NumberFitIterations = 3;

MatchLikelihood.inputLocation = "Rec/Track/Match";
MatchLikelihood.likelihood.otEff = 0.9;
ForwardLikelihood.inputLocation = "Rec/Track/Forward";

KsLikelihood.inputLocation = "Rec/Track/KsTrack";
KsLikelihood.LikelihoodTool = "DownstreamTrackLikelihood";

// KShort pattern
TrackKShortPatSeq.Members += { "PatKShort" };

// KShort fit
TrackKShortFitSeq.Members += { "TrackEventFitter/FitKShort", "TrackAddLikelihood/KsLikelihood" };
FitKShort.TracksInContainer = "Rec/Track/KsTrack"; 
FitKShort.Fitter.ZPositions      = { 990.0, 2165.0, 9450.0 };
FitKShort.Fitter.StateAtBeamLine = false;
FitKShort.Fitter.SetRefInfo      = false;

// Velo-TT pattern
TrackVeloTTPatSeq.Members += { "PatVeloTT" };
#include "$PATVELOTTROOT/options/VeloTT.opts"

// Velo-TT fit
TrackVeloTTFitSeq.Members += { "TrackEventFitter/FitVeloTT" }; 
FitVeloTT.TracksInContainer = "Rec/Track/VeloTT"; 
FitVeloTT.Fitter.ZPositions        = { 990.0, 2165.0 };
FitVeloTT.Fitter.SetRefInfo        = false;
FitVeloTT.Fitter.ErrorP            = 1.2;
FitVeloTT.Fitter.MaxNumberOutliers = 1;
FitVeloTT.Fitter.Extrapolator.ExtraSelector = "TrackSimpleExtraSelector";
FitVeloTT.Fitter.NodeFitter.Extrapolator.ExtraSelector = "TrackSimpleExtraSelector";

// Clone tracks killer: output is "best" container 
// -----------------------------------------------
TrackPostFitSeq.Members += { "TrackEventCloneKiller" };
// use this when running the seeding algorithm from Henk Jan Bulten
// (the default "TracksInContainers" as defined in the cpp file
//  uses the output of Roger Forty's seeding)
TrackEventCloneKiller.TracksInContainers  = {"Rec/Track/Forward"
                                           , "Rec/Track/Match"};
//                                           , "Rec/Track/KsTrack" 


// Prepare and fit velo tracks
TrackVeloPreFitSeq.Members += { "TrackPrepareVelo" };
TrackVeloFitSeq.Members    += { "TrackEventFitter/FitVelo" };

FitVelo.TracksInContainer = "Rec/Track/PreparedVelo";
FitVelo.Fitter.ZPositions = {};
FitVelo.Fitter.SetRefInfo = false;
FitVelo.Fitter.ErrorP     = 0.01;
FitVelo.Fitter.Extrapolator.ExtraSelector = "TrackSimpleExtraSelector";
FitVelo.Fitter.NodeFitter.Extrapolator.ExtraSelector = "TrackSimpleExtraSelector";
FitVelo.Fitter.TrackSimpleExtraSelector.ExtrapolatorName = "TrackLinearExtrapolator";
FitVelo.Fitter.Extrapolator.ApplyEnergyLossCorr = false;
  


// Copy fitted velo tracks to Track/Best container
TrackVeloFitSeq.Members += { "TrackContainerCopy/CopyVelo" };
CopyVelo.inputLocation = "Rec/Track/PreparedVelo";
