<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE gdd SYSTEM 'gdd.dtd'>
<gdd>
  <package name='TrackFitEvent'>

<!-- ================ OTMeasurement class definition ================ -->

    <class
      name        = 'OTMeasurement'
      author      = 'Jose Hernando, Eduardo Rodrigues'
      desc        = 'OTMeasurement is a measurement made from a OTTime.'
      serializers = 'FALSE'>

      <base name='LHCb::Measurement'/>

      <import name='Event/Measurement'/>
      <import name='Event/OTTime'/>
      <import name='OTDet/DeOTDetector'/>
      <import name='Kernel/TrackTypes.h'/>

      <constructor
        desc = 'Constructor from an OTTime'>
       <arg type='LHCb::OTTime' name='otTime' const='TRUE' />
       <arg type='DeOTDetector' name='det' const='TRUE' />
       <arg type='int' name='ambiguity = 0' />
       <arg type='double' name='tu = 999.0' />
      </constructor>

      <attribute
        type = 'int'
        name = 'ambiguity'
        desc = 'the ambiguity (+1/-1) of the measurement' />

      <attribute
        type    = 'double'
        name    = 'stereoAngle'
        desc    = 'the stereo angle of the measurement'
        setMeth = 'FALSE' />

      <attribute
        type    = 'double'
        name    = 'tu'
        desc    = 'the slope in u of the measurement (i.e. the reference vector)' />

      <attribute
        type = 'const LHCb::OTTime*'
        name = 'time'
        desc = 'Pointer to the OTTime'
	getMeth = 'FALSE'/>

      <method
        type = 'const LHCb::OTTime*'
        name    = 'time'
        desc    = 'Retrieve const  Pointer to the OTTime'
        const   = 'TRUE'>
        <code>
  return m_time;
        </code>
      </method>

      <method
        name    = 'update'
        desc    = 'Update the Measurement parameters'
        argList = 'const Gaudi::TrackVector refVector'>
        <code>
          m_tu = refVector(2) * cos( m_stereoAngle ) +
                 refVector(3) * sin( m_stereoAngle );
        </code>
      </method>

      <method
        type    = 'LHCb::OTMeasurement*'
        name    = 'clone'
        desc    = 'Clone the OTMeasurement'
        const   = 'TRUE'>
        <code>
          LHCb::OTMeasurement* me = new LHCb::OTMeasurement();
          *me = *this; return me;
        </code>
      </method>

     <method
       type    = 'const Gaudi::TrackVector'
       name    = 'referenceVector'
       desc    = 'Get the reference vector using a predicted state'
       argList = 'const Gaudi::TrackVector stateVec'
       const   = 'TRUE' >
     </method>

    </class>
  </package>
</gdd>
