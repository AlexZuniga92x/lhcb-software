<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE gdd SYSTEM 'gdd.dtd'>
<gdd>
  <package name='TrackFitEvent'>

<!-- ================ OTMeasurement class definition ================ -->

    <class
      name        = 'OTMeasurement'
      author      = 'Jose Hernando, Eduardo Rodrigues'
      desc        = 'OTMeasurement is a measurement made from a OTTime.'
      serializers = 'FALSE'>

      <base name='LHCb::Measurement'/>

      <import name='Event/Measurement'/>
      <import name='Event/OTLiteTime'/>
      <import name='Event/StateVector'/>
      <import name='OTDet/DeOTModule'/>

      <constructor
        desc = 'Constructor from an OTLiteTime'>
        <arg type='LHCb::OTLiteTime' name='id' const='TRUE' />
        <arg type='DeOTModule' name='det' const='TRUE' />
        <arg type='int' name='ambiguity' />
        <arg type='LHCb::StateVector' name='refVector' const='TRUE'/>
      </constructor>

      <constructor
        desc = 'Constructor from an OTLiteTime'>
        <arg type='LHCb::OTLiteTime' name='id' const='TRUE' />
        <arg type='DeOTModule' name='det' const='TRUE' />
        <arg type='int' name='ambiguity = 0' />
      </constructor>

      <attribute
        type = 'LHCb::OTLiteTime'
        name = 'ottime'
        desc = 'channel and calibrated time' 
        setMeth = 'FALSE' />

      <attribute
        type = 'const DeOTModule*'
        name = 'module'
        desc = 'module in the OT'
        setMeth = 'FALSE' getMeth = 'FALSE' />
      
       <attribute
        type = 'float'
        name = 'deltaTimeOfFlight'
        desc = 'time of flight correction' />

       <attribute
        type = 'int'
        name = 'ambiguity'
        desc = 'the ambiguity (+1/-1) of the measurement' />

      <method
        name   = 'init'
        desc   = 'Initialize the data members'
        access = 'PUBLIC'>
      </method>

      <method
	type = 'const DeOTModule&amp;'
	name = 'module'
	desc = 'Retrieve const the module of the measurement'
	const = 'TRUE'>
        <code>
          return *m_module;
        </code>
      </method>

      <method
	type = 'LHCb::OTChannelID'
	name = 'channel'
	desc = 'Retrieve channel in OT'
	const = 'TRUE'>
        <code>
          return m_ottime.channel();
        </code>
      </method>

      <method
	type = 'double'
	name = 'calibratedTime'
	desc = 'Retrieve the calibrated time'
	const = 'TRUE'>
        <code>
          return m_ottime.calibratedTime();
        </code>
      </method>

      <method
	type = 'double'
	name = 'stereoAngle'
	desc = 'Retrieve const  the stereo angle of the measurement'
	const = 'TRUE'>
      </method>

      <method
        type = 'OTDet::RadiusWithError'
        name = 'driftRadiusWithError'
        desc = 'Retrieve the drift radius for a given length along the trajectory'
        const = 'TRUE'>
        <arg type='double' name='arclen' />
      </method>

      <method
        type = 'OTDet::RadiusWithError'
        name = 'driftRadiusWithErrorFromY'
        desc = 'Retrieve the drift radius for a given global y position'
        const = 'TRUE'>
        <arg type='double' name='globalY' />
      </method>

      <method
        type    = 'LHCb::OTMeasurement*'
        name    = 'clone'
        desc    = 'Clone the OTMeasurement'
        const   = 'TRUE'>
        <code>
          return new LHCb::OTMeasurement(*this);
        </code>
      </method>

      <method
        type = 'void'
        name = 'setTimeOfFlight'
        desc = 'Set the time of flight of this measurement'
        const = 'FALSE'>
        <arg
          type = 'double'
          name = 'tof' />
      </method>
      
      <method
        type = 'double'
        name = 'timeOfFlight'
        desc = 'Retrieve the time of flight of this measurement'
        const = 'TRUE' />
      
    </class>
  </package>
</gdd>
