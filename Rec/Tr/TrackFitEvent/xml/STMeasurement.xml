<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE gdd SYSTEM 'gdd.dtd' [
<!ENTITY OUTTYPE "STMeasurement">
<!ENTITY INTYPE "STCluster">
<!ENTITY ACCESSOR "->">
<!ENTITY POINTER "&amp;">
<!ENTITY STCommon SYSTEM "STMeasurement.ent">
]>
<gdd>
  <package name='TrackFitEvent'>

<!-- ================ STMeasurement class definition ================ -->

    <class
      name        = '&OUTTYPE;'
      author      = 'Jose Hernando, Eduardo Rodrigues'
      desc        = 'STMeasurement is a measurement made from a ST cluster (of TT or IT).'
      defaultconstructor ='FALSE'
      serializers = 'FALSE'>

      <base name='LHCb::Measurement' />
      <import name='Event/Measurement' />
      <import name='Event/STCluster'  />
      <import name='StateVector' soft = 'FORWARDONLY'/>
      <import name='STDet/DeSTDetector'  />
      <import name='STDet/DeSTSector' />
      <import name='Kernel/ISTClusterPosition' />

  
      <attribute
        type = 'const LHCb::STCluster*'
        name = 'cluster'
        desc = 'Pointer to the STCluster'
        getMeth = 'FALSE' 
        setMeth = 'FALSE' />

      <attribute
        type    = 'unsigned int'
        name    = 'size'
        desc    = 'cluster size'
        setMeth = 'FALSE' />
     

      <method
        type  = 'const LHCb::STCluster*'
        name  = 'cluster'
        desc  = 'Retrieve const  Pointer to the STCluster'
        const = 'TRUE'>
        <code>
  return m_cluster;
        </code>
	</method>

      <method
        type  = 'double'
        name  = 'totalCharge'
        desc  = 'Retrieve the cluster charge'
        const = 'TRUE'>
        <code>
  return m_cluster-&gt;totalCharge();
        </code>
	</method>




     &STCommon;

    </class>

  </package>
</gdd>

