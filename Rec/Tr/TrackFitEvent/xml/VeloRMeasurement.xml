<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE gdd SYSTEM 'gdd.dtd'>
<gdd>
  <package name='TrackFitEvent'>

<!-- =============== VeloRMeasurement class definition =============== -->

    <class
      name        = 'VeloRMeasurement'
      author      = 'Jose Hernando, Eduardo Rodrigues'
      desc        = 'VeloRMeasurement is a measurement made from a VeloRCluster.'
      serializers = 'FALSE'>

      <base name='LHCb::Measurement' />

      <import name='Event/Measurement' />
      <import name='Event/VeloCluster' />

      <import name='VeloDet/DeVelo'/>

      <import name='Kernel/TrackTypes.h'/>

      <constructor
        desc = 'Constructor from an VeloRCluster'
        argList = 'LHCb::VeloCluster cluster,
                   DeVelo det,
                   double phi' >
        <arg
        type = 'LHCb::VeloCluster'
        name = 'cluster'
        const = 'FALSE' />
        <arg
        type = 'DeVelo'
        name = 'det'
        const = 'FALSE' />
       <arg
        type = 'double'
        name = 'phi'
        const = 'FALSE' />
      </constructor>

      <attribute
        type = 'double'
        name = 'phi'
        desc = 'the phi of the Velo R measurement'/>

      <attribute
        type = 'LHCb::VeloCluster*'
        name = 'cluster'
        desc = 'Pointer to the VeloRCluster'/>

      <method
        name    = 'update'
        desc    = 'Update the Measurement parameters'
        argList = 'const Gaudi::TrackVector refVector'>
        <code>
    m_phi = atan2( refVector(1), refVector(0) );
        </code>
      </method>

      <method
        type    = 'LHCb::VeloRMeasurement*'
        name    = 'clone'
        desc    = 'Clone the VeloRMeasurement'
        const   = 'TRUE'>
        <code>
  LHCb::VeloRMeasurement* me = new LHCb::VeloRMeasurement(); *me = *this; return me;
        </code>
      </method>

    </class>

  </package>
</gdd>
