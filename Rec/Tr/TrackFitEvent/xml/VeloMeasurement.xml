<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE gdd SYSTEM 'gdd.dtd'>
<gdd>
  <package name='TrackFitEvent'>

<!-- =============== VeloRMeasurement class definition =============== -->

    <class
      name        = 'VeloMeasurement'
      author      = 'M Needham'
      desc        = 'Base class for a measurement made from a VeloCluster.'
      serializers = 'FALSE'>

      <base name='LHCb::Measurement' />

      <import name='Event/Measurement' />
      <import name='Event/VeloCluster' />

      <constructor
        desc = 'Constructor'
               argList = ' LHCb::Measurement::Type&amp; type, LHCb::VeloCluster cluster'
        initList = ' Measurement(type, LHCbID(cluster.channelID())), m_cluster(&amp;cluster)'> 
      </constructor>

      <attribute
        type = 'const LHCb::VeloCluster*'
        name = 'cluster'
        desc = 'Pointer to the VeloCluster'
	getMeth = 'FALSE'
        setMeth = 'FALSE'  />

      <method
        type  = 'const LHCb::VeloCluster*'
        name  = 'cluster'
        desc  = 'Retrieve const  Pointer to the VeloCluster'
        const = 'TRUE'>
        <code>
  return m_cluster;
        </code>
      </method>

      <method
        type  = 'double'
        name  = 'totalCharge'
        desc  = 'Retrieve the cluster charge'
        const = 'TRUE'>
        <code>
  return m_cluster-&gt;totalCharge();
        </code>
      </method>

<method
  type    = 'LHCb::VeloChannelID'
  name    = 'channelID'
  desc    = 'channel identifier'
  const   = 'TRUE'>
  <code>
     return m_cluster->channelID() ;
  </code>
</method>

<method
  type    = 'bool'
  name    = 'highThreshold'
  desc    = 'has high Threshold'
  const   = 'TRUE'>
  <code>
     return m_cluster->highThreshold() ;
  </code>
</method>

<method
  type    = 'unsigned int'
  name    = 'size'
  desc    = 'cluster size'
  const   = 'TRUE'>
  <code>
     return m_cluster->size();
  </code>
</method>
      


    </class>

  </package>
</gdd>
