#pragma print on

// NNet tool options.

ToolSvc.MuonNNetRec.OutputLevel = 3;

// default MuonNNetRec tool options.
/*
ToolSvc.MuonNNetRec.PosScaleFactor  =  10.0; // head-tail weight scale factor                  
ToolSvc.MuonNNetRec.NegScaleFactorB =   1.0; // head-head weight scale factor                  
ToolSvc.MuonNNetRec.NegScaleFactorC =   1.0; // tail-tail weight scale factor                  
ToolSvc.MuonNNetRec.SlamFactorB     =   5.0; // penalty for TT connections                     
ToolSvc.MuonNNetRec.SlamFactorC     =   5.0; // penalty for HH connections                     
ToolSvc.MuonNNetRec.ExponentXZ      =  10.0; // exponent for (1-sin(thxz)) weight factor       
ToolSvc.MuonNNetRec.ExponentYZ      =  10.0; // exponent for (1-sin(thyz)) weight factor       
ToolSvc.MuonNNetRec.Stimulus        =   0.0; // stimulation weight term                        
ToolSvc.MuonNNetRec.Temperature     =   1.0; // temperature                                    
ToolSvc.MuonNNetRec.Convergence     =1.0e-5; // convergence factor                             
ToolSvc.MuonNNetRec.NeuronThreshold =   0.7; // neuron activation cut                          
ToolSvc.MuonNNetRec.DoubleKillAngCut=   0.1; // angular cut for double length neurons killing  
*/

ToolSvc.MuonNNetRec.TrackSpanCut    =   2 ; // cut on span for selected tracks                
ToolSvc.MuonNNetRec.StationFiringCut=   2 ; // cut on # of stations firing in the track (strict >)
ToolSvc.MuonNNetRec.MaxNeurons      =  400; // (def. 3000) max number of possible track segments      
ToolSvc.MuonNNetRec.MaxIterations   =   30; // (def. 100) max number of NN iterations
ToolSvc.MuonNNetRec.SkipStation     =   -1; // for efficiency studies (-1 for none)
ToolSvc.MuonNNetRec.AllowHoles      =  true; // allow holes in tracks


// this is to decide how to deal with TOF corrections
// mandatory for (runs 33878-33883, runs 34063- 34120). For the others just use the default
ToolSvc.MuonNNetRec.PhysicsTiming = true;
ToolSvc.MuonNNetRec.AssumeCosmics = true;  // if true, track direction inferred from y slope and not from speed fit
ToolSvc.MuonNNetRec.AssumePhysics = false; // if true assume that tracks come from IP (only forward)


ToolSvc.MuonNNetRec.AddXTalk      = false; // add Xtalk hits to tracks
ToolSvc.MuonNNetRec.XtalkRadius   = 1.5;  // radius of cone around tracks (in pad size units) where hits will be added

// choice of basic muon tools:
ToolSvc.MuonNNetRec.DecodingTool = "MuonHitDecode"; // interface to MuonRawBuffer
                                          // alternative is "MuonMonHitDecode" from Muon/MuonMonKernel
ToolSvc.MuonNNetRec.PadRecTool   = "MuonPadRec";
ToolSvc.MuonNNetRec.ClusterTool  = "MuonFakeClustering" // default is no clustering
                                          // alternative is "MuonClusterRec"

