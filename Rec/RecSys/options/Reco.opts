//--------------------------------------------------------------
// Job options for Brunel Reco Phase
//--------------------------------------------------------------
Reco.DetectorList = { 
                      "VELO" 
                     ,"TT"
                     ,"IT"
                     ,"OT"
                     ,"Tr"
                     ,"RICH"
                     ,"CALO"
                     ,"MUON"
                     ,"PROTO"
                    };

// Velo tracking
ApplicationMgr.DLLs += { "PatTools", "PatUtils", "PatVelo" };
RecoVELOSeq.Members += { "PatInitEvent"
                        ,"DecodeVeloRawBuffer"
                        ,"PatVeloLoadClusters"
                        ,"PatVeloRTracking"
                        ,"PatVeloSpaceTracking"
};
RecoVeloSeq.context = "HLT";

// Decode also VeloClusters, needed for track fit
RecoVeloSeq.Members += { "DecodeVeloRawBuffer/DecodeVeloClusters" };
DecodeVeloClusters.DecodeToVeloLiteClusters = false;
DecodeVeloClusters.DecodeToVeloClusters = true;

ApplicationMgr.DLLs += { "STAlgorithms", "PatVeloTT" };

// TT clusters for pattern recognition and track fit
RecoTTSeq.Members += { "RawBankToSTClusterAlg/createTTClusters"
                      ,"RawBankToSTLiteClusterAlg/createTTLiteClusters"
                      ,"PatTTCoordFromRaw"
//                      ,"STSummaryCreator/TTSummaryCreator"
};

// IT clusters for pattern recognition and track fit
RecoITSeq.Members += { "RawBankToSTClusterAlg/createITClusters"
                      ,"RawBankToSTLiteClusterAlg/createITLiteClusters"
//                      ,"STSummaryCreator/ITSummaryCreator"
};
createITClusters.detType     = "IT";
createITLiteClusters.detType = "IT";
ITSummaryCreator.detType     = "IT";

// OTTimes for pattern recognition and track fit
RecoOTSeq.Members += {"OTTimeCreator" };

// Velo-TT 
RecoTrSeq.Members += { 
                      ,"PatTTCoordAddTruth" // WHY?? Must be removed from here!
                      ,"PatVeloTT"
};

// Forward tracking
ApplicationMgr.DLLs += { "PatForward" };
RecoTrSeq.Members += { 
                      ,"PatTCoordFromRaw"
                      ,"PatForward"
};
#include "$PATFORWARDROOT/options/PatFwdTool.opts"

// Next option to be removed when PatForward is adapted to use TT decoding
ToolSvc.PatForwardTool.ValidateInTT = false;



// Track fit
ApplicationMgr.DLLs += { "TrackExtrapolators",
                         "TrackProjectors",
                         "VeloTools",
                         "STTools",
                         "TrackTools",
                         "TrackFitter"
                       };
ApplicationMgr.ExtSvc += { "TransportSvc" };
// Options for IT instance of STClusterPositionTool, needed by track fit
#include "$STTOOLSROOT/options/Brunel.opts"

RecoTrSeq.Members += { "TrackEventFitter/FitForward" };
FitForward.TracksInContainer  = "Rec/Track/Forward"; 

// Temporary, to reduce fit failure rate
FitForward.Fitter.ErrorX2 = 1.0;
FitForward.Fitter.ErrorY2 = 10.0;
FitForward.Fitter.ErrorTX2 = 1.0e-5;
FitForward.Fitter.ErrorTY2 = 1.0e-3;
FitForward.Fitter.ErrorP = 0.02;

// Seeding
//ApplicationMgr.DLLs += { "Seeding" }; 
//RecoTrSeq.Members   += { "TrSeedEvent/seedEvent",
//                         "TrEventTracksFitter/fitSeed" };
//#include "$SEEDINGROOT/options/Brunel.opts"
//seedEvent.FilterCluster = true; // Enable filtering of T clusters
//ToolSvc.ClusterFilter.Containers = { "Rec/FitTrack/Forward" };

// Velo Matching
//ApplicationMgr.DLLs += { "TrMatching" }; 
//RecoTrSeq.Members   += { "TrMatchVeloSeed/matchVeloSeed",
//                         "TrEventTracksFitter/reFit" };
//reFit.TrackContainer = "Rec/FitTrack/Match";

// K Short tracking
//ApplicationMgr.DLLs += { "TrKShort" };
//#include "$TRKSHORTROOT/options/Brunel.opts"
//RecoTrSeq.Members   += { "FindTrKShort"
//                       , "TrEventTracksFitter/KShortFit" };
//KShortFit.TrackContainer = "Rec/FitTrack/KsTrack";
//KShortFit.Fitter.stateAtBeamLine = false;

// Clone killer
//ApplicationMgr.DLLs += { "TrCleanEx" };
//RecoTrSeq.Members   += { "TrTrackCloneKiller" };

// VeloTT tracking
//ApplicationMgr.DLLs += { "VeloTT" };
//RecoTrSeq.Members   += { "VeloTTFind" };
//#include "$VELOTTROOT/options/BrunelField045.opts"
//RecoTrSeq.Members   += { "TrPrepareVelo" };


// Clone tracks killer: output is "best" container
// -----------------------------------------------
ApplicationMgr.DLLs += { "TrackUtils" };
//RecoTrSeq.Members += { "TrackEventCloneKiller" };
TrackEventCloneKiller.TracksInContainers  = { "Rec/Track/Velo"
                                            , "Rec/Track/Forward"
};

// Still needed as in DC04? 
// TrTrackCloneKiller.flagMode = true;

// Primary vertex
ApplicationMgr.DLLs += { "PatPV" };
RecoTrSeq.Members   += { "PatPVOffline" };
// Temporary specification of input tracks
PatPVOffline.InputTracks = {"Rec/Track/Forward","Rec/Track/Velo"};


// Rich
ApplicationMgr.DLLs += { "RichTools", "RichRecTools", "RichRecAlgorithms",
                         "RichGlobalPID", "RichLocalPID", "RichPIDMerge" };
#include "$RICHRECSYSOPTS/RecoToolPara.opts"
#include "$RICHRECSYSOPTS/RecoOfflineAlgs.opts"
// Temporary, while waiting for Best tracks
ToolSvc.Offline.RichTrackCreator.TracksLocation = "Rec/Track/Forward";

// Calorimeter reconstruction
ApplicationMgr.DLLs += { "CaloReco"};
#include "$CALORECOOPTS/Brunel.opts"
#include "$CALORECOOPTS/PhotonPDF.opts" // Temporarly in CaloReco
ClusterMatch.Tracks = "Rec/Track/Forward"; // Waiting for Best Track
ElectronMatch.Tracks = "Rec/Track/Forward";
BremMatch.Tracks = "Rec/Track/Forward";

//ApplicationMgr.DLLs += { "CaloPIDs" };
//#include "$CALOPIDSOPTS/Brunel.opts"

// Muon ID
ApplicationMgr.DLLs += { "MuonRec", "MuonID" };
RecoMUONSeq.Members += { "MuonRec" };
RecoMUONSeq.Members += { "MuonID" };
#include "$MUONIDROOT/options/MuonID.opts"
// Temporary, while waiting for Best tracks
MuonID.TrackLocation = "Rec/Track/Forward";

// Global Reco (ProtoParticles)
ApplicationMgr.DLLs += { "GlobalReco" };
#include "$GLOBALRECOOPTS/Reco.opts"
// Temporary, while waiting for Best tracks
ChargedProtoPAlg.InputTrackLocation = "Rec/Track/Forward";

