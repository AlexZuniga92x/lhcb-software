// $Id: CaloCellID.h,v 1.1.1.1 2001-11-25 14:07:38 ibelyaev Exp $ 
// ============================================================================
// CVS tag $Name: not supported by cvs2svn $ 
// ============================================================================
// $Log: not supported by cvs2svn $
// Revision 1.11  2001/09/10 13:46:51  ibelyaev
//  new creator and accessor 'raw data'-like format
//
// Revision 1.10  2001/06/23 14:39:31  ibelyaev
//  fix CVS-keywords and remove long lines
// ============================================================================
#ifndef CALOKERNEL_CALOCELLID_H
#define CALOKERNEL_CALOCELLID_H 1 
// STD and STL 
#include <iostream> 
#include <iomanip> 
#include <string>
// GaudiKernel
#include "GaudiKernel/Kernel.h"
#include "GaudiKernel/StreamBuffer.h"
#include "GaudiKernel/MsgStream.h" 
// CaloKernel
#include "CaloKernel/CaloCellCode.h"

/** @class CaloCellID CaloCellID.h  CaloKernel/CaloCellID.h
 *
 *  Simple class to represent cell identifier for calorimeter devices 
 *
 *  @author  Vanya Belyaev
 *  @date    26/11/1999
 */

class CaloCellID
{
public:
  
  /** transient representation  of the CaloCellID class, 
   *  presumably 32 bits
   */
  typedef  CaloCellCode::ContentType  ContentType ; 
  
  /** persistent representation of the CaloCellID class, 
   *  presumably 16 bits
   */
  typedef  CaloCellCode::WriteType    WriteType   ;
  
  /** default/standard constructor
   */ 
  CaloCellID () : m_ccid_id( 0 ) {};
  
  /** constructor with all arguments 
   *  @param   Calo     calorimeter identifier 
   *  @param   Area     calorimeter area    identifier 
   *  @param   Row      calorimeter row     identifier 
   *  @param   Col      calorimeter column  identifier 
   */
  CaloCellID ( const unsigned int Calo  ,         
               const unsigned int Area  ,
               const unsigned int Row   , 
               const unsigned int Col   ) 
    : m_ccid_id( 0 )
  { 
    setCalo( Calo ) ; 
    setArea( Area ) ; 
    setRow ( Row  ) ; 
    setCol ( Col  ) ; 
  };
  
  /** constructor from SicB ID and Calorimeter identifier 
   *  @param Calo   calorimeter identifier 
   *  @param SicB   cell identifier from SICB 
   */
  CaloCellID ( const unsigned int Calo  ,         
	       const unsigned int SicB  ) 
    : m_ccid_id(0)
  { 
    setCalo( Calo       ) ; 
    setSicb( Calo, SicB ) ; 
  };
  
  /** constructor from Short/Raw representation 
   *  @parameter  Raw  Short/Raw representation (16 bit) 
   */
  CaloCellID( const unsigned short Raw )
    : m_ccid_id( (const unsigned int) Raw ) 
  {};
  
  /// destructor!        Attention! it is non-virtual!!!!
  ~CaloCellID(){}; 
  
  /// copy and assignment, generated by compiler are OK

public:

  /// decoding finction to extract index  
  inline const unsigned int index() const 
  { 
    return 
      ( contents() & CaloCellCode::MaskIndex ) >> CaloCellCode::ShiftIndex ; 
  };

  /// decoding finction to extract calorimeter idenfifier   
  inline const unsigned int calo () const 
  { 
    return 
      ( contents() & CaloCellCode::MaskCalo  ) >> CaloCellCode::ShiftCalo  ; 
  };

  /// decoding finction to extract area  idenfifier   
  inline const unsigned int area () const 
  { 
    return 
      ( contents() & CaloCellCode::MaskArea  ) >> CaloCellCode::ShiftArea  ; 
  };
  
  /// decoding finction to extract row  idenfifier   
  inline const unsigned int row  () const 
  {
    return 
      ( contents() & CaloCellCode::MaskRow   ) >> CaloCellCode::ShiftRow   ; 
  };
  
  /// decoding finction to extract column   idenfifier   
  inline const unsigned int col  () const 
  { 
    return 
      ( contents() & CaloCellCode::MaskCol   ) >> CaloCellCode::ShiftCol   ; 
  };
  
  /// decoding function to extract raw-data representation 
  inline const unsigned short raw() const 
  { return (const unsigned short) all(); }
  
public:

  /** comparison operator using index. 
   *  @param ID cell ID to be compared 
   *  @return true if own index is LESS than index of ID 
   */
  inline bool operator < ( const CaloCellID& ID ) const 
    { return index() <  ID.index() ; }

  /** equality operator using contents 
   */
  inline bool operator ==( const CaloCellID& ID ) const 
  { return contents() == ID.contents() ; }

  /// non-equality operator using contents 
  inline bool operator !=( const CaloCellID& ID ) const 
  { return !(ID == *this) ; } 

  /// serialization for reading 
  inline StreamBuffer& serialize( StreamBuffer& )       ;
  /// serialization for writing 

  inline StreamBuffer& serialize( StreamBuffer& ) const ;

  /// printout to std::ostream 
  inline std::ostream& printOut ( std::ostream& ) const ;

  /// printout to MsgStream
  inline MsgStream&    printOut ( MsgStream&    ) const ;

  /// return bit pattern with delimeters 
  inline const std::string bits( const char delim = ',' ) const; 

 private:

  /// update calorimeter identifier 
  inline CaloCellID& setCalo  ( const unsigned int Calo  );

  /// update area identifier 
  inline CaloCellID& setArea  ( const unsigned int Area  );

  /// update column identifier 
  inline CaloCellID& setCol   ( const unsigned int Col   );

  /// update row     identifier 
  inline CaloCellID& setRow   ( const unsigned int Row   );

  /// update index   identifier 
  inline CaloCellID& setIndex ( const unsigned int Index );

  /// update sicb    identifier 
  inline CaloCellID& setSicb  ( const unsigned int Calo  ,
                                const unsigned int Sicb  );
  /// update sicb    identifier 
  inline CaloCellID& set      ( const unsigned int , 
                                const unsigned int , 
                                const ContentType& );
  /// extract all bits 
  inline unsigned int  all  () const 
  { 
    return 
      ( contents() & CaloCellCode::MaskAll    ) >> CaloCellCode::ShiftAll   ; 
  };
  
  /// extract "the rest" - should be zero! 
  inline unsigned int  rest () const
  { 
    return 
      ( contents() & CaloCellCode::MaskRest   ) >> CaloCellCode::ShiftRest   ; 
  };
  
  /// extract the full content  
  inline const ContentType& contents() const { return m_ccid_id; }

 private:

  ContentType m_ccid_id;    ///< internal representation of cell id 
};

// ** overloaded output to std::ostream 
inline std::ostream& operator<<
( std::ostream& os , const CaloCellID& ccid ) 
{ return ccid.printOut( os );  };

// ** overloaded output to MsgStream 
inline MsgStream&    operator<<
( MsgStream&    os , const CaloCellID& ccid ) 
{ return ccid.printOut( os ); };

// ** output to StreamBuffer
inline StreamBuffer& operator<<
( StreamBuffer& s  , const CaloCellID& ccid ) 
{ return ccid.serialize( s ) ; };

// ** input from StreamBuffer
inline StreamBuffer& operator>>
( StreamBuffer& s  ,       CaloCellID& ccid ) 
{ return ccid.serialize( s ); };

// ** input from StreamBuffer
inline StreamBuffer& 
CaloCellID::serialize( StreamBuffer& sb ) 
{
  WriteType tmp ;
  sb >> tmp ; 
  m_ccid_id = (ContentType) tmp;
  return sb;  
};

// ** output to StreamBuffer 
inline StreamBuffer& 
CaloCellID::serialize( StreamBuffer& sb ) const 
{ return sb << (WriteType) contents(); };

// ** coding
inline CaloCellID& CaloCellID::setCalo ( const unsigned int Calo  )
{ return set( Calo  , CaloCellCode::ShiftCalo , CaloCellCode::MaskCalo ) ; };

inline CaloCellID& CaloCellID::setArea ( const unsigned int Area  )
{ return set( Area  , CaloCellCode::ShiftArea , CaloCellCode::MaskArea ) ; };

inline CaloCellID& CaloCellID::setRow  ( const unsigned int Row   )
{ return set( Row   , CaloCellCode::ShiftRow  , CaloCellCode::MaskRow  ) ; };

inline CaloCellID& CaloCellID::setCol  ( const unsigned int Col   )
{ return set( Col   , CaloCellCode::ShiftCol  , CaloCellCode::MaskCol  ) ; };

inline CaloCellID& CaloCellID::setIndex( const unsigned int Index )
{ return set( Index , CaloCellCode::ShiftIndex, CaloCellCode::MaskIndex) ; };

inline CaloCellID& CaloCellID::setSicb ( const unsigned int Calo,  
                                         const unsigned int Sicb )
{
  ///
  unsigned int Col  =   Sicb % 1000            ;
  unsigned int Row  = ( Sicb / 1000   ) % 1000 ;
  unsigned int Area = ( Sicb / 1000000) -    1 ;
  ///
  if ( 3 == Calo ) {    ///< HCAL
    if ( 0 == Area ) {
      Col = Col - 1 ;   ///< 1:32 -> 0:31
      Row = Row + 2 ;   ///< 1:26 -> 3:28
    } else {
      Col = Col - 1 ;   ///< 1:32 -> 0:31
      Row = Row + 1 ;   ///< 1:28 -> 2:29
    }
  } else {
    if ( 0 == Area ) { 
      Col = Col - 1 ;   ///< 1:64 -> 0:63
      Row = Row + 5 ;   ///< 1:52 -> 6:57
    } else if ( 1 == Area ) { 
      Col = Col - 1 ;   ///< 1:64 -> 0:63
      Row = Row + 11 ;  ///< 1:40 ->12:51
    } else { 
      Col = Col + 7 ;   ///< 1:48 -> 8:55
      Row = Row + 13 ;  ///< 1:36 ->14:49
    }
  }
  setArea ( Area ) ; 
  setRow  ( Row  ) ; 
  setCol  ( Col  ) ; 
  ///
  return *this; 
};


inline CaloCellID& CaloCellID::set 
( const CaloCellID::ContentType  Value ,  
  const unsigned int             Shift ,
  const CaloCellID::ContentType& Mask  )
{
  ContentType tmp1 , tmp2 ;
  tmp1  = ( Value << Shift ) &  Mask ; 
  tmp2  =  contents()        & ~Mask ; 
  m_ccid_id = ( tmp1 | tmp2 ) ;
  return *this;
};

// ** print to std::ostream, and to MsgStream
inline std::ostream& 
CaloCellID::printOut
( std::ostream& os ) const 
{ 
  os << "[" ;
  /// corrupted ?!
  if( 0 != rest() ) { os << "?" << std::setw(4) << rest() << "?," ; }  
  return 
    os << CaloCellCode::CaloNameFromNum( calo() ) [0] << "," 
       << std::setw(1) << area () << "," 
       << std::setw(2) << row  () << "," 
       << std::setw(2) << col  () << "]" ;  
};

// 
inline MsgStream&    
CaloCellID::printOut
( MsgStream&    os ) const 
{ 
  os << "[" ;
  /// corrupted ?!
  if( 0 != rest() ) { os << "?" << std::setw(4) << rest() << "?," ; }  
  return 
    os << CaloCellCode::CaloNameFromNum( calo() ) [0] << "," 
       << std::setw(1) << area () << "," 
       << std::setw(2) << row  () << "," 
       << std::setw(2) << col  () << "]" ;  
};

// ** convert the value of cell ID into bit pattern
inline const std::string 
CaloCellID::bits
( const char del ) const 
{
  std::string  str("[");
  const ContentType  one = 1;
  for( int n  = ( 0 == rest() )? CaloCellCode::BitsAll - 1 : 
         CaloCellCode::BitsTotal - 1 ; n >= 0 ; --n  )
    {
      unsigned int pos = n;
      bool isNull =   ( 0 == ( ( one << pos ) & contents() ) );     
      str+= isNull ? '0' : '1';
      if      ( 0                       == pos )   break      ;
      if      ( 0                       == del )   continue   ;
      if      ( CaloCellCode::ShiftRest == pos ) { str += del ; }
      else if ( CaloCellCode::ShiftCalo == pos ) { str += del ; }
      else if ( CaloCellCode::ShiftArea == pos ) { str += del ; }
      else if ( CaloCellCode::ShiftRow  == pos ) { str += del ; }
      else if ( CaloCellCode::ShiftCol  == pos ) { str += del ; }
      else if ( CaloCellCode::ShiftAll  == pos ) { str += del ; }
    }  
  return str += "]";
};
//

// ============================================================================
// The End 
// ============================================================================
#endif  ///<   CALOKERNEL_CALOCELLID_H
// ============================================================================












