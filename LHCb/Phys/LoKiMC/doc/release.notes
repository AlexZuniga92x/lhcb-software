! $Id: release.notes,v 1.6 2006-09-06 10:37:18 ibelyaev Exp $ 
! -----------------------------------------------------------------------------
! CVS tag $Name: not supported by cvs2svn $ , version $Revision: 1.6 $
! -----------------------------------------------------------------------------
! Package     : Phys/LoKiMC
! Responsible : Vanya BELYAEV ibelyaev@physics.syr.edu
! Purpose     : MC-related part of restructurized LoKi project
! -----------------------------------------------------------------------------
! 
!   This file is a part of LoKi project - 
!     "C++ ToolKit  for Smart and Friendly Physics Analysis"
! 
!   The package has been designed with the kind help from
!   Galina PAKHLOVA and Sergey BARSUK.  Many bright ideas, 
!   contributions and advices from G.Raven, J.van Tilburg, 
!   A.Golutvin, P.Koppenburg have been used in the design.
!
! -----------------------------------------------------------------------------


!========================== LoKiMC v1r2 2006-09-06 ===================

! 2006-09-06 - Vanya BELYAEV
 - LoKi/MCTypes.h
   replace hand-made definition of MCContainer to delegation to 
    LHCb::MCPArticles::ConstVector

   TODO: the same need to be done with MCVertices 

 - cmt/requirements

    version increment to v1r2 

!========================== LoKiMC v1r1 2006-05-29 ===================

! 2006-05-27 - Vanya BELYAEV
 - LoKi/PrintMCDecay.h, src/PrintMCDecay.cpp
   new utilities LoKi::printMCDecay and LoKi::printDecay 
   for printout of MC-decay tree 
 - cmt/requirements
   versionincrement to v1r1 

! 2006-02-09 - Vanya BELYAEV

 - LoKi/MCAlgs.h

   few trivial, but efficient highly recirsive pseudo-algorithms  
   to counting/checking the particles from MC-decay trees: 

    /** @fn count_if 
     *  the trivial algorithm to count number of MC particles
     *  in the tree, which satisfy the certain criteria 
     *
     *  @code 
     *
     *  const LHCb::MCParticle* B = .. ;
     *
     *  const size_n muons = 
     *     LoKi::MCAlgs::count_if( B , "mu+" == MCABSID ) ;
     * 
     *  @endcode 
     *
     *
     *  @see LHCb::MCParticle
     *  @see LoKi::Cuts::MCABSID 
     *
     *  @param   particle pointer to MC particle  
     *  @param   predicate criteria 
     *  @return  number of aprticles which satisfy the criteria
     *  @author Vanya BELYAEV ibelyaev@physics.syr.edu
     *  @date   2006-02-09
     */
    template <class PREDICATE>
    inline size_t  LoKi::MCAlgs::count_if 
    ( const LHCb::MCParticle* particle   , 
      const PREDICATE&        predicate ) ;


    /** @fn count_if 
     *  the trivial algorithm to count number of MC particles
     *  in the tree, which satisfy the certain criteria 
     *
     *  Count number of muons in the decay tree of the B:
     *
     *  @code 
     *
     *  const LHCb::MCVertex* vx = .. ;
     *
     *  const size_n muons = 
     *     LoKi::MCAlgs::count_if ( vx , "mu+" == MCABSID ) ;
     * 
     *  @endcode 
     *
     *  @see LHCb::MCVertex
     *  @see LoKi::Cuts::MCABSID 
     *
     *  @param   vertex pointer to MC vertex 
     *  @param   predicate criteria 
     *  @return  number of aprticles which satisfy the criteria
     *  @author Vanya BELYAEV ibelyaev@physics.syr.edu
     *  @date   2006-02-09
     */
   template <class PREDICATE>
    inline size_t  LoKi::MCAlgs::count_if 
    ( const LHCb::MCVertex* vertex    , 
      const PREDICATE&      predicate ) ;

    /** @fn found 
     *  trivial algorithm which returns true if 
     *  the exist at least one particle in the tree which satisfy 
     *  the certain criteria
     *
     *  Check the presence of high-PT muon in the 
     *   decay tree of the particle:
     *
     *  @code 
     *  
     *  const LHCb::MCParticle* B = ... ;
     *  
     *  MCCut lepton = "mu+" == MCABSID && PT > 2 * GeV ;
     * 
     *  const bool good = found ( B , lepton ) ;
     * 
     *  @endcode 
     *
     *  @see LoKi::Types::MCCut
     *  @see LoKi::Cuts::MCABSID 
     *  @see LoKi::Cuts::MCPT 
     *
     *  @param   particle pointer to MC particle  
     *  @param   predicate criteria 
     *  @return  number of aprticles which satisfy the criteria
     *  @author Vanya BELYAEV ibelyaev@physics.syr.edu
     *  @date   2006-02-09
     */
    template <class PREDICATE>
    inline bool LoKi::MCAlgs::found  
    ( const LHCb::MCParticle* particle  , 
      const PREDICATE&        predicate ) ;

    /** @fn found 
     *  trivial algorithm which returns true if 
     *  the exist at least one particle in the tree which satisfy 
     *  the certain criteria
     *
     *  @code 
     *  
     *  const LHCb::MCVertex* vx = ... ;
     *  
     *  MCCut lepton = "mu+" == MCABSID && PT > 2 * GeV ;
     * 
     *  const bool good = found ( vx , lepton ) ;
     * 
     *  @endcode 
     *
     *  @see LoKi::Types::MCCut
     *  @see LoKi::Cuts::MCABSID 
     *  @see LoKi::Cuts::MCPT 
     *  
     *  @param   vertex  pointer to MC vertex 
     *  @param   predicate criteria 
     *  @return  number of aprticles which satisfy the criteria
     *  @author Vanya BELYAEV ibelyaev@physics.syr.edu
     *  @date   2006-02-09
     */
     template <class PREDICATE>
     inline bool LoKi::McAlgs::found  
    ( const LHCb::MCVertex*   vertex    , 
      const PREDICATE&        predicate ) ;


 - LoKi/MCExtract.h
 
    A bit more efficient, but buch more elegant redesign/reimplementations
    of funtions  
        - LoKi::Extract::mcPatricles 
        - LoKi::Extract::getMCParticles 


! 2006-01-24 - Vanya BELYAEV  
 - New import: the basic functors and cuts for MCParticles/MCVertices 

! -----------------------------------------------------------------------------
! $Log: not supported by cvs2svn $
! Revision 1.5  2006/05/29 12:30:14  jpalac
! tagged as v1r1
!
! Revision 1.4  2006/05/29 12:29:26  jpalac
! tagged as v1r0
!
! Revision 1.3  2006/05/27 11:40:51  ibelyaev
!  add PrintMCDecay utilities
!
! Revision 1.2  2006/02/09 15:42:06  ibelyaev
!  add LoKi::MCAlgs namespace with algorithms
!
! Revision 1.1.1.1  2006/01/26 16:13:39  ibelyaev
! New Packaage: MC-dependent part of LoKi project 
! 
! -----------------------------------------------------------------------------
! The END 
! -----------------------------------------------------------------------------
