<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE gdd SYSTEM "gdd.dtd" >
<gdd>
  <package name="MCEvent">
  <class name="MCVeloLiteDigit" 
         id="4301"
         author="H. Schindler" 
         desc="Output of front-end chip for a single output channel."
         location="MC/VeloLite/Digits">
    <template name="KeyedObjectDict" t1="LHCb::VeloLiteChannelID"/>
    <location name="MCVeloLiteDigitLocation"   place="MC/VeloLite/Digits"/>
    <location name="MCPuVeloLiteDigitLocation" place="MC/VeloLite/PuDigits"/>
    <base name="KeyedObject&lt;LHCb::VeloLiteChannelID&gt;"/>
    &KeyedContainer;
    <import name="GaudiKernel/SmartRef"/>
    <import name="Kernel/VeloLiteChannelID"/>
    <import name="Event/MCHit"/>
    <import name="vector" std="TRUE"/>

    <constructor desc="Constructor with key" 
                 initList="KeyedObject&lt;LHCb::VeloLiteChannelID&gt;(key),
                           m_signal(0.0),
                           m_pedestal(0.0),
                           m_noise(0.0),
                           m_cmnoise(0.0)">
      <arg type="LHCb::VeloLiteChannelID" name="key" const="TRUE"/>
      <code/>                 
    </constructor> 

    <method name="channelID" 
            type="LHCb::VeloLiteChannelID" 
            desc="Combined sensor and strip number ID" 
            const="TRUE">
      <code>
        return key();
      </code>
    </method>

    <method name="sensor" 
            type="long" 
            desc="Sensor number" 
            const="TRUE">
      <code>
        return key().sensor();
      </code>
    </method>

    <method name="strip" 
            type="long" 
            desc="Strip number" 
            const="TRUE">
      <code>
        return key().strip();
      </code>
    </method>

    <attribute name="signal" 
               type="double" 
               desc="signal in units of electrons"/>
    <attribute name="pedestal" 
               type="double" 
               desc="pedestal in units of electrons"/>
    <attribute name="noise" 
               type="double" 
               desc="noise in units of electrons"/>
    <attribute name="cmnoise" 
               type="double" 
               desc="common mode noise in units of electrons"/>
    <attribute name="adc"
               type="int"
               desc="ADC value"/>

    <relation name="MCHits" 
              type="LHCb::MCHit" 
              desc="references to Monte Carlo hits contributing to this channel" 
              multiplicity="m"/>
 
    <attribute name="MCHitsCharge" 
               type="std::vector&lt;double&gt;" 
               desc="charge of Monte Carlo hit contributed to this channel"/>

    <method name="addToMCHits" 
            type="void" 
            argList="SmartRef&lt;LHCb::MCHit&gt; hit, double chg" 
            desc="Add MC hit and its deposited charge">
      <code>
        m_MCHits.push_back(hit);
        m_MCHitsCharge.push_back(chg);
      </code>
    </method>        

    <method name="mcHit" 
            type="SmartRef&lt;LHCb::MCHit&gt;" 
            argList="long num" 
            desc="retrieve MCHit reference" 
            const="TRUE">
      <code>
       return m_MCHits[num];
      </code>
    </method>

    <method name="mcHitCharge" 
            type="double" 
            argList="long num" 
            desc="retrieve deposited charge of MCHit" 
            const="TRUE">
      <code>
        return m_MCHitsCharge[num];
      </code>
    </method>

    <method name="setMCHitCharge" 
            type="void" 
            argList="long num, double chg" 
            desc="set deposited charge of MCHit">
      <code>
        m_MCHitsCharge[num] = chg;
      </code>
    </method>

    <method name="numberOfMCHits" 
            type="long" 
            desc="number of strips in cluster" 
            const="TRUE">
      <code>
        return mcHits().size();
      </code>
    </method>

    <method name="charge" 
            type="double" 
            desc="access total charge - in electrons"
            const="TRUE">
      <code>
        return signal() + noise() + pedestal() + cmnoise();
      </code>
    </method> 

  </class>
  </package>
</gdd>
