<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>
  <package name="L0Event">
    <import name="Kernel/CLHEPStreams"/>
    <class 
      author="Nicole Brun" 
      desc="L0 Decision" 
      id="6004" 
      location="/Event/Trig/L0/Decision" 
      name="L0DUReport" 
      templateList="FALSE" 
      templateVector="FALSE">
      <base name="DataObject"/>
      <attribute desc="L0 decision mask" name="typeL0Trig" type="int"/>
      <constructor argList="int typeL0Trig" desc="Normal constructor, with the decision" initList="m_typeL0Trig( typeL0Trig)">
        <code> </code>
      </constructor>
      <method const="TRUE" desc="Returns the decision as boolean" inline="TRUE" name="decision" type="bool">
	<code>return ( 0 != m_typeL0Trig);</code>
      </method>
      <method desc="Returns true if this trigger bit is set" name="isTrig" type="bool">
	<arg const="TRUE" name="trig" type="int"/>
	<code>return ( 0 != ( ( 1 &lt;&lt; trig) &amp; m_typeL0Trig) ); </code>
      </method>
      <method desc="Returns the type of decision as a string, for printing" name="typeL0TrigName" type="std::string">
	<code>
std::string mess = &quot;&quot;;
 if ( isTrig( L0Trig::Electron) ) { mess += &quot;Electron &quot;; }
 if ( isTrig( L0Trig::Photon) ) { mess += &quot;Photon &quot;; }
 if ( isTrig( L0Trig::Hadron ) ) { mess += &quot;Hadron &quot;; }
 if ( isTrig( L0Trig::Pi0Local ) ) { mess += &quot;Pi0Local &quot;; }
 if ( isTrig( L0Trig::Pi0Global ) ) { mess += &quot;Pi0Glogal &quot;; }
 if ( isTrig( L0Trig::Mu1 ) ) { mess += &quot;Mu1 &quot;; }
 if ( isTrig( L0Trig::SumMu ) ) { mess += &quot;SumMu &quot;; }
 if ( isTrig( L0Trig::Electron_down ) ) {mess += &quot;Electron_down &quot;; }
 if ( isTrig( L0Trig::Photon_down ) ) { mess += &quot;Photon_down &quot;;} 
 if ( isTrig( L0Trig::Hadron_down ) ) { mess += &quot;Hadron_down &quot;; }
 if ( isTrig( L0Trig::Pi0Local_down ) ) { mess += &quot;Pi0Local_down &quot;; }
 if ( isTrig( L0Trig::Pi0Global_down ) ) { mess += &quot;Pi0Global_down &quot;; }
 if ( isTrig( L0Trig::Mu1_down ) ) { mess += &quot;Mu1_down &quot;; }
 if ( isTrig( L0Trig::SumMu_down ) ) { mess += &quot;SumMu_down &quot;; }
 if ( &quot;&quot; == mess ) { mess = &quot;(no trigger)&quot;; }
 return ( &quot;L0DUReport = &quot; + mess );</code>
      </method>
      <import name="Event/L0Trig"/>
    </class>

    <namespace desc="Describes the L0 trigger bits" name="L0Trig">
      <enum desc="Trigger bits" name="Trig" value="Decis=0, Electron, Electron_down,Photon, Photon_down, Pi0Local, Pi0Local_down, Pi0Global, Pi0Global_down, Hadron,Hadron_down, Mu1, Mu1_down, SumMu, SumMu_down"/>
      <enum desc="Number of bits" name="MaxTrig" value="numberTrig = 32"/>
    </namespace>


  </package>
</gdd>
