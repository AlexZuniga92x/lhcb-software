
// from Gaudi
#include "GaudiKernel/AlgFactory.h"

// Local
#include "UnpackerBaseAlg.h"

using namespace DataPacking;

//=============================================================================
// Standard constructor, initializes variables
//=============================================================================
template < class PACKER >
Unpack<PACKER>::Unpack( const std::string& name,
                        ISvcLocator* pSvcLocator )
  : GaudiAlgorithm ( name , pSvcLocator )
{
  declareProperty( "InputName" , m_inputName  = PACKER::packedLocation()   );
  declareProperty( "OutputName", m_outputName = PACKER::unpackedLocation() );
}

template < class PACKER >
Unpack<PACKER>::~Unpack() { }

template < class PACKER >
StatusCode Unpack<PACKER>::initialize()
{
  const StatusCode sc = GaudiAlgorithm::initialize();
  if ( sc.isFailure() ) return sc;
  
  info() << "Input '" << rootInTES() << m_inputName 
         << "' Output '" << rootInTES() << m_outputName << "'" << endmsg;

  return sc;
}

template < class PACKER >
StatusCode Unpack<PACKER>::execute()
{
  // if input does not exist, just return
  if ( exist<typename PACKER::PackedDataVector>(m_inputName) )
  {
    // Load the input data
    typename PACKER::PackedDataVector * pdata =
      this->get<typename PACKER::PackedDataVector>(m_inputName);

    // Make the output unpacked data and give to Gaudi
    typename PACKER::DataVector * data = new typename PACKER::DataVector();
    this->put( data, m_outputName );

    // set the data version
    data->setVersion(pdata->version());
    
    // Packer
    static const PACKER packer;
    
    // Fill unpacked data
    packer.unpack( *pdata, *data );
  }
    
  return StatusCode::SUCCESS;
}
