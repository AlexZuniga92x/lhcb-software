
// from Gaudi
#include "GaudiKernel/AlgFactory.h"

// Local
#include "UnpackerBaseAlg.h"

using namespace DataPacking;

//=============================================================================
// Standard constructor, initializes variables
//=============================================================================
template < class PACKER >
Unpack<PACKER>::Unpack( const std::string& name,
                        ISvcLocator* pSvcLocator )
  : GaudiAlgorithm ( name , pSvcLocator )
{
  declareProperty( "InputName" , m_inputName  = PACKER::packedLocation()   );
  declareProperty( "OutputName", m_outputName = PACKER::unpackedLocation() );
}

template < class PACKER >
Unpack<PACKER>::~Unpack() { }

template < class PACKER >
StatusCode Unpack<PACKER>::initialize()
{
  const StatusCode sc = GaudiAlgorithm::initialize();
  if ( sc.isFailure() ) return sc;

  info() << "Input '" << rootInTES() << m_inputName
         << "' Output '" << rootInTES() << m_outputName << "'" << endmsg;

  return sc;
}

template < class PACKER >
StatusCode Unpack<PACKER>::execute()
{
  // Check to see if the output data already exists.
  // If it does silently return doing nothing
  DataObject * pObject(NULL);
  StatusCode test = eventSvc()->findObject( m_outputName, pObject );
  if ( test.isFailure() )
  {

    // if input does not exist, just return doing nothing again
    test = eventSvc()->findObject( m_inputName, pObject );
    if ( test.isSuccess() )
    {

      // Load the input data
      typename PACKER::PackedDataVector * pdata =
        this->get<typename PACKER::PackedDataVector>(m_inputName);

      // Make the output unpacked data
      typename PACKER::DataVector * data = new typename PACKER::DataVector();

      // give new container to Gaudi
      this->put( data, m_outputName );

      // set the data version
      data->setVersion(pdata->version());

      // Packer
      static const PACKER packer;

      // Fill unpacked data
      packer.unpack( *pdata, *data );

    } // input exists

  } // output exists

  return StatusCode::SUCCESS;
}
