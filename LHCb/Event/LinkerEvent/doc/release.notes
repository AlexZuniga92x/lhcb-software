!-----------------------------------------------------------------------------
! Package     : Event/LinkerEvent
! Responsible : Olivier Callot
! Purpose     : Implementation of the Linker package, to associate objects
!-----------------------------------------------------------------------------

! 2005-01-27 - Olivier Callot
 - Load the containers of SOURCE / TARGET only when needed in LinkedFrom,
   LinkedTo and AllLinks. This allows to use the relation between the SOURCE 
   key and the TARGET without loading the SOURCE container, useful for L1/HLT
   where the Velo/IT Cluster and OTTime are not available.

! 2005-01-26 - Olivier Callot
 - Protect against several entries from the same pair SOURCE-TARGET. The weight
   of the last entered relation is kept.

! 2005-01-24 - Olivier Callot
 - When requesting the relation to an int, all possible SOURCE with that key
   are matching the request, and there respective target is returned. This
   means that e.g. the relations ITDigit -> MCParticle allow also to get the
   relation ITChannelID -> MCParticle. 

! 2005-01-21 - Olivier Callot
 - Make 'const' most methods

!====================== LinkerEvent v1r5 2004-11-25 ==========================
! 2004-11-24 - Olivier Callot
 - Define types 'LRange' and 'LRangeIt' for the std::vector<TARGET*> and 
   corresponding const_iterator type in LinkedTo, std::vector<SOURCE*> and
   corresponding const_iterator in LinkedFrom.

 - Added methods 'LRangeIt beginRange()' and 'LRangeIt endRange()' to both
   LinkedTo and LinkedFrom, retrieving the begin and ned of the range. The
   range method should have been created first.

! 2004-11-23 - Olivier Callot
 - New methods of LinkedTo to access the relations with STL flavour :
   std::vector<TARGET*>& range( const SOURCE* source)
   It returns a vector of pointers to target, on which iteration can be used.
   Similarly, new method with the same name and an "int key " argument.

 - Similar method 'std::vector<SOURCE*> range( const TARGET* target )' in 
   LinkedFrom.

 - New method 'std::vector<int>& intRange( const TARGET* target)' in 
   LinkedFrom to return the list of keys a target is linked to. Returns only 
   pure keys, i.e. not created with an object but with an 'int' in 
   LinkerWithKey.

 - Add a 'void reset()' method to LinksByKey, to force the reseting of a 
   possibly existing link table when creating one. The default is to update
   it, i.e. add new links to existing ones.

!====================== LinkerEvent v1r4 2004-07-19 ==========================
! 2004-07-19 - Marco Cattaneo
 - Move to Gaudi v15 (use LHCbKernel v5r* in requirements)

!====================== LinkerEvent v1r3 2004-05-18 ==========================
! 2004-05-17 - Olivier Callot
 - Fix two bugs in LinkedFrom, reported by Philippe Charpentier:
   - Wrong variable type, due to a missing adaptation after a change.
   - Wrong handling of the nextSource() in case an entry was last in a list. 
     This was creating an infinite loop.

!====================== LinkerEvent v1r2 2004-02-05 ==========================
! 2004-02-05 - Olivier Callot
 - New wrapper class 'AllLinks' to return all links in the LinksByKey object.
   Templated with TARGET, SOURCE, TARGETCONTAINER, SOURCECONTAINER.
   Created as the other, i.e. 
   AllLinks<TARGET, SOURCE, TARGETCONTAINER, SOURCECONTAINER> test(
            eventSvc(), msgSvc(), name );
   SOURCECONTAINER defaults to KeyedContainer<SOURCE>
   TARGETCONTAINER defaults to KeyedContainer<TARGET>
   SOURCE defaults to KeyedObject<int>

   Methods: 
     bool notFound() : return true if the LinksByKey object was not found.
     TARGET* first() : return the target of the first relation
     TARGET* next()  : return the next target, NULL if no more targets.
     double weight() : return the weight of the current relation
     int    key()    : return the key of the SOURCE of the current relation
     SOURCE* source(): return the source of the relation.
                       If a relation was made with only a key, a NULL pointer
                       is returned in this case. key() will return the proper
                       value
   This new wrapper is intended to allow complete scanning of the whole 
   relation table.


! 2004-02-05 - Olivier Callot
 - New method 'notFound()' in LinkedTo and LinkedFrom to indicate if the 
   LinksByKey object was found or not.
 - In LinkerWithKey, the LinksByKey is searched for, and if it exist the new
   information is added to it.
 - If the msgSvc is null, no message is printed in LinedTo / LinkedFrom in case
   the LinksByKey is not found.

!====================== LinkerEvent v1r1 2004-01-27 ==========================
! 2004-01-27 - Marco Cattaneo
 - Add magic lines to the xml to produce lcg dictionary

! 2004-01-26 - Olivier Callot
 - Replace the std::map<int,int> by a std::vector<std::pair<int,int> > to
   access more efficiently the data. Insertion is done in such way to keep
   the vector sorted on the first memeber of the pair, and access is done by
   binary search, which is very fast. Reading and writing is just as a simple
   vector, and should be easily suported by POOL and fast in reading.

!====================== LinkerEvent v1r0 2004-01-16 ==========================
! 2004-01-15 - Olivier Callot
 - Fix several problems:
	  o Update the LinkMgr when reading the DataObject. New method resolveLinks
      of the LinksByKey object.
    o Use short for LinkMgr indices and float for the weight, to decrease the
      event size.
    o Use ClassID 400.
    o Accept names with the "/Event/" prefix in LinkerWithKey, LinedFrom and 
      LinkedTo. This is locally removed to create the DataObject name at 
      location "Link/"+argument.
	  o Add protection if the DataObject is not found in LinkedFrom/To
    o Remove private streamer for std::map    

! 2004-01-09 - Olivier Callot
 - Adapted to GaudiObjeDesc v6r* with January 2004's Gaudi/LHCb/...

! 2004-01-08 - Olivier Callot
 - Initial release of the package.

  This package contains an event class, storing LINK relations between keyed 
  objects in a generic way. It also contains three small templated classes to 
  manipulate easily these relations.

* LinkerWithKey< TARGET, SOURCE > link( eventSvc, msgSvc, name );
       create a linker object, in the execute method of an algorithm.
       At least the Target class should be specified. The source and the target
       whould be KeyedObject. The name is used to define the stored location of
       the link. It can be the location of the source container, as the prefix
       "MC/" is added to the name to define the location.
       Note that 'SOURCE' defaults to KeyedObject<int> if not specified.

    link.link( source, destination, weight=1. )
       link the source to the destination, optionaly with a weight.
       The sources can be in different containers, as can be the destinations.

    link.link( int, destination, weight=1. )
       link an int with a destination, with an optional weight. Useful to e.g.
       associate a MCParticle to a ChannelID.
       The destinations can be in different containers.

    link.setIncreasingWeight()
       Defines the increasing order for the weight, order in which they will be
       retrieved. The default is decreasing, i.e. highest weight first.
    link.setDecereasingWeight() 
       Re-inforce the default order.

* LinkedTo< TARGET, SOURCE, TARGETCONTAINER > link( eventSvc, msgSvc, name );
       Retrieve an existing link between SOURCE objects and TARGET objects. 
       If not specified, TARGETCONTAINER defaults to KeyedContainer<TARGET>.
       If not specified, SOURCE defaults to KeyedObject<int>.
       'name' should be as specified when crating the link.

    TARGET* = link.first( source );
       returns the first target associated to the source, or a NULL pointer.   

    TARGET* = link.first( int );
       returns the first target associated to the int, or a NULL pointer. This
       works only with links created with an int as argument. There is probably
       no reason to specify SOURCE in this case.

    TARGET* = link.next( );
       returns the next target associated to the previously specified source.
       Works for both specification of the initial source. A NULL pointer is 
       returned if no more targets.

    double w = link.weight()
       returns the weight associated to the last accessed link.

* LinkedFrom< SOURCE, TARGET, SOURCECONTAINER > link( eventSvc, msgSvc, name );
       Retrieve an existing link between SOURCE objects and TARGET objects. 
       Use this object to access the reverse relations, i.e. which SOURCE is
       related to a specified TARGET.
       If not specified, SOURCECONTAINER defaults to KeyedContainer<TARGET>.
       If not specified, TARGET defaults to KeyedObject<int>.
       'name' should be as specified when crating the link.

    SOURCE* = link.first( target );
       returns the first source associated to the specified target, or a NULL 
       pointer. One can NOT retrieve key associated to a target.

    SOURCE* = link.next( );
       returns the next source associated to the previously specified target.
       A NULL pointer is returned if no more sources.

    double w = link.weight()
       returns the weight associated to the last accessed link.


  Using the 'LinkedTo' (LinkedFrom is quite similar) is then very simple and
  clean. The only following lines are needed, no tool, nothing in the .h nor
  in option files.

  #include "Linker/LinkedTo.h"

  ... in execute()

  LinkedTo<MCParticle> link( eventSvc(), msgSvc(), 
                             VeloClusterLocation::Default );

  ... when needed

  MCParticle* part = link.first( myCluster );
  while ( NULL != part ) {
    ...
    double weight = link.weight();
    ...
    part = link.next();
  }