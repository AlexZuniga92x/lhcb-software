<!-- ****************************************************************
     * Particle                                                     *
     ****************************************************************-->

     <class
      author="Gloria Corti"
      desc="Physics Analysis Particle. A chosen hypotesis for a possible candidate particle."
      name="Particle"
      stdVectorTypeDef="TRUE"
      id="801"
     >
       <base name="KeyedObject&lt;int&gt;"/>
       <import name="CLHEP/Units/SystemOfUnits"/>
       <!-- the following line is necessary until using LHCbKernel-->
       <!-- import name="Event/HepMatrixStream"/-->
       <!-- the following line is necessary to not use LHCbEvent -->
       <import name="Event/ParticleID"/>
       <import name="Event/Vertex" soft="TRUE"/>
       <location
        name="User"
        place="/Event/Phys/User/Particles"
        />
       <location
        name="Production"
        place="/Event/Phys/Prod/Particles"
       />
       <constructor
        argList="Particle part"
        desc="Copy constructor, note that end vertex is cloned"
       />          
       <method
        name="clone"
        desc="Clone particle and related vertex"
        type="Particle*"
        const="TRUE"
       />
       <method
        desc="Assignment operator, note that the original vertex and protoParticle are kept"
        name="operator="
        type="Particle&amp;"
       >
         <arg name="orig" type="Particle" const='TRUE'/>
       </method>
       <attribute
        name="particleID"
        desc="PDG code"
        type="ParticleID"
       />
       <attribute
        name="confLevel"
        desc="Confidence Level of the particleID"
        type="double"
        init="1.0"
       />
       <attribute
        name="momentum"
        desc="Momentum four vector "
        type="HepLorentzVector"
        init="0.0, 0.0, 0.0, -1*GeV"
       />
       <attribute
        name="pointOnTrack"
        desc="Point at which the momentum is given in LHCb reference frame"
        type="HepPoint3D"
        init="0.0, 0.0, -1*km"
       />
       <attribute
        name="mass"
        desc="Measured Mass"
        type="double"
        init="-1.0"
       />
       <attribute
        name="massErr"
        desc="Error on measured mass"
        type="double"
        init="0.0"
       />
       <attribute
        name="momentumErr"
        desc="Covariance matrix relative to momentum (4x4)"
        type="HepSymMatrix"
        init="4, 0"
        setMeth="FALSE"
       />
       <method
        name="setMomentumErr"
        desc="Set covariance matrix relative to momentum (4x4) and propagate to (sx, sy, P)"
        type="void"
        argList="HepSymMatrix value"
       />        
       <attribute
        name="pointOnTrackErr"
        desc="Covariance matrix relative to point at which the momentum is given (3x3)"
        type="HepSymMatrix"
        init="3, 0"
       />
       <attribute
        name="posMomCorr"
        desc="Matrix with correlation errors between momemtum and pointOnTrack (momentum x point)"
        type="HepMatrix"
        init="4, 3, 0"
        setMeth="FALSE"
       />
       <method
        desc="Set matrix with correlation errors between momemtum and pointOnTrack (momentum x point)"
        name="setPosMomCorr"
        type="void"
        argList="HepMatrix value"
       />
       <attribute
        name="isResonance"
        desc="Describe if a particle flies or not (i.e. is a resonance) and its
product should be taken if used in a vertex"
        type="bool"
        init="false"
       />
       <relation
        name="endVertex"
        desc="Reference to end vertex (ex. decay)"
        type="Vertex"
       />
       <relation
        name="origin"
        desc="Reference to originator (ProtoParticle, MCParticle for smearing, or AxPartCandidate for Zebra DST). Void for composite particles"
        type="ContainedObject"
       />
       <!--method
        desc="Templated method to return actual pointer to originator class"
        name="originator"
        type="template &lt;class T&gt; T*"
       >
        <code>
if( !this->origin() ) {
  return NULL;
}
else {
  return from = dynamic_cast&lt;T*&gt;( this->origin() );
}
        </code>
       </method-->
       <method
        name="charge"
        const="TRUE"
        desc="Charge in units of +e (i.e. electron charge = -1.0), temporarly it works only for basic particles"
        type="double"
       />
       <method
        name="slopeX"
        const="TRUE"
        desc="Retrieve slopeX from momentum - line rapresentation of a Particle"
        type="double"
       >
         <code>return (momentum().px()/momentum().pz()); </code>
       </method>
       <method
        name="slopeY"
        const="TRUE"
        desc="Retrieve slopeY from momentum - line rapresentaion of a Particle"
        type="double"
       >
         <code>return (momentum().py()/momentum().pz()); </code>
       </method>
       <method
        name="pt"
        const="TRUE"
        desc="short cut for transerve momentum"
        type="double"
       >
         <code> return m_momentum.perp(); </code>
       </method>
       <method
        name="p"
        const="TRUE"
        desc="short cut for |P|" 
        type="double"
       > 
         <code> return m_momentum.vect().mag(); </code>
       </method>
       <attribute
        name="slopesMomErr"
        desc="error matrix on (slopeX, slopeY, P)"
        type="HepSymMatrix"
        init="3, 0"
        setMeth="FALSE"
       />
       <method
        name="setSlopesMomErr"
        desc="Set error matrix on (slopeX, slopeY, P) and propagate to momentum"
        type="void"
        argList="HepSymMatrix value"
       />
       <attribute
        name="posSlopesCorr"
        desc="Correlation matrix with errors between (slopeX, slopeY, P) and pointOnTrack"
        type="HepMatrix"
        init="3, 3, 0"
        setMeth="FALSE"
       />
       <method
        name="setPosSlopesCorr"
        desc="Set correlation matrix with errors between (slopeX, slopeY, P) and pointOnTrack and propagate to posMomCorr"
        type="void"
        argList="HepMatrix value"
       />
       <attribute
        name="desktop"
        desc="internal flag for location relative to physdesktop"
        type="int"
       />
    </class>
