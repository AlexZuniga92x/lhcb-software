<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE gdd SYSTEM 'gdd.dtd'>
<gdd>
  <package name='PhysEvent'>

    <class name='PhysEvent' id='801' templateList='FALSE' templateVector='FALSE'
           author='Gloria Corti' desc='Stores information of the physics event'>
      <base name='DataObject'/>
      <attribute name='classification' type='Classification' desc='Event classification'/>
    </class>

    <class name='VtxCandidate' id='850' author='Gloria Corti'
           desc='Vertex to be used in Physics Analysis. It represents a possible vertex between n particles. '>
      <base name='ContainedObject'/>
      <import name='AxPartCandidate' soft='TRUE'/>
      <attribute name='position' type='HepPoint3D' init='0.0,0.0,0.0' desc='position'/>
      <attribute name='chiSquare' type='double' desc='ChiSquare of vertex fit'/>
      <attribute name='covariance' type='HepSymMatrix' init='3,0' desc='Covariance matrix (3x3)'/>
      <attribute name='creatorID' type='long' desc='Creator ID/type 1=primary'/>
      <relation name='daughters' type='AxPartCandidate' multiplicity='M' desc='Reference to daughter particles'/>
    </class>

    <class name='PhysSelDecay' templateList='FALSE' templateVector='FALSE' author='Gloria Corti' 
           desc='Results of standards selection for a specific decay channel'>
      <enum name='selFlags' value='MCFlag=0, TRKFlag, PQUALFlag, SELFlag, AGRFlag, TAGFlag'
            desc='Bit position for results' access='PUBLIC'/>
      <method name='results' const='TRUE' desc='Retrieve all results'>
        <arg type='bool' name='mc' inout='BOTH'/>
        <arg type='bool' name='trk' inout='BOTH'/>
        <arg type='bool' name='pqual' inout='BOTH'/>
        <arg type='bool' name='sel' inout='BOTH'/>
        <arg type='bool' name='agr' inout='BOTH'/>
        <arg type='bool' name='tag' inout='BOTH'/>
      </method>
      <method name='setResults'
              argList='bool mc, bool trk, bool pqual, bool sel, bool agr, bool tag' 
              desc='Retrieve all results'/>
      <method name='decayIsInMCTree' type='bool' const='TRUE' desc='Return if decay is present in MC truth'>
        <code>return ( 0 != ( m_results &amp; (1&lt;&lt;MCFlag) ) );</code>
      </method>
      <method name='decayHasTrkRecon' type='bool' const='TRUE' 
              desc='Return if decay has end particles reconstructed'>
        <code>return ( 0 != ( m_results &amp; (1&lt;&lt;TRKFlag) ) );</code>
      </method>
      <method name='decayHasTrkPQual' type='bool' const='TRUE' 
              desc='Return if decay has end particles of physics quality'>
        <code>return ( 0 != ( m_results &amp; (1&lt;&lt;PQUALFlag) ) );</code>
      </method>
      <method name='decayIsSelected' type='bool' const='TRUE' 
              desc='Return if event satisfy the decay selection'>
        <code>return ( 0 != ( m_results &amp; (1&lt;&lt;SELFlag) ) );</code>
      </method>
     <method name='decaySelectedIsMC' type='bool' const='TRUE' 
             desc='Return if event satisfy the decay selection and one combination is the MC truth'>
         <code>return ( 0 != ( m_results &amp; (1&lt;&lt;AGRFlag) ) );</code>
      </method>
     <method name='decayIsFlavourTagged' type='bool' const='TRUE' 
             desc='Return if one selected combination is also flavour tagged'>
         <code>return ( 0 != (m_results &amp; (1&lt;&lt;TAGFlag) ) );</code>
      </method>
      <method name='setDecayIsInMCTree' type='void' 
              desc='Set if decay channel is present in MC truth'>
        <code>m_results |= 1&lt;&lt;MCFlag;</code>
      </method>
      <method name='setDecayHasTrkRecon' type='void' 
              desc='Set if decay channel has all end particles reconstructed'>
        <code>m_results |= 1&lt;&lt;TRKFlag;</code>
      </method>
      <method name='setDecayHasTrkPQual' type='void' 
              desc='Set if decay channel has all end particles reconstructed and of physics quality'>
        <code>m_results |= 1&lt;&lt;PQUALFlag;</code>
      </method>
      <method name='setDecayIsSelected' type='void' desc='Set if event satisfy the decay selection'>
        <code>m_results |= 1&lt;&lt;SELFlag;</code>
      </method>
      <method name='setDecaySelectedIsMC' type='void' 
              desc='Set if event satisfy the decay selection and one combination is the MC truth'>
        <code>m_results |= 1&lt;&lt;AGRFlag;</code>
      </method>
      <method name='setDecayIsFlavourTagged' type='void'
              desc='Set if one selected combination is also flavour tagged'>
        <code>m_results |= 1&lt;&lt;TAGFlag;</code>
      </method>
      <attribute name='decayID' type='long' desc='decayCode as used in Bookkeeping'/>
      <attribute name='results' type='long' desc='bitset with results of selection analysis'/>  
    </class>

    <class name='PhysSel' id='860' templateList='FALSE' templateVector='FALSE'
           author='Gloria Corti' desc='Stores the results of the decay selection package'>
      <base name='DataObject'/>
      <import name='PhysSelDecay'/>
      <constructor desc='std constructor'>
         <code>  setVersion(1);</code>
      </constructor>
      <destructor desc='std destructor'/>
      <method name='removePhysSelDecays' desc='Remove all PhysSelDecays entries'/>
      <method name='addPhysSelDecay' desc='Add single PhysSelDecay to map'>
        <arg type='std::string' name='name'/>
        <arg type='PhysSelDecay*' name='value'/>
      </method>        
      <method name='removePhysSelDecay' desc='Remove single PhysSelDecay entry from map via its name'>
        <arg type='std::string' name='name'/>
      </method>        
      <method name='whichPhysSelDecays' desc='Retrieve list of names for which a PhysSelDecay has been stored'>   
        <arg type='std::vector&lt;std::string&gt;' name='nameList'/>
      </method>
      <method name='retrievePhysSelDecay' desc='Retrieve the PhysSelDecay results for a decay channel by its name'>
        <arg type='std::string' name='name'/>
        <arg type='const PhysSelDecay*' name='value'/>
      </method>
      <method name='results' desc='Retrieve results as a set of true/false for a decay channel specifying its name'>
        <arg type='std::string' name='name'/>
        <arg type='bool' name='mc' inout='BOTH'/>
        <arg type='bool' name='trk' inout='BOTH'/>
        <arg type='bool' name='pqual' inout='BOTH'/>
        <arg type='bool' name='sel' inout='BOTH'/>
        <arg type='bool' name='agr' inout='BOTH'/>
        <arg type='bool' name='tag' inout='BOTH'/>
      </method>
      <method name='decayIsInMCTree' type='bool' desc='Return MC true result for a specific decay channel'>
        <arg type='std::string' name='name'/>
      </method> 
      <method name='decayHasTrkRecon' type='bool' desc='Return acceptance result for a specific decay channel'>
        <arg type='std::string' name='name'/>
      </method> 
      <method name='decayHasTrkPQual' type='bool' desc='Return physics quality result for a specific decay channel'>
        <arg type='std::string' name='name'/>
      </method> 
      <method name='decayIsSelected' type='bool' desc='Return selection result for a specific decay channel'>
        <arg type='std::string' name='name'/>
      </method> 
      <method name='decaySelectedIsMC' type='bool' desc='Return agreement results  for a specific decay channel'>
        <arg type='std::string' name='name'/>
      </method> 
      <method name='decayIsFlavourTagged' type='bool' desc='Return flavour tag results for a specific decay channel'> 
        <arg type='std::string' name='name'/>
      </method> 
      <method name='serialize' type='StreamBuffer&amp;' const='TRUE' desc='Serialize the object for writing'>
        <arg type='StreamBuffer' name='s'/>
      </method>
      <method name='serialize' type='StreamBuffer&amp;' desc='Serialize the object for reading'>  
        <arg type='StreamBuffer' name='s'/>
      </method>
      <method name='fillStream' type='std::ostream&amp;' const='TRUE' desc='Fill the ASCII output stream'>
        <arg type='std::ostream' name='s'/>
      </method>
      <attribute name='table' type='std::map&lt;std::string,PhysSelDecay*&gt;' setMeth='FALSE' getMeth='FALSE' desc='Map with decay selection results'/>
     </class>

  </package>
</gdd>
