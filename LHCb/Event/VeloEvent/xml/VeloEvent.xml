<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>
  <package name="VeloEvent">

    <class name="MCVeloFE" 
           id="4002"
           author="Chris Parkes" 
           desc="This class represents the output of the front-end chip and
contains information about the simulation of the silicon and FE chip response 
stored for a single silicon/output channel. Constructed from MCHits 
(i.e. GEANT deposits), MCVeloFE of previous events (spill over), noise 
(above a threshold)"
           location="MC/Velo/FE">
      <template name="KeyedObjectDict" t1="VeloChannelID"/>
      <location name="PuVeto" place="MC/Velo/PuFE" />
      <base name="KeyedObject&lt;VeloChannelID&gt;"/>
      &KeyedContainer;
      <import name="Kernel/VeloChannelID"/>
      <import name="Kernel/SerializeStl"/>
      <constructor desc="Constructor with key" 
	initList="KeyedObject&lt;VeloChannelID&gt;(key),
	m_addedSignal(0.0),
	m_addedPedestal(0.0),
	m_addedNoise(0.0),
	m_addedCMNoise(0.0)" >
	<arg type="VeloChannelID" name="key" const="TRUE"/>
	<code/>                 
      </constructor> 
      <method name="channelID" type="VeloChannelID" desc="combined sensor and strip number ID" const="TRUE">
                   <code>return key();</code>
           </method>
           <method name="sensor" type="long" desc="Sensor Number" const="TRUE">
                  <code>return key().sensor();</code>
           </method>
           <method name="strip" type="long" desc="Strip Number" const="TRUE">
                 <code>return key().strip();</code>
           </method>
           <attribute name="addedSignal" type="double" desc="Added Signal in units of electrons"/>
           <attribute name="addedPedestal" type="double" desc="pedestal added in Si/FE chip simulation in units of electrons"/>
           <attribute name="addedNoise" type="double" desc="noise added in Si/FE chip simulation in units of electrons"/>
           <attribute name="addedCMNoise" type="double" desc="common mode noise added in Si/FE chip simulation in units of electrons"/>

           <relation name="MCHits" type="MCHit" desc="References to Monte Carlo hits contributing to this channel" multiplicity="m"/>

           <attribute name="MCHitsCharge" type="std::vector&lt;double&gt;" desc="Charge of Monte Carlo hit contributed to this channel" />
 
           <method name="addToMCHits" type="void" argList="SmartRef&lt;MCHit&gt; hit, double chg" desc="add MC hit and its deposited charge">
                 <code>m_MCHits.push_back(hit);
                       m_MCHitsCharge.push_back(chg);
                       return;
                 </code>
           </method>
           
          <method name="mcHit" type="SmartRef&lt;MCHit&gt;" argList="long num" desc="retrieve MCHit reference" const="TRUE">
           <code>return m_MCHits[num];</code>
           </method>

          <method name="mcHitCharge" type="double" argList="long num" desc="retrieve deposited charge of MCHit" const="TRUE">
           <code>return m_MCHitsCharge[num];</code>
           </method>

          <method name="setMCHitCharge" type="void" argList="long num, double chg" desc="set deposited charge of MCHit" >
           <code>m_MCHitsCharge[num]=chg;
                 return;
           </code>
           </method>

           <method name="NumberOfMCHits" type="long" desc="number of strips in cluster" const="TRUE">
                 <code>return mcHits().size();</code>
           </method>



           <method name="charge" type="double"  desc="Access total charge - in electrons" const="TRUE">
	           <code>return addedSignal()+addedNoise()+addedPedestal()+addedCMNoise();</code>
           </method> 

    </class>

<!-- VeloDigit -->
<!-- Simpler version of the VeloFullFPGADigit to store the FPGA objects -->
<!--           -->

 <class
  author="Tomasz Szumlak"
  desc="VeloDigit is a temporary object to store the ADC value obtained during
        one of the FPGA processing stages. The object is much more simple than
        VeloFullFPGADigit (has only one data member)"
  name="VeloDigit"
  location="Raw/Velo/Digits"
  >
   <base name="KeyedObject&lt;VeloChannelID&gt;"/>
   &KeyedContainer;

  <constructor
   desc="constructor with key"
   initList="KeyedObject&lt;VeloChannelID&gt;(key),
   m_ADCValue(0)"
  >
   <arg type="VeloChannelID" name="key" const="TRUE"/>
  </constructor>
 
  <method 
   name="channelID" 
   type="VeloChannelID" 
   desc="combined sensor and strip number ID" 
   const="TRUE"
  >          
   <code>
    return key();
   </code>
  </method>

  <method 
   name="sensor" 
   type="long" 
   desc="Sensor Number" 
   const="TRUE"
  >
   <code>
    return key().sensor();
   </code>
  </method>
   
  <method
   name="strip"
   type="long"
   desc=" "
   const="TRUE"
  >
   <code>
    return key().strip();
   </code>
  </method>

  <attribute
   name="ADCValue"
   type="short int"
   desc=" "
   setMeth="TRUE"
   getMeth="TRUE"
  />     
 </class>


    <class name="VeloCluster" 
     id="4004"
     author="Chris Parkes" 
     desc="A cluster as on the DAQ output, after the data processor and 
     without applying any additional processing. It contains no simulation info."
	   location="Raw/Velo/Clusters">
           <import name="Kernel/SerializeStl"/>
           <import name="Kernel/VeloChannelID"/>
	   <template name="KeyedObjectDict" t1="VeloChannelID"/>
           <base name="KeyedObject&lt;VeloChannelID&gt;"/>
           &KeyedContainer;
	   <constructor desc="Constructor with key" 
                        initList="KeyedObject&lt;VeloChannelID&gt;(key),
				  m_sensorID(0),
				  m_stripSignals()">
             <arg type="VeloChannelID" name="key" const="TRUE"/>
             <code/>  
           </constructor> 
           <attribute name="sensorID" type="VeloChannelID" desc="Sensor number stored as VeloChannelID"/>
           <attribute name="stripSignals" type="std::vector&lt;std::pair&lt;long,double&gt; &gt;" desc="strip numbers and their signals"/>
           
           <method name="size" type="long" desc="number of strips in cluster" const="TRUE">
                 <code>return stripSignals().size();</code>
           </method>
           <method name="adcValue" type="double" argList="long num" desc="adc value of strips in cluster" const="TRUE">
                 <code>return stripSignals()[num].second;</code>
           </method>
           <method name="sensor" type="long" desc="Sensor number" const="TRUE">
                 <code>return m_sensorID.sensor();</code>
           </method>
           <method name="strip" type="long" argList="long num" desc="strip number of strip in cluster" const="TRUE">
                 <code>return stripSignals()[num].first;</code>
           </method>
           <method name="setSensor" type="void" argList="long num" desc="Set the sensor number (overrides default)">           
                 <code>m_sensorID.setSensor(num);</code>
           </method>
           <method name="channelID" type="VeloChannelID" argList="long num" desc="combined sensor and strip number ID (key) of strip in cluster" const="TRUE">
                   <code>return VeloChannelID(m_sensorID.sensor(),strip(num),m_sensorID.type());</code>
           </method>

    </class>

  </package>

</gdd>
