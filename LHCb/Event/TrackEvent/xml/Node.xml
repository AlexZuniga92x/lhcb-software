<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE gdd SYSTEM 'gdd.dtd'>
<gdd>
  <package name='TrackEvent'>

<!-- ==================== Node class definition ==================== -->

    <class
      name        = 'Node'
      author      = 'Jose Hernando, Eduardo Rodrigues'
      desc        = 'Node is a base class for classes linking track states to measurements.'
      serializers = 'FALSE'>

      <import name='gsl/gsl_math' />
      <import name='Event/State' />
      <import name='Event/Measurement' />
      <import name='Event/TrackParameters' />

      &StlPtrVector;

      <constructor 
	desc     = "Constructor from a State and a Measurement" 
	argList  = "State* state, Measurement* meas"
	initList = "m_measurement(meas), m_residual(0.0), m_errResidual(0.0), m_projectionMatrix()">
        <code>
          m_state = state->clone();
        </code>
      </constructor>
 
      <attribute
        type    = 'State*'
        name    = 'state'
        setMeth = 'FALSE'
        getMeth = 'FALSE'
        desc    = 'pointer to the state (owner)'
        access  = 'PROTECTED' />

      <attribute
        type    = 'Measurement*'
        name    = 'measurement'
        setMeth = 'FALSE'
        getMeth = 'FALSE'
        desc    = 'pointer to the measurement (not owner)'
        access  = 'PROTECTED' />

      <attribute
        type    = 'double'
        name    = 'residual'
        desc    = 'the residual value'
        access  = 'PROTECTED' />

      <attribute
        type    = 'double'
        name    = 'errResidual'
        desc    = 'the residual error'
        access  = 'PROTECTED' />

      <attribute
        type    = 'HepMatrix'
        name    = 'projectionMatrix'
        desc    = 'the projection matrix'
        access  = 'PROTECTED' />

      <method
        type    = 'void'
        name    = 'reset'
	virtual = 'TRUE'
        desc    = 'Clear the node before re-use'>
        <code>
  if (m_state != 0 ) delete m_state;
//  m_measurement = 0;
  m_state = 0;
  m_residual = 0.;
  m_errResidual = 0.;
        </code>
      </method>

      <method
        type    = 'double'
        name    = 'chi2'
        const   = 'TRUE'
        desc    = 'Retrieve the local chi^2 '>
        <code>
  if (    ( fabs(m_residual) > TrackParameters::lowTolerance)
       &amp;&amp; (m_errResidual > TrackParameters::lowTolerance)
     ) {
    return gsl_pow_2( m_residual/m_errResidual );
  }
  else {
    return 0.;
  }
        </code>
      </method>

      <method
        type    = 'Measurement &amp;'
        name    = 'measurement'
        desc    = 'Retrieve the reference to the measurement'>
        <code>
  return *m_measurement;
        </code>
      </method>

      <method
        type    = 'Measurement &amp;'
        name    = 'measurement'
        desc    = 'Retrieve const  the reference to the measurement'
        const   = 'TRUE'>
        <code>
  return *m_measurement;
        </code>
      </method>

      <method
        type    = 'State &amp;'
        name    = 'state'
        desc    = 'Retrieve the reference to the state'>
        <code>
  return *m_state;
        </code>
      </method>

      <method
        type    = 'State &amp;'
        name    = 'state'
        desc    = 'Retrieve const  the reference to the state'
        const   = 'TRUE'>
        <code>
  return *m_state;
        </code>
      </method>

      <method
        type    = 'Node*'
        name    = 'clone'
        desc    = 'Clone the Node'
        const   = 'TRUE'
        virtual = 'TRUE'>
        <code>
  Node* me = new Node(state().clone(), (Measurement*) &amp;measurement()); 
  me->setResidual(residual());
  me->setErrResidual(errResidual());
  return me;
        </code>
      </method>

      <method
        name    = 'setState'
        argList = 'State state'
        desc    = 'Update the state'>
        <code>
  delete m_state;
  m_state = state.clone();
        </code>
      </method>

      <method
	type    = 'double'
        name    = 'errResidual2'
	const   = 'TRUE'
        desc    = 'Return the error on the residual squared'>
        <code>
  return m_errResidual * m_errResidual;
        </code>
      </method>

      <method
	type    = 'bool'
        name    = 'hasMeasurement'
	const   = 'TRUE'
        desc    = 'Return true if this Node has a valid pointer to measurement'>
        <code>
          return ( m_measurement != 0 ) ;
        </code>
      </method>

      <method
        name    = 'removeMeasurement'
        desc    = 'Remove measurement from the node'>
        <code>
          m_measurement = 0 ;
        </code>
      </method>

      <method
        type    = 'double'
        name    = 'z'
        const   = 'TRUE'
        desc    = 'z position of Node'>
        <code>
          return m_state ? m_state->z() : 0.0 ;
        </code>
      </method>

    </class>

  </package>
</gdd>
