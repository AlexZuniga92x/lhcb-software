<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE gdd SYSTEM 'gdd.dtd'>
<gdd>
  <package name='TrackEvent'>

<!-- ==================== Node class definition ==================== -->

    <class
      name        = 'Node'
      author      = 'Jose Hernando, Eduardo Rodrigues'
      desc        = 'Node is a base class for classes linking track states to measurements.'
      serializers = 'FALSE'>

      <import name='Event/State' />
      <import name='Event/Measurement' />

      &StlPtrVector;

      <enum
        name    = 'Type'
        value   = 'Muon,OT,ST,TT,VeloR,VeloPhi'
        desc    = 'enumerator for the type of Node (XxxNode)'
        access  = 'PUBLIC' />

     <attribute
       type    = 'bitfield'
       name    = 'flags'
       desc    = 'the variety of node types'
       init    = '0'
       getMeth   = 'FALSE'
       setMeth = 'FALSE'
       access  = 'PROTECTED'>
       <bitfield
         name      = 'type'
         length    = '6'
         type      = 'Type'
         getMeth   = 'FALSE'
         setMeth   = 'TRUE'
         checkMeth = 'TRUE'
         desc      = 'node type' />
      </attribute>

      <attribute
        type    = 'Measurement*'
        name    = 'measurement'
        setMeth = 'FALSE'
        getMeth = 'FALSE'
        desc    = 'pointer to the measurement'
        access  = 'PROTECTED' />

      <attribute
        type    = 'State*'
        name    = 'state'
        setMeth = 'FALSE'
        getMeth = 'FALSE'
        desc    = 'pointer to the state'
        access  = 'PROTECTED' />

      <attribute
        type    = 'double'
        name    = 'residual'
        desc    = 'the residual value'
        access  = 'PROTECTED' />

      <attribute
        type    = 'double'
        name    = 'errResidual'
        desc    = 'the residual error'
        access  = 'PROTECTED' />

      <attribute
        type    = 'HepMatrix'
        name    = 'projectionMatrix'
        desc    = 'the projection matrix'
        access  = 'PROTECTED' />

      <destructor
        desc    = 'specific destructor'>
        <code>
  delete m_measurement;
  delete m_state;
        </code>
      </destructor>

      <method
        type    = 'double'
        name    = 'chi2'
        const   = 'TRUE'
        desc    = 'Retrieve the local chi2 '>
        <code>
  return (m_errResidual >0 ? m_residual/m_errResidual: 0);
        </code>
      </method>

      <method
        type    = 'Measurement &amp;'
        name    = 'measurement'
        desc    = 'Retrieve the reference to the measurement'>
        <code>
  return *m_measurement;
        </code>
      </method>

      <method
        type    = 'Measurement &amp;'
        name    = 'measurement'
        const   = 'TRUE'
        desc    = 'Retrieve the reference to the measurement'>
        <code>
  return *m_measurement;
        </code>
      </method>

      <method
        type    = 'State &amp;'
        name    = 'state'
        desc    = 'Retrieve the reference to the state'>
        <code>
  return *m_state;
        </code>
      </method>

      <method
        type    = 'State &amp;'
        name    = 'state'
        const   = 'TRUE'
        desc    = 'Retrieve the reference to the state'>
        <code>
  return *m_state;
        </code>
      </method>

      <method
        type    = 'Node*'
        name    = 'clone'
        desc    = 'Clone the Node'
        const   = 'TRUE'
        virtual = 'TRUE'>
        <code>
  Node* me = new Node(); *me = *this; return me;
        </code>
      </method>

      <method
        name    = 'setMeasurement'
        argList = 'Measurement meas'
        desc    = 'Update the measurement'>
        <code>
  m_measurement = meas.clone();
        </code>
      </method>

      <method
        name    = 'setState'
        argList = 'State state'
        desc    = 'Update the state'>
        <code>
  m_state = state.clone();
        </code>
      </method>

    </class>

  </package>
</gdd>
