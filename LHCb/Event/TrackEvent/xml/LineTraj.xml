<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE gdd SYSTEM 'gdd.dtd'>
<gdd>
  <package name='TrackEvent'>

<!-- ==================== LineTraj class definition ==================== -->

    <class
      name             = 'LineTraj'
      author           = 'Edwin Bos, Jeroen van Tilburg, Eduardo Rodrigues'
      desc             = 'Line trajectory created from a point and a first derivative vector.'
      id               = '10031'
      location         = 'Rec/Track/Traj/LineTraj'
      serializers      = 'FALSE'>

      <base name='Trajectory' />

      <import name='Event/Trajectory' />

      <constructor
        desc = 'Constructor from a point and a first derivative vector'>
        <arg type = 'const HepPoint3D' name = 'middle' />
        <arg type = 'const HepVector3D' name = 'deriv' />
        <code>
  m_pos    = middle;
  m_unitSlopes = deriv.unit();
        </code>
      </constructor>

      <attribute
        type    = 'HepPoint3D'
        name    = 'pos'
        desc    = 'a point on the line'
	setMeth = 'FALSE'
	getMeth = 'FALSE'
        access  = 'PROTECTED' />

      <attribute
        type    = 'HepVector3D'
        name    = 'unitSlopes'
        desc    = 'the derivatives vector of the line (normalized)'
	setMeth = 'FALSE'
	getMeth = 'FALSE'
        access  = 'PROTECTED' />

      <method
        name    = 'expansion'
        desc    = 'Create a parabolic approximation to the Trajectory'
        const   = 'TRUE'>
        <arg type='double' name='arclength' inout='BOTH' />
        <arg type='HepPoint3D' name='p' />
        <arg type='HepVector3D' name='dp' />
        <arg type='HepVector3D' name='ddp' />
        <code>
  p  = m_pos + arclength * m_unitSlopes;
  dp = m_unitSlopes;
  // presuming that ddp was already a zero vector!
       </code>
      </method>

      <method
        type    = 'const HepMatrix'
        name    = 'derivative'
        desc    = 'Retrieve the derivative of the parabolic approximation to the Trajectory'
        const   = 'TRUE'
        virtual = 'TRUE'>
        <arg type='const double' name='arclength' />
        <code>
  double vx  = m_unitSlopes[0];
  double vy  = m_unitSlopes[1];
  double vz  = m_unitSlopes[2];
  double svz = arclength * vz;

  HepMatrix deriv(3,5,0);
  deriv[0][0] = 1.0;
  deriv[0][2] = svz * ( 1. - vx*vx);
  deriv[0][3] = -vx * vy * svz;
  deriv[1][1] = 1.0;
  deriv[1][2] = deriv[0][3];
  deriv[1][3] = svz * ( 1. - vy*vy);
  deriv[2][2] = -vx * vz * svz;
  deriv[2][3] = -vy * vz * svz;

  return deriv;
       </code>
      </method>

    </class>

  </package>
</gdd>
