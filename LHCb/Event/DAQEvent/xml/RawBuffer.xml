<!-- ****************************************************************
     * RawBuffer                                                    *
     ****************************************************************-->
     <class 
      author="Helder Lopes"
      desc="Raw event buffer as read out by the DAQ after L1 trigger"
      name="RawBuffer"
      location="DAQ/RawBuffer"
      id="1001"
     >
       <enum
        desc="Define the bank types for Raw buffer"
        name="BankType"
        value="L0Calo=0, L0DU, PrsE, EcalE, HcalE, PrsTrig, EcalTrig, HcalTrig, Velo, Rich, TT, IT, OT, Muon"
        access="PUBLIC"
       />
       <base name="DataObject"/>
       &DataObject;
       <import name="Event/DAQTypes" soft="FALSE"/>
       <import name="GaudiKernel/GaudiException" soft="FALSE"/>
       <import name="raw_int" ignore="TRUE"/>
       <attribute
        desc="Initial amount of memory allocated in words(32 bit)"
        name="initialSize"
        type="long"
        init="10000"
        getMeth="FALSE"
        setMeth="FALSE"
       />
       <attribute
        desc="Current amount of memory allocated in words(32 bit)"
        name="allocatedSize"
        type="long"
        setMeth="FALSE"
       />
       <attribute
        desc="Current amount of memory filled with data in words(32 bit)"
        name="currentSize"
        type="long"
        setMeth="FALSE"
       />
       <attribute
        desc="Pointer to beggining of Raw buffer"
        name="buffer"
        type="raw_int*"
        dictalias="RawBufferPtr"
        setMeth="FALSE"
        getMeth="FALSE"
       />
       <attribute
        desc="Magic pattern to check integrity of data buffer"
        name="magic"
        type="raw_int"
	init="12345"
        dictalias="int"
        setMeth="FALSE"
       />
       <constructor
        desc="Constructor: Allocate inital amount of memory"
	initList="m_initialSize(100),m_currentSize(0),m_magic(12345)"
	>
         <code> m_buffer = new raw_int[m_initialSize];
	        m_allocatedSize = m_initialSize;
	 </code>
       </constructor>
       <constructor argList="long siz, raw_int* buff"
        desc="Constructor: Initialize with predefined storage"
	initList="m_initialSize(siz),m_allocatedSize(siz),m_currentSize(siz),m_buffer(buff),m_magic(12345)"
       >
       </constructor>
       <destructor
        desc="destructor: Deallocate memory"
	>
         <code> delete [] m_buffer; </code>
       </destructor>  
       <method
        desc="accessor method to retrieve pointer to beginning of buffer"
        name="buffer"
        type="raw_int *"
       >
         <code> return m_buffer; </code>
       </method>
       <method
        desc="Add a new bank of data to the buffer"
        name="addBank"
        type="void"
       >
       <arg type="int" name="sourceID" />
       <arg type="int" name="bankType"  />
       <arg type="raw_int *" name="data"    />
       <arg type="long" name="dataSize"  />
         <code> 
  if( raw_int(sourceID)&gt;65535 ) { // Maximum value for 16 bit field
      throw GaudiException( "sourceID value exceeds maximum (65535).",
                            "RawBufferException", StatusCode::FAILURE ); 
  }
  long bankSize = 3 + dataSize ;
  long evtSize=m_currentSize+bankSize;
  if(evtSize &gt; m_allocatedSize ) reallocate( evtSize );
  long size=m_currentSize;
  m_buffer[size++]=raw_int(bankSize);
  m_buffer[size++]=m_magic;
  m_buffer[size++]=(raw_int(sourceID)&lt;&lt;16)+raw_int(bankType);

  for( long i =0; i&lt;dataSize;++i) m_buffer[size++] = *(data++);
  m_currentSize+=bankSize;
         </code>
       </method>
       <method
        desc="Add a new bank of data to the buffer"
        name="addBank"
        type="void"
       >
       <arg type="int" name="sourceID" />
       <arg type="int" name="bankType"  />
       <arg type="std::vector &lt;raw_int&gt;" name="data"    />
         <code> 
  if( raw_int(sourceID)&gt;65535 ) { // Maximum value for 16 bit field
      throw GaudiException( "sourceID value exceeds maximum (65535).",
                            "RawBufferException", StatusCode::FAILURE );
  }
  long bankSize = 3 + data.size() ;
  long evtSize=m_currentSize+bankSize;
  if(evtSize &gt; m_allocatedSize ) reallocate( evtSize );
  long size=m_currentSize;
  m_buffer[size++]=raw_int(bankSize);
  m_buffer[size++]=m_magic;
  m_buffer[size++]=(raw_int(sourceID)&lt;&lt;16)+raw_int(bankType);

  for( std::vector&lt;raw_int&gt;::iterator i =data.begin(); i!=data.end();++i) m_buffer[size++] = *i;
  m_currentSize+=bankSize;
         </code>
       </method>
       <method
        desc="Reallocate buffer if more space is necessary"
        name="reallocate"
        type="void"
	access="PRIVATE"
       >
       <arg type="long" name="evtSize" />
         <code>
  long newSize = evtSize+m_initialSize;
  raw_int * newBuffer = new raw_int[newSize];
  for( long i =0; i&lt;m_currentSize;++i) newBuffer[i] = m_buffer[i];
  m_allocatedSize=newSize;
  delete [] m_buffer;
  m_buffer = newBuffer;
	  </code>
       </method>
       <method type="StreamBuffer&amp;" 
        name="serialize"
        virtual="TRUE" 
        const="TRUE"
        desc="special serializer for writing">
        <arg name = "s" type = "StreamBuffer" inout = "BOTH" /> 
       </method>
       <method type="StreamBuffer&amp;"
        name="serialize"
        virtual="TRUE"
        desc="special serializer for reading">
        <arg name = "s" type = "StreamBuffer" inout = "BOTH" /> 
       </method>
       <method
        type="std::ostream&amp;"
        name="fillStream"
        virtual="TRUE"
        const="TRUE"
        desc="special serializer to ASCII stream">
        <arg name = "s" type = "std::ostream" inout = "BOTH" /> 
       </method>
     </class>
