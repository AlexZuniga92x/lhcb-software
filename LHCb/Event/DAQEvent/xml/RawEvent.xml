<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>

  <package name="DAQEvent">
<!-- ****************************************************************
     * RawEvent                                                    *
     ****************************************************************-->
     <import name="Event/RawBuffer"/>
     <class 
      author="Helder Lopes"
      desc="Raw event"
      name="RawEvent"
      location="DAQ/RawEvent"
      id="1002"
      serializers="FALSE"
     >
       <base name="DataObject"/>
       &DataObject;
       <attribute
        desc="Map with RawBanks (values) for each bank type"
        name="eventMap"
        type="std::map&lt;int,std::vector&lt;RawBank&gt; &gt;"
        getMeth="FALSE"
        setMeth="FALSE"
       />
       <attribute
        desc="Pointer to beginning of event buffer"
        name="buffer"
        type="raw_int*"
        setMeth="FALSE"
       />
       <attribute
        desc="Length of event buffer in raw_int words"
        name="bufLen"
        type="unsigned int"
        setMeth="FALSE"
       />
       <constructor desc="Constructor from RawBuffer">
         <arg name="rawBuffer" type="RawBuffer"/>
       </constructor>
       <constructor desc="Constructor from buffer pointer and length (in raw_int words), for use online">
         <arg name="buffer" type="raw_int*"/>
         <arg name="length" type="unsigned int"/>
       </constructor>

       <method
        desc="accessor method to the vector of Raw banks for a given bank type"
        name="banks"
        type="const std::vector&lt;RawBank&gt; &amp; "
        argList="int bankType"     
       >
         <code> return (m_eventMap[bankType]); </code>
       </method>

       <method
        desc="method to decode buffer into banks, called from constructor"
        name="decode"
        type="void"
        access="PRIVATE"
       />
      </class>
  </package>
</gdd>
