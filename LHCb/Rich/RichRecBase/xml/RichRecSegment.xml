<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>
<package name="RichRecBase">

<!-- **************************************************************************
  * $Id: RichRecSegment.xml,v 1.7 2005-11-15 13:32:16 jonrob Exp $
  *****************************************************************************
  * XML-description of RichRecTrack class                                     *
  * author: Chris Jones   Christopher.Rob.Jones@cern.ch                       *
  * date:   2004-06-23                                                        *
  ***************************************************************************** -->

 
<class 
        author           = "Chris Jones   (Christopher.Rob.Jones@cern.ch)" 
        desc             = "Rich reconstruction object describing a continuous track segment in a single radiator" 
        id               = "12423" 
        keyedContTypeDef = "TRUE" 
        location         = "Rec/Rich/RecoEvent/Segments" 
        name             = "RichRecSegment" 
        stdVectorTypeDef = "TRUE" >

        <base name="KeyedObject&lt;int&gt;"/>
        &KeyedObject;
            
        <import name="RichKernel/RichParticleIDType"/>
        <import name="RichEvent/RichTrackSegment"/>
        <import name="RichRecBase/RichPhotonSpectra"/>
        <import name="RichKernel/RichHypoData"/>
        <import name="RichKernel/RichObjPtn"/>
        <import name="Kernel/RichSmartID"/>
        <import name="Event/RichRecRing"/>

        <location name="Offline" place="Rec/Rich/RecoEvent/OfflineSegments"/>
        <location name="HLT"     place="Rec/Rich/RecoEvent/HltSegments"/>

	<typedef 
		desc   = "type for internal storage for floating point data" 
		access = "PUBLIC" 
		def    = "FloatType" 
		type   = "float"
	/>
            
        <typedef 
                access = "PUBLIC" 
                def    = "PDGeomEffs" 
                desc   = "Data containers for each hypothesis" 
                type   = "std::map&lt;RichSmartID::KeyType,RichRecSegment::FloatType&gt;"
        />
            
        <typedef 
                access = "PUBLIC" 
                def    = "PDGeomEffsVector" 
                desc   = "Data containers for each hypothesis" 
                type   = "std::vector&lt; PDGeomEffs &gt;"
        />
            
        <constructor 
                desc     = "Constructor from segment information" 
                initList = "m_nEmittedPhotons(), m_nDetectablePhotons(),m_nSignalPhotons(), m_nScatteredPhotons(), m_emittedPhotonSpectra(enBins,minEn,maxEn), m_detectablePhotonSpectra(enBins,minEn,maxEn), m_signalPhotonSpectra(enBins,minEn,maxEn), m_geomEfficiencyPerPD(Rich::NParticleTypes, PDGeomEffs() ), m_geomEfficiency(), m_geomEfficiencyScat(), m_averageCKTheta(), m_ckThetaResolution(), m_averageCKRadiusLocal(), m_avSaturatedRadiusLocal(-999),m_trackSegment(segment), m_trackInfo(0), m_richRecTrack(pTrk), m_hypothesisRings()" >
                <arg const="FALSE"                 name="segment" type="RichTrackSegment*"  />
                <arg const="FALSE" inout="BYVALUE" name="pTrk"    type="RichRecTrack*"     />
                <arg const="TRUE"  inout="BYVALUE" name="enBins"  type="unsigned int"      />
                <arg const="TRUE"  inout="BYVALUE" name="minEn"   type="RichRecSegment::FloatType"  />
                <arg const="TRUE"  inout="BYVALUE" name="maxEn"   type="RichRecSegment::FloatType"  />
                <code/>
        </constructor>
            
        <method 
                name  = "setGeomEfficiency"
                const = "FALSE" 
                desc  = "Set the geometrical efficiency for a given particle type" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"  />
                <arg const="TRUE" inout="BYVALUE" name="eff"  type="RichRecSegment::FloatType"                />
                <code>
                        geomEfficiency().setData(type,eff);
                </code>
        </method>
            
        <method 
                name  = "setGeomEfficiencyScat"
                const = "FALSE" 
                desc  = "Set the scattered geometrical efficiency for a given particle type" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"   />
                <arg const="TRUE" inout="BYVALUE" name="eff"  type="RichRecSegment::FloatType"                 />
                <code>
                        geomEfficiencyScat().setData(type,eff);
                </code>
        </method>
            
        <method 
                name  = "setNEmittedPhotons"
                const = "FALSE" 
                desc  = "Set the number of emitted photons for a given particle type" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <arg const="TRUE" inout="BYVALUE" name="photons" type="RichRecSegment::FloatType"/>
                <code>
                        nEmittedPhotons().setData(type,photons);
                </code>
        </method>
            
        <method 
                name  = "setNDetectablePhotons"
                const = "FALSE" 
                desc  = "Set the number of detectable photons for a given particle type">
                <arg const="TRUE" inout="BYVALUE" name="type"    type="Rich::ParticleIDType" />
                <arg const="TRUE" inout="BYVALUE" name="photons" type="RichRecSegment::FloatType"               />
                <code>
                        nDetectablePhotons().setData(type,photons);
                </code>
        </method>

        <method 
                name  = "setNSignalPhotons"
                const = "FALSE" 
                desc  = "Set the number of signal photons for a given particle type" >
                <arg const="TRUE" inout="BYVALUE" name="type"    type="Rich::ParticleIDType" />
                <arg const="TRUE" inout="BYVALUE" name="photons" type="RichRecSegment::FloatType"               />
                <code>
                        nSignalPhotons().setData(type,photons);
                </code>
        </method>
            
        <method 
                name  = "setNScatteredPhotons"
                const = "FALSE" 
                desc  = "Set the number of scattered photons for a given particle type" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <arg const="TRUE" inout="BYVALUE" name="photons" type="RichRecSegment::FloatType"/>
                <code>
                        nScatteredPhotons().setData(type,photons);
                </code>
        </method>
            
        <method 
                const = "FALSE" 
                desc  = "Set the average Cherenkov angle for a given particle type"
                name  = "setAverageCKTheta">
                <arg const="TRUE" inout="BYVALUE" name="type"  type="Rich::ParticleIDType"  />
                <arg const="TRUE" inout="BYVALUE" name="angle" type="RichRecSegment::FloatType" />
                <code>
                        averageCKTheta().setData(type,angle);
                </code>
        </method>

        <method 
                const = "FALSE" 
                desc  = "Set the Cherenkov angle resolution for a given particle type"
                name  = "setCKThetaResolution">
                <arg const="TRUE" inout="BYVALUE" name="type"  type="Rich::ParticleIDType"  />
                <arg const="TRUE" inout="BYVALUE" name="reso" type="RichRecSegment::FloatType" />
                <code>
                        ckThetaResolution().setData(type,reso);
                </code>
        </method>

        <method 
                const = "FALSE" 
                desc  = "Set the average radius of the Cherenkov Ring on the HPD detector plane, in local coordinates, for given particle ID type" 
                name  = "setAverageCKRadiusLocal">
                <arg const="TRUE" inout="BYVALUE" name="type"  type="Rich::ParticleIDType"  />
                <arg const="TRUE" inout="BYVALUE" name="radius" type="RichRecSegment::FloatType"                />
                <code>
                        averageCKRadiusLocal().setData(type,radius);
                </code>
        </method>
            
        <method 
                desc = "Method to create the geometrical efficiencies per PD" 
                name = "addToGeomEfficiencyPerPD">
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <arg const="TRUE" inout="BYVALUE" name="pd" type="RichSmartID::KeyType"/>
                <arg const="TRUE" inout="BYVALUE" name="signal" type="RichRecSegment::FloatType"/>
                <code>
                        ((geomEfficiencyPerPD())[type])[pd] += signal;
                </code>
        </method>
            
        <method 
                const = "TRUE" 
                desc  = "Returns the number of emitted photons for a given particle type" 
                name  = "nEmittedPhotons" 
                type  = "RichRecSegment::FloatType">
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <code>
                        return (nEmittedPhotons())[type];
                </code>
        </method>
            
        <method 
                const = "TRUE" 
                desc  = "Returns the number of detectable photons for a given particle type" 
                name  = "nDetectablePhotons" 
                type  = "RichRecSegment::FloatType" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <code>
                        return (nDetectablePhotons())[type];
                </code>
        </method>
            
        <method 
                const = "TRUE" 
                desc  = "Returns the number of signal photons for a given particle type" 
                name  = "nSignalPhotons" 
                type  = "RichRecSegment::FloatType">
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <code>
                        return (nSignalPhotons())[type];
                </code>
        </method>
            
        <method 
                const = "TRUE" 
                desc  = "Returns the number of scattered photons for a given particle type" 
                name  = "nScatteredPhotons" 
                type  = "RichRecSegment::FloatType" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <code>  
                        return (nScatteredPhotons())[type];
                </code>
        </method>
            
        <method 
                const = "TRUE" 
                desc  = "Returns the number of photons for a given particle type" 
                name  = "nTotalObservablePhotons" 
                type  = "RichRecSegment::FloatType" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <code>
                        return ( (nSignalPhotons())[type] + (nScatteredPhotons())[type] );
                </code>
        </method>
            
        <method 
                const = "TRUE" 
                desc  = "Get the geometrical efficiency for a given particle type" 
                name  = "geomEfficiency" 
                type  = "RichRecSegment::FloatType" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <code>
                        return (geomEfficiency())[type];
                </code>
        </method>
            
        <method 
                const = "TRUE" 
                desc  = "Get the scattered geometrical efficiency for a given particle type" 
                name  = "geomEfficiencyScat" 
                type  = "RichRecSegment::FloatType" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <code>
                        return (geomEfficiencyScat())[type];
                </code>
        </method>
            
        <method 
                const = "TRUE" 
                desc  = "Get the average Cherenkov angle for a given particle type" 
                name  = "averageCKTheta" 
                type  = "RichRecSegment::FloatType" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <code>
                        return (averageCKTheta())[type];
                </code>
        </method>

        <method 
                const = "TRUE" 
                desc  = "Get the Cherenkov angle resolution for a given particle type" 
                name  = "ckThetaResolution" 
                type  = "RichRecSegment::FloatType" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <code>
                        return (ckThetaResolution())[type];
                </code>
        </method>

        <method 
                const = "TRUE" 
                desc  = "Get the average radius of the Cherenkov Ring on the HPD detector plane, in local coordinates, for given particle ID type" 
                name  = "averageCKRadiusLocal" 
                type  = "RichRecSegment::FloatType" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <code>
                        return (averageCKRadiusLocal())[type];
                </code>
        </method>
            
        <method 
                desc = "Returns the geometrical efficiency per PD for given hypothesis" 
                name = "geomEfficiencyPerPD" 
                type = "RichRecSegment::PDGeomEffs&amp;" >
                <arg const="TRUE" inout="BYVALUE" name="type" type="Rich::ParticleIDType"/>
                <code>
                        return (geomEfficiencyPerPD())[type];
                </code>
        </method>
            
        <method 
                desc = "Reset information to force recalculation" 
                name = "reset" 
                type = "void"
        />

        <method 
                desc  = "Retrieve const The number of emitted photons expected for each particle hypothesis" 
                name  = "nEmittedPhotons" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_nEmittedPhotons.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The number of emitted photons expected for each particle hypothesis" 
                name  = "nEmittedPhotons" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_nEmittedPhotons.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The number of emitted photons expected for each particle hypothesis" 
                name        = "nEmittedPhotons" 
                type        = "RichObjPtn&lt; RichHypoData&lt;RichRecSegment::FloatType&gt; &gt;"
        />
<!--
        <attribute 
                setMeth     = "FALSE"
                desc        = "The number of emitted photons expected for each particle hypothesis" 
                name        = "nEmittedPhotons" 
                init        = "0" 
                type        = "RichHypoData&lt;RichRecSegment::FloatType&gt;"
        />
-->

        <method 
                desc  = "Retrieve const The number of detectable emitted photons expected for each particle hypothesis" 
                name  = "nDetectablePhotons" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_nDetectablePhotons.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The number of detectable emitted photons expected for each particle hypothesis" 
                name  = "nDetectablePhotons" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_nDetectablePhotons.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The number of detectable emitted photons expected for each particle hypothesis" 
                name        = "nDetectablePhotons" 
                type        = "RichObjPtn&lt; RichHypoData&lt;RichRecSegment::FloatType&gt; &gt;"
        />
<!--
        <attribute  
                setMeth     = "FALSE"
                desc        = "The number of detectable emitted photons expected for each particle hypothesis" 
                name        = "nDetectablePhotons" 
                init        = "0" 
                type        = "RichHypoData&lt;RichRecSegment::FloatType&gt;"
        />
-->

        <method 
                desc  = "Retrieve const  The number of signal photons expected for each particle hypothesis" 
                name  = "nSignalPhotons" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_nSignalPhotons.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The number of signal photons expected for each particle hypothesis" 
                name  = "nSignalPhotons" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_nSignalPhotons.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The number of signal photons expected for each particle hypothesis" 
                name        = "nSignalPhotons" 
                type        = "RichObjPtn&lt; RichHypoData&lt;RichRecSegment::FloatType&gt; &gt;"
        />
<!--
        <attribute 
                setMeth     = "FALSE"
                desc        = "The number of signal photons expected for each particle hypothesis" 
                name        = "nSignalPhotons" 
                init        = "0" 
                type        = "RichHypoData&lt;RichRecSegment::FloatType&gt;"
        />
-->  

        <method 
                desc  = "Retrieve const The number of scattered photons expected for each particle hypothesis" 
                name  = "nScatteredPhotons" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_nScatteredPhotons.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The number of scattered photons expected for each particle hypothesis" 
                name  = "nScatteredPhotons" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_nScatteredPhotons.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The number of scattered photons expected for each particle hypothesis" 
                name        = "nScatteredPhotons" 
                type        = "RichObjPtn&lt; RichHypoData&lt;RichRecSegment::FloatType&gt; &gt;"
        />
<!--  
        <attribute 
                setMeth     = "FALSE"
                desc        = "The number of scattered photons expected for each particle hypothesis"
                name        = "nScatteredPhotons" 
                init        = "0" 
                type        = "RichHypoData&lt;RichRecSegment::FloatType&gt;"
        />
-->        

<!--
        <method 
                desc  = "Retrieve const The Photon energy spectra for emitted photons" 
                name  = "emittedPhotonSpectra" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_emittedPhotonSpectra.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The Photon energy spectra for emitted photons" 
                name  = "emittedPhotonSpectra" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_emittedPhotonSpectra.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The Photon energy spectra for emitted photons" 
                name        = "emittedPhotonSpectra" 
                type        = "RichObjPtn&lt; RichPhotonSpectra&lt;RichRecSegment::FloatType&gt; &gt;"
        />
-->  
        <attribute 
                desc        = "Photon energy spectra for emitted photons" 
                name        = "emittedPhotonSpectra" 
                type        = "RichPhotonSpectra&lt;RichRecSegment::FloatType&gt;"
        />        

<!--
        <method 
                desc  = "Retrieve const The Photon energy spectra for detectable photons" 
                name  = "detectablePhotonSpectra" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_detectablePhotonSpectra.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The Photon energy spectra for detectable photons" 
                name  = "detectablePhotonSpectra" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_detectablePhotonSpectra.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The Photon energy spectra for detectable photons" 
                name        = "detectablePhotonSpectra" 
                type        = "RichObjPtn&lt; RichPhotonSpectra&lt;RichRecSegment::FloatType&gt; &gt;"
        />
-->  
        <attribute 
                desc        = "Photon energy spectra for detectable photons" 
                name        = "detectablePhotonSpectra" 
                type        = "RichPhotonSpectra&lt;RichRecSegment::FloatType&gt;"
        />        

<!--
        <method 
                desc  = "Retrieve const The Photon energy spectra for signal photons" 
                name  = "signalPhotonSpectra" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_signalPhotonSpectra.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The Photon energy spectra for signal photons" 
                name  = "signalPhotonSpectra" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_signalPhotonSpectra.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The Photon energy spectra for signal photons" 
                name        = "signalPhotonSpectra" 
                type        = "RichObjPtn&lt; RichPhotonSpectra&lt;RichRecSegment::FloatType&gt; &gt;"
        />
-->  
        <attribute 
                desc        = "Photon energy spectra for signal photons" 
                name        = "signalPhotonSpectra" 
                type        = "RichPhotonSpectra&lt;RichRecSegment::FloatType&gt;"
        />
        
        <attribute 
                desc        = "The geometrical efficiency for a given hypothesis, binned per HPD" 
                init        = "Rich::NParticleTypes,PDGeomEffs() " 
                name        = "geomEfficiencyPerPD" 
                type        = "PDGeomEffsVector"
        />

        <method 
                desc  = "Retrieve const The Geometrical efficiencies for each particle hypothesis" 
                name  = "geomEfficiency" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_geomEfficiency.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The Geometrical efficiencies for each particle hypothesis" 
                name  = "geomEfficiency" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_geomEfficiency.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The Geometrical efficiencies for each particle hypothesis" 
                name        = "geomEfficiency" 
                type        = "RichObjPtn&lt; RichHypoData&lt;RichRecSegment::FloatType&gt; &gt;"
        />
<!--  
        <attribute 
                setMeth     = "FALSE"
                desc        = "Geometrical efficiencies for the each particle hypothesis" 
                name        = "geomEfficiency" 
                init        = "0" 
                type        = "RichHypoData&lt;RichRecSegment::FloatType&gt;"
        />
-->        

        <method 
                desc  = "Retrieve const The Geometrical efficiencies for scattered component for each particle hypothesis" 
                name  = "geomEfficiencyScat" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_geomEfficiencyScat.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The Geometrical efficiencies for scattered component for each particle hypothesis" 
                name  = "geomEfficiencyScat" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_geomEfficiencyScat.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The Geometrical efficiencies for scattered component for each particle hypothesis" 
                name        = "geomEfficiencyScat" 
                type        = "RichObjPtn&lt; RichHypoData&lt;RichRecSegment::FloatType&gt; &gt;"
        />
<!--  
        <attribute 
                desc        = "Geometrical efficiency for scattered component" 
                name        = "geomEfficiencyScat" 
                init        = "0" 
                type        = "RichHypoData&lt;RichRecSegment::FloatType&gt;"
        />
-->        

        <method 
                desc  = "Retrieve const The average Cherenkov theta angle for the given particle ID type" 
                name  = "averageCKTheta" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_averageCKTheta.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The average Cherenkov theta angle for the given particle ID type" 
                name  = "averageCKTheta" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_averageCKTheta.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The average Cherenkov theta angle for the given particle ID type" 
                name        = "averageCKTheta" 
                type        = "RichObjPtn&lt; RichHypoData&lt;RichRecSegment::FloatType&gt; &gt;"
        />
<!--  
        <attribute 
                desc        = "The average Cherenkov theta angle for the given particle ID type" 
                name        = "averageCKTheta" 
                init        = "0" 
                type        = "RichHypoData&lt;RichRecSegment::FloatType&gt;"
        />
-->

        <method 
                desc  = "Retrieve const The Cherenkov theta angle resolution for the given particle ID type" 
                name  = "ckThetaResolution" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_ckThetaResolution.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The Cherenkov theta angle resolution for the given particle ID type" 
                name  = "ckThetaResolution" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_ckThetaResolution.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The Cherenkov theta angle resolution for the given particle ID type" 
                name        = "ckThetaResolution" 
                type        = "RichObjPtn&lt; RichHypoData&lt;RichRecSegment::FloatType&gt; &gt;"
        />
<!--  
        <attribute 
                desc        = "The Cherenkov theta angle resolution for the given particle ID type" 
                name        = "ckThetaResolution" 
                init        = "0" 
                type        = "RichHypoData&lt;RichRecSegment::FloatType&gt;"
        />
-->

        <method 
                desc  = "Retrieve const The average radius of the Cherenkov Ring on the HPD detector plane, in local coordinates, for given particle ID type" 
                name  = "averageCKRadiusLocal" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_averageCKRadiusLocal.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The average radius of the Cherenkov Ring on the HPD detector plane, in local coordinates, for given particle ID type" 
                name  = "averageCKRadiusLocal" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecSegment::FloatType&gt; &amp;" >
                <code> return *m_averageCKRadiusLocal.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The average radius of the Cherenkov Ring on the HPD detector plane, in local coordinates, for given particle ID type" 
                name        = "averageCKRadiusLocal" 
                type        = "RichObjPtn&lt; RichHypoData&lt;RichRecSegment::FloatType&gt; &gt;"
        />
<!--  
        <attribute 
                desc        = "The average radius of the Cherenkov Ring on the HPD detector plane, in local coordinates, for given particle ID type" 
                name        = "averageCKRadiusLocal" 
                init        = "0" 
                type        = "RichHypoData&lt;RichRecSegment::FloatType&gt;"
        />
-->

        <attribute 
                desc        = "Average radius in local coordinates of Saturated Cherenkov Cone for this segment" 
                name        = "avSaturatedRadiusLocal" 
                init        = "-999" 
                type        = "RichRecSegment::FloatType"
        />
           
         <method 
                desc  = "Retrieve const The Track segment, the passage of a track through a Rich detector" 
                name  = "trackSegment" 
                const = "TRUE" 
                type  = "const RichTrackSegment &amp;" >
                <code> return *m_trackSegment.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The Track segment, the passage of a track through a Rich detector" 
                name  = "trackSegment" 
                const = "FALSE" 
                type  = "RichTrackSegment &amp;" >
                <code> return *m_trackSegment.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "Track segment, the passage of a track through a Rich detector" 
                name        = "trackSegment" 
                type        = "RichObjPtn&lt; RichTrackSegment &gt;"
        />
<!--
        <attribute 
                desc        = "Track segment, the passage of a track through a Rich detector" 
                name        = "trackSegment" 
                type        = "RichTrackSegment"
        />
-->
        
        <attribute
                desc        = "Ray traced PD panel impact point in global coordinates" 
                name        = "pdPanelHitPoint" 
                type        = "HepPoint3D"
        />
            
        <attribute 
                desc        = "Ray traced PD panel impact point in local coordinates" 
                name        = "pdPanelHitPointLocal" 
                type        = "HepPoint3D"
        />

        <relation 
                desc         = "Smart Reference to associated RichRecTrack" 
                name         = "richRecTrackSmartRef" 
                type         = "RichRecTrack"
                multiplicity = "1"
        />
            
        <attribute 
                desc        = "General information flags" 
                init        = "0" 
                name        = "trackInfo" 
                type        = "bitfield">
                <bitfield desc="Photons observable in x&gt;0 region of detector"    length="1" name="photonsInXPlus"  />
                <bitfield desc="Photons observable in x&lt;0 region of detector"    length="1" name="photonsInXMinus" />
                <bitfield desc="Photons observable in y&gt;0 region of detector"    length="1" name="photonsInYPlus"  />
                <bitfield desc="Photons observable in y&lt;0 region of detector"    length="1" name="photonsInYMinus" />
                <bitfield desc="Have all possible photon candidates have been made" length="1" name="allPhotonsDone"  />
        </attribute>

        <typedef 
                access       = "PUBLIC" 
                def          = "Pixels" 
                desc         = "Container type for RichRecPixels" 
                type         = "std::vector&lt;RichRecPixel*&gt;"
        />

        <typedef 
                access       = "PUBLIC" 
                def          = "Photons" 
                desc         = "Container type for RichRecPhotons" 
                type         = "std::vector&lt;RichRecPhoton*&gt;"
        />
            
        <attribute 
                compression  = "FALSE" 
                desc         = "Associated RichRecTrack" 
                init         = "0" 
                name         = "richRecTrack" 
                serialize    = "FALSE" 
                type         = "RichRecTrack*"
        />
            
        <attribute 
                access       = "PRIVATE" 
                desc         = "Associated RichRecPixels" 
                name         = "richRecPixels" 
                serialize    = "FALSE" 
                type         = "Pixels"
        />
           
        <method 
                desc         = "Add to associated RichRecPixels" 
                inline       = "TRUE" 
                name         = "addToRichRecPixels" >
                <arg const="FALSE" name="pixel" type="RichRecPixel*"/>
                <code>
                        m_richRecPixels.push_back(pixel);
                </code>
        </method>
            
        <attribute 
                access       = "PRIVATE" 
                desc         = "Associated RichRecPhotons" 
                name         = "richRecPhotons" 
                serialize    = "FALSE" 
                type         = "Photons"
        />
        
        <method 
                desc         = "Add to associated RichRecPhotons" 
                inline       = "TRUE" 
                name         = "addToRichRecPhotons" >
                <arg const="FALSE" name="photon" type="RichRecPhoton*"/>
                <code>
                        m_richRecPhotons.push_back(photon);
                </code>
        </method>

        <method 
                desc  = "Retrieve const The Expected Rings for each mass hypothesis" 
                name  = "hypothesisRings" 
                const = "TRUE" 
                type  = "const RichHypoData&lt;RichRecRing*&gt; &amp;" >
                <code> return *m_hypothesisRings.object(); </code>
        </method>
        <method 
                desc  = "Retrieve The Expected Rings for each mass hypothesis" 
                name  = "hypothesisRings" 
                const = "FALSE" 
                type  = "RichHypoData&lt;RichRecRing*&gt; &amp;" >
                <code> return *m_hypothesisRings.object(); </code>
        </method>
        <attribute 
                setMeth     = "FALSE"
                getMeth     = "FALSE"
                desc        = "The Expected Rings for each mass hypothesis" 
                name        = "hypothesisRings" 
                type        = "RichObjPtn&lt; RichHypoData&lt;RichRecRing*&gt; &gt;"
        />
<!--  
        <attribute 
                array       = "FALSE" 
                compression = "TRUE" 
                desc        = "Expected Rings for each mass hypothesis" 
                init        = "NULL" 
                name        = "hypothesisRings" 
                type        = "RichHypoData&lt;RichRecRing*&gt;"
        />
-->

</class>

</package>
</gdd>
