# $Id: README,v 1.12 2001-12-17 20:12:16 andreav Exp $

Two examples are distributed in this package: a test of condition data 
stored in flat XML files, and a test of condition data stored in the CondDB.

The CondDB example requires package DetCond, which depends on Objectivity
and only works under Linux, as HepODBMS is not supported under Windows.
The XML example does not require DetCond and works also under Windows.

Three main job options exist in the options directory:
 1) testXml.opts    -> test of condition data stored in XML files  (Linux/Win)
2a) fillCondDB.opts -> populate the CondDB used in the CondDB test (Linux only)
2b) testCondDB.opts -> test of condition data stored in the CondDB (Linux only)

By default, the MsgSvc level is set to 1 (INFO) in all three job options files.
To see more verbose comments, set it to 2 (DEBUG) or 3 (VERBOSE).
Standard outputs for INFO and VERBOSE modes are included in the release.

The detector elements used in the tests are the following:
> Ecal is used to test all kinds of conditions in XML files
> LHCb and Hcal are used to test slow control data in the CondDB
> LHCb is used to test geometry data in the CondDB

------------------------------------------------------------------------------
Packages needed to run DetCondExample v2r0
------------------------------------------------------------------------------

For general information on configuring the Gaudi environment, 
please refer to the Gaudi Web pages. 
Most of the following refers to the Linux environment. 
Only at the end a few words about Windows are given.
Version v1r10p20011126 or higher of CMT is needed for a proper setup.

It is assumed that CMTPATH contains the release directory in ${HOME}/newmycmt,
i.e. ~/newmycmt. Put the following line in .cshrc to achieve this:
        setenv CMTPATH ${HOME}/newmycmt
Check the result with
        printenv CMTPATH

To run the detector condition example, you need the following three packages:
        cd ~/newmycmt
        getpack CONDDB             v3r02p1 
        getpack Det/DetCond        v2r0
        getpack Ex/DetCondExample  v2r0

------------------------------------------------------------------------------
How to setup the environment and link DetCondExample on lxplus
------------------------------------------------------------------------------

# NB: Do NOT source LHCXX setup scripts in your .cshrc!
# The configuration of LHCXX stuff is handled for you by CMT scripts!

# I suggest to build all packages in debug mode, i.e. using tag $CMTDEB.
# Specify the tag by 'source setup.csh -tag=$CMTDEB' and 'gmake tag=$CMTDEB'.
# [NB Do not change CMTCONFIG to $CMTDEB! This would cause many troubles!]

# Go to your release directory
cd ~/newmycmt

# Go to the cmt directory
cd Ex/DetCondExample/v2r0/cmt

# Setup the environment
# This also starts the lockserver and AMSserver and installs the databases
# [NB The schema for the example's DB will be updated after compiling CONDDB]
# [NB Type 'unsetenv LD_LIBRARY_PATH' first if you try various CMTCONFIG's  ]
source ../cmt/setup.csh -tag=$CMTDEB

# Remove old makefiles and dependencies
cmt broadcast -select=mycmt '/bin/rm -f *make*'

# Compile and link
cmt broadcast -select=mycmt gmake tag=$CMTDEB

------------------------------------------------------------------------------
How to run DetCondExample on lxplus (without debugger)
------------------------------------------------------------------------------

# Go to your release directory
cd ~/newmycmt

# Go to the working directory
cd Ex/DetCondExample/v2r0/options

============
(1) testXml
============

# Run the application
../$CMTDEB/DetCondExample.exe testXml.opts

# Run the application and compare the output to the standard one
/bin/rm -f log.testXml
../$CMTDEB/DetCondExample.exe testXml.opts >& log.testXml
diff log.testXml ../job

# If you used the VERBOSE mode:
diff log.testXml ../job/log.testXml.verbose

================
(2a) fillCondDB
================

# Set the debug level for the CONDDB library. Possible debug levels are:
#    none: no message is printed (default)
#    prof: only print messages which do not disturb profiling measurements
#    user: only print messages of "general" interest
#    devl: also print messages of interest only for the package developer
#    more: more paranoid messages are printed 
#    all:  any debug message will be printed
setenv COND_DB_DEBUG none

# Run the application
../$CMTDEB/DetCondExample.exe fillCondDB.opts

# Run the application and compare the output to the standard one
# The database is only filled if empty: the first output is longer
# Be sure to start with a new database if you want to compare the first output
source ../cmt/cleanupDB.csh
source ../cmt/setupDB.csh -tag=$CMTDEB
/bin/rm -f log.fillCondDB_1
/bin/rm -f log.fillCondDB_2
../$CMTDEB/DetCondExample.exe fillCondDB.opts >& log.fillCondDB_1
../$CMTDEB/DetCondExample.exe fillCondDB.opts >& log.fillCondDB_2
diff log.fillCondDB_1 ../job
diff log.fillCondDB_2 ../job

# If you used the VERBOSE mode:
diff log.fillCondDB_1 ../job/log.fillCondDB_1.verbose
diff log.fillCondDB_2 ../job/log.fillCondDB_2.verbose

================
(2b) testCondDB
================

# Set the debug level for the CONDDB library. Possible debug levels are:
#    none: no message is printed (default)
#    prof: only print messages which do not disturb profiling measurements
#    user: only print messages of "general" interest
#    devl: also print messages of interest only for the package developer
#    more: more paranoid messages are printed 
#    all:  any debug message will be printed
setenv COND_DB_DEBUG none

# Run the application
../$CMTDEB/DetCondExample.exe testCondDB.opts

# Run the application and compare the output to the standard one
# Be sure to have filled the database ueing fillCondDB.opts first!
/bin/rm -f log.testCondDB
../$CMTDEB/DetCondExample.exe testCondDB.opts >& log.testCondDB
diff log.testCondDB ../job

# If you used the VERBOSE mode:
diff log.testCondDB ../job/log.testCondDB.verbose

------------------------------------------------------------------------------
How to run DetCondExample on lxplus with the debugger
------------------------------------------------------------------------------

# Go to your release directory
cd ~/newmycmt

# Go to the working directory
cd Ex/DetCondExample/v2r0/options

# To use the debugger, link one of the three option files to job.opts
/bin/rm -f job.opts
ln -sf xxx.opts job.opts

# Debug the application using gdb
# (NB gdb "run" executes .cshrc: you can NOT change LD_LIBRARY_PATH in .cshrc!)
# (NB you must use /usr/local/bin/gdb if you use DetDesc: see news 
#     http://home.cern.ch/~majordom/news/gaudi-developers/msg00165.html)
/usr/local/bin/gdb ../$CMTDEB/DetCondExample.exe
# DetCondExample.gdb sets a few useful breakpoints
(gdb) source DetCondExample.gdb
# The same can be achieved by typying the following
/usr/local/bin/gdb ../$CMTDEB/DetCondExample.exe -x DetCondExample.gdb

# Debug the application using gdb inside ddd (recommended!)
ddd --tty --debugger "/usr/local/bin/gdb ../$CMTDEB/DetCondExample.exe"
(gdb) source DetCondExample.gdb
# The same can be achieved by typing the following
ddd --tty --debugger "/usr/local/bin/gdb ../$CMTDEB/DetCondExample.exe -x DetCondExample.gdb"

------------------------------------------------------------------------------
How to browse the database using the GUIbrowser on lxplus
------------------------------------------------------------------------------

# NB The GUIbrowser only works with the new compiler and Objectivity 6.1!

# If you want to check that Java is correctly installed:
###cd /afs/cern.ch/sw/java/i386_redhat61/jdk/sun-1.3.0/demo/jfc/Java2D
###java -jar Java2Demo.jar

# Give the path to your database
setenv OO_FD_BOOT "${DETCONDEXAMPLE_BOOTDIR}/${DETCONDEXAMPLE_BOOTFILE}"

# Execute the browser
# For instance, open ConditionsDB->LHCb->Slow->temperature, then go to Graph,
# select the folder again, give -20 and +80 as boundaries and look at the data!
java -jar  $LHCXX_DIR/ConditionsDB/GUIbrowser_0.3.0.2/interface1.jar

# Show the browser line options
java -jar  $LHCXX_DIR/ConditionsDB/GUIbrowser_0.3.0.2/interface1.jar -help

------------------------------------------------------------------------------
How to cleanup the environment on lxplus
------------------------------------------------------------------------------

# Go to your release directory
cd ~/newmycmt

# Go to the cmt directory
cd Ex/DetCondExample/v2r0/cmt

# Remove old makefiles and dependencies
cmt broadcast -select=mycmt '/bin/rm -f *make*'

# Remove all objects and binaries if needed
cmt broadcast -select=mycmt '/bin/rm -rf ../$CMTDEB'

# Cleanup the environment (recommended before logout)
# This also deletes the databases and kills the AMSserver and lockserver
# [NB If AMS and lock servers are still running, you will be stuck at logout]
source ../cmt/cleanup.csh -tag=$CMTDEB

------------------------------------------------------------------------------
How to setup the environment and run DetCondExample under Windows
------------------------------------------------------------------------------

# I assume in the following that your release directory is H:\newmycmt
# The following describes how to build and run the example from the DOS prompt
# Go to your release directory
cd H:\newmycmt

# Go to the cmt directory
cd Ex\DetCondExample\v2r0\cmt

# Setup the environment
setup

# Compile and link
cmt broadcast -select=newmycmt make

# Run the application using the "run" script
# This sets PATH = %PATH%;%LD_LIBRARY_PATH% to give the path to .dll files
run DetCondExample testXml.opts

==============================================================================

