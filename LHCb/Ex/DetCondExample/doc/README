# $Id: README,v 1.30 2002-11-26 18:03:25 andreav Exp $

Three examples are distributed in this package: a test of condition data 
stored in flat XML files, a test of condition data stored in the CondDB,
and a test of the speed for writing condition data in the CondDB.

The XML example does not require DetCond and works in the same way
under Windows and under Linux (RedHat6.1 or RedHat7.3).

The CondDB examples require package DetCond. 
Under Linux RedHat6.1, DetCond uses CONDDB (based on Objectivity).
Under Windows and Linux RedHat7.3, DetCond uses CondDBOracle (based on Oracle).
The Oracle implementation is based on Oracle 9i using the OCCI library.

Four main job options exist in the options directory:
 1) testXml.opts    -> test of condition data stored in XML files (NO Ora/Objy)
2a) fillCondDB.opts -> populate the CondDB used in the CondDB test (Ora/Objy)
2b) testCondDB.opts -> test of condition data stored in the CondDB (Ora/Objy)
 3) daqCondDB.opts  -> test speed to write data in the CondDB (Ora/Objy)

By default, the MsgSvc level is set to 3 (VERBOSE) for the first 3 examples.
To see less verbose comments, set it to 2 (DEBUG) or 1 (INFO).
Standard outputs for the VERBOSE mode are included in the release.
By default, the MsgSvc level is set to 1 in the last job options file.

The detector elements used in the tests are the following:
> Ecal is used to test all kinds of conditions in XML files
> LHCb and Hcal are used to test slow control data in the CondDB
> LHCb is used to test geometry data in the CondDB

------------------------------------------------------------------------------
Packages needed to run DetCondExample v4r1
------------------------------------------------------------------------------

For general information on configuring the Gaudi environment, 
please refer to the Gaudi Web pages. 

Most of the following refers to Linux RH6.1/RH7.3 (lxplus/lxplus7 at CERN).
You must use csh/tcsh as some scripts for zsh/bash are missing.
The Windows environment is presented in a shorter way at the end of this file.

Version v1r12p20020412 of CMT is assumed as the default on all platforms.

It is assumed that CMTPATH contains the release directory in ${HOME}/newmycmt
(i.e. ~/newmycmt), as well as Gaudi v11r2 and LHCb v11r2. 
Put the following line in .cshrc to achieve this:
    setenv CMTPATH ${HOME}/newmycmt
    setenv CMTPATH ${CMTPATH}:${GAUDISOFT}/GAUDI_v11r2
    setenv CMTPATH ${CMTPATH}:${LHCBSOFT}/project/LHCB/LHCB_v11r2
Check the result with
    printenv CMTPATH

To run the detector condition example, you need the following packages,
as well as the standard Gaudi packages from the release area of Gaudi v11.
    cd ~/newmycmt
    getpack Det/DetCond        v4r1     head
    getpack Ex/DetCondExample  v4r1     head
    getpack Det/DetDesc        v11r2
Under Linux (RedHat6.1)
    getpack CONDDB             v3r02p3  head
Under Windows and Linux (RedHat7.3)
    getpack Det/CondDBOracle   v4r16    head

It may be that the CONDDB you get is not the latest version yet. Check by
    more CONDDB/v3r02p3/cmt/requirements | grep 'version v'
whether the requirements file indicates v3r02p3. Otherwise (i.e. if it
indicates v3r02p2) copy the package frommy public area,
    rm -rf CONDDB
    mkdir CONDDB
    cd CONDDB
    tar -xvzf /afs/cern.ch/user/a/andreav/public/CONDDB_v3r02p3.tar.gz
    cd v3r02p3/cmt
    cmt config
This will do everything that's necessary.

------------------------------------------------------------------------------
How to setup the environment and link DetCondExample on lxplus/lxplus7
------------------------------------------------------------------------------

# NB: Do NOT source LHCXX setup scripts in your .cshrc!
# The configuration of LHCXX stuff is handled for you by CMT scripts!

# I suggest to build all packages in debug mode, i.e. using tag $CMTDEB.
# Specify the tag by 'source setup.csh -tag=$CMTDEB' and 'gmake tag=$CMTDEB'.
# [NB Do not change CMTCONFIG to CMTDEB! This would cause many troubles!]

# Go to your release directory
cd ~/newmycmt

# Go to the cmt directory
cd Ex/DetCondExample/v4r1/cmt

# Setup the environment
# This will setup Gaudi and also execute some implementation-dependent actions
# (requirements knows that it should use Objy on RH6.1, Oracle on RH7.1/Win)
source ../cmt/setup.csh -tag=$CMTDEB

# On RH6.1, setup.csh starts the lockserver and AMSserver and installs the db
# (the schema for the example's DB will be updated after compiling CONDDB)

# On RH7.3 and Windows, setup prompts you to update your password.
# You should actually set ALL of the db host, user, password and name.
# For instance, this is what I use... except the password :-)
# - The host (here db9) must correspond to an entry in the tnsnames.ora file
#   Environment variable TNS_ADMIN defines the search path for tnsnames.ora
# - The user and password are your Oracle account user and password
# - The name of the DB can be anything: a DB with that name is created and used
#   I suggest you stick to MYCONDDB_LINUX and MYCONDDB_WINDOWS on Linux/Win
setenv DETCONDEXAMPLE_DBHOST DB9
setenv DETCONDEXAMPLE_DBUSER AVALASSI
setenv DETCONDEXAMPLE_DBNAME MYCONDDB_LINUX
setenv DETCONDEXAMPLE_DBPSWD ********

# Remove old makefiles and dependencies
cmt broadcast -select=mycmt '/bin/rm -f *make*'

# Compile and link
cmt broadcast -select=mycmt gmake tag=$CMTDEB

------------------------------------------------------------------------------
How to run DetCondExample on lxplus/lxplus7 (without debugger)
------------------------------------------------------------------------------

# Go to your release directory
cd ~/newmycmt

# Go to the working directory
cd Ex/DetCondExample/v4r1/options

============
(1) testXml
============

# Run the application
../$CMTDEB/DetCondExample.exe testXml.opts

# Run the application and compare the output to the standard one
# I pipe the output to sed to make the comparison easier
/bin/rm -f log.testXml.${CMTCONFIG}
../$CMTDEB/DetCondExample.exe testXml.opts \
  | sed "s|$DETCONDEXAMPLEROOT|DETCONDEXAMPLEROOT|" > log.testXml.${CMTCONFIG}
tkdiff log.testXml.${CMTCONFIG} ../job/Xml/ &

================
(2a) fillCondDB
================

# Set the debug level for the CONDDB library. Possible debug levels are:
#    none: no message is printed (default)
#    prof: only print messages which do not disturb profiling measurements
#    user: only print messages of "general" interest
#    devl: also print messages of interest only for the package developer
#    more: more paranoid messages are printed 
#    all:  any debug message will be printed
setenv COND_DB_DEBUG none

# Run the application (be sure to start with a new database as you may get 
# errors if the db was created on a different node)
source ../cmt/cleanupDB.csh -tag=$CMTDEB
source ../cmt/setupDB.csh   -tag=$CMTDEB
../$CMTDEB/DetCondExample.exe fillCondDB.opts

# Run the application and compare the output to the standard one
# The database is only filled if empty: the first output is longer
# Be sure to start with a new database if you want to compare the first output
source ../cmt/cleanupDB.csh -tag=$CMTDEB
source ../cmt/setupDB.csh   -tag=$CMTDEB
/bin/rm -f log.fillCondDB_1.${CMTCONFIG}
/bin/rm -f log.fillCondDB_2.${CMTCONFIG}
../$CMTDEB/DetCondExample.exe fillCondDB.opts \
  | sed "s|$DETCONDEXAMPLEROOT|DETCONDEXAMPLEROOT|" \
  > log.fillCondDB_1.${CMTCONFIG}
../$CMTDEB/DetCondExample.exe fillCondDB.opts \
  | sed "s|$DETCONDEXAMPLEROOT|DETCONDEXAMPLEROOT|" \
  > log.fillCondDB_2.${CMTCONFIG}
tkdiff log.fillCondDB_1.${CMTCONFIG} ../job/${CONDDB_implementation}/ &
tkdiff log.fillCondDB_2.${CMTCONFIG} ../job/${CONDDB_implementation}/ &

================
(2b) testCondDB
================

# Run the application
# Be sure to have filled the database using fillCondDB.opts first!
../$CMTDEB/DetCondExample.exe testCondDB.opts

# Run the application and compare the output to the standard one
/bin/rm -f log.testCondDB.${CMTCONFIG}
../$CMTDEB/DetCondExample.exe testCondDB.opts \
  | sed "s|$DETCONDEXAMPLEROOT|DETCONDEXAMPLEROOT|" \
  > log.testCondDB.${CMTCONFIG}
tkdiff log.testCondDB.${CMTCONFIG} ../job/${CONDDB_implementation}/ &

================
(3) daqCondDB
================

# Run the application
# You can run this as many times as you like and observe how speed changes
../$CMTDEB/DetCondExample.exe daqCondDB.opts

# Run the application and create an output comparable to the standard one
/bin/rm -f log.daqCondDB.Objy.Linux61
../$CMTDEB/DetCondExample.exe daqCondDB.opts \
  | sed "s|$DETCONDEXAMPLEROOT|DETCONDEXAMPLEROOT|" \
  > log.daqCondDB.${CMTCONFIG}
tkdiff log.daqCondDB.${CMTCONFIG} ../job/${CONDDB_implementation}/ &

------------------------------------------------------------------------------
How to run DetCondExample on lxplus/lxplus7 with the debugger
------------------------------------------------------------------------------

# Go to your release directory
cd ~/newmycmt

# Go to the working directory
cd Ex/DetCondExample/v4r1/options

# To use the debugger, link one of the three option files to job.opts
/bin/rm -f job.opts
ln -sf xxx.opts job.opts

# Debug the application using gdb
# (NB gdb "run" executes .cshrc: you can NOT change LD_LIBRARY_PATH in .cshrc!)
# (NB you must use /usr/local/bin/gdb if you use DetDesc: see news 
#     http://home.cern.ch/~majordom/news/gaudi-developers/msg00165.html)
/usr/local/bin/gdb ../$CMTDEB/DetCondExample.exe
# DetCondExample.gdb sets a few useful breakpoints
(gdb) source DetCondExample.gdb
# The same can be achieved by typying the following
/usr/local/bin/gdb ../$CMTDEB/DetCondExample.exe -x DetCondExample.gdb

# Debug the application using gdb inside ddd (recommended!)
ddd --tty --debugger "/usr/local/bin/gdb ../$CMTDEB/DetCondExample.exe"
(gdb) source DetCondExample.gdb
# The same can be achieved by typing the following
ddd --tty --debugger "/usr/local/bin/gdb ../$CMTDEB/DetCondExample.exe -x DetCondExample.gdb"

------------------------------------------------------------------------------
How to cleanup the environment on lxplus/lxplus7
------------------------------------------------------------------------------

# Go to your release directory
cd ~/newmycmt

# Go to the cmt directory
cd Ex/DetCondExample/v4r1/cmt

# Remove old makefiles and dependencies
cmt broadcast -select=mycmt '/bin/rm -f *make*'

# Remove all objects and binaries if needed
cmt broadcast -select=mycmt '/bin/rm -rf ../$CMTDEB'

# Cleanup the environment (recommended before logout)
# On RH6.1, this also deletes the db and kills the AMSserver and lockserver
# (NB if AMS and lock servers are still running, you will be stuck at logout)
source ../cmt/cleanup.csh -tag=$CMTDEB

------------------------------------------------------------------------------
How to browse the Oracle DB using SQL commands on lxplus7 (RedHat7.3)
------------------------------------------------------------------------------

# Go to your release directory
cd ~/newmycmt

# Go to the cmt directory
cd Ex/DetCondExample/v4r1/cmt

# Setup the environment
# Remember to also set the four environment variables to access the DB
source ../cmt/setup.csh -tag=$CMTDEB

# List which CondDBs exist on that host for that user
source ../sql/listCondDBs.csh

# List which tables exist on that host for that user for the current DB name
source ../sql/listAll.csh

# Login interactively on that host as that user
source ../sql/loginSqlPlus.csh
# Example: print all CondDBObject's
SQL> select * from <DBNAME>_CONOBJS;
# Example: print the range of all CondDBObject's
SQL> select since,till from <DBNAME>_CONOBJS;
# Example: change your password
SQL> alter user <USERNAME> identified by <NEWPASSWORD>;
# Quit the SQL*plus session
SQL> quit;

------------------------------------------------------------------------------
Short note on the Oracle version
------------------------------------------------------------------------------

The CondDBOracle package has been developed on Oracle9i.
The implementation stores PL/SQL code in the database and executes it.
The PL/SQL code is not backward compatible: you must run the code against 
an Oracle 9i server (contact Physics-Database.Support@cern.ch).
If you run against an Oracle 8i server (such as devdb or cerndb1) and switch 
on debugging (COND_DB_DEBUG=all), you are likely to get an error like
  "ORA-00904: invalid column name".

==============================================================================

------------------------------------------------------------------------------
How to setup the environment and link DetCondExample under Windows
------------------------------------------------------------------------------

# I assume in the following that your release directory is H:\newmycmt
# The following describes how to build and run the example from the DOS prompt
# Go to your release directory
cd H:\newmycmt

# Go to the cmt directory
cd Ex\DetCondExample\v4r1\cmt

# Setup the environment
setup

# Compile and link
cmt broadcast -select=newmycmt make

------------------------------------------------------------------------------
How to run DetCondExample under Windows
------------------------------------------------------------------------------

# Go to your release directory
cd H:\newmycmt

# Go to the working directory
cd Ex\DetCondExample\v4r1\options

============
(1) testXml
============

# Run the application using the "run" script 
# (located in \\cern.ch\dfs\Experiments\Lhcb\scripts)
# This sets PATH = %PATH%;%LD_LIBRARY_PATH% to give the path to .dll files
run DetCondExample testXml.opts

# Run the application and create an output comparable to the standard one
# NB I use sed302b from http://www.student.northpark.edu/pemente/sed/index.htm
# NB Use the full path rather than %DETCONDEXAMPLEROOT% because sed needs "\\"!
run DetCondExample testXml.opts | sed "s|I:\\newmycmt11\\Ex\\DetCondExample\\v4r1\\|DETCONDEXAMPLEROOT/|" > log.testXml.%CMTCONFIG%

================
(2a) fillCondDB
================

# Set the debug level for the CONDDB library. Possible debug levels are:
#    none: no message is printed (default)
#    prof: only print messages which do not disturb profiling measurements
#    user: only print messages of "general" interest
#    devl: also print messages of interest only for the package developer
#    more: more paranoid messages are printed 
#    all:  any debug message will be printed
set COND_DB_DEBUG=none

# On RH7.3 and Windows, setup prompts you to update your password.
# You should actually set ALL of the db host, user, password and name.
# For instance, this is what I use... except the password :-)
# - The host (here db9) must correspond to an entry in the tnsnames.ora file
#   Environment variable TNS_ADMIN defines the search path for tnsnames.ora
# - The user and password are your Oracle account user and password
# - The name of the DB can be anything: a DB with that name is created and used
#   I suggest you stick to MYCONDDB_LINUX and MYCONDDB_WINDOWS on Linux/Win
set DETCONDEXAMPLE_DBHOST=DB9
set DETCONDEXAMPLE_DBUSER=AVALASSI
set DETCONDEXAMPLE_DBNAME=MYCONDDB_WINDOWS
set DETCONDEXAMPLE_DBPSWD=********

# Run the application using the "run" script 
run DetCondExample fillCondDB.opts

# Run the application and create an output comparable to the standard one
# The database is only filled if empty: the first output is longer
# Be sure to start with a new database if you want to compare the first output
# You do not need to call setupDB.bat again
..\cmt\cleanupDB.bat
run DetCondExample fillCondDB.opts | sed "s|I:\\newmycmt11\\Ex\\DetCondExample\\v4r1\\|DETCONDEXAMPLEROOT/|" > log.fillCondDB_1.%CMTCONFIG%
run DetCondExample fillCondDB.opts | sed "s|I:\\newmycmt11\\Ex\\DetCondExample\\v4r1\\|DETCONDEXAMPLEROOT/|" > log.fillCondDB_2.%CMTCONFIG%

================
(2b) testCondDB
================

# Run the application using the "run" script 
# Be sure to have filled the database using fillCondDB.opts first!
run DetCondExample testCondDB.opts

# Run the application and create an output comparable to the standard one
run DetCondExample testCondDB.opts | sed "s|I:\\newmycmt11\\Ex\\DetCondExample\\v4r1\\|DETCONDEXAMPLEROOT/|" > log.testCondDB.%CMTCONFIG%

================
(3) daqCondDB
================

# Run the application using the "run" script 
# You can run this as many times as you like and observe how speed changes
run DetCondExample daqCondDB.opts

# Run the application and create an output comparable to the standard one
run DetCondExample daqCondDB.opts | sed "s|I:\\newmycmt11\\Ex\\DetCondExample\\v4r1\\|DETCONDEXAMPLEROOT/|" > log.daqCondDB.%CMTCONFIG%

------------------------------------------------------------------------------
How to browse the Oracle database using SQL commands on Windows
------------------------------------------------------------------------------

# Go to your release directory
cd H:\newmycmt

# Go to the cmt directory
cd Ex\DetCondExample\v4r1\cmt

# Setup the environment
# This sets the path to the DB if you modified the relevant scripts as above
setup

# List which CondDBs exist on that host for that user
..\sql\listCondDBs.bat

# List which tables exist on that host for that user for the current DB name
..\sql\listAll.bat

# Login interactively on that host as that user
..\sql\loginSqlPlus.bat
# Example: print all CondDBObject's
SQL> select * from <DBNAME>_CONOBJS;
# Example: print the range of all CondDBObject's
SQL> select since,till from <DBNAME>_CONOBJS;
# Example: change your password
SQL> alter user <USERNAME> identified by <NEWPASSWORD>;
# Quit the SQL*plus session
SQL> quit;

------------------------------------------------------------------------------
How to fill the DB on Windows and read it from RedHat73 (or viceversa)
------------------------------------------------------------------------------

# In the example above, you created a database from Linux, whose name is
setenv DETCONDEXAMPLE_DBNAME MYCONDDB_LINUX
# In the Windows example (see README), you created a database whose name is
set DETCONDEXAMPLE_DBNAME=MYCONDDB_WINDOWS

# You can run the testCondDB example again on Linux after setting
setenv DETCONDEXAMPLE_DBNAME MYCONDDB_WINDOWS
# You can compare the output to that in the ../job directory
../$CMTDEB/DetCondExample.exe testCondDB.opts \
  | sed "s|$DETCONDEXAMPLEROOT|DETCONDEXAMPLEROOT|" \
  > log.testCondDB.${CMTCONFIG}.${DETCONDEXAMPLE_DBNAME}

# You can run the testCondDB example again on Windows after setting
set DETCONDEXAMPLE_DBNAME=MYCONDDB_LINUX
# You can compare the output to that in the ..\job directory
run DetCondExample testCondDB.opts | sed "s|I:\\newmycmt11\\Ex\\DetCondExample\\v4r1\\|DETCONDEXAMPLEROOT/|" > log.testCondDB.%CMTCONFIG%.%DETCONDEXAMPLE_DBNAME%

# The result of this test is that there are no significant differences
# between log.testCondDB.Win32Debug.MYCONDDB_LINUX and [...].Win32Debug, or
# between log.testCondDB.rh73_gcc2952.MYCONDDB_WINDOWS and [...].rh73_gcc2952
# The only difference is in the standard format to print floats:
# - on Windows: 1.50000000e+001
# - on Linux:   1.50000000e+01

==============================================================================





