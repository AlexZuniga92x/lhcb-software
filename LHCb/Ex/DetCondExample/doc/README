# $Id: README,v 1.4 2001-09-17 14:22:36 andreav Exp $

------------------------------------------------------------------------------
Packages needed to run DetCondExample v1
------------------------------------------------------------------------------

For general information on configuring the Gaudi environment, please refer 
to the Gaudi Web pages. The example only works under LINUX for the moment, 
as HepODBMS is not supported under Windows NT. I assume in the following 
that your CMTPATH points to your release directory in ${HOME}/newmycmt, 
i.e. ~/newmycmt. Put the following line in your .cshrc to achieve this:
        setenv CMTPATH ${HOME}/newmycmt
Check the result with
        printenv CMTPATH

To run the detector condition example, you need to getpack the HEAD versions 
of three new packages and of two Gaudi packages from release Gaudi v8:
        cd ~/newmycmt
        getpack GaudiKernel        v10    HEAD
        getpack GaudiSvc           v6     HEAD
        getpack CONDDB             v3r01  HEAD
        getpack Det/DetCond        v1     HEAD
        getpack Ex/DetCondExample  v1     HEAD

For the moment (until it is released in CVS), you also need to substitute 
a GaudiSvc source file:
        cp /afs/cern.ch/user/a/andreav/public/ApplicationMgr.cpp \
           ~/newmycmt/GaudiSvc/v6/src/ApplicationMgr/ApplicationMgr.cpp

For the moment (until a bug in CMT is fixed), you also need to replace 
the CMT cleanup files.
        cp CONDDB/v3r01/cmt/myCleanup.csh \
           CONDDB/v3r01/cmt/cleanup.csh
        cp Ex/DetCondExample/v1/cmt/myCleanup.csh \
           Ex/DetCondExample/v1/cmt/cleanup.csh

------------------------------------------------------------------------------
How to setup the environment and run DetCondExample on lxplus
------------------------------------------------------------------------------

# I suggest to build all packages in debug mode, i.e. using tag Linuxdbx.
# Specify the tag by 'source setup.csh -tag=Linuxdbx' and 'gmake tag=Linuxdbx'.
# [NB Changing CMTCONFIG to Linuxdbx would reset LHCXX_DIR and cause troubles]

# Go to your release directory
cd ~/newmycmt

# Go to the cmt directory
cd Ex/DetCondExample/v1/cmt

# Setup the environment
# This also starts the lockserver and AMSserver and installs the databases
# [NB The schema for the example's DB will be updated after compiling CONDDB]
# [NB Type 'unsetenv LD_LIBRARY_PATH' first if you try various CMTCONFIG's  ]
source ../cmt/setup.csh -tag=Linuxdbx

# Remove old makefiles and dependencies
cmt broadcast -select=newmycmt '/bin/rm -f *make*'

# Compile and link
cmt broadcast -select=newmycmt gmake tag=Linuxdbx

# Go to the working directory
cd ../options

# Run the application a first time and then a second time with no debugger
/bin/rm -f job_first.log; ../Linuxdbx/DetCondExample.exe >& job_first.log 
/bin/rm -f job_next.log;  ../Linuxdbx/DetCondExample.exe >& job_next.log

# Compare the output files to the standard ones
diff job_first.log ../job; /bin/rm -f job_first.log 
diff job_next.log  ../job; /bin/rm -f job_next.log 

# Debug the application using gdb
# DetCondExample.gdb sets a breakpoint in SimpleAlgorithm::initialize
gdb ../Linuxdbx/DetCondExample.exe
(gdb) source DetCondExample.gdb
# The same can be achieved by typying the following
gdb ../Linuxdbx/DetCondExample.exe -x DetCondExample.gdb

# Debug the application using gdb inside ddd (recommended!)
ddd --tty --debugger "gdb ../Linuxdbx/DetCondExample.exe -x DetCondExample.gdb"

# To start again with an empty database:
source ../cmt/cleanupDB.csh
source ../cmt/setupDB.csh

------------------------------------------------------------------------------
How to create the dOxygen documentation on lxplus
------------------------------------------------------------------------------

# First, you can edit the requirements of DetCond and DetCondExample
# to make them point to your www pages; by default, the documentation 
# produced will point to local URL's, file:....

# Go to your release directory
cd ~/newmycmt

# Go to the cmt directory
cd Ex/DetCondExample/v1/cmt

# Setup the environment variables if you have not done so yet
source ../cmt/setup.csh -tag=Linuxdbx

# Create the documentation
cmt broadcast -select=newmycmt/Det/DetCond        ../doc/makedoc.csh
cmt broadcast -select=newmycmt/Ex/DetCondExample  ../doc/makedoc.csh

------------------------------------------------------------------------------
How to cleanup the environment on lxplus
------------------------------------------------------------------------------

# Go to your release directory
cd ~/newmycmt

# Go to the cmt directory
cd Ex/DetCondExample/v1/cmt

# Remove old makefiles and dependencies
cmt broadcast -select=newmycmt '/bin/rm -f *make*'

# Remove all objects and binaries if needed
cmt broadcast -select=newmycmt '/bin/rm -rf ../Linuxdbx'

# Remove the documentation:
cmt broadcast -select=newmycmt -exclude='Gaudi' '/bin/rm -rf ../doc/html'
cmt broadcast -select=newmycmt -exclude='Gaudi' '/bin/rm -rf ../doc/tex'

# Cleanup the environment (recommended before logout)
# This also deletes the databases and kills the AMSserver and lockserver
# [NB If AMS and lock servers are still running, you will be stuck at logout]
source ../cmt/cleanup.csh -tag=Linuxdbx

------------------------------------------------------------------------------
A useful bunch of CVS commands
------------------------------------------------------------------------------

# To create a new package in CVS:
cvs import directory vendortag releasetag

# To compare the local directory to the HEAD repository:
cvs diff

# To commit changes to a single file:
# [NB cvs update -A is needed because getpack does not perform a cvs checkout]
cvs update -A; cvs commit -m "" file

# To add and commit a new file or directory:
# [NB cvs update -A is needed because getpack does not perform a cvs checkout]
cvs update -A; cvs add file/directory; cvs commit -m "" file/directory

