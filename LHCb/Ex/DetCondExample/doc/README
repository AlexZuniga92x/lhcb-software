# $Id: README,v 1.20 2002-04-17 16:16:46 andreav Exp $

Two examples are distributed in this package: a test of condition data 
stored in flat XML files, and a test of condition data stored in the CondDB.

The XML example does not require DetCond and works in the same way
under Windows and under Linux (RedHat6.1 or RedHat7.2).

The CondDB example requires package DetCond. 
Under Linux RedHat6.1, DetCond uses CONDDB (based on Objectivity).
Under Windows and Linux RedHat7.2, DetCond uses CondDBOracle (based on Oracle).
The Oracle implementation is based on Oracle 9i using the OCCI library.

Three main job options exist in the options directory:
 1) testXml.opts    -> test of condition data stored in XML files (NO Ora/Objy)
2a) fillCondDB.opts -> populate the CondDB used in the CondDB test (Ora/Objy)
2b) testCondDB.opts -> test of condition data stored in the CondDB (Ora/Objy)

By default, the MsgSvc level is set to 3 (VERBOSE) in all 3 job options files.
To see less verbose comments, set it to 2 (DEBUG) or 1 (INFO).
Standard outputs for the VERBOSE mode are included in the release.

The detector elements used in the tests are the following:
> Ecal is used to test all kinds of conditions in XML files
> LHCb and Hcal are used to test slow control data in the CondDB
> LHCb is used to test geometry data in the CondDB

------------------------------------------------------------------------------
Packages needed to run DetCondExample v3r0
------------------------------------------------------------------------------

For general information on configuring the Gaudi environment, 
please refer to the Gaudi Web pages. 

Most of the following refers to the Linux RedHat6.1 environment (lxplus).
The Windows environment is presented in a shorter way at the end of this file.
The Linux RedHat7.2 environment is only meant for tests and requires
extensive changes which are described in the doc/README.RedHat72 file.

Version v1r11 of CMT is assumed as the default under Windows.
Version v1r12p20020412 of CMT is assumed as the default under Linux.

It is assumed that CMTPATH contains the release directory in ${HOME}/newmycmt,
i.e. ~/newmycmt. Put the following line in .cshrc to achieve this:
        setenv CMTPATH ${HOME}/newmycmt
Check the result with
        printenv CMTPATH

To run the detector condition example, you need the following packages,
as well as the standard Gaudi packages from the release area of Gaudi v10.
        cd ~/newmycmt
        getpack Det/DetCond        v3r0     head
        getpack Ex/DetCondExample  v3r0     head
	getpack Det/DetDesc        v10r0    head
Under Linux (RedHat6.1)
        getpack CONDDB             v3r02p2
Under Windows:
        getpack Det/CondDBOracle   v3r10p1  head
Under Linux (RedHat7.2)
        getpack Det/CondDBOracle   v3r10p1  head

In package DetDesc the cmt/ requirements file needs to be modified to use 
the latest GaudiKernel and XERCES (and fix a small bug under Windows):
< version v9r3
< use GaudiKernel v11r*
< use XERCES v15r*
< macro_append  DetDescLib_shlibflags "$(GaudiKernel_linkopts) " 
---
> version v10r0
> use GaudiKernel v12r*
> use XERCES v16r*
> macro_append  DetDescLib_shlibflags " $(GaudiKernel_linkopts) " 

Under Linux (RedHat7.2) many more packages need to be getpack'ed and MODIFIED.
Refer to the doc/README.RedHat72 for more details.

------------------------------------------------------------------------------
Additional modifications to GaudiKernel
------------------------------------------------------------------------------

Minor additional modifications to GaudiKernel were used to produce the
logfiles for the examples, to correct a bug for Windows and print out 
correctly int64 integers in hexadecimal format on Windows.

If the following lines are not already included in GaudiKernel/MsgStream.h
for the version of GaudiKernel that you are using, getpack GaudiKernel, add 
these lines to MsgStream.h and recompile GaudiKernel and the CondDB packages.

#ifdef WIN32
  /// Accept ios base class modifiers
  /// On Windows this is needed to accept std::hex and std::dec
  MsgStream& operator<<(std::ios_base& (*_f)(std::ios_base&))    {
    if ( isActive() ) _f(m_stream);
    return *this;
  }
#endif

------------------------------------------------------------------------------
How to setup the environment and link DetCondExample on lxplus
------------------------------------------------------------------------------

# NB: Do NOT source LHCXX setup scripts in your .cshrc!
# The configuration of LHCXX stuff is handled for you by CMT scripts!

# I suggest to build all packages in debug mode, i.e. using tag $CMTDEB.
# Specify the tag by 'source setup.csh -tag=$CMTDEB' and 'gmake tag=$CMTDEB'.
# [NB Do not change CMTCONFIG to CMTDEB! This would cause many troubles!]

# Go to your release directory
cd ~/newmycmt

# Go to the cmt directory
cd Ex/DetCondExample/v3r0/cmt

# Setup the environment
# This also starts the lockserver and AMSserver and installs the databases
# [NB The schema for the example's DB will be updated after compiling CONDDB]
# [NB Type 'unsetenv LD_LIBRARY_PATH' first if you try various CMTCONFIG's  ]
source ../cmt/setup.csh -tag=$CMTDEB

# Remove old makefiles and dependencies
cmt broadcast -select=mycmt '/bin/rm -f *make*'

# Compile and link
cmt broadcast -select=mycmt gmake tag=$CMTDEB

------------------------------------------------------------------------------
How to run DetCondExample on lxplus (without debugger)
------------------------------------------------------------------------------

# Go to your release directory
cd ~/newmycmt

# Go to the working directory
cd Ex/DetCondExample/v3r0/options

============
(1) testXml
============

# Run the application
../$CMTDEB/DetCondExample.exe testXml.opts

# Run the application and compare the output to the standard one
/bin/rm -f log.testXml.Linux61
../$CMTDEB/DetCondExample.exe testXml.opts > log.testXml.Linux61
tkdiff log.testXml.Linux61 ../job &

================
(2a) fillCondDB
================

# Set the debug level for the CONDDB library. Possible debug levels are:
#    none: no message is printed (default)
#    prof: only print messages which do not disturb profiling measurements
#    user: only print messages of "general" interest
#    devl: also print messages of interest only for the package developer
#    more: more paranoid messages are printed 
#    all:  any debug message will be printed
setenv COND_DB_DEBUG none

# Run the application
../$CMTDEB/DetCondExample.exe fillCondDB.opts

# Run the application and compare the output to the standard one
# The database is only filled if empty: the first output is longer
# Be sure to start with a new database if you want to compare the first output
source ../cmt/cleanupDB.csh -tag=$CMTDEB
source ../cmt/setupDB.csh   -tag=$CMTDEB
/bin/rm -f log.fillCondDB_1.Objy.Linux61
/bin/rm -f log.fillCondDB_2.Objy.Linux61
../$CMTDEB/DetCondExample.exe fillCondDB.opts > log.fillCondDB_1.Objy.Linux61
../$CMTDEB/DetCondExample.exe fillCondDB.opts > log.fillCondDB_2.Objy.Linux61
tkdiff log.fillCondDB_1.Objy.Linux61 ../job &
tkdiff log.fillCondDB_2.Objy.Linux61 ../job &

================
(2b) testCondDB
================

# Run the application
# Be sure to have filled the database using fillCondDB.opts first!
../$CMTDEB/DetCondExample.exe testCondDB.opts

# Run the application and compare the output to the standard one
/bin/rm -f log.testCondDB.Objy.Linux61
../$CMTDEB/DetCondExample.exe testCondDB.opts > log.testCondDB.Objy.Linux61
tkdiff log.testCondDB.Objy.Linux61 ../job &

------------------------------------------------------------------------------
How to run DetCondExample on lxplus with the debugger
------------------------------------------------------------------------------

# Go to your release directory
cd ~/newmycmt

# Go to the working directory
cd Ex/DetCondExample/v3r0/options

# To use the debugger, link one of the three option files to job.opts
/bin/rm -f job.opts
ln -sf xxx.opts job.opts

# Debug the application using gdb
# (NB gdb "run" executes .cshrc: you can NOT change LD_LIBRARY_PATH in .cshrc!)
# (NB you must use /usr/local/bin/gdb if you use DetDesc: see news 
#     http://home.cern.ch/~majordom/news/gaudi-developers/msg00165.html)
/usr/local/bin/gdb ../$CMTDEB/DetCondExample.exe
# DetCondExample.gdb sets a few useful breakpoints
(gdb) source DetCondExample.gdb
# The same can be achieved by typying the following
/usr/local/bin/gdb ../$CMTDEB/DetCondExample.exe -x DetCondExample.gdb

# Debug the application using gdb inside ddd (recommended!)
ddd --tty --debugger "/usr/local/bin/gdb ../$CMTDEB/DetCondExample.exe"
(gdb) source DetCondExample.gdb
# The same can be achieved by typing the following
ddd --tty --debugger "/usr/local/bin/gdb ../$CMTDEB/DetCondExample.exe -x DetCondExample.gdb"

------------------------------------------------------------------------------
How to browse the Objectivity database using the GUIbrowser on lxplus
------------------------------------------------------------------------------

# NB The GUIbrowser only works with the new compiler and Objectivity 6.1!

# If you want to check that Java is correctly installed:
###cd /afs/cern.ch/sw/java/i386_redhat61/jdk/sun-1.3.0/demo/jfc/Java2D
###java -jar Java2Demo.jar

# Give the path to your database
setenv OO_FD_BOOT "${DETCONDEXAMPLE_BOOTDIR}/${DETCONDEXAMPLE_BOOTFILE}"

# Execute the browser
# For instance, open ConditionsDB->LHCb->Slow->temperature, then go to Graph,
# select the folder again, give -20 and +80 as boundaries and look at the data!
java -jar  $LHCXX_DIR/ConditionsDB/GUIbrowser_0.3.0.2/interface1.jar

# Show the browser line options
java -jar  $LHCXX_DIR/ConditionsDB/GUIbrowser_0.3.0.2/interface1.jar -help

------------------------------------------------------------------------------
How to cleanup the environment on lxplus
------------------------------------------------------------------------------

# Go to your release directory
cd ~/newmycmt

# Go to the cmt directory
cd Ex/DetCondExample/v3r0/cmt

# Remove old makefiles and dependencies
cmt broadcast -select=mycmt '/bin/rm -f *make*'

# Remove all objects and binaries if needed
cmt broadcast -select=mycmt '/bin/rm -rf ../$CMTDEB'

# Cleanup the environment (recommended before logout)
# This also deletes the databases and kills the AMSserver and lockserver
# [NB If AMS and lock servers are still running, you will be stuck at logout]
source ../cmt/cleanup.csh -tag=$CMTDEB

# WARNING: If you want to continue using CMT in the same shell,
# remember to setenv CMTCONFIG to your preferred value first.
# Under Linux, "source cleanup.csh" unsetenv's CMTCONFIG.

------------------------------------------------------------------------------
How to setup the environment and link DetCondExample under Windows
------------------------------------------------------------------------------

# I assume in the following that your release directory is H:\newmycmt
# The following describes how to build and run the example from the DOS prompt
# Go to your release directory
cd H:\newmycmt

# Go to the cmt directory
cd Ex\DetCondExample\v3r0\cmt

# Setup the environment
setup

# Compile and link
cmt broadcast -select=newmycmt make

------------------------------------------------------------------------------
How to run DetCondExample under Windows
------------------------------------------------------------------------------

# Go to your release directory
cd H:\newmycmt

# Go to the working directory
cd Ex\DetCondExample\v3r0\options

============
(1) testXml
============

# Run the application using the "run" script 
# (located in \\cern.ch\dfs\Experiments\Lhcb\scripts)
# This sets PATH = %PATH%;%LD_LIBRARY_PATH% to give the path to .dll files
run DetCondExample testXml.opts

# Run the application and create an output comparable to the standard one
run DetCondExample testXml.opts > log.testXml.Windows

================
(2a) fillCondDB
================

# Set the debug level for the CONDDB library. Possible debug levels are:
#    none: no message is printed (default)
#    prof: only print messages which do not disturb profiling measurements
#    user: only print messages of "general" interest
#    devl: also print messages of interest only for the package developer
#    more: more paranoid messages are printed 
#    all:  any debug message will be printed
setenv COND_DB_DEBUG none

# Set the correct path to the database
# Even better, you can also modify and execute the setupDB_Oracle.bat script
# You can set your password in the private/setupDBPSWD_Oracle.bat
# The host (here db9) must correspond to an entry in the tnsnames.ora file
# The name of the DB can be anything: a DB with that name is created and used
# For instance, this is what I use... except the password :-)
set DETCONDEXAMPLE_DBHOST=DB9
set DETCONDEXAMPLE_DBUSER=AVALASSI
set DETCONDEXAMPLE_DBNAME=MYCONDDB_WINDOWS
set DETCONDEXAMPLE_DBPSWD=********

# Run the application using the "run" script 
run DetCondExample fillCondDB.opts

# Run the application and create an output comparable to the standard one
# The database is only filled if empty: the first output is longer
# Be sure to start with a new database if you want to compare the first output
# You do not need to call setupDB.bat again
..\cmt\cleanupDB.bat
run DetCondExample fillCondDB.opts > log.fillCondDB_1.Orac.Windows
run DetCondExample fillCondDB.opts > log.fillCondDB_2.Orac.Windows

================
(2b) testCondDB
================

# Run the application using the "run" script 
# Be sure to have filled the database using fillCondDB.opts first!
run DetCondExample testCondDB.opts

# Run the application and create an output comparable to the standard one
run DetCondExample testCondDB.opts > log.testCondDB.Orac.Windows

------------------------------------------------------------------------------
How to browse the Oracle database using SQL commands on Windows
------------------------------------------------------------------------------

# Go to your release directory
cd H:\newmycmt

# Go to the cmt directory
cd Ex\DetCondExample\v3r0\cmt

# Setup the environment
# This sets the path to the DB if you modified the relevant scripts as above
setup

# List which CondDBs exist on that host for that user
..\sql\listCondDBs.bat

# List which tables exist on that host for that user for the current DB name
..\sql\listAll.bat

# Login interactively on that host as that user
..\sql\loginSqlPlus.bat
# Example: print all CondDBObject's
SQL> select * from <DBNAME>_CONOBJS;
# Example: print the range of all CondDBObject's
SQL> select since,till from <DBNAME>_CONOBJS;
# Example: change your password
SQL> alter user <USERNAME> identified by <NEWPASSWORD>;
# Quit the SQL*plus session
SQL> quit;

==============================================================================

