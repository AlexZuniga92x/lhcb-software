<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>
  <package name="LHCbKernel">

    <class
       name   = "LHCbID"
       desc   = "LHCb wide channel identifier"
       author = "Marco Cattaneo" >

       <import name="Kernel/VeloChannelID"/>
       <import name="Kernel/STChannelID"/>
       <import name="Kernel/OTChannelID"/>
       <import name="Kernel/RichSmartID"/>
       <import name="Kernel/CaloCellID"/>

       &StlVector;

       <enum
          desc  = "types of sub-detector channel ID"
          name  = "channelIDType"
          value = "veloType=1, stType, otType, richType, caloType, muonType"
       />

      <enum
        name = 'SpecificMask'
        value = 'veloMask= 0x1FFFFFL,stMask=0xFFFFFFL,otMask=0x3FFFFFFL'
        desc = 'enumeration of the specific mask'
        access = 'PROTECTED' />

      <enum
        name = 'SpecificBits'
        value = 'veloBits=21,stBits=24,otBits=26'
        desc = 'enumeration of the specific bits'
        access = 'PROTECTED' />

       <attribute
          desc = "the internal representation" name="lhcbID"
          type = "bitfield"
          setMeth = "FALSE" >
            <bitfield desc='the ID bits (to recreate the channelID)' length='28' name='ID' setMeth='TRUE' getMeth='FALSE' />
            <bitfield desc='the LHCb detector type bits' length='4' name='detectorType' />
       </attribute>

       <method
         type    = 'bool'
         name    = 'operator=='
         argList = 'const LHCbID chanID'
         const   = 'TRUE'
         desc    = 'comparison equality'>
         <code>
  return (this->lhcbID() == chanID.lhcbID());
         </code>
       </method>

       <constructor 
         desc  = "Constructor from VeloChannelID and optional size" >
          <arg const="TRUE" name="chanID" type="VeloChannelID" />
          <arg const="TRUE" name="size=0" type="unsigned int" />
          <code>
m_lhcbID = (veloType &lt;&lt; detectorTypeBits) +
           (size     &lt;&lt; veloBits ) +
           chanID;
          </code>
       </constructor>

       <method
         type  = "bool"
         name  = "isVelo"
         const = 'TRUE'
         desc  = "return true if this is a Velo identifier">
         <code>
  return (veloType == detectorType());
         </code>
       </method>

       <method
         type  = "LHCb::VeloChannelID"
         name  = "veloID"
         const = 'TRUE'
         desc  = "return the VeloChannelID">
	 <code>
if ( !isVelo() ) return 0xF0000000;
return ( m_lhcbID &amp; veloMask );
         </code>
       </method>

       <constructor
         desc     = "Constructor from STChannelID and optional size" >
          <arg const="TRUE" name="chanID" type="STChannelID" />
          <arg const="TRUE" name="size=0" type="unsigned int" />
          <code>
m_lhcbID = (stType &lt;&lt; detectorTypeBits) +
           (size   &lt;&lt; stBits ) +
           chanID;
        </code>
      </constructor>

       <method
         type  = "bool"
         name  = "isST"
         const = 'TRUE'
         desc  = "return true if this is a Silicon Tracker identifier">
         <code>
  return (stType == detectorType());
         </code>
       </method>

       <method
         type  = "LHCb::STChannelID"
         name  = "stID"
         const = 'TRUE'
         desc  = "return the STChannelID">
	 <code>
if ( !isST() ) return 0xF0000000;
return ( (m_lhcbID &amp; stMask ));
         </code>
       </method>

       <constructor
         desc     = "Constructor from OTChannelID" >
        <arg const="TRUE" name="chanID" type="OTChannelID" />
        <code>
m_lhcbID = (otType &lt;&lt; detectorTypeBits) + chanID;
        </code>
       </constructor>

       <method
         type  = "bool"
         name  = "isOT"
         const = 'TRUE'
         desc  = "return true if this is a Outer Tracker identifier">
         <code>
return (otType == detectorType());
         </code>
       </method>

       <method
         type  = "LHCb::OTChannelID"
         name  = "otID"
         const = 'TRUE'
         desc="return the OTChannelID">
	 <code>
if ( !isOT() ) return  0xF0000000;
return m_lhcbID &amp; otMask;
         </code>
       </method>

       <constructor
         desc     = "Constructor from RichSmartID"
         initList = "m_lhcbID(0)" >
         <arg const="TRUE" name="chanID" type="RichSmartID" />
         <code>
  unsigned int richData = chanID.dataBitsOnly();
  if( chanID.pixelDataAreValid() ) richData += 0x8000000;
  setDetectorType( richType );
  setID( richData );
         </code>
       </constructor>

       <method
         type  = 'bool'
         name  = 'isRich'
         const = 'TRUE'
         desc  = 'return true if this is a Rich identifier'>
         <code>
  return (richType == detectorType());
         </code>
       </method>

       <method
         type  = "LHCb::RichSmartID"
         name  = "richID"
         const = 'TRUE'
         desc  = "return the richSmartID">
	 <code>
if ( !isRich() ) return 0x0;
int id = m_lhcbID &amp; IDMask;
if( id &amp;&amp; 0x8000000 ) id = id | 0x7E000000;
return id;
         </code>
       </method>

       <constructor
          desc     = "Constructor from CaloCellID"
          initList = "m_lhcbID(0)" >
          <arg const="TRUE" name="chanID" type="CaloCellID" />
         <code>
  setDetectorType( caloType );
  setID( chanID.ccid() );
         </code>
       </constructor>

       <method
         type  = "bool"
         name  = "isCalo"
         const = 'TRUE'
         desc  = "return true if this is a Calo identifier">
         <code>
  return (caloType == detectorType());
         </code>
       </method>

       <method
         type  = "LHCb::CaloCellID"
         name  = "caloID"
         const = 'TRUE'
         desc  = "return the CaloCellID">
         <code>
  return isCalo() ? (m_lhcbID &amp; IDMask) : 0xF0000000;
         </code>
       </method>

      <method
        type    = "unsigned int"
        name    = "channelID"
        const   = "TRUE"
        desc    = "General ID: returns detector ID = internal unsigned int">
        <code>
if (isVelo()) return veloID().channelID();
if (isST()) return stID().channelID();
if (isOT()) return otID().channelID();
if (isRich()) return richID().key();
if (isCalo()) return m_lhcbID &amp; IDMask;
return 0;
        </code>
      </method>

      <method
        name    = 'setSpareBits'
        argList = 'unsigned int value'
        desc    = 'set the spare bits'>
        <code>
  if ( !( isVelo() || isOT() || isST() ) ) return;
  unsigned int mask = IDMask;
  unsigned int bits = IDBits;
  if (isVelo()) {
    mask &amp;= (~veloMask);
    bits = veloBits;
  } else if (isST()) {
    mask &amp;= (~stMask);
    bits = stBits;
  } else if (isOT()) {
    mask &amp;= (~otMask);
    bits = otBits;
  }
  m_lhcbID &amp;= ~mask;
  m_lhcbID |= ((value &lt;&lt; bits) &amp; mask);
        </code>
      </method>

      <method
        type  = 'unsigned int'
        name  = 'spareBits'
        const = 'TRUE'
        desc  = 'retrieve the spare bits'>
        <code>
  if ( !( isVelo() || isOT() || isST()) ) return 0;
  unsigned int mask = IDMask;
  unsigned int bits = IDBits;
  if (isVelo()) {
     mask &amp;= (~veloMask);	  
     bits = veloBits;
  } else if (isST()) {
    mask &amp;= (~stMask);
    bits = stBits;
  } else if (isOT()) {
     mask &amp;= (~otMask);	  
     bits = otBits;
  }
  unsigned int val = ((m_lhcbID &amp; mask) &gt;&gt; bits);
  return val;
         </code>
       </method>
    
    </class>
  </package>
</gdd>