<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>
  <package name="LHCbKernel">

    <class
       name   = "LHCbID"
       desc   = "LHCb wide channel identifier"
       author = "Marco Cattaneo" >

       <import name="Kernel/VeloChannelID"/>
       <import name="Kernel/ITChannelID"/>
       <import name="Kernel/OTChannelID"/>
       <import name="Kernel/RichSmartID"/>
       <import name="Kernel/CaloCellID"/>

       &StlVector;

       <enum
          desc  = "types of sub-detector channel ID"
          name  = "channelIDType"
          value = "veloType=1, stType, otType, richType, caloType, muonType"
       />

       <attribute
          desc = "the internal representation" name="lhcbID"
          type = "bitfield"
          setMeth = "FALSE" >
            <bitfield desc="the detector specific bits" length="28" name="specific" />
            <bitfield desc="the LHCb generic bits"      length="4"  name="common"   />
       </attribute>

       <method type='bool' name='operator==' argList='const LHCbID chanID' const='TRUE' desc='comparison equality'>
         <code> return (this->lhcbID() == chanID.lhcbID()); </code>
       </method>

       <constructor desc = "Constructor from VeloChannelID" initList = "m_lhcbID(0)" >
          <arg const="TRUE" name="chanID" type="VeloChannelID" />
          <code>
            setSpecific( chanID );
            setCommon( veloType );
          </code>
       </constructor>

       <method type="bool" name="isVelo" const='TRUE' desc="return true if this is a Velo identifier">
         <code>return (veloType == common()) ? true : false;</code>
       </method>

       <method type="VeloChannelID" name="veloID" const='TRUE' desc="return the VeloChannelID">
	 <code>return isVelo() ? specific() : 0x0;</code>
       </method>

       <constructor desc = "Constructor from ITChannelID" initList = "m_lhcbID(0)" >
          <arg const="TRUE" name="chanID" type="ITChannelID" />
          <code>
            setSpecific( ((chanID.uniqueWafer()-1)&gt;&gt;4) + (chanID.strip()-1) );
            setCommon( stType );
          </code>
       </constructor>

       <method type="bool" name="isST" const='TRUE' desc="return true if this is a Silicon Tracker identifier">
         <code>return (stType == common()) ? true : false;</code>
       </method>

       <method type="ITChannelID" name="stID" const='TRUE' desc="return the ITChannelID">
	 <code>return isST() ? ( ((specific()&amp;0xFFFF000)&lt;&lt;4)+(specific()&amp;0xFFF) ) : 0xF0000000;</code>
       </method>


       <constructor desc = "Constructor from OTChannelID" initList = "m_lhcbID(0)" >
          <arg const="TRUE" name="chanID" type="OTChannelID" />
          <code>
            setSpecific( chanID );
            setCommon( otType );
          </code>
       </constructor>

       <method type="bool" name="isOT" const='TRUE' desc="return true if this is a Outer Tracker identifier">
         <code>return (otType == common()) ? true : false;</code>
       </method>

       <method type="OTChannelID" name="otID" const='TRUE' desc="return the OTChannelID">
	 <code>return isOT() ? specific() : 0xF0000000;</code>
       </method>

       <constructor desc = "Constructor from RichSmartID" initList = "m_lhcbID(0)" >
          <arg const="TRUE" name="chanID" type="RichSmartID" />
          <code>
            unsigned int richData = chanID.dataBitsOnly();
            if( chanID.pixelDataAreValid() ) richData += 0x8000000;
            setSpecific( richData );
            setCommon( richType );
          </code>
       </constructor>

       <method type="bool" name="isRich" const='TRUE' desc="return true if this is a Rich identifier">
         <code>return (richType == common()) ? true : false;</code>
       </method>

       <method type="RichSmartID" name="richID" const='TRUE' desc="return the richSmartID">
	 <code>
	   unsigned int rID = 0;
	   if( isRich() ) {
	     rID = specific() &amp; 0x7000000;
	     if( specific() &amp;&amp; 0x8000000 ) rID += 0x7E000000;
           }
	   return rID;
         </code>
       </method>

       <constructor desc = "Constructor from CaloCellID" initList = "m_lhcbID(0)" >
          <arg const="TRUE" name="chanID" type="CaloCellID" />
          <code>
            setSpecific( chanID.ccid() );
            setCommon( caloType );
          </code>
       </constructor>

       <method type="bool" name="isCalo" const='TRUE' desc="return true if this is a Calo identifier">
         <code>return (caloType == common()) ? true : false;</code>
       </method>

       <method type="CaloCellID" name="caloID" const='TRUE' desc="return the CaloCellID">
	 <code>return isCalo() ? specific() : 0xF0000000;</code>
       </method>

    </class>
  </package>
</gdd>
