<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE gdd SYSTEM "gdd.dtd">
<gdd>

<!-- **************************************************************************
  * $Id: RichSmartID.xml,v 1.17 2005-02-22 13:48:04 jonrob Exp $
  *****************************************************************************
  * XML-description of RichSmartID class                                      *
  * author: Chris Jones   Christopher.Rob.Jones@cern.ch                       *
  * date:   2004-06-23                                                        *
  ************************************************************************* -->

  <package name='LHCbKernel'>
     <class 
        name             = "RichSmartID"
        author           = "Chris Jones   Christopher.Rob.Jones@cern.ch" 
        desc             = "Identifier for RICH detector objects">

        &StlVector;

        <import name = "Kernel/RichDetectorType"                  />
        <import name = "Kernel/RichSide"                          />
        <import name = "Rich"                    ignore = "TRUE"  />
        <import name = "DetectorType"            ignore = "TRUE"  />
        <import name = "Side"                    ignore = "TRUE"  />

        <template name = "VectorDict" t1="THIS"/>

        <typedef access="PUBLIC" def="KeyType"    desc="Type for internal key"     type="unsigned long"/>
        <typedef access="PUBLIC" def="Collection" desc="Container of RichSmartIDs" type="std::vector&lt;RichSmartID&gt;"/>

        <attribute 
            desc = "The internal data" 
            name = "key" 
            init = "0" 
            type = "bitfield">
            <bitfield desc="The sub-pixel number"                length="3"  name="subPixel"      setMeth="FALSE" />
            <bitfield desc="The pixel row number"                length="5"  name="pixelRow"      setMeth="FALSE" />
            <bitfield desc="The pixel column number"             length="5"  name="pixelCol"      setMeth="FALSE" />
            <bitfield desc="The photon detector row number"      length="5"  name="PDRow"         setMeth="FALSE" />
            <bitfield desc="The photon detector column number"   length="5"  name="PDCol"         setMeth="FALSE" />
            <bitfield desc="The RICH panel"                      length="1"  name="panel"         setMeth="FALSE" getMeth="FALSE" />
            <bitfield desc="The RICH Detector"                   length="1"  name="rich"          setMeth="FALSE" getMeth="FALSE" />
            <bitfield desc="Sub-pixel field is set"              length="1"  name="subPixelIsSet" setMeth="FALSE" />
            <bitfield desc="Pixel row field is set"              length="1"  name="pixelRowIsSet" setMeth="FALSE" />
            <bitfield desc="Pixel column field is set"           length="1"  name="pixelColIsSet" setMeth="FALSE" />
            <bitfield desc="Photon detector row field is set"    length="1"  name="PDRowIsSet"    setMeth="FALSE" />
            <bitfield desc="Photon detector column field is set" length="1"  name="PDColIsSet"    setMeth="FALSE" />
            <bitfield desc="RICH panel field is set"             length="1"  name="panelIsSet"    setMeth="FALSE" />
            <bitfield desc="RICH detector field is set"          length="1"  name="richIsSet"     setMeth="FALSE" />
        </attribute>

        <constructor 
            desc     = "Copy constructor" 
            initList = "m_key( id.key() )">
            <arg 
                name  = "id"  
                type  = "RichSmartID"
                const = "TRUE" 
                inout = "INOUT" 
            />
        </constructor>

        <constructor 
            desc     = "Constructor from internal type"
            initList = "m_key( key )">
            <arg 
                name  = "key" 
                type  = "RichSmartID::KeyType"
                const = "TRUE" 
                inout = "BYVALUE" 
             />
        </constructor>

        <constructor 
            desc     = "Pixel level constructor including sub-pixel information" 
            initList = "m_key( 0 )">
            <arg  const="TRUE"  name="rich"      type="int"  />
            <arg  const="TRUE"  name="panel"     type="int"  />
            <arg  const="TRUE"  name="pdRow"     type="int"  />
            <arg  const="TRUE"  name="pdCol"     type="int"  />
            <arg  const="TRUE"  name="pixelRow"  type="int"  />
            <arg  const="TRUE"  name="pixelCol"  type="int"  />
            <arg  const="TRUE"  name="subPixel"  type="int"  />
            <code>
               setRich( rich );
               setPanel( panel );
               setPDRow( pdRow );
               setPDCol( pdCol );
               setPixelRow( pixelRow );
               setPixelCol( pixelCol );
               setSubPixel( subPixel );
            </code>
        </constructor>

        <constructor 
            desc     = "Pixel level constructor" 
            initList = "m_key( 0 )" >
            <arg  const="TRUE"  name="rich"      type="int"  />
            <arg  const="TRUE"  name="panel"     type="int"  />
            <arg  const="TRUE"  name="pdRow"     type="int"  />
            <arg  const="TRUE"  name="pdCol"     type="int"  />
            <arg  const="TRUE"  name="pixelRow"  type="int"  />
            <arg  const="TRUE"  name="pixelCol"  type="int"  />
            <code>
              setRich( rich );
              setPanel( panel );
              setPDRow( pdRow );
              setPDCol( pdCol );
              setPixelRow( pixelRow );
              setPixelCol( pixelCol );
            </code>
        </constructor>

        <constructor 
            desc     = "HPD level constructor" 
            initList = "m_key( 0 )" >
            <arg  const="TRUE"  name="rich"      type="int"  />
            <arg  const="TRUE"  name="panel"     type="int"  />
            <arg  const="TRUE"  name="pdRow"     type="int"  />
            <arg  const="TRUE"  name="pdCol"     type="int"  />
            <code>
              setRich( rich );
              setPanel( panel );
              setPDRow( pdRow );
              setPDCol( pdCol );
            </code>
        </constructor>

        <method 
            name   = "setData"
            access = "PRIVATE" 
            desc   = "Set the given data into the given field"  
            type   = "bool" >
            <arg 
                const = "TRUE" 
                name  = "value"
                type  = "int"  />
            <arg 
                const = "TRUE" 
                name  = "shift"  
                type  = "int"  />
            <arg 
                const = "TRUE" 
                name  = "mask"
                type  = "long" />
            <arg 
                const = "TRUE" 
                name  = "okMask" 
                type  = "long" />
            <code>
              setKey( ((value &lt;&lt; shift) &amp; mask) | (m_key &amp; ~mask) | okMask );
              return true;
            </code>
        </method>

        <method             
            name   = "checkRange" 
            access = "PRIVATE" 
            const  = "TRUE" 
            desc   = "Checks if a data value is within range for a given field" 
            type   = "bool" >
            <arg 
                const = "TRUE" 
                name  = "value" 
                type  = "int"  />
            <arg 
                const = "TRUE" 
                name  = "shift" 
                type  = "int"  />
            <arg 
                const = "TRUE" 
                inout = "INOUT" 
                name  = "message" 
                type  = "std::string"  />
            <code>
              const bool ok = ( value &lt; (1&lt;&lt;shift) );
              if (!ok) rangeError( value, (1&lt;&lt;shift)-1, message );
              return ok;
            </code>
        </method>

        <method             
            name   = "rangeError" 
            access = "PRIVATE" 
            const  = "TRUE" 
            desc   = "Issue an exception in the case of a range error (not inlined to prevent blow up)" 
            type   = "void" >
            <arg 
                const = "TRUE" 
                name  = "value" 
                type  = "int"  />
            <arg 
                const = "TRUE" 
                name  = "max" 
                type  = "int"  />
            <arg 
                const = "TRUE" 
                inout = "INOUT" 
                name  = "message" 
                type  = "std::string"  />
        </method>

        <method 
            name  = "operator RichSmartID::KeyType" 
            const = "TRUE" 
            desc  = "implicit conversion to internal type" 
            type  = "" >
            <code>
              return m_key;
            </code>
        </method>

        <method
             desc    = "Comparison operator using internal representation"
             name    = "operator=="
             argList = "const RichSmartID id"
             type    = "bool"
             const   = "TRUE"
             access  = "PUBLIC" >
             <code>
               return ( key() == id.key() );
             </code>
        </method>

        <method 
            name = "setRich" 
            desc = "Set the RICH detector identifier" 
            type = "bool" >
            <arg 
                const = "TRUE" 
                name  = "rich" 
                type  = "int"  />
            <code>
              return ( checkRange(rich,subPixelIsSetBits-richBits,"RICH") ?
                       setData( rich, richBits, richMask, richIsSetMask ) : false );
            </code>
        </method>

        <method 
            name = "setPanel"
            desc = "Set the RICH detector panel identifier"  
            type = "bool">
            <arg 
                const = "TRUE" 
                name  = "panel" 
                type  = "int"  />
            <code>
              return ( checkRange(panel,richBits-panelBits,"Panel") ?
                       setData( panel, panelBits, panelMask, panelIsSetMask ) : false );
            </code>
        </method>

        <method 
            name = "setPDCol" 
            desc = "Set the RICH photon detector column identifier" 
            type = "bool">
            <arg 
                const = "TRUE" 
                name  = "col" 
                type  = "int"  />
            <code>
               return ( checkRange(col,panelBits-PDColBits,"PDColumn") ?
                        setData( col, PDColBits, PDColMask, PDColIsSetMask ) : false );
            </code>
        </method>

        <method 
            name = "setPDRow" 
            desc = "Set the RICH photon detector row identifier" 
            type = "bool">
            <arg 
                const = "TRUE" 
                name  = "row" 
                type  = "int"  />
            <code>
               return ( checkRange(row,PDColBits-PDRowBits,"PDRow") ?
                        setData( row, PDRowBits, PDRowMask, PDRowIsSetMask ) : false );
            </code>
        </method>

        <method 
            name = "setPixelCol"
            desc = "Set the RICH photon detector pixel column identifier"  
            type = "bool">
            <arg 
                const = "TRUE" 
                name  = "col" 
                type  = "int"  />
            <code>
               return ( checkRange(col,PDRowBits-pixelColBits,"PixelColumn") ?
                        setData( col, pixelColBits, pixelColMask, pixelColIsSetMask ) : false );
            </code>
        </method>

        <method 
            name = "setPixelRow"
            desc = "Set the RICH photon detector pixel row identifier"  
            type = "bool">
            <arg 
                const = "TRUE" 
                name  = "row" 
                type  = "int"  />
            <code>
               return ( checkRange(row,pixelColBits-pixelRowBits,"PixelRow") ?
                        setData( row, pixelRowBits, pixelRowMask, pixelRowIsSetMask ) : false );
            </code>
        </method>

        <method 
            name = "setSubPixel"
            desc = "Set the RICH photon detector sub-pixel identifier"  
            type = "bool">
            <arg 
                const = "TRUE" 
                name  = "subpixel" 
                type  = "int"  />
            <code>
               return ( checkRange(subpixel,pixelRowBits-subPixelBits,"SubPixel") ?
                        setData( subpixel, subPixelBits, subPixelMask, subPixelIsSetMask ) : false );
            </code>
        </method>

        <method 
            name  = "richDataAreValid"
            const = "TRUE" 
            desc  = "Returns true if the RichSmartID contains valid RICH detector data"  
            type  = "bool">
            <code>
               return richIsSet();
            </code>
        </method>

        <method 
            name  = "hpdDataAreValid"
            const = "TRUE" 
            desc  = "Returns true if the RichSmartID contains valid HPD data"  
            type  = "bool">
            <code>
               return ( richIsSet() &amp;&amp; panelIsSet() &amp;&amp; pdRowIsSet() &amp;&amp; pdColIsSet() );
            </code>
        </method>

        <method 
            name  = "pixelDataAreValid"
            const = "TRUE" 
            desc  = "Returns true if the RichSmartID contains valid pixel data"  
            type  = "bool">
            <code>
               return ( hpdDataAreValid() &amp;&amp; pixelRowIsSet() &amp;&amp; pixelColIsSet() );
            </code>
        </method>

        <method 
            name  = "isValid"
            const = "TRUE" 
            desc  = "Returns true if at least one data field has been set"  
            type  = "bool">
            <code>
               return ( richIsSet() || panelIsSet() || pdRowIsSet() || pdColIsSet() ||
                        pixelRowIsSet() || pixelColIsSet() || subPixelIsSet() );
            </code>
        </method>

        <method 
            name  = "pixelID"
            const = "TRUE" 
            desc  = "Decoding function to strip the sub-pixel information and return a pixel RichSmartID" 
            type  = "RichSmartID">
            <code>
               return RichSmartID( m_key &amp; ~(subPixelMask+subPixelIsSetMask) );
            </code>
        </method>

        <method 
            name  = "pdID"
            const = "TRUE" 
            desc  = "Decoding function to strip all the pixel information and return a photon detector RichSmartID"  
            type = "RichSmartID">
            <code>
               return RichSmartID( m_key &amp; (richMask+panelMask+PDRowMask+PDColMask+
                                   richIsSetMask+panelIsSetMask+PDRowIsSetMask+PDColIsSetMask) );
            </code>
        </method>

        <method 
            name  = "panelID"
            const = "TRUE" 
            desc  = "Decoding function to strip the photon-detector information and return a panel RichSmartID"  
            type  = "RichSmartID">
            <code>
               return RichSmartID( m_key &amp; (richMask+panelMask+richIsSetMask+panelIsSetMask) );
            </code>
        </method>

        <method 
            name  = "richID"
            const = "TRUE" 
            desc  = "Decoding function to strip all but the RICH information and return a RICH RichSmartID"  
            type  = "RichSmartID">
            <code>
               return RichSmartID( m_key &amp; (richMask+richIsSetMask) );
            </code>
        </method>

        <method 
            name  = "dataBitsOnly"
            const = "TRUE" 
            desc  = "Returns only the data fields, with the validity bits stripped"  
            type  = "RichSmartID">
            <code>
               return RichSmartID( m_key &amp; (richMask+panelMask+PDRowMask+PDColMask+pixelRowMask+pixelColMask+subPixelMask) );
            </code>
        </method>

        <method 
            name  = "rich"
            const = "TRUE" 
            desc  = "Get the RICH detector identifier. NB: Using custom method until G.O.D. supports specific automatically generated return values."  
            type  = "Rich::DetectorType">
            <code>
               return static_cast&lt;Rich::DetectorType&gt;( (m_key &amp; richMask) &gt;&gt; richBits );
            </code>
        </method>

        <method 
            name  = "panel" 
            const = "TRUE" 
            desc  = "Get the RICH panel identifier. NB: Using custom method until G.O.D. supports specific automatically generated return values." 
            type  = "Rich::Side" >
            <code>
               return static_cast&lt;Rich::Side&gt;( (m_key &amp; panelMask) &gt;&gt; panelBits );
            </code>
        </method>

        <method 
          name    = "fillStream" 
          desc    = "Print this RichSmartID in a human readable way"
          type    = "std::ostream&amp;" 
          virtual = "TRUE" 
          const   = "TRUE">
          <arg 
            type = "std::ostream" 
            name = "s"/>
        </method>

    </class>
  </package>
</gdd>
