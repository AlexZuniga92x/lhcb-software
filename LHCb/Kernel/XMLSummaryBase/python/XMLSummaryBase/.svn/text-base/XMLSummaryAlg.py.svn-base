#!/usr/bin/env python
# =============================================================================
# $Id: XMLSummaryAlg.py.svn-base,v 1.1.1.1 2009-09-11 09:56:33 rlambert Exp $
# =============================================================================
"""
*******************************************************************************
*                                                                             *
*                                                                             *
*******************************************************************************
"""
# =============================================================================
__author__ = 'Rob Lambert Rob.Lambert@cern.ch'
# =============================================================================

import GaudiPython
from GaudiPython.Bindings import gbl as cpp
import os as __os__

from   GaudiPython.GaudiAlgs   import GaudiAlgo
from   XMLSummary import summary

# =============================================================================
# Simple algorithm which manipulates with counters 
# =============================================================================
class XMLSummaryAlg(GaudiAlgo):#, cpp.IIncidentListener) :
    """ Simple algorithm which will control the XML summary
    set xmlfile to shoose the name of the output file
    set xmlfile to None to supress writing the summary"""
    def __init__ ( self , name = 'XMLSummaryAlg' ) :
        """ Constructor """
        GaudiAlgo.__init__( self , name )
        self.xmlfile="summary.xml"

    def initialize( self ):
        """the initialize step """
        GaudiAlgo.initialize( self )
        
        #Todo get an incident service
        self.incSvc=self.svc(cpp.IIncidentSvc,'IncidentSvc')
        #register as a listener
        #self.incSvc.addListener( cpp.IIncidentListener(self), "EndStream")
        #self.incSvc.addListener( cpp.IIncidentListener(self), "NEW_FILE_RECORD")
        
        self.summary=summary.Summary()
        self.summary.set_step()
        #todo fill filenames!
        fileGUID={'PFN:test.test' : '0000-0000-0000-0000'}
        #get all file:GUID from some service
        
        #loop over all files and make the records
        for afile in fileGUID.keys():
            self.summary.fillfile(afile, fileGUID[afile])
        
        self.summary.__m_open_file=None
        
        self.Print(self.summary.Print(),SUCCESS,cpp.MSG.DEBUG)
        
        if self.xmlfile is not None: self.summary.write(self.xmlfile)
        
        return SUCCESS
        
    def execute( self ) :
        """ The major method 'execute', it is invoked for each event.
        In the final alg, this will not be used"""
        
        executed = self.counter(self.name()+'/executed')
        executed += 1. 
        
        thisfile = self.counter(self.name()+'/thisfile')
        thisfile += 1. 
        
        #self.Print(str(self.__m_summary__))
        #if self.xmlfile is not None: self.__m_summary__.write(self.xmlfile)
        
        return SUCCESS
    
    def handle( self, incident ) :
        """incident handler.. I hope
        this will be where the writing out of file information takes place
        In the final alg, this will catch end of file"""
        
        self.Print(incident.type())
        GUID=incident.source()
        filename=None
        status=None
        if ( incident.type()=="NEW_FILE_RECORD" ):
            self.Print("w00t",SUCCESS,cpp.MSG.DEBUG)
            #update the file record for this file
            status='part'
        
        #todo issue this incident
        if ( incident.type()=="EndStream"):#"COMPLETED_FILE_RECORD" ):
            self.Print("w00t",SUCCESS,cpp.MSG.DEBUG)
            #update the file record for this file
            status='full'
            
        #todo issue this incident
        if ( incident.type()=="FAILED_FILE_RECORD" ):
            self.Print("w00t",SUCCESS,cpp.MSG.DEBUG)
            #update the file record for this file
            status='fail'
            
        ievents=self.counter(self.name()+'/thisfile')
        if filename is not None or GUID is not None:
            self.summary.fillfile(filename, GUID, status, ievents.flag())
        ievents -= ievents.flag()
        
        if ( incident.type()=="EndStream" ):
            #write out every time a file completes
            if self.xmlfile is not None:
                self.summary.set_step("execute")
                self.summary.write(self.xmlfile)
            
        return SUCCESS
    
    def finalize( self ) :
        """ This will be where the writing out of counters takes place"""
        
        self.summary.set_step("finalize")
        
        #example filling one counter
        self.__fillcounters()
        
        #example setting success
        self.summary.set_step("finalize", True)
        self.Print(self.summary.xml(),SUCCESS,cpp.MSG.DEBUG)
        if self.xmlfile is not None: self.summary.write(self.xmlfile)
        
        return SUCCESS #GaudiAlgo.finalize( self )

    def __fillcounters(self):
        '''method to fill the counters'''
        
        #counters, name,     method
        counter_list=[self.name()+'/executed']
        stat_counter_list=[self.name()+'/executed']
        
        #Todo, get all counters, from some service or method
        
        #fill all counters
        for count in counter_list:
            #get counter object
            acount=self.counter(count)
            #fill simple counters
            self.summary.fillcounter(count,acount.flag())
        
        #fill all stat counters
        for statcount in stat_counter_list:
            #get counter object
            acount=self.counter(statcount)
            #fill simple counters
            self.summary.fillcounter(
                                     count,acount.flag(),
                                     acount.nEntries(), acount.flag2(),
                                     acount.flagMin(),acount.flagMax()
                                     )
            
        return SUCCESS
        
# =============================================================================
# job configuration 
# =============================================================================
def configure( gaudi = None  ) :
    """ Configuration of the job """
    
    if not gaudi : gaudi = GaudiPython.AppMgr()
    
    gaudi.JobOptionsType       = 'NONE'
    gaudi.EvtSel               = 'NONE'
    
    gaudi.config()
    
    alg = XMLSummaryAlg()
    gaudi.setAlgorithms( [alg] )#

    # configure the properties 
    alg.StatPrint = True

    return SUCCESS

# =============================================================================
# The actual job excution 
# =============================================================================
if '__main__' == __name__ :
    print __doc__ , __author__
    gaudi = GaudiPython.AppMgr()
    configure( gaudi )
    gaudi.run(5400)
    
# =============================================================================
# The END 
# =============================================================================
