<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="GaudiTest.GaudiExeTest" kind="test">
  <argument name="program"><text>gaudirun.py</text></argument>
  <argument name="prerequisites"><set>
    <tuple><text>hltdaq.a_dumptolatestformat</text><enumeral>PASS</enumeral></tuple>
  </set></argument>
  <argument name="args"><set>
    <text>../options/dump.py</text>
  </set></argument>
  <argument name="validator"><text>

# Author: rlambert
# Purpose: to check if bank encoder changes are binary compatible
# Pre-requisites: the file in ../options/OnlyHltBanks.mdf needs to exist
#                 and the dumptolatestformat test must have been run
# Common failure modes, severities and cures:
#                 SEVERE: Fatal/Error warnings are always severe
#                         they would indicate a very fundamental problem
#                 MAJOR: If the data content of the RawBanks have changed
#                        without the version number changing!
#                 MINOR: If the data content has changed along with the
#                        version number, check if this is expected
#                        if this is expected update the input file
#                        (run tests and replace ../options/OnlyHltBanks.mdf
#                         with rewritten.pdf)   
#                 TRIVIAL: If the version numbers have changed, 
#                          or new banks are added but nothing else
#                          same cure as if the data content has changed

countErrorLines({"FATAL":0, "ERROR":0, "WARNING" :0})

stdout=[s.strip() for s in stdout.split("\n") if "RawEventDump" in s]

f=open("hltdaq.dump.previous.stdout")
prevstdout=[s.strip() for s in f.readlines()]
f.close()

if prevstdout!=stdout:
  #copy both as new references
  import os
  os.system("cp hltdaq.dump.previous.stdout ../refs/hltdaq.dump.previous.stdout.ref.new")
  f=open("../refs/hltdaq.dump.new.stdout.ref.new","w")
  f.write("\n".join(stdout))
  f.close()
  newlines=[p for p in stdout if p not in prevstdout]
  missing=[p for p in prevstdout if p not in stdout]
  causes.append("difference in data formats")
  if len(newlines)+len(missing)&gt;20:
    result['hltdaq.dumpafterreformat']=result.Quote("more than 20 differences in data formats, check stdout, and diff refs/hltdaq.dump.previous.stdout.new wrt refs/hltdaq.dump.new.stdout.ref.new ")
  elif len(newlines)==len(missing):
    printme=["+ "+newlines[i]+"\n- "+missing[i] for i in range(len(newlines))]
    result['hltdaq.dumpafterreformat']=result.Quote("\n".join(printme))
  else:
    printme=["+ "+newlines[i] for i in range(len(newlines))]
    printme=printme+["- "+missing[i] for i in range(len(missing))]
    result['hltdaq.dumpafterreformat']=result.Quote("\n".join(printme))
</text></argument>
</extension>

