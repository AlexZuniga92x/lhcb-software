#ifndef      DETDESC_SLIDTRAP_ICPP
#define      DETDESC_SLIDTRAP_ICPP 1 
/// GaudiKernel
#include "GaudiKernel/MsgStream.h"
/// DetDesc
#include "DetDesc/SolidTrap.h"
///


//////////////////////////////////////////////////////////////////////////////////////////
inline MsgStream&    operator<<( MsgStream&    os , const SolidTrap& box )          
{ return  box.printOut( os ); }
//////////////////////////////////////////////////////////////////////////////////////////
inline MsgStream&    operator<<( MsgStream&    os , const SolidTrap* box )           
{ return box  ? (os<<*box) : (os<<" SolidTrap* points to NULL!"<<endreq) ; }
//////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////
inline const ISolid* SolidTrap::coverTop      () const 
{
  const ISolid* cov = this; 
  while( cov != cov->cover() ){ cov = cov->cover(); } 
  return cov; 
};
/// reset to the initial state //////////////////////////////////////////////////////////////
inline const   ISolid* SolidTrap::reset() const
{
  if( 0 != m_trap_cover ) { delete m_trap_cover ; m_trap_cover = 0 ; } 
  return this;
};
/////////////////////////////////////////////////////////////////////////////////////////////
inline   bool  SolidTrap::isInside( const HepPoint3D& Point) const 
{ return SolidPolyHedronHelper::isInside( Point ) ; } 
/////////////////////////////////////////////////////////////////////////////////////////////
inline  unsigned int SolidTrap::intersectionTicks ( const HepPoint3D&  Point  ,          // initial point for teh line 
						    const HepVector3D& Vector ,          // vector along the line 
						    ISolid::Ticks   &  ticks  ) const    // output container of "Ticks"
{ return SolidPolyHedronHelper::intersectionTicks( Point, Vector , ticks ); } 
/** calculate the intersection points("ticks") with a given line. 
    Input - line, parametrized by (Point + Vector * Tick) 
    "Tick" is just a value of parameter, at which the intercestion occurs 
    Return the number of intersection points (=size of Ticks container)   
*/
inline  unsigned int SolidTrap::intersectionTicks ( const HepPoint3D&   Point   ,          // initial point for teh line 
						    const HepVector3D&  Vector  ,          // vector along the line 
						    const ISolid::Tick& tickMin ,          // minimal value for the tick 
						    const ISolid::Tick& tickMax ,          // maximal value for tick 
						    ISolid::Ticks   &   ticks   ) const    // output container of "Ticks"
{ return SolidPolyHedronHelper::intersectionTicks( Point, Vector , tickMin , tickMax , ticks ); } 
///////////////////////////////////////////////////////////////////////////////////////////////


#endif   //  DETDESC_SLIDTRAP_ICPP
