#ifndef    DETDESC_SOLIDCONS_ICPP
#define    DETDESC_SOLIDCONS_ICPP 1 
/// GaudiKernel
#include "GaudiKernel/MsgStream.h"
/// DetDesc
#include "DetDesc/SolidCons.h"
///

//////////////////////////////////////////////////////////////////////////////////////////
inline MsgStream&    operator<<( MsgStream&    os , const SolidCons& box )          
{ return  box.printOut( os ); }
//////////////////////////////////////////////////////////////////////////////////////////
inline MsgStream&    operator<<( MsgStream&    os , const SolidCons* box )           
{ return box  ? (os<<*box) : (os<<" SolidCons* points to NULL!"<<endreq) ; }
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
inline   bool  SolidCons::isInside( const HepPoint3D & point ) const
{
  //
  if( abs( point.z() ) > zHalfLength() ) { return false; }
  //
  double rho = point.perp(); 
  //
  if( rho < iR_z( point.z() ) ) { return false; }
  if( rho > oR_z( point.z() ) ) { return false; }
  //
  double phi = point.phi();
  if( phi < 0 ) { phi += 360.0*degree; };
  //
  if( phi < startPhiAngle()                   ) { return false; } 
  if( phi > startPhiAngle() + deltaPhiAngle() ) { return false; }
  //
  return true;
};
///////////////////////////////////////////////////////////////////////////////////////////
inline const ISolid* SolidCons::coverTop      ()  const 
{
  const ISolid* cov = this; 
  while( cov != cov->cover() ){ cov = cov->cover(); } 
  return cov; 
};
///////////////////////////////////////////////////////////////////////////////////////////
inline const ISolid* SolidCons::reset() const
{
  if( 0 != m_cons_cover ) { delete m_cons_cover; m_cons_cover = 0 ; } 
  return this; 
}; 
///////////////////////////////////////////////////////////////////////////////////////////
inline double SolidCons::iR_z( double z ) const
{
  double a = ( innerRadiusAtPlusZ()-innerRadiusAtMinusZ() ) / zHalfLength();
  double b = ( innerRadiusAtPlusZ()+innerRadiusAtMinusZ() )  ; 
  //
  return 0.5*(a*z+b);
} 
//////////////////////////////////////////////////////////////////////////////////////////
inline double SolidCons::oR_z( double z ) const
{
  double a = ( outerRadiusAtPlusZ()-outerRadiusAtMinusZ() ) / zHalfLength();
  double b = ( outerRadiusAtPlusZ()+outerRadiusAtMinusZ() )  ; 
  //
  return 0.5*(a*z+b);
} 
///////////////////////////////////////////////////////////////////////////////////////// 

#endif  // DETDESC_SOLIDCONS_ICPP

