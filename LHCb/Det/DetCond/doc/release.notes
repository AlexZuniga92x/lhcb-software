# $Id: release.notes,v 1.17 2002-04-05 16:25:15 andreav Exp $
Package Det/DetCond
Package manager : Andrea Valassi 

==============================================================================
!20020405 - Andrea Valassi
Minor modifications to requirements
- dependency on CONDDB changed from v3r02 to v3r02p1
- env. variable CONDDB_implementation is defined in CONDDB or Det/CondDBOracle
Requirements v2r1, private tag h20020405

==============================================================================
!20020328 - Andrea Valassi
First Oracle implementation ported to Linux (RedHat 7.2 only)
See doc/README.RedHat72 in Ex/DetCondExample for more details
Corresponds to Emil's first official release of ConditionsDB (0.3.1.0)
- change WIN32 dependency on Det/CondDBOracle package to version v3r10
- add rh72_gcc29521 dependency on Det/CondDBOracle v3r10
- keep rh61_gcc29521 dependency on CONDDB v3r02
Requirements v2r1, private tag h20020328.

==============================================================================
!20020308 - Andrea Valassi
Change dependency on CondDBOracle package to version v2r10 (0.2.1.0).
Requirements v2r1, private tag h20020308.

==============================================================================
!20020301 - Andrea Valassi
First version supported on Windows using an Oracle implementation of CondDB.
- Platform-specific support
  > remove CondDBKey.h from DetCond: use that from the ConditionsDB package
  > interchange the contents of DetCond_dll and DetCond_load
  > remove #ifdef's with dummy failure codes for non-Linux platforms
- Support of Oracle (needed also to suppport Oracle under Linux)
  > implementation specified in the requirements  is propagated via #ifdef's
  > new init string for the Oracle database including host, user and password
  > CondDBOracleMgrFactory or CondDBObjyDBMgrFactory called in either case
Requirements v2r1, private tag h20020301.

==============================================================================
!20020110 - Flr
 requirements - apply packageShr instead of ld_library_path pattern because 
                it is a component library.
                do not apply package_Lshlibflags, there is no linker library.
 
!20011220 - Andrea Valassi
Simplify dependencies on the Gaudi framework.

==============================================================================
!20011216 - Andrea Valassi
Major changes due to tighter coordination with DetDesc and XmlDDDB packages.
- Update cannot be delegated to XmlCnvSvc until major changes in DetDes 
  > code creating and interpreting DOM trees in each Xml converter should be 
    executed also in updateObj(): to avoid duplicating code, a solution is 
    to move it from createObj() to updateObj() or better updateObjRefs(),
    which should be called internally from createObj()
  > my (temporary?) solution is to create a new object using the address, and 
    deep copy part of it into the old one by a Condition::update(Condition&)
    method to deep copy only those properties of a DataObject that refer
    to a Condition (eg validity and parameters); the registry, address,
    reference counts and other DataObject properties should not be deep
    copied instead (hence an overloaded operator= is not introduced)
  > update of DataObjects is only possible for Conditions (and derived classes)
    because this method exists only for Conditions
  > this is the only reason to have a dependency on DetDesc
  > however, DataObjects not implementing IValidity are now assumed valid
    (previously, an error was returned when updating them)
- Changes in folder description
  > classID are removed from all XML refs: remove it from folder description
  > assume that secondary storage type is always read from folder description
- Remove ConditionsDBAddress (a GenericAddress of type CONDDB is enough)
  > par[0] is still the COndDB folder name
  > the tag name is not anymore in the CONDDB address
  > par[1] is now the name of the element (e.g. the name of an XML element)
  > the string storage type is not in the CONDDB address
    (it is now assumed that it is always read from the folder description)
  > ipar{0,1] are not used anymore 
- Registry entry (can be 0) is used in creating and updating Conditions
  > for instance: this is needed for catalog conversion
  > it is set in the secondary temporary address (e.g. an XML catalog address)
- Minor changes in messaging: use VERBOSE tag for verbose comments
- Overload methods for writing representations in ConditionsDBCnvSvc
  > they must be overloaded because this CnvSvc has no converters
  > they are empty for the moment (not yet implemented)
- Upgrade to CMT v1r10: remove scripts and hacks needed to cure a bug in CMT
Requirements v2r0, private tag h20011216.

==============================================================================
!20011130 - Andrea Valassi
Modified version of DetDataSvc in GaudiSvc committed to CVS 
- Contains main features of ConditionDataSvc and ConditionsDBDataSvc
- Remove ConditionDataSvc and ConditionsDBDataSvc from this package

==============================================================================
!20011129 - Andrea Valassi
- Remove the IConditionsDBDataSvc special interface
  > ConditionsDBDataSvc now does little more than ConditionDataSvc
- Implement a dummy IIncidentListener interface in ConditionDataSvc
- Redefine ConditionsDBAddress_undefinedClassID = CLID_NULL (it will disappear)

==============================================================================
!20011128 - Andrea Valassi
Move the global tag from the ConditionsDBDataSvc to the ConditionsDBCnvSvc
- Use IAddressCreator interface of CnvSvc to create addresses with global tag
  > "DEFAULT" becomes a reserved word to indicate the global tag
- Remove method setGlobalTag (the tag can only be set in the job options)

==============================================================================
!20011127 - Andrea Valassi
A few more changes before including my detector data service in GaudiSvc
- The event time is not passed in an address from the DataSvc to the CnvSvc
  > remove IConditionAddress
  > ConditionsDBCnvSvc now reads the event time from the DetDataSvc
  > ConditionDataSvc::updateObject now just checks validity before delegating
- Move interface IDetDataSvc (formerly IConditionDataSvc) to GaudiKernel 
  > needed to retrieve the event time within the ConditionsDBCnvSvc
  > the setEventTime method is temporary (eventually: use the IncidentService)
- Store ConditionsDBAddress private data as GenericAddress private data

==============================================================================
!20011126 - Andrea Valassi
A few changes before including my data service in GaudiSvc.
- Move ConditionData from DetCond/src/Lib to DetCondExample
  > only DataObjects are manipulated, with dynamic casts to IValidity
  > no Lib anymore in DetCond/src
- Manipulate ITime and TimePoint objects rather than ITime pointers
  > add bool method to check if the event time is defined in ConditionDataSvc

==============================================================================
!20011123 - Andrea Valassi
Upgrade to Gaudi v9
- Addresses now inherit from GenericAddress (which has been simplified a lot)
- There are no address factories any more
- Adapt to changes in RegistryEntry (which now implements IRegistry)
- Add dummy methods fillObjRefs and updateObjRefs in ConditionsDBCnvSvc
- Notify (by flag "true") ServiceLocator to create services not existing yet
Requirements v2, private tag h20011123.

==============================================================================
!20010914 - Andrea Valassi
New package.
Requirements v1, private tag v1.

