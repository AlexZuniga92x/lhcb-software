########################################################################
# Z0 -> mu mu
#
# This DaVinci script runs over MC Z0 -> mu+ mu-,
# such as that generated by the Gauss particle gun configuration ../gauss/Z0Gun.py
# ALTHOUGH:
# --- The particle gun generation seems to ignore natural width of Z
# --- Moreover, it also ignores gamma / Z interference
# --- Instead, the MC Z0 -> mu mu in bookkeeping should be used
# It saves the invariant mass of the dimuon, i.e. the observed Z0 mass
# including RBW shape, gamma/Z0 interference, and FSR
#
# @author Jack Wimberley
# @date 2013-10-11
########################################################################

from Gaudi.Configuration import *
from Configurables import DaVinci
from GaudiKernel.SystemOfUnits import *

# -------
# OPTIONS
# -------

MessageSvc().OutputLevel = INFO
DaVinci().EvtMax = -1
DaVinci().PrintFreq = 100
DaVinci().HistogramFile = "PythiaZ0_histos.root"
DaVinci().TupleFile = "PythiaZ0.root"

DaVinci().DataType = "2012"
from Configurables import CondDB
CondDB().UseLatestTags = ["2012"]

# --------------
# MC TRUTH TUPLE
# --------------

from Configurables import DecayTreeTuple, MCDecayTreeTuple
from DecayTreeTuple.Configuration import *
mudecay = "Z0 => ^mu+ ^mu-"
tuple = MCDecayTreeTuple("PythiaZ0Tuple")
tuple.TupleName = "DecayTree"
tuple.addBranches({
    "Z0" : "Z0 => mu+ mu-"
    , "MuP" : "Z0 => ^mu+ mu-"
    , "MuM" : "Z0 => mu+ ^mu-"
    })
tuple.Decay = mudecay
tuple.ToolList = []
from Configurables import LoKi__Hybrid__TupleTool
from Configurables import LoKi__Hybrid__MCTupleTool
LTT = tuple.addTupleTool("LoKi::Hybrid::MCTupleTool/LTT")
LTT.Preambulo += ["from LoKiCore.functions import *"]
LTT.Variables = {
    "MCE" : "MCE"
    , "MCETA" : "MCETA"
    , "MCP" : "MCP"
    , "MCPX" : "MCPX"
    , "MCPY" : "MCPY"
    , "MCPZ" : "MCPZ"
    , "MCPT" : "MCPT"
    , "MCTHETA" : "MCTHETA"
    , "MCPHI" : "MCPHI"
    }
Z0LTT = tuple.Z0.addTupleTool("LoKi::Hybrid::MCTupleTool/Z0LTT")
Z0LTT.Preambulo += [
    "from LoKiCore.functions import *"
    , "from LoKiCore.math import *"
    , "E = MCCHILD(MCE,1) + MCCHILD(MCE,2)"
    , "PX = MCCHILD(MCPX,1) + MCCHILD(MCPX,2)"
    , "PY = MCCHILD(MCPY,1) + MCCHILD(MCPY,2)"
    , "PZ = MCCHILD(MCPZ,1) + MCCHILD(MCPZ,2)"
    ]
Z0LTT.Variables = { "MM" : "sqrt(E*E - PX*PX - PY*PY - PZ*PZ)/1000" }


DaVinci().appendToMainSequence( [ tuple ] )


# COMBINE PARTICLES
from PhysSelPython.Wrappers import AutomaticData, Selection, SelectionSequence
from Configurables import FilterDesktop, CombineParticles
MuonLoc = 'Phys/StdAllLooseMuons/Particles'
MuonSel = AutomaticData(Location = MuonLoc)

MyTMMuonAlg = FilterDesktop("MyTMMuonAlg")
MyTMMuonAlg.Preambulo = [ "from LoKiPhysMC.decorators import *" ] 
MyTMMuonAlg.Code = "mcMatch( 'Z0 => ^mu+ mu-' ) | mcMatch( 'Z0 => mu+ ^mu-' )"
MyTMMuonSel = Selection("MyTMMuonSel", Algorithm = MyTMMuonAlg, RequiredSelections = [MuonSel])

MyTMZ0Alg = CombineParticles("MyTMZ0Alg")
MyTMZ0Alg.DecayDescriptor = 'Z0 -> mu+ mu-'
MyTMZ0Alg.Preambulo = [ "from LoKiPhysMC.decorators import *" ] 
MyTMZ0Alg.MotherCut = "mcMatch( 'Z0 => mu+ mu-' )"
MyTMZ0Sel = Selection("MyTMZ0Sel", Algorithm = MyTMZ0Alg, RequiredSelections = [MyTMMuonSel])
MyTMZ0Seq = SelectionSequence("MyTMZ0Seq", TopSelection = MyTMZ0Sel)

DaVinci().appendToMainSequence( [ MyTMZ0Seq.sequence() ] )

# -----
# TUPLE
# -----

tuple = DecayTreeTuple("Z02MuMu_Tuple")
tuple.Inputs = [ MyTMZ0Seq.outputLocation() ]
tuple.Decay = "Z0 -> ^mu+ ^mu-"

DaVinci().appendToMainSequence( [ tuple ] )


