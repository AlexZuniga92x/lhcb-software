// Main job options for running Escher
//***************************************

//for histos
#include "$STDOPTS/RootHist.opts"

//---------------------------------------------------------------------------
// Geometry specific options
//---------------------------------------------------------------------------
// Uncomment the line below to read the xml version of the dbase
//DetectorDataSvc.DetDbLocation = "$XMLDDDBROOT/DDDB/lhcb.xml";
//---------------------------------------------------------------------------
// Use sqlite dbase
//---------------------------------------------------------------------------
// DC06 database tags
// Comment the two lines below to switch back to the xml dbase
//DDDB.DefaultTAG = "DC06";
//LHCBCOND.DefaultTAG = "DC06";
#include "$DDDBROOT/options/DC06.opts"
#include "$STDOPTS/DC06Conditions.opts"

// DC06 magnetic field
//MagneticFieldSvc.FieldMapFile = "$FIELDMAPROOT/cdf/field047.cdf";

// Standard LHCb application setup
#include "$STDOPTS/LHCbApplication.opts"

//Pool persitency
#include "$STDOPTS/DstDicts.opts"

// Start Main Escher sequence
ApplicationMgr.TopAlg += { "GaudiSequencer/EscherMainSeq" } ;
EscherMainSeq.MeasureTime = true ;
EscherMainSeq.Members += { "LbAppInit/Escher" };
ApplicationMgr.AppName = "Escher" ;
Escher.OutputLevel = 3;
MessageSvc.OutputLevel = 3;
ToolSvc.OutputLevel = 3;

// Start TransportSvc, needed by track fit
ApplicationMgr.ExtSvc += { "TransportSvc" };
TransportSvc.OutputLevel = 6; /// Turn off error in TransportSvc.

// Data on demand service for decoding RawBuffer
ApplicationMgr.ExtSvc += { "DataOnDemandSvc" };
#include "$STDOPTS/DecodeRawEvent.opts"

EscherMainSeq.Members += { "GaudiSequencer/DecodingSeq" } ;
DecodingSeq.MeasureTime = true;

// Decode Velo
DecodingSeq.Members += { "DecodeVeloRawBuffer", 
                         "DecodeVeloRawBuffer/DecodeVeloClusters" };
DecodeVeloClusters.DecodeToVeloLiteClusters = false;
DecodeVeloClusters.DecodeToVeloClusters     = true;

// Decode TT/ST
DecodingSeq.Members += {"RawBankToSTClusterAlg/createITClusters", 
                        "RawBankToSTLiteClusterAlg/createITLiteClusters"
};
createITClusters.detType     = "IT";
createITLiteClusters.detType = "IT";
#include "$STTOOLSROOT/options/Brunel.opts"

// Decode OT 
DecodingSeq.Members += { "OTTimeCreator" };

// Muon stuff
DecodingSeq.Members += { "MuonRec", "MuonID" };
#include "$MUONIDROOT/options/MuonID.opts"

//**************************
// Track fit:
//**************************
// EscherMainSeq.Members += { "GaudiSequencer/TrackFitSeq" };

// TrackFitSeq.Members += { "TrackFilterAlg/FilterTracks", 
//                          "TrackEventFitter/FitTracks"   };
// TrackFitSeq.MeasureTime                = true;
// FilterTracks.TracksInputContainer      = "Rec/Track/Best";
// FilterTracks.TracksOutputContainer     = "Alignment/FilteredTracks";
// FilterTracks.TrackType                 = "Long";
// FilterTracks.StripUnwantedDetectorHits = true;
// FilterTracks.KeepDetectorHits          = "OT";
// FilterTracks.MinNHits                  = 3; 
// FilterTracks.Selector.TracksLocation   = "Rec/Track/Best";
// FilterTracks.Selector.BFieldStatus     = false;
// FilterTracks.Selector.TrackType        = "OT";
// //FilterTracks.Selector.IsolatedTrackNStripsTolerance = 2;
// //FilterTracks.Selector.IsolatedTrackNStrawsTolerance = 1;
// //FilterTracks.Selector.MomentumMinCut = 20.0*GeV;
// //FilterTracks.Selector.Chi2PerDoFMaxCut = 999999;
// //FilterTracks.Selector.Chi2ProbMinCut = 0.01;
// //FilterTracks.Selector.Chi2ProbMinCut = 0.3;
// //FilterTracks.Selector.NHolesMaxCut = 1;
// //FilterTracks.Selector.NSharedHitsMaxCut = 0;
// //FilterTracks.Selector.NCloseHitsMaxCut = 3;
// FilterTracks.OutputLevel               = 2;
// FitTracks.TracksInContainer            = "Alignment/FilteredTracks";
// FitTracks.TracksOutContainer           = "Alignment/AlignmentTracks";
// //FitTracks.Fitter.NumberFitIterations = 3;
ToolSvc.DetailedMaterialLocator.OutputLevel = 5;

