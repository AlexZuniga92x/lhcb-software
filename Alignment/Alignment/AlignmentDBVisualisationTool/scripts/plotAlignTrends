#!/usr/bin/env python2
"""
Command-line script to make an alignment "trends" root file
"""
__author__ = "Pieter David <pieter.david@nikhef.nl>"
__date__   = "September 2012"

import logging

from optparse import OptionParser

parser = OptionParser()
parser.usage = "%prog [options] elements dofs [dbfile]"

parser.add_option("-c", "--coordinateFrame", dest="coords", default="global", help="Make plots using local or global coordinates [default: %default]")
parser.add_option("-r", "--reference", dest="refDbFile",   default=None, metavar="REFERENCE",
                  help="SQLite file (without IOVs) containing a reference alignment, e.g. survey")
parser.add_option("-o", "--outdir",    dest="outDirName",  default="AlignmentsCompared", metavar="OUTDIR",
                  help="Output directory [default: %default]")
parser.add_option("--since",           dest="since",       default="2012-01-01",
                  help=("Starting point of time trend [default: %default]. "
                        "Format: \"YYYY-MM-DD[_HH:MM[:SS.SSS]][UTC]\" "
                        "(if UTC is absent, timezone is used)")                )
parser.add_option("--until",           dest="until",       default="2013-01-01",
                  help=("Endpoint of time trend [default: %default]. "
                        "Format: \"YYYY-MM-DD[_HH:MM[:SS.SSS]][UTC]\" "
                        "(if UTC is absent, timezone is used)")                )
parser.add_option("--timezone",        dest="timezone",    default="CET",
                  help="timezone used to parse since and until, and for the x axis [default: %default]")
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="Turn on verbose messages")
parser.add_option("-i", "--info", action="store_true", dest="info", default=False, help="Turn on info messages")

(options, args) = parser.parse_args()

assert len(args) > 1
elements = args[0]
dofs = args[1].split(",")

sliceConnectString = None
if len(args) > 2:
    sliceConnectString="sqlite_file:%s/LHCBCOND" % args[2]


if options.verbose:
    logging.basicConfig(level=logging.DEBUG)
elif options.info:
    logging.basicConfig(level=logging.INFO)
else:
    logging.basicConfig(level=logging.ERROR)

refConnStr = options.refDbFile
if refConnStr is not None:
    refConnStr = "sqlite_file:%s/LHCBCOND" % refConnStr

from CompareAlignmentConstants.AlignmentComparisonPlots import plotAlignmentParametersTimeSeries

plotAlignmentParametersTimeSeries(
    elements, dofs
    , sliceConnectString=sliceConnectString
    , since=options.since
    , until=options.until
    , refConnectString=refConnStr
    , outputdir=options.outDirName
    , timezone=options.timezone
    , coordinateFrame=options.coords
    , addStats=True
    )
