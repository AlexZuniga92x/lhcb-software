#!/usr/bin/env python2
"""
Command-line script to make alignment heat maps
Modification of plotAlignDiff by Pieter David <pieter.david@nikhef.nl>
"""
__author__ = "Jason Emory Andrews <jea@umd.edu>"
__date__   = "February 2013"

import logging
from optparse import OptionParser

class MyParser(OptionParser):
    # override default epilog formatter because it strips newlines
    def format_epilog(self, formatter):
        return self.epilog

parser = MyParser(epilog =
                  """
Valid degrees-of-freedom (dofs): Tx,Ty,Tz,Rx,Ry,Rz
Values plotted are alignment1 relative to alignment2 (alignment1 - alignment2).
Enter each alignment as either an sqlite file or a date range for retrieving IOVs from the CondDB.
Format date ranges as since,until[,CondDBtag] with CondDBtag optional.
If more than one IOV is contained in the date range, the latest IOV will be used.

Layer name conventions:
                  TT: TT(a,b)/TT(a(X,U), b(X,V))Layer, eg 'TTb/TTbXLayer' etc.
                  IT: Station(1-3)/Layer(X1,U,V,X2), eg 'Station2/LayerX1' etc.
                  OT: T(1-3)/(X1,U,V,X2), eg 'T1/V' etc.
Usage examples:
    plotAlignHeat TT Tx,Tz 2012-12-04,2012-12-07 ~/public/alignment/Alignment_survey.db
    plotAlignHeat -l T2/X2 -a 0.1,-1 OT Tx,Rz 2012-12-04,2012-12-07 2012-11-08,2012-12-03

""")
parser.usage = "%prog [options] detector dof1,dof2,... alignment1 alignment2"
parser.add_option("-a", "--alarms", dest="alarmString", default=False, metavar="ALARMLIST",
                  help="Set alarm thresholds for the requested dofs. Plots will be produced only for layers which have an alignment difference that exceeds its threshold."
                  + " Enter thresholds as positive values separated by commas without spaces, with the order mathcing the order in which the dofs are entered."
                  + " A threshold value of -1 corresponds to alarm-mode=off for that dof. [default: -1 for all dofs]")
parser.add_option("-l", "--layer", dest="layerName", default="all", metavar="LAYERNAME", help="Only make plots for the given layer [default: make plots for all layers]")
parser.add_option("-n", "--names", action="store_true", dest="names", default=False, help="Draw element names [default: %default]")
parser.add_option("-o", "--outdir",    dest="outDirName",     default="AlignmentsCompared", metavar="OUTDIR",
                  help="Output directory [default: %default]")
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="Turn on verbose messages [default: %default]")

(options, args) = parser.parse_args()

if 4 != len(args):
    print "Expected 4 args, received %r. Use -h option for help dialogue." % len(args)
    import sys
    sys.exit()

Alarms = {"Tx":-1,"Ty":-1,"Tz":-1,"Rx":-1,"Ry":-1,"Rz":-1}
if options.alarmString:
    alarmList = options.alarmString.split(",")
    for (i, dof) in enumerate(dofs):
        threshold = float(alarmList[i])
        if dof.startswith("T"):
            units = "(mm)"
        elif dof.startswith("R"):
            units = "(mrad)"
        print "Setting alarm threshold for %s to %s " % (dof, threshold) + units
        Alarms[dof] = threshold

if options.verbose:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.ERROR)

from CompareAlignmentConstants.AlignmentComparisonPlots import parseRequestedAlignments, plotAlignmentParametersHeat

detector = args[0]
dofs = args[1].split(",")
alignments = args[2:4]
titles = []
parseRequestedAlignments( alignments, titles )

plotAlignmentParametersHeat(
        detector, dofs
      , alignments
      , titles
      , outputDir=options.outDirName
      , layers=[options.layerName]
      , drawNames=options.names
      , AlarmThresholds=Alarms
      )
