#!/usr/bin/env python2
"""
Command-line script to make an alignment "diff" root file
"""
__author__ = "Pieter David <pieter.david@nikhef.nl>"
__date__   = "September 2012"

import logging

from optparse import OptionParser

class MyParser(OptionParser):
    # override default epilog formatter because it strips newlines
    def format_epilog(self, formatter):
        return self.epilog

parser = MyParser(epilog =
                  """
Enter each alignment as either an sqlite file or a date range for retrieving IOVs from the CondDB.
Format date ranges as since,until[,CondDBtag] with CondDBtag optional.
All IOVs in the date range will be plotted.

Valid detector elements are
Velo.[Halves, Modules, Sensors]
  TT.[Layers, Modules, Sensors]
  IT.[Boxes,  Layers,  Ladders, Sensors]
  OT.[CFrameLayers, CFrames, Modules]
""")

parser.usage = "%prog [options] elements dofs alignment1 ..."

parser.add_option("-c", "--coordinateFrame", dest="coords", default="global", help="Make plots using local or global coordinates [default: %default]")
parser.add_option("-r", "--reference", dest="refDbFile",      default=None, metavar="REFERENCE",
                  help="SQLite file (without IOVs) containing a reference alignment, e.g. survey")
parser.add_option("-o", "--outdir",    dest="outDirName",     default="AlignmentsCompared", metavar="OUTDIR",
                  help="Output directory [default: %default]")
parser.add_option("--binLabelsRegex",  dest="binLabelsRegex", default=".+/Alignment_(?P<label>[0-9a-zA-Z]+)\.db/LHCBCOND$",
                  help="Regular expression for connection strings. The pattern \"label\" is used as bin label [default: %default]")
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="Turn on verbose messages")
parser.add_option("-i", "--info", action="store_true", dest="info", default=False, help="Turn on info messages")

(options, args) = parser.parse_args()

assert len(args) > 2

if options.verbose:
    logging.basicConfig(level=logging.DEBUG)
elif options.info:
    logging.basicConfig(level=logging.INFO)
else:
    logging.basicConfig(level=logging.ERROR)

refConnStr = options.refDbFile
if refConnStr is not None:
    refConnStr = "sqlite_file:%s/LHCBCOND" % refConnStr

from CompareAlignmentConstants.AlignmentComparisonPlots import parseRequestedAlignments, plotAlignmentParametersComparison

elements = args[0]
dofs = args[1].split(",")
alignments = args[2:]
parseRequestedAlignments( alignments )

plotAlignmentParametersComparison(
    elements, dofs
    , alignments
    , binLabels=options.binLabelsRegex
    , refConnectString=refConnStr
    , outputdir=options.outDirName
    , coordinateFrame=options.coords
    )
