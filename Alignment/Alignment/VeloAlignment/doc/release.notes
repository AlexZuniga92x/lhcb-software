! Package     : VeloAlignment
! Responsible : Marco Gersabeck


!=============================================================================
! 16/04/2008 - Marco Gersabeck  ** v4r1 **

  - Align.cpp(h): New method updateConditions to update alignment conditions 
                  in memory at the end of the algorithm to enable the use of
                  WriteAlignmentConditions

  - AlignSensors.cpp/h/otps: 
                  o Use of VeloClusterPotitionTool for calculation of inter-
                    strip position
                  o Do fit in Velo half frame instead of global frame to enable
                    use when VELO open
                  o Only update constants when delta in either x or y is significant,
                    i.e. delta/error > MinDeltaSig (new option)
                  

!=============================================================================
! 23/01/2008 - Marco Gersabeck  ** v4r0 **

  - New version now includes VELO sensor alignment

  - New files are: src/AlignSensors.[cpp/h] containing the source code
                   options.AlignSensors.opts with the options

  - The algorithm runs with Escher by running a python script provided in
                   the Escher/job directory

!=============================================================================
! 04/09/2007 - Sebastien Viret  ** v3r0 **

  New version in preparation of the integration of VeloAlignment into the 
  Alignment project	

  Changes are:

  - Align.cpp(h) : Changed to a GaudiTupleAlg, simplification of nTuple filling
	           procedure.

  - TrackStore.cpp(h) : Cluster positions are now computed using VeloDet information.

 		        The track states are now defined in VELO box frames, this is taken
			into account when expressing the local spacepoints into global frames.

			Add an ACDC joboption (in TrackStore.opts) having the same purpose that
			the ACDC option of PatVeloGeneric. Suppress obsoletes options.

                        GetTrackSlope() method is suppressed and ported to the VeloTrack class.
 
  - MilleConfig.cpp(h) : Minor changes, except that we have now 3 global params instead of 4
			 for the box alignment (cosmetic change mainly...). 

  - PVHisto.cpp(h) : Suppress GetTrackSlope() (see VeloTrack())

  - VeloTrack.cpp(h) : Added GetTrackSlope() here, inorder to avoid duplication.

  This version has been tested successfully with Brunel v31r8, using events 
  misaligned with the new CondDB. It's now using AlignmentInterfaces package
  instead of AlignmentTools.

!=============================================================================
! 26/04/2007 - Sebastien Viret  ** v2r4 **

  New optimisation of the code. In particular, the AlignTrack.xml file has been
  replaced by a simpler VeloTrack.h class, now sitting in /src/ directory.

  This version NEEDS 'AlignmentTools v2r5' or higher to work. A new memory 
  allocation technique has been setup. 


!=============================================================================
! 07/03/2007 - Sebastien Viret  ** v2r3 **

  This release presents the final version of boxes alignment, mixing primary vertices 
  and overlaps in one single fit. It needs the latest version of Millepede (v2r4),
  with the new non-linear treatment. Major modifications are in Milleconfig.cpp method.

  Information on 'how-to' run this code (including analysis macros), might be found 
  at the following address:

  http://ppewww.physics.gla.ac.uk/LHCb/VeloAlign/VeloApplication_7.html


!=============================================================================
! 19/09/2006 - Sebastien Viret  ** v2r2 **

  Modifications mainly in TrackStore.cpp. Misalignments contained in the XmlConditions
  are now fully taken into account during the alignment process. So now, if you
  run the code on misaligned data with the correct alignment.xml file, you should
  end up with zero misalignments.

  Also few minor bug fixes, and warning messages removed.


!=============================================================================
! 27/07/2006 - Sebastien Viret  ** v2r1 **

  Minor change in the jobOptions files. The number of track in the sample used to
	monitor the residuals could now be set in AlignmentMonitor.opts

  This version uses version v2r2 of AlignmentTools.

!=============================================================================
! 26/07/2006 - Sebastien Viret  ** v2r0 **

  Lots of majors changes in this new version:

  * This version now includes both STEP1 (internal alignment by tracks) and STEP2
	(box alignment with primary vertices and (or) overlaps) alignment. This implies mainly
	changes in Milleconfig and TrackStore. 

  * This is also the first version fully adapted to all DC06 changes (new TEM,...).

  * Alignment monitoring via NTuple has been improved. There is now the possibility to get 
	a independant sample of 1000 tracks in order to check the residuals. Monitoring ntuples
	could be requested via joboptions file. 

  * Options files have been slightly simplified and are fully commented

  However this version is still a preliminary one (in part. for STEP2) and is mainly
	dedicated to ACDC system tests.    

  For more information on how to use this package :

	http://ppewww.ph.gla.ac.uk/LHCb/VeloAlign/	

  Package has been tested with : LHCb   v21r2
                                 Brunel v30r5

!=============================================================================
! 01/02/2006 - Sebastien Viret  ** v1r0 **

  First release of the VELO Alignment package.

  This package uses the Millepede Alignment Tool. To do so it takes Track objects
  and transform them into AlignTrack which is a 'Millepede-friendly' class of track.

  This transformation is done via a TrackStore tool. Then Millepede is feeded using
  a MilleConfig object, which makes the interface with Millepede.

  Environment requested to compile: LHCb   v19r3
                                    Brunel v28r2



