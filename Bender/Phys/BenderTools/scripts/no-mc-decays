#!/usr/bin/env python
# -*- coding: utf-8 -*-
# =============================================================================
# $Id:$ 
# =============================================================================
## @file no_mc_decays
#
#  Simple script to address ``MCDecayTuple does not contain all events'' problem
#
#  It looks for MC-decays, that passes ``GENERICDECAY'' but not ``DECAYINQUESTION''
#  - it helps to tune the decay descriptor, used in ``DECAYINQUESTION''
#
#  This file is a part of 
#  <a href="http://cern.ch/lhcb-comp/Analysis/Bender/index.html">Bender project</a>
#  <b>``Python-based Interactive Environment for Smart and Friendly Physics Analysis''</b>
#
#  The package has been designed with the kind help from
#  Pere MATO and Andrey TSAREGORODTSEV. 
#  And it is based on the 
#  <a href="http://cern.ch/lhcb-comp/Analysis/LoKi/index.html">LoKi project:</a>
#  <b>``C++ ToolKit for Smart and Friendly Physics Analysis''</b>
#
#  By usage of this code one clearly states the disagreement 
#  with the smear campaign of Dr.O.Callot et al.: 
#  ``No Vanya's lines are allowed in LHCb/Gaudi software''
#
# Usage:
#
# @code
#
#    no-mc-decays [options] -a GENERICDECAY
#                           -b DECAYINQUESTION file1 [ file2 [ file3 [ file4 ....'
#
#  @endcode 
#
#  @date   2011-10-24
#  @author Vanya BELYAEV Ivan.Belyaev@itep.ru
#
#                    $Revision: 152803 $
#  Last modification $Date: 2013-02-23 14:29:42 +0100 (Sat, 23 Feb 2013) $
#                 by $Author: ibelyaev $
# =============================================================================
""" Simple script to address ``MCDecayTuple does not contain all events'' problem

It looks for MC-decays, that passes ``GENERICDECAY'' but not ``DECAYINQUESTION'' 
- it helps to tune the decay descriptor, used in ``DECAYINQUESTION'' 

This file is a part of BENDER project:

  ``Python-based Interactive Environment for Smart and Friendly Physics Analysis''

The project has been designed with the kind help from Pere MATO and Andrey TSAREGORODTSEV. 

And it is based on the LoKi project:
 
   ``C++ ToolKit for Smart and Friendly Physics Analysis''

By usage of this code one clearly states the disagreement with
the smear campaign of Dr.O.Callot et al.:

   ``No Vanya's lines are allowed in LHCb/Gaudi software''


                  $Revision: 152803 $
Last modification $Date: 2013-02-23 14:29:42 +0100 (Sat, 23 Feb 2013) $
               by $Author: ibelyaev $

"""
# =============================================================================
__author__  = " Vanya BELYAEV Ivan.Belyaev@itep.ru "
__date__    = " 2013-09-25 "
__version__ = " $Revision: 162137 $ "
__usage__   = """
   no-mc-decays [options] -d GENERICDECAY
                          -z DECAYINQUESTION file1 [ file2 [ ....
                          
   It looks MC-decays, that passes ``GENERICDECAY'' but not ``DECAYINQUESTION''
   - it helps to tune the decay descriptor, used in ``DECAYINQUESTION''

   """
# =============================================================================
__author__  = " Vanya BELYAEV Ivan.Belyaev@itep.ru "
__date__    = " 2013-09-25 "
__version__ = " $Revision: 190650 $ "
# =============================================================================
import ROOT
ROOT.PyConfig.IgnoreCommandLineOptions = True
# =============================================================================
## logging
# =============================================================================
from Bender.Logger import getLogger, setLogging  
if '__main__' == __name__ : logger = getLogger ( 'Bender/no-mc-decay' )
else                      : logger = getLogger ( __name__ )
# =============================================================================
from BenderTools.Parser import makeParser 
parser = makeParser  (
    prog        = 'no-mc-decays' ,
    description = """Address ``MCDecayTuple does not contain all events'' problem,
    adjusting the proper MC decay descriptor to pickup proper simulated decays
    """,
    version     = __version__ 
    )
group_dec = parser.add_argument_group(
    'Decays' ,
    'Properties to define the decays')
group_dec.add_argument (
    '-b'                      ,
    '--basic'                 ,
    type     = str            ,
    required = True           ,
    dest     = 'GenericDecay' ,
    help     = """The decay descriptor for ``generic'' decay:
    script will look for decays that have this generic pattern
    """ ,
    )
group_dec.add_argument (
    '-t'                         ,
    '--test'                     ,
    type     =  str              ,
    required = True              ,
    dest     = 'DecayInQuestion' ,
    help     = """The decay descriptor for ``decay-in-question'':
    script will look for decays that have NOT this missing pattern
    """,
    )
parser.add_argument (
    '-n'                          ,
    '--nevents'                   ,
    dest    = 'nEvents'           ,
    type    = int                 , 
    help    = "Number of events to process [default: %(default)s]" ,
    default = 5000     
    )
parser.add_argument ( 
    '--no-color'     ,
    dest    = 'Color'      , 
    action  = 'store_false' , 
    help    = "Do not use colorization", 
    default = True          )
## 
config = parser.parse_args()
if config.Color :
    from Bender.Logger import make_colors
    make_colors ()

logger.info ( 100*'*'  ) 
if config.Quiet :
    logger.info (" Script to address common problem ``no MC-decays are founs''" )
else :
    logger.info ( __doc__ ) 
    logger.info ( ' Author  : %s ' %  __author__  ) 
    logger.info ( ' Version : %s ' %  __version__ ) 
    logger.info ( ' Date    : %s ' %  __date__    ) 
    logger.info ( 100*'*'  ) 

from BenderTools.NoMCdecay import noDecays 
sc = noDecays  ( config , config.Color )
if sc.isFailure() :
    logger.error("Error from BenderTools.NoMCdecay: %s" % sc )
    exit(1)

# =============================================================================
# The END 
# =============================================================================
