#!/usr/bin/env python 
# -*- coding: utf-8 -*-
# =============================================================================
# $Id: trg-check 129602 2011-09-29 17:04:25Z ibelyaev $ 
# =============================================================================
## @file trg-check
#
#  Trivial Bender-based script to check trigger decisions 
#                                                 for certain (stripping) line
#
#  This file is a part of 
#  <a href="http://cern.ch/lhcb-comp/Analysis/Bender/index.html">Bender project</a>
#  <b>``Python-based Interactive Environment for Smart and Friendly Physics Analysis''</b>
#
#  The package has been designed with the kind help from
#  Pere MATO and Andrey TSAREGORODTSEV. 
#  And it is based on the 
#  <a href="http://cern.ch/lhcb-comp/Analysis/LoKi/index.html">LoKi project:</a>
#  <b>``C++ ToolKit for Smart and Friendly Physics Analysis''</b>
#
#  By usage of this code one clearly states the disagreement 
#  with the smear campaign of Dr.O.Callot et al.: 
#  ``No Vanya's lines are allowed in LHCb/Gaudi software''
#
#  @date   2010-09-10
#  @author Vanya BELYAEV Ivan.Belyaev@itep.ru
#
#                    $Revision: 129602 $
#  Last modification $Date: 2011-09-29 19:04:25 +0200 (Thu, 29 Sep 2011) $
#                 by $Author: ibelyaev $
# =============================================================================
"""Bender-script to check/collect/classify trigger desisions for particles
          from certain TES location (e.g. output of the stripping line)

This file is a part of BENDER project:

  ``Python-based Interactive Environment for Smart and Friendly Physics Analysis''

The project has been designed with the kind help from Pere MATO and Andrey TSAREGORODTSEV. 

And it is based on the LoKi project:
 
   ``C++ ToolKit for Smart and Friendly Physics Analysis''

By usage of this code one clearly states the disagreement with
   the smear campaign of Dr.O.Callot et al.:

   ``No Vanya's lines are allowed in LHCb/Gaudi software''

                  $Revision: 189829 $
Last modification $Date: 2015-06-08 10:41:05 +0200 (Mon, 08 Jun 2015) $
               by $Author: ibelyaev $
"""
# =============================================================================
__author__  = 'Vanya BELYAEV Ivan.Belyaev@itep.ru'
__date__    = "2010-09-10"
__version__ = '$Revision: 193703 $'
# =============================================================================
import ROOT
ROOT.PyConfig.IgnoreCommandLineOptions = True
# =============================================================================
def with_ipython() :
    try :
        __IPYTHON__
        return True
    except NameError :
        return False 
# =============================================================================
if with_ipython () : raise RuntimeError("Can't run trg-check from ipython!")
# =============================================================================
from BenderTools.Parser import makeParser
parser = makeParser (
    prog        = 'trg-check' ,
    description = "Script to check trigger decisions for certain lines" ,
    version     = __version__ )
parser.add_argument (
    '-n'                          ,
    '--nevents'                   ,
    type    = int                 , 
    dest    = 'nEvents'           ,
    help    = "Number of events to process [default : %(default)s]" ,
    default = 1000                  
    )
parser.add_argument (
    '-t'             , 
    '--teslocation'  ,
    nargs    = '?'   ,
    type     = str   ,
    required = True  , 
    help     = 'TES location of particles (e.g. stripping line) to be tested'
    )
group = parser.add_mutually_exclusive_group()
group.add_argument (
    '-z' ,
    '--interactive'  ,
    action  = 'store_true' , 
    help    = "Start interactive python shell [default: %(default)s]",
    default = False  )
    ##
group.add_argument (
    '-e' ,
    '--embed' , 
    action  = 'store_true' ,
    help    = "Start embedded python shell [default: %(default)s]" ,
    default = False ) 
group.add_argument (
    '-y' ,
    '--plain'             ,
    action = 'store_true' ,
    help   = 'Start plain python shell [default : %(default)s]' ,
    default = False ) 

parser.add_argument ( 
    '--no-color'     ,
    dest    = 'Color'      , 
    action  = 'store_false' , 
    help    = "Do not use colorization", 
    default = True          )

import sys 
config = parser.parse_args( [ a for a in sys.argv[1:] if '--' != a ] ) 

if 0 >= config.nEvents and -1 != config.nEvents : config.nEvents = 1000


# =============================================================================
# logging 
# =============================================================================
from Bender.Logger import getLogger
if config.Color :
    from Bender.Logger import make_colors
    make_colors()
    del make_colors 
if '__main__' == __name__ : logger = getLogger ( 'Bender/trg-check' )
else                      : logger = getLogger ( __name__           )
# =============================================================================

from Bender.Logger import setLogging
if config.Quiet :
    
    logger.info ( 'Script to collect/check trigger decisions for certain lines')
    import logging
    logging.disable ( logging.INFO  )
    config.OutputLevel = 4
    setLogging ( config.OutputLevel ) 

else :

    setLogging ( config.OutputLevel ) 

    logger.info ( 100*'*')
    logger.info ( __doc__ ) 
    logger.info ( 100*'*')
    logger.info ( ' Author  : %s ' % __author__   ) 
    logger.info ( ' Version : %s ' % __version__  ) 
    logger.info ( ' Date    : %s ' % __date__     )
    logger.info ( 100*'*')

from Configurables import MessageSvc
MessageSvc().Format = "% F%80W%S%7W%R%T %0W%M"

## some sanity adjustments:
config.teslocation  = config.teslocation.strip() 
config.RootInTES    = config.RootInTES  .strip() 

## from BenderTools.Utils import silence, totalSilence
## silence()
## if config.Quiet or 5 <=config.OutputLevel :
##     totalSilence()

#
## adjust configuration settings
# 
if config.Simulation : from Bender.MainMC   import *
else                 : from Bender.Main     import *


from BenderTools.CheckTrg import configChkTrg
alg = configChkTrg( config , colors = config.Color ) 


#
## start gaudi
#

gaudi = appMgr()

if config.Color : run_progress ( config.nEvents )              
else            : run          ( config.nEvents )              


## check the problems 
def checkAlg ( algo ) :

    problem = False 
    if algo and not algo.used     :
        algo.Error ('Algorithm was not invoked, check configuration!')
        problem = True
    if alg and not algo.nums     :
        algo.Error ('Algorithm has not found particles at %s, check configuration!' % alg.Inputs ) 
        problem = True
    if alg and not algo.triggers :
        algo.Error ('Algorithm has not found trigger information, check configuration!')
        problem = True
    if problem and not config.Quiet : 
        algo.PropertiesPrint = True   

#
## stop or continue as batch?
#
if  config.embed :

    checkAlg ( alg ) 
    ## print trigger decisions
    alg.trgDecs()
    
    logger.info ('Start embedded interactive shell') 
    import IPython
    IPython.embed ()

    del alg 
    exit() 

elif config.plain :
        
    checkAlg ( alg ) 
    ## print trigger decisions 
    alg.trgDecs()

    __vars = globals().copy()
    
    import readline
    import code
    
    logger.info ('Start plain interactive shell') 
    
    shell = code.InteractiveConsole(__vars)
    shell.interact()
    
    del alg 
    exit() 

elif config.interactive : 
    
    checkAlg ( alg ) 
    ## print trigger decisions 
    alg.trgDecs()
    
    __vars = globals().copy()

    logger.info ('Start interactive shell') 
    
    import IPython
    IPython.start_ipython ( argv = [] , user_ns = __vars )
    
    del alg 
    exit() 

# =============================================================================
# The END 
# =============================================================================

