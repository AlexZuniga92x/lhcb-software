#!/usr/bin/env python 
# =============================================================================
# $Id: dst-explorer 130533 2011-10-25 15:09:27Z ibelyaev $ 
# =============================================================================
## @file dst-explorer
#
#  Trivial Bender-based script to explore the content of (x,mu,s,r,fm,...)DSTs
#
#  This file is a part of 
#  <a href="http://cern.ch/lhcb-comp/Analysis/Bender/index.html">Bender project</a>
#  <b>``Python-based Interactive Environment for Smart and Friendly Physics Analysis''</b>
#
#  The package has been designed with the kind help from
#  Pere MATO and Andrey TSAREGORODTSEV. 
#  And it is based on the 
#  <a href="http://cern.ch/lhcb-comp/Analysis/LoKi/index.html">LoKi project:</a>
#  <b>``C++ ToolKit for Smart and Friendly Physics Analysis''</b>
#
#  By usage of this code one clearly states the disagreement 
#  with the smear campaign of Dr.O.Callot et al.: 
#  ``No Vanya's lines are allowed in LHCb/Gaudi software''
#
#  @date   2010-09-10
#  @author Vanya BELYAEV Ivan.Belyaev@nikhef.nl
#
#                    $Revision: 130533 $
#  Last modification $Date: 2011-10-25 17:09:27 +0200 (Tue, 25 Oct 2011) $
#                 by $Author: ibelyaev $
# =============================================================================
"""Trivial Bender-based script to explore the content of (x,mu,s,r,...)DSTs

oooooooooo.                              .o8                     
`888'   `Y8b                            \"888                     
 888     888  .ooooo.  ooo. .oo.    .oooo888   .ooooo.  oooo d8b 
 888oooo888' d88' `88b `888P\"Y88b  d88' `888  d88' `88b `888\"\"8P 
 888    `88b 888ooo888  888   888  888   888  888ooo888  888     
 888    .88P 888    .o  888   888  888   888  888    .o  888     
o888bood8P'  `Y8bod8P' o888o o888o `Y8bod88P\" `Y8bod8P' d888b    
                                                                 
This file is a part of BENDER project:

  ``Python-based Interactive Environment for Smart and Friendly Physics Analysis''

The project has been designed with the kind help from Pere MATO and Andrey TSAREGORODTSEV. 

And it is based on the LoKi project:
 
   ``C++ ToolKit for Smart and Friendly Physics Analysis''

By usage of this code one clearly states the disagreement with the smear campaign of Dr.O.Callot et al.:

   ``No Vanya's lines are allowed in LHCb/Gaudi software''

Usage:

    dst_explorer [options] file1 [ file2 [ file3 [ file4 ....'

    1) exploring (r,s,m,fm)DSTs:

       >>> ls('/Event')
       >>> ls('/Event/Charm')
       >>> ls('/Event/Charm/Phys')
       >>> ls('/Event/Charm/Phys/D2KKK')

    2) getting particles from TES and loop over them :
 
       >>> Ds = get('/Event/Charm/Phys/D2KKK')
       >>> for D in Ds : print D.decay()

    3) go to the next event:

       >>> run(1)
       >>> ls('/Event')

    4) loop over events in search for ``valid'' data

       >>> Ds, evt = seekForData('/Event/Charm/Phys/DstarForPromptCharm/Particles' )

    5) loop in search for event with certain Stripping Decision:

       >>> ok, evt = seekStripDecision('.*Lam.*' )
 

                  $Revision: 173905 $
Last modification $Date: 2014-06-16 14:56:49 +0200 (Mon, 16 Jun 2014) $
               by $Author: ibelyaev $

"""
# =============================================================================
__author__  = 'Vanya BELYAEV Ivan.Belyaev@itep.ru'
__date__    = "2010-09-10"
__version__ = '$Revision: 173905 $'
__all__     = ()  ## nothing to import 
__usage__   = 'dst_explorer [options] file1 [ file2 [ file3 [ file4 ....'
# =============================================================================
# logging 
# =============================================================================
import ROOT,sys 
# =============================================================================
ROOT.PyConfig.IgnoreCommandLineOptions = True
# =============================================================================
from AnalysisPython.Logger import getLogger 
if '__main__' == __name__ : logger = getLogger ( 'Bender/dst-explorer' )
else                      : logger = getLogger ( __name__ )
# =============================================================================
logger.info ( 100*'*')
logger.info ( ' Author  : %s ' % __author__   ) 
logger.info ( ' Version : %s ' % __version__  ) 
logger.info ( ' Date    : %s ' % __date__     )
logger.info ( 100*'*')
# =============================================================================
from BenderTools.DstExplorer import configure 
from BenderTools.Parser      import makeParser
# 

#
## configure command line parser
#
parser = makeParser  ( usage = __usage__   , vers  = __version__ )
parser.add_option (
    '-o'                     ,
    '--output'               ,
    type    = 'str'          ,
    dest    = 'OutputFile'   ,
    help    = 'The name of output file with selected events' ,
    default = ''            
)
#
## parse the command line arguments 
# 
options , arguments = parser.parse_args()
if options.Quiet :
    logger.info ( 'Bender-based script to explore the content of (x,mu,s,r,...)DSTs ')
else :
    logger.info ( __doc__ ) 
   
## Files must be specfied are mandatory!
if not arguments and not options.FileList and not options.ImportOptions : 
    parser.error ( 'No input files are specified' ) 

#	
## Perform the basic configuration
#
pyfiles = configure ( options , arguments ) 

#
## adjust configuration settings
# 
if options.Simulation : from Bender.MainMC   import *
else                  : from Bender.Main     import *

#
## more imports 
#     
from BenderTools.Seek       import * 
from BenderTools.GoodEvents import * 

#
## Start Gaudi application:  instantiate the application manager 
# 
gaudi  = appMgr ()

#
## useful services & shortcuts 
# 
evtSel = gaudi.evtSel()
evtSvc = gaudi.evtSvc()
detSvc = gaudi.detSvc()

evt    = evtSvc
det    = detSvc

#
## initialize and read the first event - should it be here ?
#
run ( 1 )

#
## execute the files, defined as arguments
#
if pyfiles :
    
    from   copy import deepcopy
    _myself = sys.modules[ __name__ ] 
    _mykeys = deepcopy ( dir( _myself ) ) 
    _copied = set() 
    _skept  = set() 
    
    for a in pyfiles : 
        
        p     = a.find( '.py' )
        if p <= 0          : continue 
        if len(a) != p + 3 : continue  
        if not os.path.exists ( a ) :
            logger.warning   ('No file is found  "%s"' % a )
            continue 
        logger.info  ('Try    to execute "%s"' % a )
        try :
            myvars =  {} 
            execfile ( a , myvars )
            for k,val in myvars.iteritems() : 
                ## do not redefine already defined symbols!  
                if k in _mykeys : 
                    ## do not redefine local symbols [ needed? ] 
                    _skept.add ( k )
                    continue
                ## copy symbol into the local namespace  
                setattr ( _myself , k , val ) 
                _copied.add ( k ) 
        except :
            logger.error ('Unable to execute "%s"'     % a    )
            logger.error ('Exception: %s' % sys.exc_info()[0] ) 
            import traceback 
            print  traceback.format_exc() 
                
    if _copied : logger.info ( 'Copied %d symbols' % len(_copied) )  
    if _skept  : logger.info ( 'Skept  %d symbols' % len(_skept ) )  
        
    ## do not pollute the namespace 
    del _copied
    del _skept
    del _mykeys 
    del _myself 


#
## finally start ipython
#   
import IPython
IPython.embed()
exit() 
# =============================================================================
# The END 
# =============================================================================


