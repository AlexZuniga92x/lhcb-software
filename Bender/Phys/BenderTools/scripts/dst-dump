#!/usr/bin/env python
# =============================================================================
## @file dst-dump
#
#  Trivial Bender-based script to dump the content of (x,mu,s,r,...)DSTs
#
#  This file is a part of 
#  <a href="http://cern.ch/lhcb-comp/Analysis/Bender/index.html">Bender project</a>
#  <b>``Python-based Interactive Environment for Smart and Friendly Physics Analysis''</b>
#
#  The package has been designed with the kind help from
#  Pere MATO and Andrey TSAREGORODTSEV. 
#  And it is based on the 
#  <a href="http://cern.ch/lhcb-comp/Analysis/LoKi/index.html">LoKi project:</a>
#  <b>``C++ ToolKit for Smart and Friendly Physics Analysis''</b>
#
#  By usage of this code one clearly states the disagreement 
#  with the smear campaign of Dr.O.Callot et al.: 
#  ``No Vanya's lines are allowed in LHCb/Gaudi software''
#
# Usage:
#
# @code
#
#    dst_dump [options] file1 [ file2 [ file3 [ file4 ....'
#
#  @endcode 
#
#  @date   2011-10-24
#  @author Vanya BELYAEV Ivan.Belyaev@itep.ru
#
#                    $Revision: 189829 $
#  Last modification $Date: 2015-06-08 10:41:05 +0200 (Mon, 08 Jun 2015) $
#                 by $Author: ibelyaev $
# =============================================================================
"""Trivial Bender-based script to dump the content of (x,mu,s,r,...)DSTs

This file is a part of BENDER project:

  ``Python-based Interactive Environment for Smart and Friendly Physics Analysis''

The project has been designed with the kind help from Pere MATO and Andrey TSAREGORODTSEV. 

And it is based on the LoKi project:
 
   ``C++ ToolKit for Smart and Friendly Physics Analysis''

By usage of this code one clearly states the disagreement with
   the smear campaign of Dr.O.Callot et al.:

   ``No Vanya's lines are allowed in LHCb/Gaudi software''

Usage:

    dst-dump [options] file1 [ file2 [ file3 [ file4 ....'


                  $Revision: 189829 $
Last modification $Date: 2015-06-08 10:41:05 +0200 (Mon, 08 Jun 2015) $
               by $Author: ibelyaev $

"""
# =============================================================================
__author__  = 'Vanya BELYAEV Ivan.Belyaev@itep.ru'
__date__    = "2011-10-24"
__version__ = '$Revision: 189829 $'
__all__     = ()  ## nothing to import 
# =============================================================================
import ROOT, sys
ROOT.PyConfig.IgnoreCommandLineOptions = True
# =============================================================================
from BenderTools.Parser      import makeParser
parent_parser = makeParser  ( add_help = False )
# make parser
import argparse 
parser = argparse.ArgumentParser (
    parents = [ parent_parser ] , 
    prog        = 'dst-dump',
    description = "Bender-based script to dump the content of (x,mu,s,r,...)DSTs",
    version     = 'dst-dump ' + __version__
    )
parser.add_argument (
    '-n'                          ,
    '--nevents'                   ,
    dest    = 'nEvents'           ,
    type    = int                 , 
    help    = "Number of events to process " ,
    default = -1    
    )
parser.add_argument (
    '-z'                         ,
    '--summary'                  ,
    dest    = 'SummaryFile'      ,
    help    = "Output file with dst-summary" ,
    type    = str               , 
    default = 'dst_summary.txt'    
    )
parser.add_argument (
    '-f'                         ,
    '--follow'                   ,
    dest    = 'FollowLinks'      ,
    help    = "Flag to follow links, useful for packed (u)DST (*)" ,
    action  = "store_true"       ,
    default = False    
    )
parser.add_argument (
    '-w'                         ,
    '--dod'                      ,
    dest    = 'DataOnDemand'     ,
    help    = "Dump the known DOD-locations (fragile!), (+)" ,
    action  = "store_true"       ,
    default = False    
    )
parser.add_argument ( 
    '--no-color'     ,
    dest    = 'Color'      , 
    action  = 'store_false' , 
    help    = "Do not use colorization", 
    default = True          )

# =============================================================================

## eliminate artifacts and parse command-line arguments 
config = parser.parse_args( [ a for a in sys.argv[1:] if '--' != a ] )
if config.Color :
    from Bender.Logger import make_colors
    make_colors()
from BenderTools.DstDump import dumpDst
dumpDst ( config )



# =============================================================================
# The END 
# =============================================================================
