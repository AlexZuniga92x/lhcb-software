#!/usr/bin/env python
# -*- coding: utf-8 -*-
# =============================================================================
# $Id:$ 
# =============================================================================
## @file 	
#  Simple  script to extract meta-info from the data file
#
#  @author Vanya BELYAEV Ivan/Belyaev@itep.ru
#  @date   2013-06-11
#
#                    $Revision:$
#  Last modification $Date:$
#                 by $Author:$
#
# =============================================================================
"""
Simple script to extract DB-tags from the file

"""
# =============================================================================
__author__  = "Vanya BELYAEV, Ivan.Belyaev@itep.ru"
__date__    = "2013-06-11"
__version__ = "$Revision:$"
# =============================================================================
import ROOT
ROOT.PyConfig.IgnoreCommandLineOptions = True
# =============================================================================
from Bender.Logger import getLogger
if '__main__' == __name__ : logger = getLogger ( 'Bender/_dump_meta_info_' )
else                      : logger = getLogger ( __name__                  )
# =============================================================================
## helper function to get meta-info 
#  @author Vanya Belyaev Ivan.Belyaev@itep.ru
#  @date  2013-06-11
def _get_meta_info_ ( files , importOpts = [] , catalogs = [] ) : 
    """
    Helper function to get meta-info 
    """
    info = {}
    
    ## import options if specified 
    if importOpts :
        from Gaudi.Configuration import importOptions
        for i in importOpts : importOptions ( i )  
        
    ## load files files 
    from GaudiConf.IOHelper import IOHelper
    evtsel = IOHelper().inputFiles ( files , clear = False )
    
    ## add catalogs, if specified 
    if catalogs : 
        from Configurables import FileCatalog
        fcatalog           = FileCatalog() 
        fcatalog.Catalogs += catalogs

    ## check inputs :
    from Configurables import EventSelector
    evtSel = EventSelector()
    if not evtSel.Input :
        logger.erorr('No entries in EventSelector.Input')
        return {}

    if    files : evtSel.Input = evtSel.Input[-1:] ## + evtSel.Input[1:]
    else        : evtSel.Input = evtSel.Input[:1 ] ## + evtSel.Input[1:]


    from Configurables import LHCbApp
    app = LHCbApp()

    #
    ## some action to get ODIN
    #
    from Configurables import OdinTimeDecoder, ODINDecodeTool
    otd = OdinTimeDecoder()
    otd.addTool( ODINDecodeTool, 'ODINDecodeTool' )
    otd.ODINDecodeTool.RawEventLocations+= [ '/Event/Trigger/RawEvent' ]
    
    from Configurables import createODIN
    from Configurables import DataOnDemandSvc, ApplicationMgr 
    dod = DataOnDemandSvc( Dump = True )
    dod.AlgMap.update ( { '/Event/DAQ/ODIN' : createODIN() } ) 
    
    mgr = ApplicationMgr()
    mgr.ExtSvc += [ dod ]
    
    from Configurables import ApplicationMgr, createODIN
    from DAQSys.Decoders import DecoderDB
    CreateODIN=DecoderDB["createODIN"].setup()
    
    from Configurables import EventClockSvc
    EventClockSvc().EventTimeDecoder = 'OdinTimeDecoder'

    mgr = ApplicationMgr()
    ##mgr.TopAlg = [ createODIN() ] + mgr.TopAlg 
    mgr.TopAlg = [ CreateODIN ] + mgr.TopAlg 

    
    from Configurables import IODataManager 
    IODataManager  ( 'IODataManager' , OutputLevel = 6 ,
                     AgeLimit = 1    , UseGFAL = False )
    

    from GaudiPython.Bindings import AppMgr
    import Bender.Fixes_Gaudi
    
    gaudi = AppMgr( outputlevel = 6 )

    #
    ## needed to solve very strange problem...
    ## 
    from LoKiCore.basic import cpp, LHCb
    LHCb.ProcessHeader
    LHCb.MCHeader
    LHCb.GenHeader
    
    gaudi.run(1)
    evtsvc = gaudi.evtSvc()

    for header in ( '/Event/Gen/Header'     ,
                    '/Event/MC/Header'      ,
                    '/Event/MC/DigiHeader'  ,
                    '/Event/Rec/Header'     ) : 
        
        try    :
            hdr = evtsvc [ header ]
        except :
            continue 
        
        if not hdr : continue
        
        if hasattr ( hdr , 'applicationName' ) and hasattr ( hdr , 'applicationVersion' ) : 
            info[ hdr.applicationName() ] = hdr.applicationVersion ()
            
        if hasattr ( hdr , 'runNumber' ) :                 
            info[ 'Run'                 ] = hdr.runNumber          ()
                
        if hasattr ( hdr , 'evtNumber' ) :                 
            info[ 'Event'               ] = hdr.evtNumber          ()
                
        if hasattr ( hdr , 'gpsTime'   ) :                                 
            info[ 'Time'                ] = hdr.gpsTime            () 
                
        if hasattr ( hdr , 'rawID'     ) :                                 
            info[ 'UUID'                ] = hdr.rawID              ()
            
        if hasattr ( hdr , 'evType'    ) :
            info [ 'EvtType' ] = hdr.evType() 
            
        if hasattr ( hdr , 'condDBTags' ) : 
            tgs = hdr.condDBTags()
            for t in tgs :
                tag = t.first
                val = t.second 
                if not info.has_key( tag ) : info [ tag ] = set()
                info[tag] . add ( val )


    ## collect information from ODIN
    try :
        
        odin = evtsvc[ '/Event/DAQ/ODIN' ]
        if odin :
            info[ 'Time'                ] = odin.gpsTime                () 
            info[ 'TCK'                 ] = odin.triggerConfigurationKey()
            info[ 'Run'                 ] = odin.runNumber              () 
            
    except:
        pass 

    ## go to RunDB and get information for run&fill
    try :

        info_run  = {} 
        info_fill = {} 
        if info.has_key ( 'Run' ) :
            run_number = info['Run']
            
            from Ostap.RunDB import run_info, fill_info
            rinfo  = run_info ( run_number )
            info_run.update( rinfo ) 
            fillid = rinfo.get( 'fillid' , None )
            if fillid :
                finfo = fill_info ( fillid )
                info_fill.update ( finfo )
                
        if info_run  : info ['|RUN' ] = info_run
        if info_fill : info ['|FILL'] = info_fill
            
    except :
        pass

    gaudi.stop     ()
    gaudi.finalize ()    
    del gaudi
    
    return info 
    

# =============================================================================
## helper function to get meta-info
#  @author Vanya Belyaev Ivan.Belyaev@itep.ru
#  @date  2013-02-18
def get_meta_info ( files = [] ) :
    """
    Helper function to get meta-info
    """
    import argparse 
    parser = argparse.ArgumentParser()
    
    parser.add_argument (
        '-v'                          ,
        '--verbose'                   ,
        action  = "store_true"        ,
        dest    = 'Verbose'           ,
        help    = "``Vebose'' processing [defaut : %(default)s ]"  ,
        default = False   
        )
    
    parser.add_argument (
        '-x'                    ,
        '--xml'                 ,
        dest    = 'XmlCatalogs' ,
        help    = "``XmlCatalogs'' to be transferred to setData-function [default: %(default)s]" ,
        nargs   = '*'           , 
        default = []                
        )
    
    parser.add_argument (
        "files" ,
        metavar = "FILE"          ,
        nargs   = '*'             ,
        default = []              , 
        help    = "Input files to be processed [default: %(default)s]" )
    
    parser.add_argument (
        '-i'                       ,
        '--import'                 ,
        dest    = 'ImportOptions'  ,
        metavar = 'IMPORT'         ,
        nargs   = '*'              ,
        default = []               , 
        help    = """List of files to be used for 'importOptions',
        e.g. input data [default:%(default)s].
        The files are imported at the end of configuration step"""
        )
    
    import sys 
    config = parser.parse_args( [ a for a in sys.argv[1:] if '--' != a ] ) 
    
    if files : config.files += files
    
    ## no input data 
    if not config.files and not config.ImportOptions :  return {}
    
    info   = {}
    
    silent = not config.Verbose
    
    try:
    
        from Ostap.Utils import mute
        with mute ( silent , silent ) :
            info = _get_meta_info_ ( config.files         ,
                                     config.ImportOptions ,
                                     config.XmlCatalogs   )  
            
    except :
        if not silent :
            logger.error('Exception caught:' , exc_info = True )  
        info = {}
    
    return info

# =============================================================================
if __name__ == '__main__' :

    print 'MetaInfo: %s ' % get_meta_info () 
        
# =============================================================================
# The END 
# =============================================================================
