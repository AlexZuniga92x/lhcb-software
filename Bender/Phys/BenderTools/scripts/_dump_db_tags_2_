#!/usr/bin/env python
# -*- coding: utf-8 -*-
# =============================================================================
# $Id:$ 
# =============================================================================
## @file 	
#  Simple  script to extract DB-tags from the file 
#
#  @author Thomas RUF 
#  @date   2012-10-24
#
#                    $Revision:$
#  Last modification $Date:$
#                 by $Author:$
#
# =============================================================================
"""
Simple script to extract DB-tags from the file

"""
__author__  = "Thomas RUF, Vanya BELYAEV"
__date__    = "2012-10-24"
__version__ = "Revision"
# =============================================================================
## some "fix"
# @todo check if it really needed 
import ROOT
ROOT.PyConfig.IgnoreCommandLineOptions = True
# =============================================================================
from Bender.Logger import getLogger
if '__main__' == __name__ : logger = getLogger ( 'Bender/_dump_db_tags_2_' )
else                      : logger = getLogger ( __name__                  )
# =============================================================================
## helper function to get DB-tags
#  @author Thomas RUF
#  @author Vanya Belyaev Ivan.Belyaev@itep.ru
#  @date  2013-02-18
def _get_db_tags_ ( files , importOpts = [] , catalogs = [] ) :
    """
    Helper function to get DB-tags 
    """
    tags = {}
    
    ## import options if specified 
    if importOpts :
        from Gaudi.Configuration import importOptions
        for i in importOpts : importOptions ( i )  
        
    ## load files files 
    from GaudiConf.IOHelper import IOHelper
    evtsel = IOHelper().inputFiles ( files , clear = False )
    
    ## add catalogs, if specified 
    if catalogs : 
        from Configurables import FileCatalog
        fcatalog           = FileCatalog() 
        fcatalog.Catalogs += catalogs

    ## check inputs :
    from Configurables import EventSelector
    evtSel = EventSelector()
    if not evtSel.Input :
        logger.erorr('No entries in EventSelector.Input')
        return {}

    if    files : evtSel.Input = evtSel.Input[-1:] ## + evtSel.Input[1:]
    else        : evtSel.Input = evtSel.Input[:1 ] ## + evtSel.Input[1:]
    
    from Configurables import LHCbApp
    app = LHCbApp( OutputLevel = 3)

    #
    ## some action to get ODIN
    #
    from Configurables import OdinTimeDecoder, ODINDecodeTool
    otd = OdinTimeDecoder()
    otd.addTool( ODINDecodeTool, 'ODINDecodeTool' )
    otd.ODINDecodeTool.RawEventLocations+= [ '/Event/Trigger/RawEvent' ]
    
    from Configurables import createODIN
    from Configurables import DataOnDemandSvc, ApplicationMgr
    dod = DataOnDemandSvc( Dump = True )
    dod.AlgMap.update ( { '/Event/DAQ/ODIN' : createODIN() } )
    
    mgr = ApplicationMgr()
    mgr.ExtSvc += [ dod ]
    
    from Configurables import ApplicationMgr, createODIN
    from DAQSys.Decoders import DecoderDB
    CreateODIN=DecoderDB["createODIN"].setup()
    
    from Configurables import EventClockSvc
    EventClockSvc().EventTimeDecoder = 'OdinTimeDecoder'
    
    mgr = ApplicationMgr()
    ##mgr.TopAlg = [ createODIN() ] + mgr.TopAlg
    mgr.TopAlg = [ CreateODIN ] + mgr.TopAlg
        
    
    from GaudiPython.Bindings import AppMgr
    
    from Configurables import IODataManager
    IODataManager  ( 'IODataManager' , OutputLevel = 6 ,
                     AgeLimit = 1    , UseGFAL = False )
    
    
    import Bender.Fixes_Gaudi
    
    gaudi = AppMgr( outputlevel = 6 )
    
    gaudi.run(1)
    evtsvc = gaudi.evtSvc()
    
    for header in ( '/Event/Rec/Header' ,
                    '/Event/MC/Header'  ,
                    '/Event/Gen/Header' ) : 
        
        hdr = evtsvc [ header ]
        if not hdr : continue 
        tgs = hdr.condDBTags()
        for t in tgs :
            tag = t.first
            val = t.second 
            if not tags.has_key( tag ) : tags [ tag ] = set()
            tags[tag] . add ( val )
            
    for t in tags :
        ts = tags[t]
        if 1 != len ( ts ) : tags[t] = list ( ts ) 
        else               : tags[t] = list ( ts ) [0]

    
    gaudi.stop     ()
    gaudi.finalize ()    
    del gaudi
    
    return tags
    

# =============================================================================
## helper function to get DB-tags
#  @author Thomas RUF
#  @author Vanya Belyaev Ivan.Belyaev@itep.ru
#  @date  2013-02-18
def get_db_tags ( files = [] ) :
    """
    Helper function to get DB-tags 
    """
    import argparse 
    parser = argparse.ArgumentParser()
    
    parser.add_argument (
        '-v'                          ,
        '--verbose'                   ,
        action  = "store_true"        ,
        dest    = 'Verbose'           ,
        help    = "``Vebose'' processing [defaut : %(default)s ]"  ,
        default = False   
        )
    
    parser.add_argument (
        '-x'                    ,
        '--xml'                 ,
        dest    = 'XmlCatalogs' ,
        help    = "``XmlCatalogs'' to be transferred to setData-function [default: %(default)s]" ,
        nargs   = '*'           , 
        default = []                
        )
    
    parser.add_argument (
        "files" ,
        metavar = "FILE"          ,
        nargs   = '*'             ,
        default = []              , 
        help    = "Input files to be processed [default: %(default)s]" )
    
    parser.add_argument (
        '-i'                       ,
        '--import'                 ,
        dest    = 'ImportOptions'  ,
        metavar = 'IMPORT'         ,
        nargs   = '*'              ,
        default = []               , 
        help    = """List of files to be used for 'importOptions',
        e.g. input data [default:%(default)s].
        The files are imported at the end of configuration step"""
        )
    
    import sys 
    config = parser.parse_args( [ a for a in sys.argv[1:] if '--' != a ] ) 
    
    if files : config.files += files
    
    ## no input data 
    if not config.files and not config.ImportOptions :  return {}
        
    tags = {}
    
    silent = not config.Verbose
    
    try:
        
        from Ostap.Utils import mute 
        with mute ( silent , silent ) :
            tags = _get_db_tags_ ( config.files         ,
                                   config.ImportOptions ,
                                   config.XmlCatalogs   )        
    except:
        if not silent :
            logger.error('Exception caught:' , exc_info = True )  
        tags = {}
            
    return tags


# =============================================================================
if __name__ == '__main__' :

    print 'DBTags: %s ' % get_db_tags ( ) 
        
# =============================================================================
# The END 
# =============================================================================
