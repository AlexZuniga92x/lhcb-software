#!/usr/bin/env python 
# -*- coding: utf-8 -*-
# =============================================================================
# $Id$ 
# =============================================================================
# $URL$ 
# =============================================================================
## @file bender
#
#  Trivial Bender-based script to start interactive Bender-session
#  Actually it is steroid-enhanced  GaudiPython session 
#
#  This file is a part of 
#  <a href="http://cern.ch/lhcb-comp/Analysis/Bender/index.html">Bender project</a>
#  <b>``Python-based Interactive Environment for Smart and Friendly Physics Analysis''</b>
#
#  The package has been designed with the kind help from
#  Pere MATO and Andrey TSAREGORODTSEV. 
#  And it is based on the 
#  <a href="http://cern.ch/lhcb-comp/Analysis/LoKi/index.html">LoKi project:</a>
#  <b>``C++ ToolKit for Smart and Friendly Physics Analysis''</b>
#
#  By usage of this code one clearly states the disagreement 
#  with the smear campaign of Dr.O.Callot et al.: 
#  ``No Vanya's lines are allowed in LHCb/Gaudi software''
#
#  @date   2010-09-10
#  @author Vanya BELYAEV Ivan.Belyaev@itep.ru
#
#  Version           $Revision$
#  Last modification $Date$
#                 by $Author$
# =============================================================================
"""

oooooooooo.                              .o8                     
`888'   `Y8b                            \"888                     
 888     888  .ooooo.  ooo. .oo.    .oooo888   .ooooo.  oooo d8b 
 888oooo888' d88' `88b `888P\"Y88b  d88' `888  d88' `88b `888\"\"8P 
 888    `88b 888ooo888  888   888  888   888  888ooo888  888     
 888    .88P 888    .o  888   888  888   888  888    .o  888     
o888bood8P'  `Y8bod8P' o888o o888o `Y8bod88P\" `Y8bod8P' d888b    
                                                                 
This file is a part of BENDER project:

  ``Python-based Interactive Environment for Smart and Friendly Physics Analysis''

The project has been designed with the kind help from Pere MATO and Andrey TSAREGORODTSEV. 

And it is based on the LoKi project:
 
   ``C++ ToolKit for Smart and Friendly Physics Analysis''

By usage of this code one clearly states the disagreement with 
the smear campaign of Dr.O.Callot et al.:

   ``No Vanya's lines are allowed in LHCb/Gaudi software''

                  $Revision$
Last modification $Date$
               by $Author$

Examples of action at the prompt: 

    1) exploring (r,s,m,fm)DSTs:

       >>> ls('/Event')
       >>> ls('/Event/Charm')
       >>> ls('/Event/Charm/Phys')
       >>> ls('/Event/Charm/Phys/D2KKK')

    2) getting particles from TES and loop over them :
 
       >>> Ds = get('/Event/Charm/Phys/D2KKK')
       >>> for D in Ds : print D.decay()

       >>> firstD = Ds[0]
       >>> for track in firstD.tracks() : print track 

       >>> firstD = Ds[0]
       >>> for track in firstD.tracks( 'K+' == ABSID ) : print track 

    3) getting only specific (MC)particles

       >>> charmed = get ('/Event/MC/Particles' , CHARM )
       >>> for c in charged : print c.decay() 

    4) go to the next event:

       >>> run(1)
       >>> ls('/Event')

    5) loop over events in search for ``valid'' data

       >>> Ds, evt = seekForData('/Event/Charm/Phys/DstarForPromptCharm/Particles' )

    6) loop in search for event with certain Stripping Decision:

       >>> ok, evt = seekStripDecision('.*Lam.*' )
 

P.S. Actually it is steroid-enhanced  GaudiPython session 

"""
# =============================================================================
__author__  = 'Vanya BELYAEV Ivan.Belyaev@itep.ru'
__date__    = "2010-09-10"
__version__ = '$Revision$'
__all__     = ()  ## nothing to import 
# =============================================================================
import ROOT,sys  
ROOT.PyConfig.IgnoreCommandLineOptions = True
# =============================================================================
def with_ipython() :
    try :
        __IPYTHON__
        return True
    except NameError :
        return False 
# =============================================================================
if with_ipython () : raise RuntimeError("Can't start Bender from ipython!")
# =============================================================================
# Input arguments: create ans customize parser; parse arguments 
# =============================================================================
from BenderTools.Parser import makeParser
parser = makeParser  ( 
    prog        = 'bender'    , 
    version     = __version__ , 
    description = """
    Powerfull interactive environment for Smart and Friendly Physics Analysis
    """,
    epilog      = """
    P.S. Actually it is ``steroid-enhanced''  GaudiPython session 
    """   
)
## update the parser
parser.add_argument (
    '-o'                     ,
    '--output'               ,
    type    = str            ,
    dest    = 'OutputFile'   ,
    help    = "The name of output file with selected ``good''events [default: %(default)s]"
    )
parser.add_argument (
    '-w'                       ,
    '--withcontext'            ,
    action  = "store_true"     ,
    dest    = 'WithContext'    ,
    help    = """Use locals/globals context for python scripts [default: %(default)s].
    Execute python-script in the same context of bender-script""",
    default = False 
    )
parser.add_argument (
    '-u'                   ,
    '--userstart'          ,
    dest    = 'UserStart'  ,
    action  = "store_true" ,
    help    = """Postpone the actual start of of Application Manager [default: %(default)s].
    It can be useful for usage with user-scripts."""
    )
    ##
group_ht = parser.add_argument_group(
    'Histos&Tuples' ,
    'Configuration of histograms and tuples (if needed)')
group_ht.add_argument (
    '-t'                      ,
    '--tuplefile'             ,
    dest    = 'TupleFile'     ,
    type    =  str            , 
    help    = "``TupleFile'' attribute for DaVinci [default: %(default)s].",
    default = ''               
    )
group_ht.add_argument (
    '--histofile'             ,
    dest    = 'HistoFile'     ,
    type    =  str            , 
    help    = "``HistogramFile'' attribute for DaVinci [default: %(default)s].",
    default = ''               
    )
    ## 
group = parser.add_mutually_exclusive_group()
group.add_argument (
    '-e'                   ,
    '--embed'              , 
    action = 'store_true'  ,
    help   = "Start embedded python shell [default: %(default)s]" )
group.add_argument (
    '-y'                   ,
    '--plain'              ,
    action = 'store_true'  ,
    help   = "Start plain    python shell [default: %(default)s]" )
group.add_argument (
    '-b'                   ,
    '--batch'              ,
    action  = 'store_true' ,
    default = False        , 
    help    = "Batch processing: execute input files and exit [default: %(default)s]" )
    ##
parser.add_argument ( 
    '--no-color'     ,
    dest    = 'Color'      , 
    action  = 'store_false' , 
    help    = "Do not use colorization", 
    default = True          )
parser.add_argument ( 
    '-c'        ,
    '--command' ,
    dest    = 'Command'   ,
    type    = str         , 
    help    = "The command for ``exec'' [default: %(default)s]" , 
    default = ''          )
## eliminate artifacts and parse command-line arguments 
arguments = parser.parse_args( [ a for a in sys.argv[1:] if '--' != a ] )  

# =============================================================================
# logging 
# =============================================================================
from Bender.Logger import getLogger
if arguments.Color and not arguments.batch : 
    from Bender.Logger import make_colors
    make_colors ()
    del make_colors 
# =============================================================================    
if '__main__' == __name__ : logger = getLogger ( 'bender' )
else                      : logger = getLogger ( __name__ )
del getLogger 
# =============================================================================

from Bender.Logger import setLogging
if arguments.Quiet :
       
    logger.info ( '(silent) Interactive Bender session (steroid-enhanced GaudiPython)')
    config.OutputLevel = max ( 4 , config.OutputLevel )
    setLogging ( arguments.OutputLevel ) 
   
else :
        
    logger.info ( 100*'*')
    logger.info ( __doc__ ) 
    logger.info ( 100*'*')
    logger.info ( ' Author  : %s ' % __author__   ) 
    logger.info ( ' Version : %s ' % __version__  ) 
    logger.info ( ' Date    : %s ' % __date__     )
    logger.info ( 100*'*')

    setLogging ( arguments.OutputLevel ) 
    

from BenderTools.DstExplorer import configure
# =============================================================================

#	
## Perform the basic configuration
#
pyfiles = configure (
    arguments ,
    colors = arguments.Color and not arguments.batch
    )
del configure

#
## adjust configuration settings
# 
if arguments.Simulation : from Bender.MainMC   import *
else                    : from Bender.Main     import *
    
#
## more imports 
#     
from BenderTools.Seek       import * 

## likely we'll play with tuples  
if arguments.TupleFile :
    from GaudiPython.TupleUtils import nTuple

## likely we'll play with histograms 
if arguments.HistoFile :
    from GaudiPython.HistoUtils import book, bookProf, fill, dumpHisto  

##output file is specified, immport corresponding functions
if arguments.OutputFile :
    from BenderTools.GoodEvents import writeEvent

try :
    from Ostap.Utils import mute_py 
    with mute_py() :
        import pydot
    del mute_py
except :
    pass

##  drawing graphs 
import  LoKiPhys.graph
if arguments.Simulation :
    import  LoKiMC.graph
    import  LoKiGen.graph
    
if not arguments.UserStart : 

    #
    ## Start Gaudi application:  instantiate the application manager 
    # 
    gaudi  = appMgr ()
    
    #
    ## useful services & shortcuts 
    # 
    evtSel  = gaudi.evtSel  ()
    evtSvc  = gaudi.evtSvc  ()
    detSvc  = gaudi.detSvc  ()
    toolSvc = gaudi.toolSvc ()
    
    evt     = evtSvc
    det     = detSvc
    
    run ( 1 )

else :

    logger.info ("Start of AppMgr is postponed") 
    
#
## execute the files, defined as arguments
#

for _f in pyfiles : 

    import os
    _ff = _f 
    _ff = os.path.expandvars ( _ff )
    _ff = os.path.expandvars ( _ff )
    _ff = os.path.expandvars ( _ff )
    _ff = os.path.expanduser ( _ff )
    if not os.path.exists    ( _ff ) :
        logger.warning   ('No file is found  "%s"' % _f )
        continue 

    try :
        
        logger.info ('Executing "%s"'     % _f    )
        
        if arguments.WithContext : execfile ( _ff , globals() ) ## with context 
        else                     : execfile ( _ff )             ## plain 
        
    except :
        #
        # - Batch mode: just re-raise exception
        if arguments.batch :  raise

        # - Interactive mode: print traceback and continue 
        logger.error ('Failure to execute "%s"'     % _f   , exc_info = True )


# =============================================================================
## Proper at-exit function for GaudiPython.TupleUtils module
def __release_tuples__ () : 
    "Proper at-exit function for GaudiPython.TupleUtils module"
    try:
        
        import GaudiPython.TupleUtils as _TU
        logger.debug ('Release active n-tuples') 

        from LoKiCore.basic import cpp
        globs = globals().copy()
        for i in globs :
            if isinstance ( globs[i] , cpp.Tuples.Tuple ) :
                del globals()[i]
        del globs
        
        _TU.releaseTuples()
            
    except :
        logger.error ( 'Release n-tuples', exc_info = True ) 
        pass 

import atexit
atexit.register ( __release_tuples__ )

## command to be executed:
if arguments.Command :
    logger.debug   ("Try to exec command:\n%s" % arguments.Command )
    exec ( arguments.Command ) 
    logger.verbose ("After exec...") 

    
## exit if batch 
if  arguments.batch :
    ## nothing to do 
    logger.debug  ('Bye bye... ') 
    exit () 
   
elif arguments.embed :

    logger.info ('Start embedded interactive shell') 
    import IPython
    IPython.embed ()
    exit() 

elif arguments.plain :
        
    __vars = globals().copy()
    ##__vars.update( locals() )
    
    import readline
    import code
    
    logger.info ('Start plain interactive shell') 
    
    shell = code.InteractiveConsole(__vars)
    shell.interact()

    exit() 

else :
    
    __vars = globals().copy()
    ##__vars.update( locals() )

    logger.info ('Start interactive shell') 
    
    import IPython
    IPython.start_ipython ( argv = [] , user_ns = __vars )

    exit() 


exit () 


# =============================================================================
# The END 
# =============================================================================


