#ifndef LBLPAIR_LPAIRPRODUCTION_H 
#define LBLPAIR_LPAIRPRODUCTION_H 1

using namespace std;

// Beamtool declaration.
class IBeamTool;

/**
 * Production tool to generate events with LPAIR. LPAIR is a dedicated
 * Monte Carlo generator for the production of lepton pairs,
 * originally written for use by the HERA collaboration. Currently,
 * limited code and documentation has been made available for LPAIR,
 * and so consequently the code used here has been obtained privately
 * from Andrey Shamov. The official LPAIR reference manual INSPIRE
 * record is http://inspirehep.net/record/326934/ but is not currently 
 * available online. Because the events produced by LPAIR are CEP, no
 * additional part of the event (shower, MPI, etc.)  * needs to be
 * generated by a shower tool.
 *
 * The following keywords can be used in the form "<key word> <value>"
 * as commands passed to the tool by the user. For further details
 * consult the LPAIR manual and documentation.

 * ibeg: set the begin point (same as iend).
 * iend: set the end point.
 *	 1,2: calculate cross section only.
 *       3: calculate cross section and generate event.
 * ntrt: VEGAS strategy number.
 * prvg: VEGAS print mode.
 * ncvg: number of tries at each iteration.
 * itvg: number of iteration for cross section calculation.
 * ncsg: number of calls per bin in SETGEN.
 * inpp: beam 1 momentum in GeV.
 * pmod: beam 1 mode.
 *       1: electron.
 *       2: proton according to QED
 *       > 3: proton with some structure functions.
 * gpdf: PDFLIB group for the proton.
 * spdf: PDFLIB set for the proton.
 * inpe: beam 2 momentum in GeV.
 * emod: beam 2 mode.
 * pair: lepton pair
 *       11: e+ e-
 *       13: mu+ mu-
 *       15: tau+ tau-
 * qpdf: quark number for given proton mode (> 3).
 * mcut: cut mode.
 *       0: no cuts.
 *       2: cuts defined with ecut, thmn, thmx, and ptct.
 * thmn: min cut on produced particle theta (degrees).
 * thmx: max cut on produced particle theta (degrees).
 * ecut: cut on produced particle energy.
 * ptct: cut on produced particle pT.
 * qtmn: minimum Q^2 for proton PDF.
 * qtmx: maximum Q^2 for proton PDF.
 * mxmn: mimimum mass limit for final hadronic system.
 * mxmx: maximum mass limit for final hadronic system.
 *
 * The following options are taken from the modified ZLPAIR source.
 *
 * phts: option for photon emission.
 *       1: radiate off muon lines.
 *       2: radiate off proton lines.
 *       3: radiate off both muon and proton lines.
 * frmf: form factor option.
 *       0: standard, Ge=Gm/mu=1/(1+q^2/0.71)^2.
 *       1: Phys. Rev. C76 (2007) 035205 (considered optimal).
 *       2: Phys. Rev. C65 (2002) 051001 (unreasonable at low Q^2).
 *       3: Nucl. Phys. A596 (1996) 367.
 *       4: Phys. Rev. C76 (2007) 035201 (best for low Q^2).
 *       41, 51, 61, 71: spread gives uncertainty for (1).
 *       14, 24, 34: spread gives uncertainty for (4).
 *       60 - 80: dipole, Ge=Gm/mu=1/(1+q^2/(X/100.))^2 where X is frmf.
 *       -99: dipole, Ge=Gm/mu=1/(1+q^2/0.71)^2.
 *       -98: dipole of (99), Ge=1, Gm=0.
 *       -97: dipole of (99), Ge=0, Gm=1.
 *       -96: dipole of (99), Ge=1, Gm=1.
 * vacp: vacuum polarization option.
 *       0: no correction.
 *       not 0: simplest correction provided by Berend's GG_MMGGEN.
 *
 * @class  LPairProduction
 * @file   LPairProduction.h 
 * @author Philip Ilten
 * @date   2015-08-10
 */
class LPairProduction : public GaudiTool, virtual public IProductionTool {
 public:
  typedef vector<string> CommandVector;
  
  /// Default constructor.
  LPairProduction(const string &type, const string &name,
		      const IInterface *parent);
  
  /// Default destructor.
  virtual ~LPairProduction();
  
  /**
   * Initialize the tool.
   *
   * First initialize the Gaudi tool and beam tool, then read the
   * default and user settings, and finally set the beam momenta.
   */
  virtual StatusCode initialize();
  
  /// Finalize the tool.
  virtual StatusCode finalize(); 
  
  /// Initialize the LPair generator.
  virtual StatusCode initializeGenerator();
  
  /// Generate an event.
  virtual StatusCode generateEvent(HepMC::GenEvent *theEvent, 
				   LHCb::GenCollision *theCollision);

  /// Convert the LPair HepEvt record to HepMC format.
  virtual StatusCode toHepMC (HepMC::GenEvent *theEvent);

  /// This method is not implemented.
  virtual void updateParticleProperties(const LHCb::ParticleProperty *thePP);

  /// This method is not implemented.
  virtual void setStable(const LHCb::ParticleProperty *thePP);

  /// This method is not implemented.
  virtual void savePartonEvent(HepMC::GenEvent *theEvent);

  /// This method is not implemented.
  virtual void retrievePartonEvent( HepMC::GenEvent *theEvent);
  
  /// This method is not implemented.
  virtual StatusCode hadronize(HepMC::GenEvent *theEvent, 
			       LHCb::GenCollision *theCollision);
  
  /// This method is not implemented.
  virtual void printRunningConditions();

  /// This method is not implemented.
  virtual bool isSpecialParticle(const LHCb::ParticleProperty *thePP) const;

  /// This method is not implemented.
  virtual StatusCode setupForcedFragmentation(const int thePdgId);

  /// This method is not implemented.
  virtual void turnOnFragmentation();

  /// This method is not implemented.
  virtual void turnOffFragmentation();

protected:

  /// Parse the LPair settings.
  StatusCode parseSettings(const CommandVector &settings);

private:

  CommandVector m_defaultSettings; ///< LPair default settings.
  CommandVector m_userSettings;    ///< LPair user settings.
  string        m_beamToolName;    ///< Name of beam tool.
  IBeamTool    *m_beamTool;        ///< The Gaudi beam tool.
  int           m_tries;           ///< Number of LPair tries.
  int           m_photos;          ///< Photos radiation flag.
};

#endif // LBLPAIR_LPAIRPRODUCTION_H
